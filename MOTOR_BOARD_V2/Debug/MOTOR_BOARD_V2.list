
MOTOR_BOARD_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe8c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0800ff48  0800ff48  0001ff48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106d4  080106d4  0003027c  2**0
                  CONTENTS
  4 .ARM          00000000  080106d4  080106d4  0003027c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080106d4  080106d4  0003027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106d4  080106d4  000206d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106d8  080106d8  000206d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  080106dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e0c  2000027c  08010958  0003027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001088  08010958  00031088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000244d8  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000501e  00000000  00000000  0005477c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  000597a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  0005b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002230b  00000000  00000000  0005c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c16  00000000  00000000  0007ea53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9eb1  00000000  00000000  000a1669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b51a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bf4  00000000  00000000  0015b56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000027c 	.word	0x2000027c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ff30 	.word	0x0800ff30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000280 	.word	0x20000280
 8000100:	0800ff30 	.word	0x0800ff30

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fe7d 	bl	8002138 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fdcd 	bl	8001fe8 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe6f 	bl	8002138 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe65 	bl	8002138 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fdf5 	bl	800206c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fdeb 	bl	800206c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fb8b 	bl	8000bc8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb17 	bl	8000af0 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb7d 	bl	8000bc8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb73 	bl	8000bc8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb23 	bl	8000b3c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb19 	bl	8000b3c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_f2uiz>:
 8000518:	219e      	movs	r1, #158	; 0x9e
 800051a:	b510      	push	{r4, lr}
 800051c:	05c9      	lsls	r1, r1, #23
 800051e:	1c04      	adds	r4, r0, #0
 8000520:	f7ff fff0 	bl	8000504 <__aeabi_fcmpge>
 8000524:	2800      	cmp	r0, #0
 8000526:	d103      	bne.n	8000530 <__aeabi_f2uiz+0x18>
 8000528:	1c20      	adds	r0, r4, #0
 800052a:	f000 fe7b 	bl	8001224 <__aeabi_f2iz>
 800052e:	bd10      	pop	{r4, pc}
 8000530:	219e      	movs	r1, #158	; 0x9e
 8000532:	1c20      	adds	r0, r4, #0
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	f000 fcb1 	bl	8000e9c <__aeabi_fsub>
 800053a:	f000 fe73 	bl	8001224 <__aeabi_f2iz>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	061b      	lsls	r3, r3, #24
 8000542:	469c      	mov	ip, r3
 8000544:	4460      	add	r0, ip
 8000546:	e7f2      	b.n	800052e <__aeabi_f2uiz+0x16>

08000548 <__aeabi_d2uiz>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2200      	movs	r2, #0
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__aeabi_d2uiz+0x38>)
 800054e:	0004      	movs	r4, r0
 8000550:	000d      	movs	r5, r1
 8000552:	f7ff ff9d 	bl	8000490 <__aeabi_dcmpge>
 8000556:	2800      	cmp	r0, #0
 8000558:	d104      	bne.n	8000564 <__aeabi_d2uiz+0x1c>
 800055a:	0020      	movs	r0, r4
 800055c:	0029      	movs	r1, r5
 800055e:	f002 fc6b 	bl	8002e38 <__aeabi_d2iz>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <__aeabi_d2uiz+0x38>)
 8000566:	2200      	movs	r2, #0
 8000568:	0020      	movs	r0, r4
 800056a:	0029      	movs	r1, r5
 800056c:	f002 f8b4 	bl	80026d8 <__aeabi_dsub>
 8000570:	f002 fc62 	bl	8002e38 <__aeabi_d2iz>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	469c      	mov	ip, r3
 800057a:	4460      	add	r0, ip
 800057c:	e7f1      	b.n	8000562 <__aeabi_d2uiz+0x1a>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	41e00000 	.word	0x41e00000

08000584 <__aeabi_fadd>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	46c6      	mov	lr, r8
 8000588:	0243      	lsls	r3, r0, #9
 800058a:	0a5b      	lsrs	r3, r3, #9
 800058c:	024e      	lsls	r6, r1, #9
 800058e:	0045      	lsls	r5, r0, #1
 8000590:	004f      	lsls	r7, r1, #1
 8000592:	00da      	lsls	r2, r3, #3
 8000594:	0fc4      	lsrs	r4, r0, #31
 8000596:	469c      	mov	ip, r3
 8000598:	0a70      	lsrs	r0, r6, #9
 800059a:	4690      	mov	r8, r2
 800059c:	b500      	push	{lr}
 800059e:	0e2d      	lsrs	r5, r5, #24
 80005a0:	0e3f      	lsrs	r7, r7, #24
 80005a2:	0fc9      	lsrs	r1, r1, #31
 80005a4:	09b6      	lsrs	r6, r6, #6
 80005a6:	428c      	cmp	r4, r1
 80005a8:	d04b      	beq.n	8000642 <__aeabi_fadd+0xbe>
 80005aa:	1bea      	subs	r2, r5, r7
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	dd36      	ble.n	800061e <__aeabi_fadd+0x9a>
 80005b0:	2f00      	cmp	r7, #0
 80005b2:	d061      	beq.n	8000678 <__aeabi_fadd+0xf4>
 80005b4:	2dff      	cmp	r5, #255	; 0xff
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x36>
 80005b8:	e0ad      	b.n	8000716 <__aeabi_fadd+0x192>
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	04db      	lsls	r3, r3, #19
 80005be:	431e      	orrs	r6, r3
 80005c0:	2a1b      	cmp	r2, #27
 80005c2:	dc00      	bgt.n	80005c6 <__aeabi_fadd+0x42>
 80005c4:	e0d3      	b.n	800076e <__aeabi_fadd+0x1ea>
 80005c6:	2001      	movs	r0, #1
 80005c8:	4643      	mov	r3, r8
 80005ca:	1a18      	subs	r0, r3, r0
 80005cc:	0143      	lsls	r3, r0, #5
 80005ce:	d400      	bmi.n	80005d2 <__aeabi_fadd+0x4e>
 80005d0:	e08c      	b.n	80006ec <__aeabi_fadd+0x168>
 80005d2:	0180      	lsls	r0, r0, #6
 80005d4:	0987      	lsrs	r7, r0, #6
 80005d6:	0038      	movs	r0, r7
 80005d8:	f002 fd02 	bl	8002fe0 <__clzsi2>
 80005dc:	3805      	subs	r0, #5
 80005de:	4087      	lsls	r7, r0
 80005e0:	4285      	cmp	r5, r0
 80005e2:	dc00      	bgt.n	80005e6 <__aeabi_fadd+0x62>
 80005e4:	e0b6      	b.n	8000754 <__aeabi_fadd+0x1d0>
 80005e6:	1a2d      	subs	r5, r5, r0
 80005e8:	48b3      	ldr	r0, [pc, #716]	; (80008b8 <__aeabi_fadd+0x334>)
 80005ea:	4038      	ands	r0, r7
 80005ec:	0743      	lsls	r3, r0, #29
 80005ee:	d004      	beq.n	80005fa <__aeabi_fadd+0x76>
 80005f0:	230f      	movs	r3, #15
 80005f2:	4003      	ands	r3, r0
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fadd+0x76>
 80005f8:	3004      	adds	r0, #4
 80005fa:	0143      	lsls	r3, r0, #5
 80005fc:	d400      	bmi.n	8000600 <__aeabi_fadd+0x7c>
 80005fe:	e078      	b.n	80006f2 <__aeabi_fadd+0x16e>
 8000600:	1c6a      	adds	r2, r5, #1
 8000602:	2dfe      	cmp	r5, #254	; 0xfe
 8000604:	d065      	beq.n	80006d2 <__aeabi_fadd+0x14e>
 8000606:	0180      	lsls	r0, r0, #6
 8000608:	0a43      	lsrs	r3, r0, #9
 800060a:	469c      	mov	ip, r3
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	4663      	mov	r3, ip
 8000610:	05d0      	lsls	r0, r2, #23
 8000612:	4318      	orrs	r0, r3
 8000614:	07e4      	lsls	r4, r4, #31
 8000616:	4320      	orrs	r0, r4
 8000618:	bc80      	pop	{r7}
 800061a:	46b8      	mov	r8, r7
 800061c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061e:	2a00      	cmp	r2, #0
 8000620:	d035      	beq.n	800068e <__aeabi_fadd+0x10a>
 8000622:	1b7a      	subs	r2, r7, r5
 8000624:	2d00      	cmp	r5, #0
 8000626:	d000      	beq.n	800062a <__aeabi_fadd+0xa6>
 8000628:	e0af      	b.n	800078a <__aeabi_fadd+0x206>
 800062a:	4643      	mov	r3, r8
 800062c:	2b00      	cmp	r3, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_fadd+0xae>
 8000630:	e0a7      	b.n	8000782 <__aeabi_fadd+0x1fe>
 8000632:	1e53      	subs	r3, r2, #1
 8000634:	2a01      	cmp	r2, #1
 8000636:	d100      	bne.n	800063a <__aeabi_fadd+0xb6>
 8000638:	e12f      	b.n	800089a <__aeabi_fadd+0x316>
 800063a:	2aff      	cmp	r2, #255	; 0xff
 800063c:	d069      	beq.n	8000712 <__aeabi_fadd+0x18e>
 800063e:	001a      	movs	r2, r3
 8000640:	e0aa      	b.n	8000798 <__aeabi_fadd+0x214>
 8000642:	1be9      	subs	r1, r5, r7
 8000644:	2900      	cmp	r1, #0
 8000646:	dd70      	ble.n	800072a <__aeabi_fadd+0x1a6>
 8000648:	2f00      	cmp	r7, #0
 800064a:	d037      	beq.n	80006bc <__aeabi_fadd+0x138>
 800064c:	2dff      	cmp	r5, #255	; 0xff
 800064e:	d062      	beq.n	8000716 <__aeabi_fadd+0x192>
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	04db      	lsls	r3, r3, #19
 8000654:	431e      	orrs	r6, r3
 8000656:	291b      	cmp	r1, #27
 8000658:	dc00      	bgt.n	800065c <__aeabi_fadd+0xd8>
 800065a:	e0b0      	b.n	80007be <__aeabi_fadd+0x23a>
 800065c:	2001      	movs	r0, #1
 800065e:	4440      	add	r0, r8
 8000660:	0143      	lsls	r3, r0, #5
 8000662:	d543      	bpl.n	80006ec <__aeabi_fadd+0x168>
 8000664:	3501      	adds	r5, #1
 8000666:	2dff      	cmp	r5, #255	; 0xff
 8000668:	d033      	beq.n	80006d2 <__aeabi_fadd+0x14e>
 800066a:	2301      	movs	r3, #1
 800066c:	4a93      	ldr	r2, [pc, #588]	; (80008bc <__aeabi_fadd+0x338>)
 800066e:	4003      	ands	r3, r0
 8000670:	0840      	lsrs	r0, r0, #1
 8000672:	4010      	ands	r0, r2
 8000674:	4318      	orrs	r0, r3
 8000676:	e7b9      	b.n	80005ec <__aeabi_fadd+0x68>
 8000678:	2e00      	cmp	r6, #0
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0xfa>
 800067c:	e083      	b.n	8000786 <__aeabi_fadd+0x202>
 800067e:	1e51      	subs	r1, r2, #1
 8000680:	2a01      	cmp	r2, #1
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x102>
 8000684:	e0d8      	b.n	8000838 <__aeabi_fadd+0x2b4>
 8000686:	2aff      	cmp	r2, #255	; 0xff
 8000688:	d045      	beq.n	8000716 <__aeabi_fadd+0x192>
 800068a:	000a      	movs	r2, r1
 800068c:	e798      	b.n	80005c0 <__aeabi_fadd+0x3c>
 800068e:	27fe      	movs	r7, #254	; 0xfe
 8000690:	1c6a      	adds	r2, r5, #1
 8000692:	4217      	tst	r7, r2
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x114>
 8000696:	e086      	b.n	80007a6 <__aeabi_fadd+0x222>
 8000698:	2d00      	cmp	r5, #0
 800069a:	d000      	beq.n	800069e <__aeabi_fadd+0x11a>
 800069c:	e0b7      	b.n	800080e <__aeabi_fadd+0x28a>
 800069e:	4643      	mov	r3, r8
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x122>
 80006a4:	e0f3      	b.n	800088e <__aeabi_fadd+0x30a>
 80006a6:	2200      	movs	r2, #0
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d0b0      	beq.n	800060e <__aeabi_fadd+0x8a>
 80006ac:	1b98      	subs	r0, r3, r6
 80006ae:	0143      	lsls	r3, r0, #5
 80006b0:	d400      	bmi.n	80006b4 <__aeabi_fadd+0x130>
 80006b2:	e0fa      	b.n	80008aa <__aeabi_fadd+0x326>
 80006b4:	4643      	mov	r3, r8
 80006b6:	000c      	movs	r4, r1
 80006b8:	1af0      	subs	r0, r6, r3
 80006ba:	e797      	b.n	80005ec <__aeabi_fadd+0x68>
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d100      	bne.n	80006c2 <__aeabi_fadd+0x13e>
 80006c0:	e0c8      	b.n	8000854 <__aeabi_fadd+0x2d0>
 80006c2:	1e4a      	subs	r2, r1, #1
 80006c4:	2901      	cmp	r1, #1
 80006c6:	d100      	bne.n	80006ca <__aeabi_fadd+0x146>
 80006c8:	e0ae      	b.n	8000828 <__aeabi_fadd+0x2a4>
 80006ca:	29ff      	cmp	r1, #255	; 0xff
 80006cc:	d023      	beq.n	8000716 <__aeabi_fadd+0x192>
 80006ce:	0011      	movs	r1, r2
 80006d0:	e7c1      	b.n	8000656 <__aeabi_fadd+0xd2>
 80006d2:	2300      	movs	r3, #0
 80006d4:	22ff      	movs	r2, #255	; 0xff
 80006d6:	469c      	mov	ip, r3
 80006d8:	e799      	b.n	800060e <__aeabi_fadd+0x8a>
 80006da:	21fe      	movs	r1, #254	; 0xfe
 80006dc:	1c6a      	adds	r2, r5, #1
 80006de:	4211      	tst	r1, r2
 80006e0:	d077      	beq.n	80007d2 <__aeabi_fadd+0x24e>
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d0f5      	beq.n	80006d2 <__aeabi_fadd+0x14e>
 80006e6:	0015      	movs	r5, r2
 80006e8:	4446      	add	r6, r8
 80006ea:	0870      	lsrs	r0, r6, #1
 80006ec:	0743      	lsls	r3, r0, #29
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fadd+0x16e>
 80006f0:	e77e      	b.n	80005f0 <__aeabi_fadd+0x6c>
 80006f2:	08c3      	lsrs	r3, r0, #3
 80006f4:	2dff      	cmp	r5, #255	; 0xff
 80006f6:	d00e      	beq.n	8000716 <__aeabi_fadd+0x192>
 80006f8:	025b      	lsls	r3, r3, #9
 80006fa:	0a5b      	lsrs	r3, r3, #9
 80006fc:	469c      	mov	ip, r3
 80006fe:	b2ea      	uxtb	r2, r5
 8000700:	e785      	b.n	800060e <__aeabi_fadd+0x8a>
 8000702:	2e00      	cmp	r6, #0
 8000704:	d007      	beq.n	8000716 <__aeabi_fadd+0x192>
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	03d2      	lsls	r2, r2, #15
 800070a:	4213      	tst	r3, r2
 800070c:	d003      	beq.n	8000716 <__aeabi_fadd+0x192>
 800070e:	4210      	tst	r0, r2
 8000710:	d101      	bne.n	8000716 <__aeabi_fadd+0x192>
 8000712:	000c      	movs	r4, r1
 8000714:	0003      	movs	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0db      	beq.n	80006d2 <__aeabi_fadd+0x14e>
 800071a:	2080      	movs	r0, #128	; 0x80
 800071c:	03c0      	lsls	r0, r0, #15
 800071e:	4318      	orrs	r0, r3
 8000720:	0240      	lsls	r0, r0, #9
 8000722:	0a43      	lsrs	r3, r0, #9
 8000724:	469c      	mov	ip, r3
 8000726:	22ff      	movs	r2, #255	; 0xff
 8000728:	e771      	b.n	800060e <__aeabi_fadd+0x8a>
 800072a:	2900      	cmp	r1, #0
 800072c:	d0d5      	beq.n	80006da <__aeabi_fadd+0x156>
 800072e:	1b7a      	subs	r2, r7, r5
 8000730:	2d00      	cmp	r5, #0
 8000732:	d160      	bne.n	80007f6 <__aeabi_fadd+0x272>
 8000734:	4643      	mov	r3, r8
 8000736:	2b00      	cmp	r3, #0
 8000738:	d024      	beq.n	8000784 <__aeabi_fadd+0x200>
 800073a:	1e53      	subs	r3, r2, #1
 800073c:	2a01      	cmp	r2, #1
 800073e:	d073      	beq.n	8000828 <__aeabi_fadd+0x2a4>
 8000740:	2aff      	cmp	r2, #255	; 0xff
 8000742:	d0e7      	beq.n	8000714 <__aeabi_fadd+0x190>
 8000744:	001a      	movs	r2, r3
 8000746:	2a1b      	cmp	r2, #27
 8000748:	dc00      	bgt.n	800074c <__aeabi_fadd+0x1c8>
 800074a:	e085      	b.n	8000858 <__aeabi_fadd+0x2d4>
 800074c:	2001      	movs	r0, #1
 800074e:	003d      	movs	r5, r7
 8000750:	1980      	adds	r0, r0, r6
 8000752:	e785      	b.n	8000660 <__aeabi_fadd+0xdc>
 8000754:	2320      	movs	r3, #32
 8000756:	003a      	movs	r2, r7
 8000758:	1b45      	subs	r5, r0, r5
 800075a:	0038      	movs	r0, r7
 800075c:	3501      	adds	r5, #1
 800075e:	40ea      	lsrs	r2, r5
 8000760:	1b5d      	subs	r5, r3, r5
 8000762:	40a8      	lsls	r0, r5
 8000764:	1e43      	subs	r3, r0, #1
 8000766:	4198      	sbcs	r0, r3
 8000768:	2500      	movs	r5, #0
 800076a:	4310      	orrs	r0, r2
 800076c:	e73e      	b.n	80005ec <__aeabi_fadd+0x68>
 800076e:	2320      	movs	r3, #32
 8000770:	0030      	movs	r0, r6
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	0031      	movs	r1, r6
 8000776:	4098      	lsls	r0, r3
 8000778:	40d1      	lsrs	r1, r2
 800077a:	1e43      	subs	r3, r0, #1
 800077c:	4198      	sbcs	r0, r3
 800077e:	4308      	orrs	r0, r1
 8000780:	e722      	b.n	80005c8 <__aeabi_fadd+0x44>
 8000782:	000c      	movs	r4, r1
 8000784:	0003      	movs	r3, r0
 8000786:	0015      	movs	r5, r2
 8000788:	e7b4      	b.n	80006f4 <__aeabi_fadd+0x170>
 800078a:	2fff      	cmp	r7, #255	; 0xff
 800078c:	d0c1      	beq.n	8000712 <__aeabi_fadd+0x18e>
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	4640      	mov	r0, r8
 8000792:	04db      	lsls	r3, r3, #19
 8000794:	4318      	orrs	r0, r3
 8000796:	4680      	mov	r8, r0
 8000798:	2a1b      	cmp	r2, #27
 800079a:	dd51      	ble.n	8000840 <__aeabi_fadd+0x2bc>
 800079c:	2001      	movs	r0, #1
 800079e:	000c      	movs	r4, r1
 80007a0:	003d      	movs	r5, r7
 80007a2:	1a30      	subs	r0, r6, r0
 80007a4:	e712      	b.n	80005cc <__aeabi_fadd+0x48>
 80007a6:	4643      	mov	r3, r8
 80007a8:	1b9f      	subs	r7, r3, r6
 80007aa:	017b      	lsls	r3, r7, #5
 80007ac:	d42b      	bmi.n	8000806 <__aeabi_fadd+0x282>
 80007ae:	2f00      	cmp	r7, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x230>
 80007b2:	e710      	b.n	80005d6 <__aeabi_fadd+0x52>
 80007b4:	2300      	movs	r3, #0
 80007b6:	2400      	movs	r4, #0
 80007b8:	2200      	movs	r2, #0
 80007ba:	469c      	mov	ip, r3
 80007bc:	e727      	b.n	800060e <__aeabi_fadd+0x8a>
 80007be:	2320      	movs	r3, #32
 80007c0:	0032      	movs	r2, r6
 80007c2:	0030      	movs	r0, r6
 80007c4:	40ca      	lsrs	r2, r1
 80007c6:	1a59      	subs	r1, r3, r1
 80007c8:	4088      	lsls	r0, r1
 80007ca:	1e43      	subs	r3, r0, #1
 80007cc:	4198      	sbcs	r0, r3
 80007ce:	4310      	orrs	r0, r2
 80007d0:	e745      	b.n	800065e <__aeabi_fadd+0xda>
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d14a      	bne.n	800086c <__aeabi_fadd+0x2e8>
 80007d6:	4643      	mov	r3, r8
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d063      	beq.n	80008a4 <__aeabi_fadd+0x320>
 80007dc:	2200      	movs	r2, #0
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x260>
 80007e2:	e714      	b.n	800060e <__aeabi_fadd+0x8a>
 80007e4:	0030      	movs	r0, r6
 80007e6:	4440      	add	r0, r8
 80007e8:	0143      	lsls	r3, r0, #5
 80007ea:	d400      	bmi.n	80007ee <__aeabi_fadd+0x26a>
 80007ec:	e77e      	b.n	80006ec <__aeabi_fadd+0x168>
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <__aeabi_fadd+0x334>)
 80007f0:	3501      	adds	r5, #1
 80007f2:	4018      	ands	r0, r3
 80007f4:	e77a      	b.n	80006ec <__aeabi_fadd+0x168>
 80007f6:	2fff      	cmp	r7, #255	; 0xff
 80007f8:	d08c      	beq.n	8000714 <__aeabi_fadd+0x190>
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	4641      	mov	r1, r8
 80007fe:	04db      	lsls	r3, r3, #19
 8000800:	4319      	orrs	r1, r3
 8000802:	4688      	mov	r8, r1
 8000804:	e79f      	b.n	8000746 <__aeabi_fadd+0x1c2>
 8000806:	4643      	mov	r3, r8
 8000808:	000c      	movs	r4, r1
 800080a:	1af7      	subs	r7, r6, r3
 800080c:	e6e3      	b.n	80005d6 <__aeabi_fadd+0x52>
 800080e:	4642      	mov	r2, r8
 8000810:	2a00      	cmp	r2, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x292>
 8000814:	e775      	b.n	8000702 <__aeabi_fadd+0x17e>
 8000816:	2e00      	cmp	r6, #0
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0x298>
 800081a:	e77a      	b.n	8000712 <__aeabi_fadd+0x18e>
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	03db      	lsls	r3, r3, #15
 8000820:	2400      	movs	r4, #0
 8000822:	469c      	mov	ip, r3
 8000824:	22ff      	movs	r2, #255	; 0xff
 8000826:	e6f2      	b.n	800060e <__aeabi_fadd+0x8a>
 8000828:	0030      	movs	r0, r6
 800082a:	4440      	add	r0, r8
 800082c:	2501      	movs	r5, #1
 800082e:	0143      	lsls	r3, r0, #5
 8000830:	d400      	bmi.n	8000834 <__aeabi_fadd+0x2b0>
 8000832:	e75b      	b.n	80006ec <__aeabi_fadd+0x168>
 8000834:	2502      	movs	r5, #2
 8000836:	e718      	b.n	800066a <__aeabi_fadd+0xe6>
 8000838:	4643      	mov	r3, r8
 800083a:	2501      	movs	r5, #1
 800083c:	1b98      	subs	r0, r3, r6
 800083e:	e6c5      	b.n	80005cc <__aeabi_fadd+0x48>
 8000840:	2320      	movs	r3, #32
 8000842:	4644      	mov	r4, r8
 8000844:	4640      	mov	r0, r8
 8000846:	40d4      	lsrs	r4, r2
 8000848:	1a9a      	subs	r2, r3, r2
 800084a:	4090      	lsls	r0, r2
 800084c:	1e43      	subs	r3, r0, #1
 800084e:	4198      	sbcs	r0, r3
 8000850:	4320      	orrs	r0, r4
 8000852:	e7a4      	b.n	800079e <__aeabi_fadd+0x21a>
 8000854:	000d      	movs	r5, r1
 8000856:	e74d      	b.n	80006f4 <__aeabi_fadd+0x170>
 8000858:	2320      	movs	r3, #32
 800085a:	4641      	mov	r1, r8
 800085c:	4640      	mov	r0, r8
 800085e:	40d1      	lsrs	r1, r2
 8000860:	1a9a      	subs	r2, r3, r2
 8000862:	4090      	lsls	r0, r2
 8000864:	1e43      	subs	r3, r0, #1
 8000866:	4198      	sbcs	r0, r3
 8000868:	4308      	orrs	r0, r1
 800086a:	e770      	b.n	800074e <__aeabi_fadd+0x1ca>
 800086c:	4642      	mov	r2, r8
 800086e:	2a00      	cmp	r2, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x2f0>
 8000872:	e74f      	b.n	8000714 <__aeabi_fadd+0x190>
 8000874:	2e00      	cmp	r6, #0
 8000876:	d100      	bne.n	800087a <__aeabi_fadd+0x2f6>
 8000878:	e74d      	b.n	8000716 <__aeabi_fadd+0x192>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	03d2      	lsls	r2, r2, #15
 800087e:	4213      	tst	r3, r2
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x300>
 8000882:	e748      	b.n	8000716 <__aeabi_fadd+0x192>
 8000884:	4210      	tst	r0, r2
 8000886:	d000      	beq.n	800088a <__aeabi_fadd+0x306>
 8000888:	e745      	b.n	8000716 <__aeabi_fadd+0x192>
 800088a:	0003      	movs	r3, r0
 800088c:	e743      	b.n	8000716 <__aeabi_fadd+0x192>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d090      	beq.n	80007b4 <__aeabi_fadd+0x230>
 8000892:	000c      	movs	r4, r1
 8000894:	4684      	mov	ip, r0
 8000896:	2200      	movs	r2, #0
 8000898:	e6b9      	b.n	800060e <__aeabi_fadd+0x8a>
 800089a:	4643      	mov	r3, r8
 800089c:	000c      	movs	r4, r1
 800089e:	1af0      	subs	r0, r6, r3
 80008a0:	3501      	adds	r5, #1
 80008a2:	e693      	b.n	80005cc <__aeabi_fadd+0x48>
 80008a4:	4684      	mov	ip, r0
 80008a6:	2200      	movs	r2, #0
 80008a8:	e6b1      	b.n	800060e <__aeabi_fadd+0x8a>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d000      	beq.n	80008b0 <__aeabi_fadd+0x32c>
 80008ae:	e71d      	b.n	80006ec <__aeabi_fadd+0x168>
 80008b0:	2300      	movs	r3, #0
 80008b2:	2400      	movs	r4, #0
 80008b4:	469c      	mov	ip, r3
 80008b6:	e6aa      	b.n	800060e <__aeabi_fadd+0x8a>
 80008b8:	fbffffff 	.word	0xfbffffff
 80008bc:	7dffffff 	.word	0x7dffffff

080008c0 <__aeabi_fdiv>:
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	464f      	mov	r7, r9
 80008c4:	4646      	mov	r6, r8
 80008c6:	46d6      	mov	lr, sl
 80008c8:	0245      	lsls	r5, r0, #9
 80008ca:	b5c0      	push	{r6, r7, lr}
 80008cc:	0047      	lsls	r7, r0, #1
 80008ce:	1c0c      	adds	r4, r1, #0
 80008d0:	0a6d      	lsrs	r5, r5, #9
 80008d2:	0e3f      	lsrs	r7, r7, #24
 80008d4:	0fc6      	lsrs	r6, r0, #31
 80008d6:	2f00      	cmp	r7, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fdiv+0x1c>
 80008da:	e070      	b.n	80009be <__aeabi_fdiv+0xfe>
 80008dc:	2fff      	cmp	r7, #255	; 0xff
 80008de:	d100      	bne.n	80008e2 <__aeabi_fdiv+0x22>
 80008e0:	e075      	b.n	80009ce <__aeabi_fdiv+0x10e>
 80008e2:	00eb      	lsls	r3, r5, #3
 80008e4:	2580      	movs	r5, #128	; 0x80
 80008e6:	04ed      	lsls	r5, r5, #19
 80008e8:	431d      	orrs	r5, r3
 80008ea:	2300      	movs	r3, #0
 80008ec:	4699      	mov	r9, r3
 80008ee:	469a      	mov	sl, r3
 80008f0:	3f7f      	subs	r7, #127	; 0x7f
 80008f2:	0260      	lsls	r0, r4, #9
 80008f4:	0a43      	lsrs	r3, r0, #9
 80008f6:	4698      	mov	r8, r3
 80008f8:	0063      	lsls	r3, r4, #1
 80008fa:	0e1b      	lsrs	r3, r3, #24
 80008fc:	0fe4      	lsrs	r4, r4, #31
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d04e      	beq.n	80009a0 <__aeabi_fdiv+0xe0>
 8000902:	2bff      	cmp	r3, #255	; 0xff
 8000904:	d046      	beq.n	8000994 <__aeabi_fdiv+0xd4>
 8000906:	4642      	mov	r2, r8
 8000908:	00d0      	lsls	r0, r2, #3
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	04d2      	lsls	r2, r2, #19
 800090e:	4302      	orrs	r2, r0
 8000910:	4690      	mov	r8, r2
 8000912:	2200      	movs	r2, #0
 8000914:	3b7f      	subs	r3, #127	; 0x7f
 8000916:	0031      	movs	r1, r6
 8000918:	1aff      	subs	r7, r7, r3
 800091a:	464b      	mov	r3, r9
 800091c:	4061      	eors	r1, r4
 800091e:	b2c9      	uxtb	r1, r1
 8000920:	4313      	orrs	r3, r2
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d900      	bls.n	8000928 <__aeabi_fdiv+0x68>
 8000926:	e0b5      	b.n	8000a94 <__aeabi_fdiv+0x1d4>
 8000928:	486e      	ldr	r0, [pc, #440]	; (8000ae4 <__aeabi_fdiv+0x224>)
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	58c3      	ldr	r3, [r0, r3]
 800092e:	469f      	mov	pc, r3
 8000930:	2300      	movs	r3, #0
 8000932:	4698      	mov	r8, r3
 8000934:	0026      	movs	r6, r4
 8000936:	4645      	mov	r5, r8
 8000938:	4692      	mov	sl, r2
 800093a:	4653      	mov	r3, sl
 800093c:	2b02      	cmp	r3, #2
 800093e:	d100      	bne.n	8000942 <__aeabi_fdiv+0x82>
 8000940:	e089      	b.n	8000a56 <__aeabi_fdiv+0x196>
 8000942:	2b03      	cmp	r3, #3
 8000944:	d100      	bne.n	8000948 <__aeabi_fdiv+0x88>
 8000946:	e09e      	b.n	8000a86 <__aeabi_fdiv+0x1c6>
 8000948:	2b01      	cmp	r3, #1
 800094a:	d018      	beq.n	800097e <__aeabi_fdiv+0xbe>
 800094c:	003b      	movs	r3, r7
 800094e:	337f      	adds	r3, #127	; 0x7f
 8000950:	2b00      	cmp	r3, #0
 8000952:	dd69      	ble.n	8000a28 <__aeabi_fdiv+0x168>
 8000954:	076a      	lsls	r2, r5, #29
 8000956:	d004      	beq.n	8000962 <__aeabi_fdiv+0xa2>
 8000958:	220f      	movs	r2, #15
 800095a:	402a      	ands	r2, r5
 800095c:	2a04      	cmp	r2, #4
 800095e:	d000      	beq.n	8000962 <__aeabi_fdiv+0xa2>
 8000960:	3504      	adds	r5, #4
 8000962:	012a      	lsls	r2, r5, #4
 8000964:	d503      	bpl.n	800096e <__aeabi_fdiv+0xae>
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <__aeabi_fdiv+0x228>)
 8000968:	401d      	ands	r5, r3
 800096a:	003b      	movs	r3, r7
 800096c:	3380      	adds	r3, #128	; 0x80
 800096e:	2bfe      	cmp	r3, #254	; 0xfe
 8000970:	dd00      	ble.n	8000974 <__aeabi_fdiv+0xb4>
 8000972:	e070      	b.n	8000a56 <__aeabi_fdiv+0x196>
 8000974:	01ad      	lsls	r5, r5, #6
 8000976:	0a6d      	lsrs	r5, r5, #9
 8000978:	b2d8      	uxtb	r0, r3
 800097a:	e002      	b.n	8000982 <__aeabi_fdiv+0xc2>
 800097c:	000e      	movs	r6, r1
 800097e:	2000      	movs	r0, #0
 8000980:	2500      	movs	r5, #0
 8000982:	05c0      	lsls	r0, r0, #23
 8000984:	4328      	orrs	r0, r5
 8000986:	07f6      	lsls	r6, r6, #31
 8000988:	4330      	orrs	r0, r6
 800098a:	bce0      	pop	{r5, r6, r7}
 800098c:	46ba      	mov	sl, r7
 800098e:	46b1      	mov	r9, r6
 8000990:	46a8      	mov	r8, r5
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	4643      	mov	r3, r8
 8000996:	2b00      	cmp	r3, #0
 8000998:	d13f      	bne.n	8000a1a <__aeabi_fdiv+0x15a>
 800099a:	2202      	movs	r2, #2
 800099c:	3fff      	subs	r7, #255	; 0xff
 800099e:	e003      	b.n	80009a8 <__aeabi_fdiv+0xe8>
 80009a0:	4643      	mov	r3, r8
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d12d      	bne.n	8000a02 <__aeabi_fdiv+0x142>
 80009a6:	2201      	movs	r2, #1
 80009a8:	0031      	movs	r1, r6
 80009aa:	464b      	mov	r3, r9
 80009ac:	4061      	eors	r1, r4
 80009ae:	b2c9      	uxtb	r1, r1
 80009b0:	4313      	orrs	r3, r2
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d834      	bhi.n	8000a20 <__aeabi_fdiv+0x160>
 80009b6:	484d      	ldr	r0, [pc, #308]	; (8000aec <__aeabi_fdiv+0x22c>)
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	58c3      	ldr	r3, [r0, r3]
 80009bc:	469f      	mov	pc, r3
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d113      	bne.n	80009ea <__aeabi_fdiv+0x12a>
 80009c2:	2304      	movs	r3, #4
 80009c4:	4699      	mov	r9, r3
 80009c6:	3b03      	subs	r3, #3
 80009c8:	2700      	movs	r7, #0
 80009ca:	469a      	mov	sl, r3
 80009cc:	e791      	b.n	80008f2 <__aeabi_fdiv+0x32>
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d105      	bne.n	80009de <__aeabi_fdiv+0x11e>
 80009d2:	2308      	movs	r3, #8
 80009d4:	4699      	mov	r9, r3
 80009d6:	3b06      	subs	r3, #6
 80009d8:	27ff      	movs	r7, #255	; 0xff
 80009da:	469a      	mov	sl, r3
 80009dc:	e789      	b.n	80008f2 <__aeabi_fdiv+0x32>
 80009de:	230c      	movs	r3, #12
 80009e0:	4699      	mov	r9, r3
 80009e2:	3b09      	subs	r3, #9
 80009e4:	27ff      	movs	r7, #255	; 0xff
 80009e6:	469a      	mov	sl, r3
 80009e8:	e783      	b.n	80008f2 <__aeabi_fdiv+0x32>
 80009ea:	0028      	movs	r0, r5
 80009ec:	f002 faf8 	bl	8002fe0 <__clzsi2>
 80009f0:	2776      	movs	r7, #118	; 0x76
 80009f2:	1f43      	subs	r3, r0, #5
 80009f4:	409d      	lsls	r5, r3
 80009f6:	2300      	movs	r3, #0
 80009f8:	427f      	negs	r7, r7
 80009fa:	4699      	mov	r9, r3
 80009fc:	469a      	mov	sl, r3
 80009fe:	1a3f      	subs	r7, r7, r0
 8000a00:	e777      	b.n	80008f2 <__aeabi_fdiv+0x32>
 8000a02:	4640      	mov	r0, r8
 8000a04:	f002 faec 	bl	8002fe0 <__clzsi2>
 8000a08:	4642      	mov	r2, r8
 8000a0a:	1f43      	subs	r3, r0, #5
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	2376      	movs	r3, #118	; 0x76
 8000a10:	425b      	negs	r3, r3
 8000a12:	4690      	mov	r8, r2
 8000a14:	1a1b      	subs	r3, r3, r0
 8000a16:	2200      	movs	r2, #0
 8000a18:	e77d      	b.n	8000916 <__aeabi_fdiv+0x56>
 8000a1a:	23ff      	movs	r3, #255	; 0xff
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	e77a      	b.n	8000916 <__aeabi_fdiv+0x56>
 8000a20:	000e      	movs	r6, r1
 8000a22:	20ff      	movs	r0, #255	; 0xff
 8000a24:	2500      	movs	r5, #0
 8000a26:	e7ac      	b.n	8000982 <__aeabi_fdiv+0xc2>
 8000a28:	2001      	movs	r0, #1
 8000a2a:	1ac0      	subs	r0, r0, r3
 8000a2c:	281b      	cmp	r0, #27
 8000a2e:	dca6      	bgt.n	800097e <__aeabi_fdiv+0xbe>
 8000a30:	379e      	adds	r7, #158	; 0x9e
 8000a32:	002a      	movs	r2, r5
 8000a34:	40bd      	lsls	r5, r7
 8000a36:	40c2      	lsrs	r2, r0
 8000a38:	1e6b      	subs	r3, r5, #1
 8000a3a:	419d      	sbcs	r5, r3
 8000a3c:	4315      	orrs	r5, r2
 8000a3e:	076b      	lsls	r3, r5, #29
 8000a40:	d004      	beq.n	8000a4c <__aeabi_fdiv+0x18c>
 8000a42:	230f      	movs	r3, #15
 8000a44:	402b      	ands	r3, r5
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fdiv+0x18c>
 8000a4a:	3504      	adds	r5, #4
 8000a4c:	016b      	lsls	r3, r5, #5
 8000a4e:	d544      	bpl.n	8000ada <__aeabi_fdiv+0x21a>
 8000a50:	2001      	movs	r0, #1
 8000a52:	2500      	movs	r5, #0
 8000a54:	e795      	b.n	8000982 <__aeabi_fdiv+0xc2>
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	2500      	movs	r5, #0
 8000a5a:	e792      	b.n	8000982 <__aeabi_fdiv+0xc2>
 8000a5c:	2580      	movs	r5, #128	; 0x80
 8000a5e:	2600      	movs	r6, #0
 8000a60:	20ff      	movs	r0, #255	; 0xff
 8000a62:	03ed      	lsls	r5, r5, #15
 8000a64:	e78d      	b.n	8000982 <__aeabi_fdiv+0xc2>
 8000a66:	2300      	movs	r3, #0
 8000a68:	4698      	mov	r8, r3
 8000a6a:	2080      	movs	r0, #128	; 0x80
 8000a6c:	03c0      	lsls	r0, r0, #15
 8000a6e:	4205      	tst	r5, r0
 8000a70:	d009      	beq.n	8000a86 <__aeabi_fdiv+0x1c6>
 8000a72:	4643      	mov	r3, r8
 8000a74:	4203      	tst	r3, r0
 8000a76:	d106      	bne.n	8000a86 <__aeabi_fdiv+0x1c6>
 8000a78:	4645      	mov	r5, r8
 8000a7a:	4305      	orrs	r5, r0
 8000a7c:	026d      	lsls	r5, r5, #9
 8000a7e:	0026      	movs	r6, r4
 8000a80:	20ff      	movs	r0, #255	; 0xff
 8000a82:	0a6d      	lsrs	r5, r5, #9
 8000a84:	e77d      	b.n	8000982 <__aeabi_fdiv+0xc2>
 8000a86:	2080      	movs	r0, #128	; 0x80
 8000a88:	03c0      	lsls	r0, r0, #15
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	026d      	lsls	r5, r5, #9
 8000a8e:	20ff      	movs	r0, #255	; 0xff
 8000a90:	0a6d      	lsrs	r5, r5, #9
 8000a92:	e776      	b.n	8000982 <__aeabi_fdiv+0xc2>
 8000a94:	4642      	mov	r2, r8
 8000a96:	016b      	lsls	r3, r5, #5
 8000a98:	0150      	lsls	r0, r2, #5
 8000a9a:	4283      	cmp	r3, r0
 8000a9c:	d219      	bcs.n	8000ad2 <__aeabi_fdiv+0x212>
 8000a9e:	221b      	movs	r2, #27
 8000aa0:	2500      	movs	r5, #0
 8000aa2:	3f01      	subs	r7, #1
 8000aa4:	2601      	movs	r6, #1
 8000aa6:	001c      	movs	r4, r3
 8000aa8:	006d      	lsls	r5, r5, #1
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2c00      	cmp	r4, #0
 8000aae:	db01      	blt.n	8000ab4 <__aeabi_fdiv+0x1f4>
 8000ab0:	4298      	cmp	r0, r3
 8000ab2:	d801      	bhi.n	8000ab8 <__aeabi_fdiv+0x1f8>
 8000ab4:	1a1b      	subs	r3, r3, r0
 8000ab6:	4335      	orrs	r5, r6
 8000ab8:	3a01      	subs	r2, #1
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d1f3      	bne.n	8000aa6 <__aeabi_fdiv+0x1e6>
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	4193      	sbcs	r3, r2
 8000ac2:	431d      	orrs	r5, r3
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	337f      	adds	r3, #127	; 0x7f
 8000ac8:	000e      	movs	r6, r1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_fdiv+0x210>
 8000ace:	e741      	b.n	8000954 <__aeabi_fdiv+0x94>
 8000ad0:	e7aa      	b.n	8000a28 <__aeabi_fdiv+0x168>
 8000ad2:	221a      	movs	r2, #26
 8000ad4:	2501      	movs	r5, #1
 8000ad6:	1a1b      	subs	r3, r3, r0
 8000ad8:	e7e4      	b.n	8000aa4 <__aeabi_fdiv+0x1e4>
 8000ada:	01ad      	lsls	r5, r5, #6
 8000adc:	2000      	movs	r0, #0
 8000ade:	0a6d      	lsrs	r5, r5, #9
 8000ae0:	e74f      	b.n	8000982 <__aeabi_fdiv+0xc2>
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	08010068 	.word	0x08010068
 8000ae8:	f7ffffff 	.word	0xf7ffffff
 8000aec:	080100a8 	.word	0x080100a8

08000af0 <__eqsf2>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	0042      	lsls	r2, r0, #1
 8000af4:	0245      	lsls	r5, r0, #9
 8000af6:	024e      	lsls	r6, r1, #9
 8000af8:	004c      	lsls	r4, r1, #1
 8000afa:	0fc3      	lsrs	r3, r0, #31
 8000afc:	0a6d      	lsrs	r5, r5, #9
 8000afe:	2001      	movs	r0, #1
 8000b00:	0e12      	lsrs	r2, r2, #24
 8000b02:	0a76      	lsrs	r6, r6, #9
 8000b04:	0e24      	lsrs	r4, r4, #24
 8000b06:	0fc9      	lsrs	r1, r1, #31
 8000b08:	2aff      	cmp	r2, #255	; 0xff
 8000b0a:	d006      	beq.n	8000b1a <__eqsf2+0x2a>
 8000b0c:	2cff      	cmp	r4, #255	; 0xff
 8000b0e:	d003      	beq.n	8000b18 <__eqsf2+0x28>
 8000b10:	42a2      	cmp	r2, r4
 8000b12:	d101      	bne.n	8000b18 <__eqsf2+0x28>
 8000b14:	42b5      	cmp	r5, r6
 8000b16:	d006      	beq.n	8000b26 <__eqsf2+0x36>
 8000b18:	bd70      	pop	{r4, r5, r6, pc}
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d1fc      	bne.n	8000b18 <__eqsf2+0x28>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d1fa      	bne.n	8000b18 <__eqsf2+0x28>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d1f8      	bne.n	8000b18 <__eqsf2+0x28>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d006      	beq.n	8000b38 <__eqsf2+0x48>
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d1f3      	bne.n	8000b18 <__eqsf2+0x28>
 8000b30:	0028      	movs	r0, r5
 8000b32:	1e43      	subs	r3, r0, #1
 8000b34:	4198      	sbcs	r0, r3
 8000b36:	e7ef      	b.n	8000b18 <__eqsf2+0x28>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	e7ed      	b.n	8000b18 <__eqsf2+0x28>

08000b3c <__gesf2>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	0042      	lsls	r2, r0, #1
 8000b40:	0245      	lsls	r5, r0, #9
 8000b42:	024e      	lsls	r6, r1, #9
 8000b44:	004c      	lsls	r4, r1, #1
 8000b46:	0fc3      	lsrs	r3, r0, #31
 8000b48:	0a6d      	lsrs	r5, r5, #9
 8000b4a:	0e12      	lsrs	r2, r2, #24
 8000b4c:	0a76      	lsrs	r6, r6, #9
 8000b4e:	0e24      	lsrs	r4, r4, #24
 8000b50:	0fc8      	lsrs	r0, r1, #31
 8000b52:	2aff      	cmp	r2, #255	; 0xff
 8000b54:	d01b      	beq.n	8000b8e <__gesf2+0x52>
 8000b56:	2cff      	cmp	r4, #255	; 0xff
 8000b58:	d00e      	beq.n	8000b78 <__gesf2+0x3c>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d11b      	bne.n	8000b96 <__gesf2+0x5a>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d101      	bne.n	8000b66 <__gesf2+0x2a>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d01c      	beq.n	8000ba0 <__gesf2+0x64>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d00c      	beq.n	8000b84 <__gesf2+0x48>
 8000b6a:	4283      	cmp	r3, r0
 8000b6c:	d01c      	beq.n	8000ba8 <__gesf2+0x6c>
 8000b6e:	2102      	movs	r1, #2
 8000b70:	1e58      	subs	r0, r3, #1
 8000b72:	4008      	ands	r0, r1
 8000b74:	3801      	subs	r0, #1
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	d122      	bne.n	8000bc2 <__gesf2+0x86>
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d1f4      	bne.n	8000b6a <__gesf2+0x2e>
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d1f2      	bne.n	8000b6a <__gesf2+0x2e>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d1f6      	bne.n	8000b76 <__gesf2+0x3a>
 8000b88:	2001      	movs	r0, #1
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	e7f3      	b.n	8000b76 <__gesf2+0x3a>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d117      	bne.n	8000bc2 <__gesf2+0x86>
 8000b92:	2cff      	cmp	r4, #255	; 0xff
 8000b94:	d0f0      	beq.n	8000b78 <__gesf2+0x3c>
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d1e7      	bne.n	8000b6a <__gesf2+0x2e>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d1e5      	bne.n	8000b6a <__gesf2+0x2e>
 8000b9e:	e7e6      	b.n	8000b6e <__gesf2+0x32>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d0e7      	beq.n	8000b76 <__gesf2+0x3a>
 8000ba6:	e7e2      	b.n	8000b6e <__gesf2+0x32>
 8000ba8:	42a2      	cmp	r2, r4
 8000baa:	dc05      	bgt.n	8000bb8 <__gesf2+0x7c>
 8000bac:	dbea      	blt.n	8000b84 <__gesf2+0x48>
 8000bae:	42b5      	cmp	r5, r6
 8000bb0:	d802      	bhi.n	8000bb8 <__gesf2+0x7c>
 8000bb2:	d3e7      	bcc.n	8000b84 <__gesf2+0x48>
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e7de      	b.n	8000b76 <__gesf2+0x3a>
 8000bb8:	4243      	negs	r3, r0
 8000bba:	4158      	adcs	r0, r3
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	e7d9      	b.n	8000b76 <__gesf2+0x3a>
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	4240      	negs	r0, r0
 8000bc6:	e7d6      	b.n	8000b76 <__gesf2+0x3a>

08000bc8 <__lesf2>:
 8000bc8:	b570      	push	{r4, r5, r6, lr}
 8000bca:	0042      	lsls	r2, r0, #1
 8000bcc:	0245      	lsls	r5, r0, #9
 8000bce:	024e      	lsls	r6, r1, #9
 8000bd0:	004c      	lsls	r4, r1, #1
 8000bd2:	0fc3      	lsrs	r3, r0, #31
 8000bd4:	0a6d      	lsrs	r5, r5, #9
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	0a76      	lsrs	r6, r6, #9
 8000bda:	0e24      	lsrs	r4, r4, #24
 8000bdc:	0fc8      	lsrs	r0, r1, #31
 8000bde:	2aff      	cmp	r2, #255	; 0xff
 8000be0:	d00b      	beq.n	8000bfa <__lesf2+0x32>
 8000be2:	2cff      	cmp	r4, #255	; 0xff
 8000be4:	d00d      	beq.n	8000c02 <__lesf2+0x3a>
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d11f      	bne.n	8000c2a <__lesf2+0x62>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d116      	bne.n	8000c1c <__lesf2+0x54>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d114      	bne.n	8000c1c <__lesf2+0x54>
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d010      	beq.n	8000c1a <__lesf2+0x52>
 8000bf8:	e009      	b.n	8000c0e <__lesf2+0x46>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d10c      	bne.n	8000c18 <__lesf2+0x50>
 8000bfe:	2cff      	cmp	r4, #255	; 0xff
 8000c00:	d113      	bne.n	8000c2a <__lesf2+0x62>
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d108      	bne.n	8000c18 <__lesf2+0x50>
 8000c06:	2a00      	cmp	r2, #0
 8000c08:	d008      	beq.n	8000c1c <__lesf2+0x54>
 8000c0a:	4283      	cmp	r3, r0
 8000c0c:	d012      	beq.n	8000c34 <__lesf2+0x6c>
 8000c0e:	2102      	movs	r1, #2
 8000c10:	1e58      	subs	r0, r3, #1
 8000c12:	4008      	ands	r0, r1
 8000c14:	3801      	subs	r0, #1
 8000c16:	e000      	b.n	8000c1a <__lesf2+0x52>
 8000c18:	2002      	movs	r0, #2
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d1f4      	bne.n	8000c0a <__lesf2+0x42>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1fa      	bne.n	8000c1a <__lesf2+0x52>
 8000c24:	2001      	movs	r0, #1
 8000c26:	4240      	negs	r0, r0
 8000c28:	e7f7      	b.n	8000c1a <__lesf2+0x52>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d1ed      	bne.n	8000c0a <__lesf2+0x42>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d1eb      	bne.n	8000c0a <__lesf2+0x42>
 8000c32:	e7ec      	b.n	8000c0e <__lesf2+0x46>
 8000c34:	42a2      	cmp	r2, r4
 8000c36:	dc05      	bgt.n	8000c44 <__lesf2+0x7c>
 8000c38:	dbf2      	blt.n	8000c20 <__lesf2+0x58>
 8000c3a:	42b5      	cmp	r5, r6
 8000c3c:	d802      	bhi.n	8000c44 <__lesf2+0x7c>
 8000c3e:	d3ef      	bcc.n	8000c20 <__lesf2+0x58>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e7ea      	b.n	8000c1a <__lesf2+0x52>
 8000c44:	4243      	negs	r3, r0
 8000c46:	4158      	adcs	r0, r3
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	e7e5      	b.n	8000c1a <__lesf2+0x52>
 8000c4e:	46c0      	nop			; (mov r8, r8)

08000c50 <__aeabi_fmul>:
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c52:	464f      	mov	r7, r9
 8000c54:	4646      	mov	r6, r8
 8000c56:	46d6      	mov	lr, sl
 8000c58:	0244      	lsls	r4, r0, #9
 8000c5a:	0045      	lsls	r5, r0, #1
 8000c5c:	b5c0      	push	{r6, r7, lr}
 8000c5e:	0a64      	lsrs	r4, r4, #9
 8000c60:	1c0f      	adds	r7, r1, #0
 8000c62:	0e2d      	lsrs	r5, r5, #24
 8000c64:	0fc6      	lsrs	r6, r0, #31
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fmul+0x1c>
 8000c6a:	e08d      	b.n	8000d88 <__aeabi_fmul+0x138>
 8000c6c:	2dff      	cmp	r5, #255	; 0xff
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_fmul+0x22>
 8000c70:	e092      	b.n	8000d98 <__aeabi_fmul+0x148>
 8000c72:	2300      	movs	r3, #0
 8000c74:	2080      	movs	r0, #128	; 0x80
 8000c76:	4699      	mov	r9, r3
 8000c78:	469a      	mov	sl, r3
 8000c7a:	00e4      	lsls	r4, r4, #3
 8000c7c:	04c0      	lsls	r0, r0, #19
 8000c7e:	4304      	orrs	r4, r0
 8000c80:	3d7f      	subs	r5, #127	; 0x7f
 8000c82:	0278      	lsls	r0, r7, #9
 8000c84:	0a43      	lsrs	r3, r0, #9
 8000c86:	4698      	mov	r8, r3
 8000c88:	007b      	lsls	r3, r7, #1
 8000c8a:	0e1b      	lsrs	r3, r3, #24
 8000c8c:	0fff      	lsrs	r7, r7, #31
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fmul+0x44>
 8000c92:	e070      	b.n	8000d76 <__aeabi_fmul+0x126>
 8000c94:	2bff      	cmp	r3, #255	; 0xff
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fmul+0x4a>
 8000c98:	e086      	b.n	8000da8 <__aeabi_fmul+0x158>
 8000c9a:	4642      	mov	r2, r8
 8000c9c:	00d0      	lsls	r0, r2, #3
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	3b7f      	subs	r3, #127	; 0x7f
 8000ca2:	18ed      	adds	r5, r5, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	04d2      	lsls	r2, r2, #19
 8000ca8:	4302      	orrs	r2, r0
 8000caa:	4690      	mov	r8, r2
 8000cac:	469c      	mov	ip, r3
 8000cae:	0031      	movs	r1, r6
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	4079      	eors	r1, r7
 8000cb4:	1c68      	adds	r0, r5, #1
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d81c      	bhi.n	8000cf4 <__aeabi_fmul+0xa4>
 8000cba:	4a76      	ldr	r2, [pc, #472]	; (8000e94 <__aeabi_fmul+0x244>)
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	58d3      	ldr	r3, [r2, r3]
 8000cc0:	469f      	mov	pc, r3
 8000cc2:	0039      	movs	r1, r7
 8000cc4:	4644      	mov	r4, r8
 8000cc6:	46e2      	mov	sl, ip
 8000cc8:	4653      	mov	r3, sl
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d00f      	beq.n	8000cee <__aeabi_fmul+0x9e>
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fmul+0x84>
 8000cd2:	e0d7      	b.n	8000e84 <__aeabi_fmul+0x234>
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d137      	bne.n	8000d48 <__aeabi_fmul+0xf8>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	2400      	movs	r4, #0
 8000cdc:	05c0      	lsls	r0, r0, #23
 8000cde:	4320      	orrs	r0, r4
 8000ce0:	07c9      	lsls	r1, r1, #31
 8000ce2:	4308      	orrs	r0, r1
 8000ce4:	bce0      	pop	{r5, r6, r7}
 8000ce6:	46ba      	mov	sl, r7
 8000ce8:	46b1      	mov	r9, r6
 8000cea:	46a8      	mov	r8, r5
 8000cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cee:	20ff      	movs	r0, #255	; 0xff
 8000cf0:	2400      	movs	r4, #0
 8000cf2:	e7f3      	b.n	8000cdc <__aeabi_fmul+0x8c>
 8000cf4:	0c26      	lsrs	r6, r4, #16
 8000cf6:	0424      	lsls	r4, r4, #16
 8000cf8:	0c22      	lsrs	r2, r4, #16
 8000cfa:	4644      	mov	r4, r8
 8000cfc:	0424      	lsls	r4, r4, #16
 8000cfe:	0c24      	lsrs	r4, r4, #16
 8000d00:	4643      	mov	r3, r8
 8000d02:	0027      	movs	r7, r4
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	4357      	muls	r7, r2
 8000d08:	4374      	muls	r4, r6
 8000d0a:	435a      	muls	r2, r3
 8000d0c:	435e      	muls	r6, r3
 8000d0e:	1912      	adds	r2, r2, r4
 8000d10:	0c3b      	lsrs	r3, r7, #16
 8000d12:	189b      	adds	r3, r3, r2
 8000d14:	429c      	cmp	r4, r3
 8000d16:	d903      	bls.n	8000d20 <__aeabi_fmul+0xd0>
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	0252      	lsls	r2, r2, #9
 8000d1c:	4694      	mov	ip, r2
 8000d1e:	4466      	add	r6, ip
 8000d20:	043f      	lsls	r7, r7, #16
 8000d22:	041a      	lsls	r2, r3, #16
 8000d24:	0c3f      	lsrs	r7, r7, #16
 8000d26:	19d2      	adds	r2, r2, r7
 8000d28:	0194      	lsls	r4, r2, #6
 8000d2a:	1e67      	subs	r7, r4, #1
 8000d2c:	41bc      	sbcs	r4, r7
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	0e92      	lsrs	r2, r2, #26
 8000d32:	199b      	adds	r3, r3, r6
 8000d34:	4314      	orrs	r4, r2
 8000d36:	019b      	lsls	r3, r3, #6
 8000d38:	431c      	orrs	r4, r3
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	d400      	bmi.n	8000d40 <__aeabi_fmul+0xf0>
 8000d3e:	e09b      	b.n	8000e78 <__aeabi_fmul+0x228>
 8000d40:	2301      	movs	r3, #1
 8000d42:	0862      	lsrs	r2, r4, #1
 8000d44:	401c      	ands	r4, r3
 8000d46:	4314      	orrs	r4, r2
 8000d48:	0002      	movs	r2, r0
 8000d4a:	327f      	adds	r2, #127	; 0x7f
 8000d4c:	2a00      	cmp	r2, #0
 8000d4e:	dd64      	ble.n	8000e1a <__aeabi_fmul+0x1ca>
 8000d50:	0763      	lsls	r3, r4, #29
 8000d52:	d004      	beq.n	8000d5e <__aeabi_fmul+0x10e>
 8000d54:	230f      	movs	r3, #15
 8000d56:	4023      	ands	r3, r4
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fmul+0x10e>
 8000d5c:	3404      	adds	r4, #4
 8000d5e:	0123      	lsls	r3, r4, #4
 8000d60:	d503      	bpl.n	8000d6a <__aeabi_fmul+0x11a>
 8000d62:	0002      	movs	r2, r0
 8000d64:	4b4c      	ldr	r3, [pc, #304]	; (8000e98 <__aeabi_fmul+0x248>)
 8000d66:	3280      	adds	r2, #128	; 0x80
 8000d68:	401c      	ands	r4, r3
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	dcbf      	bgt.n	8000cee <__aeabi_fmul+0x9e>
 8000d6e:	01a4      	lsls	r4, r4, #6
 8000d70:	0a64      	lsrs	r4, r4, #9
 8000d72:	b2d0      	uxtb	r0, r2
 8000d74:	e7b2      	b.n	8000cdc <__aeabi_fmul+0x8c>
 8000d76:	4643      	mov	r3, r8
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d13d      	bne.n	8000df8 <__aeabi_fmul+0x1a8>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	3301      	adds	r3, #1
 8000d80:	431a      	orrs	r2, r3
 8000d82:	4691      	mov	r9, r2
 8000d84:	469c      	mov	ip, r3
 8000d86:	e792      	b.n	8000cae <__aeabi_fmul+0x5e>
 8000d88:	2c00      	cmp	r4, #0
 8000d8a:	d129      	bne.n	8000de0 <__aeabi_fmul+0x190>
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	4699      	mov	r9, r3
 8000d90:	3b03      	subs	r3, #3
 8000d92:	2500      	movs	r5, #0
 8000d94:	469a      	mov	sl, r3
 8000d96:	e774      	b.n	8000c82 <__aeabi_fmul+0x32>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d11b      	bne.n	8000dd4 <__aeabi_fmul+0x184>
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	4699      	mov	r9, r3
 8000da0:	3b06      	subs	r3, #6
 8000da2:	25ff      	movs	r5, #255	; 0xff
 8000da4:	469a      	mov	sl, r3
 8000da6:	e76c      	b.n	8000c82 <__aeabi_fmul+0x32>
 8000da8:	4643      	mov	r3, r8
 8000daa:	35ff      	adds	r5, #255	; 0xff
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10b      	bne.n	8000dc8 <__aeabi_fmul+0x178>
 8000db0:	2302      	movs	r3, #2
 8000db2:	464a      	mov	r2, r9
 8000db4:	431a      	orrs	r2, r3
 8000db6:	4691      	mov	r9, r2
 8000db8:	469c      	mov	ip, r3
 8000dba:	e778      	b.n	8000cae <__aeabi_fmul+0x5e>
 8000dbc:	4653      	mov	r3, sl
 8000dbe:	0031      	movs	r1, r6
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d000      	beq.n	8000dc6 <__aeabi_fmul+0x176>
 8000dc4:	e783      	b.n	8000cce <__aeabi_fmul+0x7e>
 8000dc6:	e792      	b.n	8000cee <__aeabi_fmul+0x9e>
 8000dc8:	2303      	movs	r3, #3
 8000dca:	464a      	mov	r2, r9
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	4691      	mov	r9, r2
 8000dd0:	469c      	mov	ip, r3
 8000dd2:	e76c      	b.n	8000cae <__aeabi_fmul+0x5e>
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	3b09      	subs	r3, #9
 8000dda:	25ff      	movs	r5, #255	; 0xff
 8000ddc:	469a      	mov	sl, r3
 8000dde:	e750      	b.n	8000c82 <__aeabi_fmul+0x32>
 8000de0:	0020      	movs	r0, r4
 8000de2:	f002 f8fd 	bl	8002fe0 <__clzsi2>
 8000de6:	2576      	movs	r5, #118	; 0x76
 8000de8:	1f43      	subs	r3, r0, #5
 8000dea:	409c      	lsls	r4, r3
 8000dec:	2300      	movs	r3, #0
 8000dee:	426d      	negs	r5, r5
 8000df0:	4699      	mov	r9, r3
 8000df2:	469a      	mov	sl, r3
 8000df4:	1a2d      	subs	r5, r5, r0
 8000df6:	e744      	b.n	8000c82 <__aeabi_fmul+0x32>
 8000df8:	4640      	mov	r0, r8
 8000dfa:	f002 f8f1 	bl	8002fe0 <__clzsi2>
 8000dfe:	4642      	mov	r2, r8
 8000e00:	1f43      	subs	r3, r0, #5
 8000e02:	409a      	lsls	r2, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	1a2d      	subs	r5, r5, r0
 8000e08:	4690      	mov	r8, r2
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	3d76      	subs	r5, #118	; 0x76
 8000e0e:	e74e      	b.n	8000cae <__aeabi_fmul+0x5e>
 8000e10:	2480      	movs	r4, #128	; 0x80
 8000e12:	2100      	movs	r1, #0
 8000e14:	20ff      	movs	r0, #255	; 0xff
 8000e16:	03e4      	lsls	r4, r4, #15
 8000e18:	e760      	b.n	8000cdc <__aeabi_fmul+0x8c>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	1a9b      	subs	r3, r3, r2
 8000e1e:	2b1b      	cmp	r3, #27
 8000e20:	dd00      	ble.n	8000e24 <__aeabi_fmul+0x1d4>
 8000e22:	e759      	b.n	8000cd8 <__aeabi_fmul+0x88>
 8000e24:	0022      	movs	r2, r4
 8000e26:	309e      	adds	r0, #158	; 0x9e
 8000e28:	40da      	lsrs	r2, r3
 8000e2a:	4084      	lsls	r4, r0
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	1e62      	subs	r2, r4, #1
 8000e30:	4194      	sbcs	r4, r2
 8000e32:	431c      	orrs	r4, r3
 8000e34:	0763      	lsls	r3, r4, #29
 8000e36:	d004      	beq.n	8000e42 <__aeabi_fmul+0x1f2>
 8000e38:	230f      	movs	r3, #15
 8000e3a:	4023      	ands	r3, r4
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_fmul+0x1f2>
 8000e40:	3404      	adds	r4, #4
 8000e42:	0163      	lsls	r3, r4, #5
 8000e44:	d51a      	bpl.n	8000e7c <__aeabi_fmul+0x22c>
 8000e46:	2001      	movs	r0, #1
 8000e48:	2400      	movs	r4, #0
 8000e4a:	e747      	b.n	8000cdc <__aeabi_fmul+0x8c>
 8000e4c:	2080      	movs	r0, #128	; 0x80
 8000e4e:	03c0      	lsls	r0, r0, #15
 8000e50:	4204      	tst	r4, r0
 8000e52:	d009      	beq.n	8000e68 <__aeabi_fmul+0x218>
 8000e54:	4643      	mov	r3, r8
 8000e56:	4203      	tst	r3, r0
 8000e58:	d106      	bne.n	8000e68 <__aeabi_fmul+0x218>
 8000e5a:	4644      	mov	r4, r8
 8000e5c:	4304      	orrs	r4, r0
 8000e5e:	0264      	lsls	r4, r4, #9
 8000e60:	0039      	movs	r1, r7
 8000e62:	20ff      	movs	r0, #255	; 0xff
 8000e64:	0a64      	lsrs	r4, r4, #9
 8000e66:	e739      	b.n	8000cdc <__aeabi_fmul+0x8c>
 8000e68:	2080      	movs	r0, #128	; 0x80
 8000e6a:	03c0      	lsls	r0, r0, #15
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	0264      	lsls	r4, r4, #9
 8000e70:	0031      	movs	r1, r6
 8000e72:	20ff      	movs	r0, #255	; 0xff
 8000e74:	0a64      	lsrs	r4, r4, #9
 8000e76:	e731      	b.n	8000cdc <__aeabi_fmul+0x8c>
 8000e78:	0028      	movs	r0, r5
 8000e7a:	e765      	b.n	8000d48 <__aeabi_fmul+0xf8>
 8000e7c:	01a4      	lsls	r4, r4, #6
 8000e7e:	2000      	movs	r0, #0
 8000e80:	0a64      	lsrs	r4, r4, #9
 8000e82:	e72b      	b.n	8000cdc <__aeabi_fmul+0x8c>
 8000e84:	2080      	movs	r0, #128	; 0x80
 8000e86:	03c0      	lsls	r0, r0, #15
 8000e88:	4304      	orrs	r4, r0
 8000e8a:	0264      	lsls	r4, r4, #9
 8000e8c:	20ff      	movs	r0, #255	; 0xff
 8000e8e:	0a64      	lsrs	r4, r4, #9
 8000e90:	e724      	b.n	8000cdc <__aeabi_fmul+0x8c>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	080100e8 	.word	0x080100e8
 8000e98:	f7ffffff 	.word	0xf7ffffff

08000e9c <__aeabi_fsub>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	46ce      	mov	lr, r9
 8000ea0:	4647      	mov	r7, r8
 8000ea2:	0243      	lsls	r3, r0, #9
 8000ea4:	0a5b      	lsrs	r3, r3, #9
 8000ea6:	024e      	lsls	r6, r1, #9
 8000ea8:	00da      	lsls	r2, r3, #3
 8000eaa:	4694      	mov	ip, r2
 8000eac:	0a72      	lsrs	r2, r6, #9
 8000eae:	4691      	mov	r9, r2
 8000eb0:	0045      	lsls	r5, r0, #1
 8000eb2:	004a      	lsls	r2, r1, #1
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	0e2d      	lsrs	r5, r5, #24
 8000eb8:	001f      	movs	r7, r3
 8000eba:	0fc4      	lsrs	r4, r0, #31
 8000ebc:	0e12      	lsrs	r2, r2, #24
 8000ebe:	0fc9      	lsrs	r1, r1, #31
 8000ec0:	09b6      	lsrs	r6, r6, #6
 8000ec2:	2aff      	cmp	r2, #255	; 0xff
 8000ec4:	d05b      	beq.n	8000f7e <__aeabi_fsub+0xe2>
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	4041      	eors	r1, r0
 8000eca:	428c      	cmp	r4, r1
 8000ecc:	d039      	beq.n	8000f42 <__aeabi_fsub+0xa6>
 8000ece:	1aa8      	subs	r0, r5, r2
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	dd5a      	ble.n	8000f8a <__aeabi_fsub+0xee>
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d06a      	beq.n	8000fae <__aeabi_fsub+0x112>
 8000ed8:	2dff      	cmp	r5, #255	; 0xff
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x42>
 8000edc:	e0d9      	b.n	8001092 <__aeabi_fsub+0x1f6>
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	04d2      	lsls	r2, r2, #19
 8000ee2:	4316      	orrs	r6, r2
 8000ee4:	281b      	cmp	r0, #27
 8000ee6:	dc00      	bgt.n	8000eea <__aeabi_fsub+0x4e>
 8000ee8:	e0e9      	b.n	80010be <__aeabi_fsub+0x222>
 8000eea:	2001      	movs	r0, #1
 8000eec:	4663      	mov	r3, ip
 8000eee:	1a18      	subs	r0, r3, r0
 8000ef0:	0143      	lsls	r3, r0, #5
 8000ef2:	d400      	bmi.n	8000ef6 <__aeabi_fsub+0x5a>
 8000ef4:	e0b4      	b.n	8001060 <__aeabi_fsub+0x1c4>
 8000ef6:	0180      	lsls	r0, r0, #6
 8000ef8:	0987      	lsrs	r7, r0, #6
 8000efa:	0038      	movs	r0, r7
 8000efc:	f002 f870 	bl	8002fe0 <__clzsi2>
 8000f00:	3805      	subs	r0, #5
 8000f02:	4087      	lsls	r7, r0
 8000f04:	4285      	cmp	r5, r0
 8000f06:	dc00      	bgt.n	8000f0a <__aeabi_fsub+0x6e>
 8000f08:	e0cc      	b.n	80010a4 <__aeabi_fsub+0x208>
 8000f0a:	1a2d      	subs	r5, r5, r0
 8000f0c:	48b5      	ldr	r0, [pc, #724]	; (80011e4 <__aeabi_fsub+0x348>)
 8000f0e:	4038      	ands	r0, r7
 8000f10:	0743      	lsls	r3, r0, #29
 8000f12:	d004      	beq.n	8000f1e <__aeabi_fsub+0x82>
 8000f14:	230f      	movs	r3, #15
 8000f16:	4003      	ands	r3, r0
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d000      	beq.n	8000f1e <__aeabi_fsub+0x82>
 8000f1c:	3004      	adds	r0, #4
 8000f1e:	0143      	lsls	r3, r0, #5
 8000f20:	d400      	bmi.n	8000f24 <__aeabi_fsub+0x88>
 8000f22:	e0a0      	b.n	8001066 <__aeabi_fsub+0x1ca>
 8000f24:	1c6a      	adds	r2, r5, #1
 8000f26:	2dfe      	cmp	r5, #254	; 0xfe
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x90>
 8000f2a:	e08d      	b.n	8001048 <__aeabi_fsub+0x1ac>
 8000f2c:	0180      	lsls	r0, r0, #6
 8000f2e:	0a47      	lsrs	r7, r0, #9
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	05d0      	lsls	r0, r2, #23
 8000f34:	4338      	orrs	r0, r7
 8000f36:	07e4      	lsls	r4, r4, #31
 8000f38:	4320      	orrs	r0, r4
 8000f3a:	bcc0      	pop	{r6, r7}
 8000f3c:	46b9      	mov	r9, r7
 8000f3e:	46b0      	mov	r8, r6
 8000f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f42:	1aa8      	subs	r0, r5, r2
 8000f44:	4680      	mov	r8, r0
 8000f46:	2800      	cmp	r0, #0
 8000f48:	dd45      	ble.n	8000fd6 <__aeabi_fsub+0x13a>
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	d070      	beq.n	8001030 <__aeabi_fsub+0x194>
 8000f4e:	2dff      	cmp	r5, #255	; 0xff
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0xb8>
 8000f52:	e09e      	b.n	8001092 <__aeabi_fsub+0x1f6>
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	04db      	lsls	r3, r3, #19
 8000f58:	431e      	orrs	r6, r3
 8000f5a:	4643      	mov	r3, r8
 8000f5c:	2b1b      	cmp	r3, #27
 8000f5e:	dc00      	bgt.n	8000f62 <__aeabi_fsub+0xc6>
 8000f60:	e0d2      	b.n	8001108 <__aeabi_fsub+0x26c>
 8000f62:	2001      	movs	r0, #1
 8000f64:	4460      	add	r0, ip
 8000f66:	0143      	lsls	r3, r0, #5
 8000f68:	d57a      	bpl.n	8001060 <__aeabi_fsub+0x1c4>
 8000f6a:	3501      	adds	r5, #1
 8000f6c:	2dff      	cmp	r5, #255	; 0xff
 8000f6e:	d06b      	beq.n	8001048 <__aeabi_fsub+0x1ac>
 8000f70:	2301      	movs	r3, #1
 8000f72:	4a9d      	ldr	r2, [pc, #628]	; (80011e8 <__aeabi_fsub+0x34c>)
 8000f74:	4003      	ands	r3, r0
 8000f76:	0840      	lsrs	r0, r0, #1
 8000f78:	4010      	ands	r0, r2
 8000f7a:	4318      	orrs	r0, r3
 8000f7c:	e7c8      	b.n	8000f10 <__aeabi_fsub+0x74>
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	d020      	beq.n	8000fc4 <__aeabi_fsub+0x128>
 8000f82:	428c      	cmp	r4, r1
 8000f84:	d023      	beq.n	8000fce <__aeabi_fsub+0x132>
 8000f86:	0028      	movs	r0, r5
 8000f88:	38ff      	subs	r0, #255	; 0xff
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d039      	beq.n	8001002 <__aeabi_fsub+0x166>
 8000f8e:	1b57      	subs	r7, r2, r5
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0xfa>
 8000f94:	e09d      	b.n	80010d2 <__aeabi_fsub+0x236>
 8000f96:	4663      	mov	r3, ip
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_fsub+0x102>
 8000f9c:	e0db      	b.n	8001156 <__aeabi_fsub+0x2ba>
 8000f9e:	1e7b      	subs	r3, r7, #1
 8000fa0:	2f01      	cmp	r7, #1
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x10a>
 8000fa4:	e10d      	b.n	80011c2 <__aeabi_fsub+0x326>
 8000fa6:	2fff      	cmp	r7, #255	; 0xff
 8000fa8:	d071      	beq.n	800108e <__aeabi_fsub+0x1f2>
 8000faa:	001f      	movs	r7, r3
 8000fac:	e098      	b.n	80010e0 <__aeabi_fsub+0x244>
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fsub+0x118>
 8000fb2:	e0a7      	b.n	8001104 <__aeabi_fsub+0x268>
 8000fb4:	1e42      	subs	r2, r0, #1
 8000fb6:	2801      	cmp	r0, #1
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_fsub+0x120>
 8000fba:	e0e6      	b.n	800118a <__aeabi_fsub+0x2ee>
 8000fbc:	28ff      	cmp	r0, #255	; 0xff
 8000fbe:	d068      	beq.n	8001092 <__aeabi_fsub+0x1f6>
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	e78f      	b.n	8000ee4 <__aeabi_fsub+0x48>
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	4041      	eors	r1, r0
 8000fc8:	42a1      	cmp	r1, r4
 8000fca:	d000      	beq.n	8000fce <__aeabi_fsub+0x132>
 8000fcc:	e77f      	b.n	8000ece <__aeabi_fsub+0x32>
 8000fce:	20ff      	movs	r0, #255	; 0xff
 8000fd0:	4240      	negs	r0, r0
 8000fd2:	4680      	mov	r8, r0
 8000fd4:	44a8      	add	r8, r5
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d038      	beq.n	800104e <__aeabi_fsub+0x1b2>
 8000fdc:	1b51      	subs	r1, r2, r5
 8000fde:	2d00      	cmp	r5, #0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_fsub+0x148>
 8000fe2:	e0ae      	b.n	8001142 <__aeabi_fsub+0x2a6>
 8000fe4:	2aff      	cmp	r2, #255	; 0xff
 8000fe6:	d100      	bne.n	8000fea <__aeabi_fsub+0x14e>
 8000fe8:	e0df      	b.n	80011aa <__aeabi_fsub+0x30e>
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	4660      	mov	r0, ip
 8000fee:	04db      	lsls	r3, r3, #19
 8000ff0:	4318      	orrs	r0, r3
 8000ff2:	4684      	mov	ip, r0
 8000ff4:	291b      	cmp	r1, #27
 8000ff6:	dc00      	bgt.n	8000ffa <__aeabi_fsub+0x15e>
 8000ff8:	e0d9      	b.n	80011ae <__aeabi_fsub+0x312>
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	0015      	movs	r5, r2
 8000ffe:	1980      	adds	r0, r0, r6
 8001000:	e7b1      	b.n	8000f66 <__aeabi_fsub+0xca>
 8001002:	20fe      	movs	r0, #254	; 0xfe
 8001004:	1c6a      	adds	r2, r5, #1
 8001006:	4210      	tst	r0, r2
 8001008:	d171      	bne.n	80010ee <__aeabi_fsub+0x252>
 800100a:	2d00      	cmp	r5, #0
 800100c:	d000      	beq.n	8001010 <__aeabi_fsub+0x174>
 800100e:	e0a6      	b.n	800115e <__aeabi_fsub+0x2c2>
 8001010:	4663      	mov	r3, ip
 8001012:	2b00      	cmp	r3, #0
 8001014:	d100      	bne.n	8001018 <__aeabi_fsub+0x17c>
 8001016:	e0d9      	b.n	80011cc <__aeabi_fsub+0x330>
 8001018:	2200      	movs	r2, #0
 800101a:	2e00      	cmp	r6, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0x184>
 800101e:	e788      	b.n	8000f32 <__aeabi_fsub+0x96>
 8001020:	1b98      	subs	r0, r3, r6
 8001022:	0143      	lsls	r3, r0, #5
 8001024:	d400      	bmi.n	8001028 <__aeabi_fsub+0x18c>
 8001026:	e0e1      	b.n	80011ec <__aeabi_fsub+0x350>
 8001028:	4663      	mov	r3, ip
 800102a:	000c      	movs	r4, r1
 800102c:	1af0      	subs	r0, r6, r3
 800102e:	e76f      	b.n	8000f10 <__aeabi_fsub+0x74>
 8001030:	2e00      	cmp	r6, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_fsub+0x19a>
 8001034:	e0b7      	b.n	80011a6 <__aeabi_fsub+0x30a>
 8001036:	0002      	movs	r2, r0
 8001038:	3a01      	subs	r2, #1
 800103a:	2801      	cmp	r0, #1
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x1a4>
 800103e:	e09c      	b.n	800117a <__aeabi_fsub+0x2de>
 8001040:	28ff      	cmp	r0, #255	; 0xff
 8001042:	d026      	beq.n	8001092 <__aeabi_fsub+0x1f6>
 8001044:	4690      	mov	r8, r2
 8001046:	e788      	b.n	8000f5a <__aeabi_fsub+0xbe>
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	2700      	movs	r7, #0
 800104c:	e771      	b.n	8000f32 <__aeabi_fsub+0x96>
 800104e:	20fe      	movs	r0, #254	; 0xfe
 8001050:	1c6a      	adds	r2, r5, #1
 8001052:	4210      	tst	r0, r2
 8001054:	d064      	beq.n	8001120 <__aeabi_fsub+0x284>
 8001056:	2aff      	cmp	r2, #255	; 0xff
 8001058:	d0f6      	beq.n	8001048 <__aeabi_fsub+0x1ac>
 800105a:	0015      	movs	r5, r2
 800105c:	4466      	add	r6, ip
 800105e:	0870      	lsrs	r0, r6, #1
 8001060:	0743      	lsls	r3, r0, #29
 8001062:	d000      	beq.n	8001066 <__aeabi_fsub+0x1ca>
 8001064:	e756      	b.n	8000f14 <__aeabi_fsub+0x78>
 8001066:	08c3      	lsrs	r3, r0, #3
 8001068:	2dff      	cmp	r5, #255	; 0xff
 800106a:	d012      	beq.n	8001092 <__aeabi_fsub+0x1f6>
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	0a5f      	lsrs	r7, r3, #9
 8001070:	b2ea      	uxtb	r2, r5
 8001072:	e75e      	b.n	8000f32 <__aeabi_fsub+0x96>
 8001074:	4662      	mov	r2, ip
 8001076:	2a00      	cmp	r2, #0
 8001078:	d100      	bne.n	800107c <__aeabi_fsub+0x1e0>
 800107a:	e096      	b.n	80011aa <__aeabi_fsub+0x30e>
 800107c:	2e00      	cmp	r6, #0
 800107e:	d008      	beq.n	8001092 <__aeabi_fsub+0x1f6>
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	03d2      	lsls	r2, r2, #15
 8001084:	4213      	tst	r3, r2
 8001086:	d004      	beq.n	8001092 <__aeabi_fsub+0x1f6>
 8001088:	4648      	mov	r0, r9
 800108a:	4210      	tst	r0, r2
 800108c:	d101      	bne.n	8001092 <__aeabi_fsub+0x1f6>
 800108e:	000c      	movs	r4, r1
 8001090:	464b      	mov	r3, r9
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0d8      	beq.n	8001048 <__aeabi_fsub+0x1ac>
 8001096:	2780      	movs	r7, #128	; 0x80
 8001098:	03ff      	lsls	r7, r7, #15
 800109a:	431f      	orrs	r7, r3
 800109c:	027f      	lsls	r7, r7, #9
 800109e:	22ff      	movs	r2, #255	; 0xff
 80010a0:	0a7f      	lsrs	r7, r7, #9
 80010a2:	e746      	b.n	8000f32 <__aeabi_fsub+0x96>
 80010a4:	2320      	movs	r3, #32
 80010a6:	003a      	movs	r2, r7
 80010a8:	1b45      	subs	r5, r0, r5
 80010aa:	0038      	movs	r0, r7
 80010ac:	3501      	adds	r5, #1
 80010ae:	40ea      	lsrs	r2, r5
 80010b0:	1b5d      	subs	r5, r3, r5
 80010b2:	40a8      	lsls	r0, r5
 80010b4:	1e43      	subs	r3, r0, #1
 80010b6:	4198      	sbcs	r0, r3
 80010b8:	2500      	movs	r5, #0
 80010ba:	4310      	orrs	r0, r2
 80010bc:	e728      	b.n	8000f10 <__aeabi_fsub+0x74>
 80010be:	2320      	movs	r3, #32
 80010c0:	1a1b      	subs	r3, r3, r0
 80010c2:	0032      	movs	r2, r6
 80010c4:	409e      	lsls	r6, r3
 80010c6:	40c2      	lsrs	r2, r0
 80010c8:	0030      	movs	r0, r6
 80010ca:	1e43      	subs	r3, r0, #1
 80010cc:	4198      	sbcs	r0, r3
 80010ce:	4310      	orrs	r0, r2
 80010d0:	e70c      	b.n	8000eec <__aeabi_fsub+0x50>
 80010d2:	2aff      	cmp	r2, #255	; 0xff
 80010d4:	d0db      	beq.n	800108e <__aeabi_fsub+0x1f2>
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4660      	mov	r0, ip
 80010da:	04db      	lsls	r3, r3, #19
 80010dc:	4318      	orrs	r0, r3
 80010de:	4684      	mov	ip, r0
 80010e0:	2f1b      	cmp	r7, #27
 80010e2:	dd56      	ble.n	8001192 <__aeabi_fsub+0x2f6>
 80010e4:	2001      	movs	r0, #1
 80010e6:	000c      	movs	r4, r1
 80010e8:	0015      	movs	r5, r2
 80010ea:	1a30      	subs	r0, r6, r0
 80010ec:	e700      	b.n	8000ef0 <__aeabi_fsub+0x54>
 80010ee:	4663      	mov	r3, ip
 80010f0:	1b9f      	subs	r7, r3, r6
 80010f2:	017b      	lsls	r3, r7, #5
 80010f4:	d43d      	bmi.n	8001172 <__aeabi_fsub+0x2d6>
 80010f6:	2f00      	cmp	r7, #0
 80010f8:	d000      	beq.n	80010fc <__aeabi_fsub+0x260>
 80010fa:	e6fe      	b.n	8000efa <__aeabi_fsub+0x5e>
 80010fc:	2400      	movs	r4, #0
 80010fe:	2200      	movs	r2, #0
 8001100:	2700      	movs	r7, #0
 8001102:	e716      	b.n	8000f32 <__aeabi_fsub+0x96>
 8001104:	0005      	movs	r5, r0
 8001106:	e7af      	b.n	8001068 <__aeabi_fsub+0x1cc>
 8001108:	0032      	movs	r2, r6
 800110a:	4643      	mov	r3, r8
 800110c:	4641      	mov	r1, r8
 800110e:	40da      	lsrs	r2, r3
 8001110:	2320      	movs	r3, #32
 8001112:	1a5b      	subs	r3, r3, r1
 8001114:	409e      	lsls	r6, r3
 8001116:	0030      	movs	r0, r6
 8001118:	1e43      	subs	r3, r0, #1
 800111a:	4198      	sbcs	r0, r3
 800111c:	4310      	orrs	r0, r2
 800111e:	e721      	b.n	8000f64 <__aeabi_fsub+0xc8>
 8001120:	2d00      	cmp	r5, #0
 8001122:	d1a7      	bne.n	8001074 <__aeabi_fsub+0x1d8>
 8001124:	4663      	mov	r3, ip
 8001126:	2b00      	cmp	r3, #0
 8001128:	d059      	beq.n	80011de <__aeabi_fsub+0x342>
 800112a:	2200      	movs	r2, #0
 800112c:	2e00      	cmp	r6, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x296>
 8001130:	e6ff      	b.n	8000f32 <__aeabi_fsub+0x96>
 8001132:	0030      	movs	r0, r6
 8001134:	4460      	add	r0, ip
 8001136:	0143      	lsls	r3, r0, #5
 8001138:	d592      	bpl.n	8001060 <__aeabi_fsub+0x1c4>
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <__aeabi_fsub+0x348>)
 800113c:	3501      	adds	r5, #1
 800113e:	4018      	ands	r0, r3
 8001140:	e78e      	b.n	8001060 <__aeabi_fsub+0x1c4>
 8001142:	4663      	mov	r3, ip
 8001144:	2b00      	cmp	r3, #0
 8001146:	d047      	beq.n	80011d8 <__aeabi_fsub+0x33c>
 8001148:	1e4b      	subs	r3, r1, #1
 800114a:	2901      	cmp	r1, #1
 800114c:	d015      	beq.n	800117a <__aeabi_fsub+0x2de>
 800114e:	29ff      	cmp	r1, #255	; 0xff
 8001150:	d02b      	beq.n	80011aa <__aeabi_fsub+0x30e>
 8001152:	0019      	movs	r1, r3
 8001154:	e74e      	b.n	8000ff4 <__aeabi_fsub+0x158>
 8001156:	000c      	movs	r4, r1
 8001158:	464b      	mov	r3, r9
 800115a:	003d      	movs	r5, r7
 800115c:	e784      	b.n	8001068 <__aeabi_fsub+0x1cc>
 800115e:	4662      	mov	r2, ip
 8001160:	2a00      	cmp	r2, #0
 8001162:	d18b      	bne.n	800107c <__aeabi_fsub+0x1e0>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d192      	bne.n	800108e <__aeabi_fsub+0x1f2>
 8001168:	2780      	movs	r7, #128	; 0x80
 800116a:	2400      	movs	r4, #0
 800116c:	22ff      	movs	r2, #255	; 0xff
 800116e:	03ff      	lsls	r7, r7, #15
 8001170:	e6df      	b.n	8000f32 <__aeabi_fsub+0x96>
 8001172:	4663      	mov	r3, ip
 8001174:	000c      	movs	r4, r1
 8001176:	1af7      	subs	r7, r6, r3
 8001178:	e6bf      	b.n	8000efa <__aeabi_fsub+0x5e>
 800117a:	0030      	movs	r0, r6
 800117c:	4460      	add	r0, ip
 800117e:	2501      	movs	r5, #1
 8001180:	0143      	lsls	r3, r0, #5
 8001182:	d400      	bmi.n	8001186 <__aeabi_fsub+0x2ea>
 8001184:	e76c      	b.n	8001060 <__aeabi_fsub+0x1c4>
 8001186:	2502      	movs	r5, #2
 8001188:	e6f2      	b.n	8000f70 <__aeabi_fsub+0xd4>
 800118a:	4663      	mov	r3, ip
 800118c:	2501      	movs	r5, #1
 800118e:	1b98      	subs	r0, r3, r6
 8001190:	e6ae      	b.n	8000ef0 <__aeabi_fsub+0x54>
 8001192:	2320      	movs	r3, #32
 8001194:	4664      	mov	r4, ip
 8001196:	4660      	mov	r0, ip
 8001198:	40fc      	lsrs	r4, r7
 800119a:	1bdf      	subs	r7, r3, r7
 800119c:	40b8      	lsls	r0, r7
 800119e:	1e43      	subs	r3, r0, #1
 80011a0:	4198      	sbcs	r0, r3
 80011a2:	4320      	orrs	r0, r4
 80011a4:	e79f      	b.n	80010e6 <__aeabi_fsub+0x24a>
 80011a6:	0005      	movs	r5, r0
 80011a8:	e75e      	b.n	8001068 <__aeabi_fsub+0x1cc>
 80011aa:	464b      	mov	r3, r9
 80011ac:	e771      	b.n	8001092 <__aeabi_fsub+0x1f6>
 80011ae:	2320      	movs	r3, #32
 80011b0:	4665      	mov	r5, ip
 80011b2:	4660      	mov	r0, ip
 80011b4:	40cd      	lsrs	r5, r1
 80011b6:	1a59      	subs	r1, r3, r1
 80011b8:	4088      	lsls	r0, r1
 80011ba:	1e43      	subs	r3, r0, #1
 80011bc:	4198      	sbcs	r0, r3
 80011be:	4328      	orrs	r0, r5
 80011c0:	e71c      	b.n	8000ffc <__aeabi_fsub+0x160>
 80011c2:	4663      	mov	r3, ip
 80011c4:	000c      	movs	r4, r1
 80011c6:	2501      	movs	r5, #1
 80011c8:	1af0      	subs	r0, r6, r3
 80011ca:	e691      	b.n	8000ef0 <__aeabi_fsub+0x54>
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	d095      	beq.n	80010fc <__aeabi_fsub+0x260>
 80011d0:	000c      	movs	r4, r1
 80011d2:	464f      	mov	r7, r9
 80011d4:	2200      	movs	r2, #0
 80011d6:	e6ac      	b.n	8000f32 <__aeabi_fsub+0x96>
 80011d8:	464b      	mov	r3, r9
 80011da:	000d      	movs	r5, r1
 80011dc:	e744      	b.n	8001068 <__aeabi_fsub+0x1cc>
 80011de:	464f      	mov	r7, r9
 80011e0:	2200      	movs	r2, #0
 80011e2:	e6a6      	b.n	8000f32 <__aeabi_fsub+0x96>
 80011e4:	fbffffff 	.word	0xfbffffff
 80011e8:	7dffffff 	.word	0x7dffffff
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d000      	beq.n	80011f2 <__aeabi_fsub+0x356>
 80011f0:	e736      	b.n	8001060 <__aeabi_fsub+0x1c4>
 80011f2:	2400      	movs	r4, #0
 80011f4:	2700      	movs	r7, #0
 80011f6:	e69c      	b.n	8000f32 <__aeabi_fsub+0x96>

080011f8 <__aeabi_fcmpun>:
 80011f8:	0243      	lsls	r3, r0, #9
 80011fa:	024a      	lsls	r2, r1, #9
 80011fc:	0040      	lsls	r0, r0, #1
 80011fe:	0049      	lsls	r1, r1, #1
 8001200:	0a5b      	lsrs	r3, r3, #9
 8001202:	0a52      	lsrs	r2, r2, #9
 8001204:	0e09      	lsrs	r1, r1, #24
 8001206:	0e00      	lsrs	r0, r0, #24
 8001208:	28ff      	cmp	r0, #255	; 0xff
 800120a:	d006      	beq.n	800121a <__aeabi_fcmpun+0x22>
 800120c:	2000      	movs	r0, #0
 800120e:	29ff      	cmp	r1, #255	; 0xff
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x20>
 8001212:	1e53      	subs	r3, r2, #1
 8001214:	419a      	sbcs	r2, r3
 8001216:	0010      	movs	r0, r2
 8001218:	4770      	bx	lr
 800121a:	38fe      	subs	r0, #254	; 0xfe
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1fb      	bne.n	8001218 <__aeabi_fcmpun+0x20>
 8001220:	e7f4      	b.n	800120c <__aeabi_fcmpun+0x14>
 8001222:	46c0      	nop			; (mov r8, r8)

08001224 <__aeabi_f2iz>:
 8001224:	0241      	lsls	r1, r0, #9
 8001226:	0042      	lsls	r2, r0, #1
 8001228:	0fc3      	lsrs	r3, r0, #31
 800122a:	0a49      	lsrs	r1, r1, #9
 800122c:	2000      	movs	r0, #0
 800122e:	0e12      	lsrs	r2, r2, #24
 8001230:	2a7e      	cmp	r2, #126	; 0x7e
 8001232:	dd03      	ble.n	800123c <__aeabi_f2iz+0x18>
 8001234:	2a9d      	cmp	r2, #157	; 0x9d
 8001236:	dd02      	ble.n	800123e <__aeabi_f2iz+0x1a>
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <__aeabi_f2iz+0x3c>)
 800123a:	1898      	adds	r0, r3, r2
 800123c:	4770      	bx	lr
 800123e:	2080      	movs	r0, #128	; 0x80
 8001240:	0400      	lsls	r0, r0, #16
 8001242:	4301      	orrs	r1, r0
 8001244:	2a95      	cmp	r2, #149	; 0x95
 8001246:	dc07      	bgt.n	8001258 <__aeabi_f2iz+0x34>
 8001248:	2096      	movs	r0, #150	; 0x96
 800124a:	1a82      	subs	r2, r0, r2
 800124c:	40d1      	lsrs	r1, r2
 800124e:	4248      	negs	r0, r1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f3      	bne.n	800123c <__aeabi_f2iz+0x18>
 8001254:	0008      	movs	r0, r1
 8001256:	e7f1      	b.n	800123c <__aeabi_f2iz+0x18>
 8001258:	3a96      	subs	r2, #150	; 0x96
 800125a:	4091      	lsls	r1, r2
 800125c:	e7f7      	b.n	800124e <__aeabi_f2iz+0x2a>
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	7fffffff 	.word	0x7fffffff

08001264 <__aeabi_i2f>:
 8001264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001266:	2800      	cmp	r0, #0
 8001268:	d013      	beq.n	8001292 <__aeabi_i2f+0x2e>
 800126a:	17c3      	asrs	r3, r0, #31
 800126c:	18c6      	adds	r6, r0, r3
 800126e:	405e      	eors	r6, r3
 8001270:	0fc4      	lsrs	r4, r0, #31
 8001272:	0030      	movs	r0, r6
 8001274:	f001 feb4 	bl	8002fe0 <__clzsi2>
 8001278:	239e      	movs	r3, #158	; 0x9e
 800127a:	0005      	movs	r5, r0
 800127c:	1a1b      	subs	r3, r3, r0
 800127e:	2b96      	cmp	r3, #150	; 0x96
 8001280:	dc0f      	bgt.n	80012a2 <__aeabi_i2f+0x3e>
 8001282:	2808      	cmp	r0, #8
 8001284:	dd01      	ble.n	800128a <__aeabi_i2f+0x26>
 8001286:	3d08      	subs	r5, #8
 8001288:	40ae      	lsls	r6, r5
 800128a:	0276      	lsls	r6, r6, #9
 800128c:	0a76      	lsrs	r6, r6, #9
 800128e:	b2d8      	uxtb	r0, r3
 8001290:	e002      	b.n	8001298 <__aeabi_i2f+0x34>
 8001292:	2400      	movs	r4, #0
 8001294:	2000      	movs	r0, #0
 8001296:	2600      	movs	r6, #0
 8001298:	05c0      	lsls	r0, r0, #23
 800129a:	4330      	orrs	r0, r6
 800129c:	07e4      	lsls	r4, r4, #31
 800129e:	4320      	orrs	r0, r4
 80012a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a2:	2b99      	cmp	r3, #153	; 0x99
 80012a4:	dd0c      	ble.n	80012c0 <__aeabi_i2f+0x5c>
 80012a6:	2205      	movs	r2, #5
 80012a8:	0031      	movs	r1, r6
 80012aa:	1a12      	subs	r2, r2, r0
 80012ac:	40d1      	lsrs	r1, r2
 80012ae:	000a      	movs	r2, r1
 80012b0:	0001      	movs	r1, r0
 80012b2:	0030      	movs	r0, r6
 80012b4:	311b      	adds	r1, #27
 80012b6:	4088      	lsls	r0, r1
 80012b8:	1e41      	subs	r1, r0, #1
 80012ba:	4188      	sbcs	r0, r1
 80012bc:	4302      	orrs	r2, r0
 80012be:	0016      	movs	r6, r2
 80012c0:	2d05      	cmp	r5, #5
 80012c2:	dc12      	bgt.n	80012ea <__aeabi_i2f+0x86>
 80012c4:	0031      	movs	r1, r6
 80012c6:	4f0d      	ldr	r7, [pc, #52]	; (80012fc <__aeabi_i2f+0x98>)
 80012c8:	4039      	ands	r1, r7
 80012ca:	0772      	lsls	r2, r6, #29
 80012cc:	d009      	beq.n	80012e2 <__aeabi_i2f+0x7e>
 80012ce:	200f      	movs	r0, #15
 80012d0:	4030      	ands	r0, r6
 80012d2:	2804      	cmp	r0, #4
 80012d4:	d005      	beq.n	80012e2 <__aeabi_i2f+0x7e>
 80012d6:	3104      	adds	r1, #4
 80012d8:	014a      	lsls	r2, r1, #5
 80012da:	d502      	bpl.n	80012e2 <__aeabi_i2f+0x7e>
 80012dc:	239f      	movs	r3, #159	; 0x9f
 80012de:	4039      	ands	r1, r7
 80012e0:	1b5b      	subs	r3, r3, r5
 80012e2:	0189      	lsls	r1, r1, #6
 80012e4:	0a4e      	lsrs	r6, r1, #9
 80012e6:	b2d8      	uxtb	r0, r3
 80012e8:	e7d6      	b.n	8001298 <__aeabi_i2f+0x34>
 80012ea:	1f6a      	subs	r2, r5, #5
 80012ec:	4096      	lsls	r6, r2
 80012ee:	0031      	movs	r1, r6
 80012f0:	4f02      	ldr	r7, [pc, #8]	; (80012fc <__aeabi_i2f+0x98>)
 80012f2:	4039      	ands	r1, r7
 80012f4:	0772      	lsls	r2, r6, #29
 80012f6:	d0f4      	beq.n	80012e2 <__aeabi_i2f+0x7e>
 80012f8:	e7e9      	b.n	80012ce <__aeabi_i2f+0x6a>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	fbffffff 	.word	0xfbffffff

08001300 <__aeabi_ui2f>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	1e05      	subs	r5, r0, #0
 8001304:	d00e      	beq.n	8001324 <__aeabi_ui2f+0x24>
 8001306:	f001 fe6b 	bl	8002fe0 <__clzsi2>
 800130a:	239e      	movs	r3, #158	; 0x9e
 800130c:	0004      	movs	r4, r0
 800130e:	1a1b      	subs	r3, r3, r0
 8001310:	2b96      	cmp	r3, #150	; 0x96
 8001312:	dc0c      	bgt.n	800132e <__aeabi_ui2f+0x2e>
 8001314:	2808      	cmp	r0, #8
 8001316:	dd01      	ble.n	800131c <__aeabi_ui2f+0x1c>
 8001318:	3c08      	subs	r4, #8
 800131a:	40a5      	lsls	r5, r4
 800131c:	026d      	lsls	r5, r5, #9
 800131e:	0a6d      	lsrs	r5, r5, #9
 8001320:	b2d8      	uxtb	r0, r3
 8001322:	e001      	b.n	8001328 <__aeabi_ui2f+0x28>
 8001324:	2000      	movs	r0, #0
 8001326:	2500      	movs	r5, #0
 8001328:	05c0      	lsls	r0, r0, #23
 800132a:	4328      	orrs	r0, r5
 800132c:	bd70      	pop	{r4, r5, r6, pc}
 800132e:	2b99      	cmp	r3, #153	; 0x99
 8001330:	dd09      	ble.n	8001346 <__aeabi_ui2f+0x46>
 8001332:	0002      	movs	r2, r0
 8001334:	0029      	movs	r1, r5
 8001336:	321b      	adds	r2, #27
 8001338:	4091      	lsls	r1, r2
 800133a:	1e4a      	subs	r2, r1, #1
 800133c:	4191      	sbcs	r1, r2
 800133e:	2205      	movs	r2, #5
 8001340:	1a12      	subs	r2, r2, r0
 8001342:	40d5      	lsrs	r5, r2
 8001344:	430d      	orrs	r5, r1
 8001346:	2c05      	cmp	r4, #5
 8001348:	dc12      	bgt.n	8001370 <__aeabi_ui2f+0x70>
 800134a:	0029      	movs	r1, r5
 800134c:	4e0c      	ldr	r6, [pc, #48]	; (8001380 <__aeabi_ui2f+0x80>)
 800134e:	4031      	ands	r1, r6
 8001350:	076a      	lsls	r2, r5, #29
 8001352:	d009      	beq.n	8001368 <__aeabi_ui2f+0x68>
 8001354:	200f      	movs	r0, #15
 8001356:	4028      	ands	r0, r5
 8001358:	2804      	cmp	r0, #4
 800135a:	d005      	beq.n	8001368 <__aeabi_ui2f+0x68>
 800135c:	3104      	adds	r1, #4
 800135e:	014a      	lsls	r2, r1, #5
 8001360:	d502      	bpl.n	8001368 <__aeabi_ui2f+0x68>
 8001362:	239f      	movs	r3, #159	; 0x9f
 8001364:	4031      	ands	r1, r6
 8001366:	1b1b      	subs	r3, r3, r4
 8001368:	0189      	lsls	r1, r1, #6
 800136a:	0a4d      	lsrs	r5, r1, #9
 800136c:	b2d8      	uxtb	r0, r3
 800136e:	e7db      	b.n	8001328 <__aeabi_ui2f+0x28>
 8001370:	1f62      	subs	r2, r4, #5
 8001372:	4095      	lsls	r5, r2
 8001374:	0029      	movs	r1, r5
 8001376:	4e02      	ldr	r6, [pc, #8]	; (8001380 <__aeabi_ui2f+0x80>)
 8001378:	4031      	ands	r1, r6
 800137a:	076a      	lsls	r2, r5, #29
 800137c:	d0f4      	beq.n	8001368 <__aeabi_ui2f+0x68>
 800137e:	e7e9      	b.n	8001354 <__aeabi_ui2f+0x54>
 8001380:	fbffffff 	.word	0xfbffffff

08001384 <__aeabi_dadd>:
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	464f      	mov	r7, r9
 8001388:	4646      	mov	r6, r8
 800138a:	46d6      	mov	lr, sl
 800138c:	000d      	movs	r5, r1
 800138e:	0004      	movs	r4, r0
 8001390:	b5c0      	push	{r6, r7, lr}
 8001392:	001f      	movs	r7, r3
 8001394:	0011      	movs	r1, r2
 8001396:	0328      	lsls	r0, r5, #12
 8001398:	0f62      	lsrs	r2, r4, #29
 800139a:	0a40      	lsrs	r0, r0, #9
 800139c:	4310      	orrs	r0, r2
 800139e:	007a      	lsls	r2, r7, #1
 80013a0:	0d52      	lsrs	r2, r2, #21
 80013a2:	00e3      	lsls	r3, r4, #3
 80013a4:	033c      	lsls	r4, r7, #12
 80013a6:	4691      	mov	r9, r2
 80013a8:	0a64      	lsrs	r4, r4, #9
 80013aa:	0ffa      	lsrs	r2, r7, #31
 80013ac:	0f4f      	lsrs	r7, r1, #29
 80013ae:	006e      	lsls	r6, r5, #1
 80013b0:	4327      	orrs	r7, r4
 80013b2:	4692      	mov	sl, r2
 80013b4:	46b8      	mov	r8, r7
 80013b6:	0d76      	lsrs	r6, r6, #21
 80013b8:	0fed      	lsrs	r5, r5, #31
 80013ba:	00c9      	lsls	r1, r1, #3
 80013bc:	4295      	cmp	r5, r2
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x3e>
 80013c0:	e099      	b.n	80014f6 <__aeabi_dadd+0x172>
 80013c2:	464c      	mov	r4, r9
 80013c4:	1b34      	subs	r4, r6, r4
 80013c6:	46a4      	mov	ip, r4
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	dc00      	bgt.n	80013ce <__aeabi_dadd+0x4a>
 80013cc:	e07c      	b.n	80014c8 <__aeabi_dadd+0x144>
 80013ce:	464a      	mov	r2, r9
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x52>
 80013d4:	e0b8      	b.n	8001548 <__aeabi_dadd+0x1c4>
 80013d6:	4ac5      	ldr	r2, [pc, #788]	; (80016ec <__aeabi_dadd+0x368>)
 80013d8:	4296      	cmp	r6, r2
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x5a>
 80013dc:	e11c      	b.n	8001618 <__aeabi_dadd+0x294>
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	003c      	movs	r4, r7
 80013e2:	0412      	lsls	r2, r2, #16
 80013e4:	4314      	orrs	r4, r2
 80013e6:	46a0      	mov	r8, r4
 80013e8:	4662      	mov	r2, ip
 80013ea:	2a38      	cmp	r2, #56	; 0x38
 80013ec:	dd00      	ble.n	80013f0 <__aeabi_dadd+0x6c>
 80013ee:	e161      	b.n	80016b4 <__aeabi_dadd+0x330>
 80013f0:	2a1f      	cmp	r2, #31
 80013f2:	dd00      	ble.n	80013f6 <__aeabi_dadd+0x72>
 80013f4:	e1cc      	b.n	8001790 <__aeabi_dadd+0x40c>
 80013f6:	4664      	mov	r4, ip
 80013f8:	2220      	movs	r2, #32
 80013fa:	1b12      	subs	r2, r2, r4
 80013fc:	4644      	mov	r4, r8
 80013fe:	4094      	lsls	r4, r2
 8001400:	000f      	movs	r7, r1
 8001402:	46a1      	mov	r9, r4
 8001404:	4664      	mov	r4, ip
 8001406:	4091      	lsls	r1, r2
 8001408:	40e7      	lsrs	r7, r4
 800140a:	464c      	mov	r4, r9
 800140c:	1e4a      	subs	r2, r1, #1
 800140e:	4191      	sbcs	r1, r2
 8001410:	433c      	orrs	r4, r7
 8001412:	4642      	mov	r2, r8
 8001414:	4321      	orrs	r1, r4
 8001416:	4664      	mov	r4, ip
 8001418:	40e2      	lsrs	r2, r4
 800141a:	1a80      	subs	r0, r0, r2
 800141c:	1a5c      	subs	r4, r3, r1
 800141e:	42a3      	cmp	r3, r4
 8001420:	419b      	sbcs	r3, r3
 8001422:	425f      	negs	r7, r3
 8001424:	1bc7      	subs	r7, r0, r7
 8001426:	023b      	lsls	r3, r7, #8
 8001428:	d400      	bmi.n	800142c <__aeabi_dadd+0xa8>
 800142a:	e0d0      	b.n	80015ce <__aeabi_dadd+0x24a>
 800142c:	027f      	lsls	r7, r7, #9
 800142e:	0a7f      	lsrs	r7, r7, #9
 8001430:	2f00      	cmp	r7, #0
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0xb2>
 8001434:	e0ff      	b.n	8001636 <__aeabi_dadd+0x2b2>
 8001436:	0038      	movs	r0, r7
 8001438:	f001 fdd2 	bl	8002fe0 <__clzsi2>
 800143c:	0001      	movs	r1, r0
 800143e:	3908      	subs	r1, #8
 8001440:	2320      	movs	r3, #32
 8001442:	0022      	movs	r2, r4
 8001444:	1a5b      	subs	r3, r3, r1
 8001446:	408f      	lsls	r7, r1
 8001448:	40da      	lsrs	r2, r3
 800144a:	408c      	lsls	r4, r1
 800144c:	4317      	orrs	r7, r2
 800144e:	42b1      	cmp	r1, r6
 8001450:	da00      	bge.n	8001454 <__aeabi_dadd+0xd0>
 8001452:	e0ff      	b.n	8001654 <__aeabi_dadd+0x2d0>
 8001454:	1b89      	subs	r1, r1, r6
 8001456:	1c4b      	adds	r3, r1, #1
 8001458:	2b1f      	cmp	r3, #31
 800145a:	dd00      	ble.n	800145e <__aeabi_dadd+0xda>
 800145c:	e0a8      	b.n	80015b0 <__aeabi_dadd+0x22c>
 800145e:	2220      	movs	r2, #32
 8001460:	0039      	movs	r1, r7
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	0020      	movs	r0, r4
 8001466:	4094      	lsls	r4, r2
 8001468:	4091      	lsls	r1, r2
 800146a:	40d8      	lsrs	r0, r3
 800146c:	1e62      	subs	r2, r4, #1
 800146e:	4194      	sbcs	r4, r2
 8001470:	40df      	lsrs	r7, r3
 8001472:	2600      	movs	r6, #0
 8001474:	4301      	orrs	r1, r0
 8001476:	430c      	orrs	r4, r1
 8001478:	0763      	lsls	r3, r4, #29
 800147a:	d009      	beq.n	8001490 <__aeabi_dadd+0x10c>
 800147c:	230f      	movs	r3, #15
 800147e:	4023      	ands	r3, r4
 8001480:	2b04      	cmp	r3, #4
 8001482:	d005      	beq.n	8001490 <__aeabi_dadd+0x10c>
 8001484:	1d23      	adds	r3, r4, #4
 8001486:	42a3      	cmp	r3, r4
 8001488:	41a4      	sbcs	r4, r4
 800148a:	4264      	negs	r4, r4
 800148c:	193f      	adds	r7, r7, r4
 800148e:	001c      	movs	r4, r3
 8001490:	023b      	lsls	r3, r7, #8
 8001492:	d400      	bmi.n	8001496 <__aeabi_dadd+0x112>
 8001494:	e09e      	b.n	80015d4 <__aeabi_dadd+0x250>
 8001496:	4b95      	ldr	r3, [pc, #596]	; (80016ec <__aeabi_dadd+0x368>)
 8001498:	3601      	adds	r6, #1
 800149a:	429e      	cmp	r6, r3
 800149c:	d100      	bne.n	80014a0 <__aeabi_dadd+0x11c>
 800149e:	e0b7      	b.n	8001610 <__aeabi_dadd+0x28c>
 80014a0:	4a93      	ldr	r2, [pc, #588]	; (80016f0 <__aeabi_dadd+0x36c>)
 80014a2:	08e4      	lsrs	r4, r4, #3
 80014a4:	4017      	ands	r7, r2
 80014a6:	077b      	lsls	r3, r7, #29
 80014a8:	0571      	lsls	r1, r6, #21
 80014aa:	027f      	lsls	r7, r7, #9
 80014ac:	4323      	orrs	r3, r4
 80014ae:	0b3f      	lsrs	r7, r7, #12
 80014b0:	0d4a      	lsrs	r2, r1, #21
 80014b2:	0512      	lsls	r2, r2, #20
 80014b4:	433a      	orrs	r2, r7
 80014b6:	07ed      	lsls	r5, r5, #31
 80014b8:	432a      	orrs	r2, r5
 80014ba:	0018      	movs	r0, r3
 80014bc:	0011      	movs	r1, r2
 80014be:	bce0      	pop	{r5, r6, r7}
 80014c0:	46ba      	mov	sl, r7
 80014c2:	46b1      	mov	r9, r6
 80014c4:	46a8      	mov	r8, r5
 80014c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d04b      	beq.n	8001564 <__aeabi_dadd+0x1e0>
 80014cc:	464c      	mov	r4, r9
 80014ce:	1ba4      	subs	r4, r4, r6
 80014d0:	46a4      	mov	ip, r4
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dadd+0x154>
 80014d6:	e123      	b.n	8001720 <__aeabi_dadd+0x39c>
 80014d8:	0004      	movs	r4, r0
 80014da:	431c      	orrs	r4, r3
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dadd+0x15c>
 80014de:	e1af      	b.n	8001840 <__aeabi_dadd+0x4bc>
 80014e0:	4662      	mov	r2, ip
 80014e2:	1e54      	subs	r4, r2, #1
 80014e4:	2a01      	cmp	r2, #1
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x166>
 80014e8:	e215      	b.n	8001916 <__aeabi_dadd+0x592>
 80014ea:	4d80      	ldr	r5, [pc, #512]	; (80016ec <__aeabi_dadd+0x368>)
 80014ec:	45ac      	cmp	ip, r5
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x16e>
 80014f0:	e1c8      	b.n	8001884 <__aeabi_dadd+0x500>
 80014f2:	46a4      	mov	ip, r4
 80014f4:	e11b      	b.n	800172e <__aeabi_dadd+0x3aa>
 80014f6:	464a      	mov	r2, r9
 80014f8:	1ab2      	subs	r2, r6, r2
 80014fa:	4694      	mov	ip, r2
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	dc00      	bgt.n	8001502 <__aeabi_dadd+0x17e>
 8001500:	e0ac      	b.n	800165c <__aeabi_dadd+0x2d8>
 8001502:	464a      	mov	r2, r9
 8001504:	2a00      	cmp	r2, #0
 8001506:	d043      	beq.n	8001590 <__aeabi_dadd+0x20c>
 8001508:	4a78      	ldr	r2, [pc, #480]	; (80016ec <__aeabi_dadd+0x368>)
 800150a:	4296      	cmp	r6, r2
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x18c>
 800150e:	e1af      	b.n	8001870 <__aeabi_dadd+0x4ec>
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	003c      	movs	r4, r7
 8001514:	0412      	lsls	r2, r2, #16
 8001516:	4314      	orrs	r4, r2
 8001518:	46a0      	mov	r8, r4
 800151a:	4662      	mov	r2, ip
 800151c:	2a38      	cmp	r2, #56	; 0x38
 800151e:	dc67      	bgt.n	80015f0 <__aeabi_dadd+0x26c>
 8001520:	2a1f      	cmp	r2, #31
 8001522:	dc00      	bgt.n	8001526 <__aeabi_dadd+0x1a2>
 8001524:	e15f      	b.n	80017e6 <__aeabi_dadd+0x462>
 8001526:	4647      	mov	r7, r8
 8001528:	3a20      	subs	r2, #32
 800152a:	40d7      	lsrs	r7, r2
 800152c:	4662      	mov	r2, ip
 800152e:	2a20      	cmp	r2, #32
 8001530:	d005      	beq.n	800153e <__aeabi_dadd+0x1ba>
 8001532:	4664      	mov	r4, ip
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	1b12      	subs	r2, r2, r4
 8001538:	4644      	mov	r4, r8
 800153a:	4094      	lsls	r4, r2
 800153c:	4321      	orrs	r1, r4
 800153e:	1e4a      	subs	r2, r1, #1
 8001540:	4191      	sbcs	r1, r2
 8001542:	000c      	movs	r4, r1
 8001544:	433c      	orrs	r4, r7
 8001546:	e057      	b.n	80015f8 <__aeabi_dadd+0x274>
 8001548:	003a      	movs	r2, r7
 800154a:	430a      	orrs	r2, r1
 800154c:	d100      	bne.n	8001550 <__aeabi_dadd+0x1cc>
 800154e:	e105      	b.n	800175c <__aeabi_dadd+0x3d8>
 8001550:	0022      	movs	r2, r4
 8001552:	3a01      	subs	r2, #1
 8001554:	2c01      	cmp	r4, #1
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x1d6>
 8001558:	e182      	b.n	8001860 <__aeabi_dadd+0x4dc>
 800155a:	4c64      	ldr	r4, [pc, #400]	; (80016ec <__aeabi_dadd+0x368>)
 800155c:	45a4      	cmp	ip, r4
 800155e:	d05b      	beq.n	8001618 <__aeabi_dadd+0x294>
 8001560:	4694      	mov	ip, r2
 8001562:	e741      	b.n	80013e8 <__aeabi_dadd+0x64>
 8001564:	4c63      	ldr	r4, [pc, #396]	; (80016f4 <__aeabi_dadd+0x370>)
 8001566:	1c77      	adds	r7, r6, #1
 8001568:	4227      	tst	r7, r4
 800156a:	d000      	beq.n	800156e <__aeabi_dadd+0x1ea>
 800156c:	e0c4      	b.n	80016f8 <__aeabi_dadd+0x374>
 800156e:	0004      	movs	r4, r0
 8001570:	431c      	orrs	r4, r3
 8001572:	2e00      	cmp	r6, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_dadd+0x1f4>
 8001576:	e169      	b.n	800184c <__aeabi_dadd+0x4c8>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x1fa>
 800157c:	e1bf      	b.n	80018fe <__aeabi_dadd+0x57a>
 800157e:	4644      	mov	r4, r8
 8001580:	430c      	orrs	r4, r1
 8001582:	d000      	beq.n	8001586 <__aeabi_dadd+0x202>
 8001584:	e1d0      	b.n	8001928 <__aeabi_dadd+0x5a4>
 8001586:	0742      	lsls	r2, r0, #29
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	4313      	orrs	r3, r2
 800158c:	08c0      	lsrs	r0, r0, #3
 800158e:	e029      	b.n	80015e4 <__aeabi_dadd+0x260>
 8001590:	003a      	movs	r2, r7
 8001592:	430a      	orrs	r2, r1
 8001594:	d100      	bne.n	8001598 <__aeabi_dadd+0x214>
 8001596:	e170      	b.n	800187a <__aeabi_dadd+0x4f6>
 8001598:	4662      	mov	r2, ip
 800159a:	4664      	mov	r4, ip
 800159c:	3a01      	subs	r2, #1
 800159e:	2c01      	cmp	r4, #1
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x220>
 80015a2:	e0e0      	b.n	8001766 <__aeabi_dadd+0x3e2>
 80015a4:	4c51      	ldr	r4, [pc, #324]	; (80016ec <__aeabi_dadd+0x368>)
 80015a6:	45a4      	cmp	ip, r4
 80015a8:	d100      	bne.n	80015ac <__aeabi_dadd+0x228>
 80015aa:	e161      	b.n	8001870 <__aeabi_dadd+0x4ec>
 80015ac:	4694      	mov	ip, r2
 80015ae:	e7b4      	b.n	800151a <__aeabi_dadd+0x196>
 80015b0:	003a      	movs	r2, r7
 80015b2:	391f      	subs	r1, #31
 80015b4:	40ca      	lsrs	r2, r1
 80015b6:	0011      	movs	r1, r2
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d003      	beq.n	80015c4 <__aeabi_dadd+0x240>
 80015bc:	2240      	movs	r2, #64	; 0x40
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	409f      	lsls	r7, r3
 80015c2:	433c      	orrs	r4, r7
 80015c4:	1e63      	subs	r3, r4, #1
 80015c6:	419c      	sbcs	r4, r3
 80015c8:	2700      	movs	r7, #0
 80015ca:	2600      	movs	r6, #0
 80015cc:	430c      	orrs	r4, r1
 80015ce:	0763      	lsls	r3, r4, #29
 80015d0:	d000      	beq.n	80015d4 <__aeabi_dadd+0x250>
 80015d2:	e753      	b.n	800147c <__aeabi_dadd+0xf8>
 80015d4:	46b4      	mov	ip, r6
 80015d6:	08e4      	lsrs	r4, r4, #3
 80015d8:	077b      	lsls	r3, r7, #29
 80015da:	4323      	orrs	r3, r4
 80015dc:	08f8      	lsrs	r0, r7, #3
 80015de:	4a43      	ldr	r2, [pc, #268]	; (80016ec <__aeabi_dadd+0x368>)
 80015e0:	4594      	cmp	ip, r2
 80015e2:	d01d      	beq.n	8001620 <__aeabi_dadd+0x29c>
 80015e4:	4662      	mov	r2, ip
 80015e6:	0307      	lsls	r7, r0, #12
 80015e8:	0552      	lsls	r2, r2, #21
 80015ea:	0b3f      	lsrs	r7, r7, #12
 80015ec:	0d52      	lsrs	r2, r2, #21
 80015ee:	e760      	b.n	80014b2 <__aeabi_dadd+0x12e>
 80015f0:	4644      	mov	r4, r8
 80015f2:	430c      	orrs	r4, r1
 80015f4:	1e62      	subs	r2, r4, #1
 80015f6:	4194      	sbcs	r4, r2
 80015f8:	18e4      	adds	r4, r4, r3
 80015fa:	429c      	cmp	r4, r3
 80015fc:	419b      	sbcs	r3, r3
 80015fe:	425f      	negs	r7, r3
 8001600:	183f      	adds	r7, r7, r0
 8001602:	023b      	lsls	r3, r7, #8
 8001604:	d5e3      	bpl.n	80015ce <__aeabi_dadd+0x24a>
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <__aeabi_dadd+0x368>)
 8001608:	3601      	adds	r6, #1
 800160a:	429e      	cmp	r6, r3
 800160c:	d000      	beq.n	8001610 <__aeabi_dadd+0x28c>
 800160e:	e0b5      	b.n	800177c <__aeabi_dadd+0x3f8>
 8001610:	0032      	movs	r2, r6
 8001612:	2700      	movs	r7, #0
 8001614:	2300      	movs	r3, #0
 8001616:	e74c      	b.n	80014b2 <__aeabi_dadd+0x12e>
 8001618:	0742      	lsls	r2, r0, #29
 800161a:	08db      	lsrs	r3, r3, #3
 800161c:	4313      	orrs	r3, r2
 800161e:	08c0      	lsrs	r0, r0, #3
 8001620:	001a      	movs	r2, r3
 8001622:	4302      	orrs	r2, r0
 8001624:	d100      	bne.n	8001628 <__aeabi_dadd+0x2a4>
 8001626:	e1e1      	b.n	80019ec <__aeabi_dadd+0x668>
 8001628:	2780      	movs	r7, #128	; 0x80
 800162a:	033f      	lsls	r7, r7, #12
 800162c:	4307      	orrs	r7, r0
 800162e:	033f      	lsls	r7, r7, #12
 8001630:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <__aeabi_dadd+0x368>)
 8001632:	0b3f      	lsrs	r7, r7, #12
 8001634:	e73d      	b.n	80014b2 <__aeabi_dadd+0x12e>
 8001636:	0020      	movs	r0, r4
 8001638:	f001 fcd2 	bl	8002fe0 <__clzsi2>
 800163c:	0001      	movs	r1, r0
 800163e:	3118      	adds	r1, #24
 8001640:	291f      	cmp	r1, #31
 8001642:	dc00      	bgt.n	8001646 <__aeabi_dadd+0x2c2>
 8001644:	e6fc      	b.n	8001440 <__aeabi_dadd+0xbc>
 8001646:	3808      	subs	r0, #8
 8001648:	4084      	lsls	r4, r0
 800164a:	0027      	movs	r7, r4
 800164c:	2400      	movs	r4, #0
 800164e:	42b1      	cmp	r1, r6
 8001650:	db00      	blt.n	8001654 <__aeabi_dadd+0x2d0>
 8001652:	e6ff      	b.n	8001454 <__aeabi_dadd+0xd0>
 8001654:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <__aeabi_dadd+0x36c>)
 8001656:	1a76      	subs	r6, r6, r1
 8001658:	4017      	ands	r7, r2
 800165a:	e70d      	b.n	8001478 <__aeabi_dadd+0xf4>
 800165c:	2a00      	cmp	r2, #0
 800165e:	d02f      	beq.n	80016c0 <__aeabi_dadd+0x33c>
 8001660:	464a      	mov	r2, r9
 8001662:	1b92      	subs	r2, r2, r6
 8001664:	4694      	mov	ip, r2
 8001666:	2e00      	cmp	r6, #0
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x2e8>
 800166a:	e0ad      	b.n	80017c8 <__aeabi_dadd+0x444>
 800166c:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <__aeabi_dadd+0x368>)
 800166e:	4591      	cmp	r9, r2
 8001670:	d100      	bne.n	8001674 <__aeabi_dadd+0x2f0>
 8001672:	e10f      	b.n	8001894 <__aeabi_dadd+0x510>
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	0412      	lsls	r2, r2, #16
 8001678:	4310      	orrs	r0, r2
 800167a:	4662      	mov	r2, ip
 800167c:	2a38      	cmp	r2, #56	; 0x38
 800167e:	dd00      	ble.n	8001682 <__aeabi_dadd+0x2fe>
 8001680:	e10f      	b.n	80018a2 <__aeabi_dadd+0x51e>
 8001682:	2a1f      	cmp	r2, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dadd+0x304>
 8001686:	e180      	b.n	800198a <__aeabi_dadd+0x606>
 8001688:	4664      	mov	r4, ip
 800168a:	2220      	movs	r2, #32
 800168c:	001e      	movs	r6, r3
 800168e:	1b12      	subs	r2, r2, r4
 8001690:	4667      	mov	r7, ip
 8001692:	0004      	movs	r4, r0
 8001694:	4093      	lsls	r3, r2
 8001696:	4094      	lsls	r4, r2
 8001698:	40fe      	lsrs	r6, r7
 800169a:	1e5a      	subs	r2, r3, #1
 800169c:	4193      	sbcs	r3, r2
 800169e:	40f8      	lsrs	r0, r7
 80016a0:	4334      	orrs	r4, r6
 80016a2:	431c      	orrs	r4, r3
 80016a4:	4480      	add	r8, r0
 80016a6:	1864      	adds	r4, r4, r1
 80016a8:	428c      	cmp	r4, r1
 80016aa:	41bf      	sbcs	r7, r7
 80016ac:	427f      	negs	r7, r7
 80016ae:	464e      	mov	r6, r9
 80016b0:	4447      	add	r7, r8
 80016b2:	e7a6      	b.n	8001602 <__aeabi_dadd+0x27e>
 80016b4:	4642      	mov	r2, r8
 80016b6:	430a      	orrs	r2, r1
 80016b8:	0011      	movs	r1, r2
 80016ba:	1e4a      	subs	r2, r1, #1
 80016bc:	4191      	sbcs	r1, r2
 80016be:	e6ad      	b.n	800141c <__aeabi_dadd+0x98>
 80016c0:	4c0c      	ldr	r4, [pc, #48]	; (80016f4 <__aeabi_dadd+0x370>)
 80016c2:	1c72      	adds	r2, r6, #1
 80016c4:	4222      	tst	r2, r4
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x346>
 80016c8:	e0a1      	b.n	800180e <__aeabi_dadd+0x48a>
 80016ca:	0002      	movs	r2, r0
 80016cc:	431a      	orrs	r2, r3
 80016ce:	2e00      	cmp	r6, #0
 80016d0:	d000      	beq.n	80016d4 <__aeabi_dadd+0x350>
 80016d2:	e0fa      	b.n	80018ca <__aeabi_dadd+0x546>
 80016d4:	2a00      	cmp	r2, #0
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x356>
 80016d8:	e145      	b.n	8001966 <__aeabi_dadd+0x5e2>
 80016da:	003a      	movs	r2, r7
 80016dc:	430a      	orrs	r2, r1
 80016de:	d000      	beq.n	80016e2 <__aeabi_dadd+0x35e>
 80016e0:	e146      	b.n	8001970 <__aeabi_dadd+0x5ec>
 80016e2:	0742      	lsls	r2, r0, #29
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	08c0      	lsrs	r0, r0, #3
 80016ea:	e77b      	b.n	80015e4 <__aeabi_dadd+0x260>
 80016ec:	000007ff 	.word	0x000007ff
 80016f0:	ff7fffff 	.word	0xff7fffff
 80016f4:	000007fe 	.word	0x000007fe
 80016f8:	4647      	mov	r7, r8
 80016fa:	1a5c      	subs	r4, r3, r1
 80016fc:	1bc2      	subs	r2, r0, r7
 80016fe:	42a3      	cmp	r3, r4
 8001700:	41bf      	sbcs	r7, r7
 8001702:	427f      	negs	r7, r7
 8001704:	46b9      	mov	r9, r7
 8001706:	0017      	movs	r7, r2
 8001708:	464a      	mov	r2, r9
 800170a:	1abf      	subs	r7, r7, r2
 800170c:	023a      	lsls	r2, r7, #8
 800170e:	d500      	bpl.n	8001712 <__aeabi_dadd+0x38e>
 8001710:	e08d      	b.n	800182e <__aeabi_dadd+0x4aa>
 8001712:	0023      	movs	r3, r4
 8001714:	433b      	orrs	r3, r7
 8001716:	d000      	beq.n	800171a <__aeabi_dadd+0x396>
 8001718:	e68a      	b.n	8001430 <__aeabi_dadd+0xac>
 800171a:	2000      	movs	r0, #0
 800171c:	2500      	movs	r5, #0
 800171e:	e761      	b.n	80015e4 <__aeabi_dadd+0x260>
 8001720:	4cb4      	ldr	r4, [pc, #720]	; (80019f4 <__aeabi_dadd+0x670>)
 8001722:	45a1      	cmp	r9, r4
 8001724:	d100      	bne.n	8001728 <__aeabi_dadd+0x3a4>
 8001726:	e0ad      	b.n	8001884 <__aeabi_dadd+0x500>
 8001728:	2480      	movs	r4, #128	; 0x80
 800172a:	0424      	lsls	r4, r4, #16
 800172c:	4320      	orrs	r0, r4
 800172e:	4664      	mov	r4, ip
 8001730:	2c38      	cmp	r4, #56	; 0x38
 8001732:	dc3d      	bgt.n	80017b0 <__aeabi_dadd+0x42c>
 8001734:	4662      	mov	r2, ip
 8001736:	2c1f      	cmp	r4, #31
 8001738:	dd00      	ble.n	800173c <__aeabi_dadd+0x3b8>
 800173a:	e0b7      	b.n	80018ac <__aeabi_dadd+0x528>
 800173c:	2520      	movs	r5, #32
 800173e:	001e      	movs	r6, r3
 8001740:	1b2d      	subs	r5, r5, r4
 8001742:	0004      	movs	r4, r0
 8001744:	40ab      	lsls	r3, r5
 8001746:	40ac      	lsls	r4, r5
 8001748:	40d6      	lsrs	r6, r2
 800174a:	40d0      	lsrs	r0, r2
 800174c:	4642      	mov	r2, r8
 800174e:	1e5d      	subs	r5, r3, #1
 8001750:	41ab      	sbcs	r3, r5
 8001752:	4334      	orrs	r4, r6
 8001754:	1a12      	subs	r2, r2, r0
 8001756:	4690      	mov	r8, r2
 8001758:	4323      	orrs	r3, r4
 800175a:	e02c      	b.n	80017b6 <__aeabi_dadd+0x432>
 800175c:	0742      	lsls	r2, r0, #29
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	4313      	orrs	r3, r2
 8001762:	08c0      	lsrs	r0, r0, #3
 8001764:	e73b      	b.n	80015de <__aeabi_dadd+0x25a>
 8001766:	185c      	adds	r4, r3, r1
 8001768:	429c      	cmp	r4, r3
 800176a:	419b      	sbcs	r3, r3
 800176c:	4440      	add	r0, r8
 800176e:	425b      	negs	r3, r3
 8001770:	18c7      	adds	r7, r0, r3
 8001772:	2601      	movs	r6, #1
 8001774:	023b      	lsls	r3, r7, #8
 8001776:	d400      	bmi.n	800177a <__aeabi_dadd+0x3f6>
 8001778:	e729      	b.n	80015ce <__aeabi_dadd+0x24a>
 800177a:	2602      	movs	r6, #2
 800177c:	4a9e      	ldr	r2, [pc, #632]	; (80019f8 <__aeabi_dadd+0x674>)
 800177e:	0863      	lsrs	r3, r4, #1
 8001780:	4017      	ands	r7, r2
 8001782:	2201      	movs	r2, #1
 8001784:	4014      	ands	r4, r2
 8001786:	431c      	orrs	r4, r3
 8001788:	07fb      	lsls	r3, r7, #31
 800178a:	431c      	orrs	r4, r3
 800178c:	087f      	lsrs	r7, r7, #1
 800178e:	e673      	b.n	8001478 <__aeabi_dadd+0xf4>
 8001790:	4644      	mov	r4, r8
 8001792:	3a20      	subs	r2, #32
 8001794:	40d4      	lsrs	r4, r2
 8001796:	4662      	mov	r2, ip
 8001798:	2a20      	cmp	r2, #32
 800179a:	d005      	beq.n	80017a8 <__aeabi_dadd+0x424>
 800179c:	4667      	mov	r7, ip
 800179e:	2240      	movs	r2, #64	; 0x40
 80017a0:	1bd2      	subs	r2, r2, r7
 80017a2:	4647      	mov	r7, r8
 80017a4:	4097      	lsls	r7, r2
 80017a6:	4339      	orrs	r1, r7
 80017a8:	1e4a      	subs	r2, r1, #1
 80017aa:	4191      	sbcs	r1, r2
 80017ac:	4321      	orrs	r1, r4
 80017ae:	e635      	b.n	800141c <__aeabi_dadd+0x98>
 80017b0:	4303      	orrs	r3, r0
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	4183      	sbcs	r3, r0
 80017b6:	1acc      	subs	r4, r1, r3
 80017b8:	42a1      	cmp	r1, r4
 80017ba:	41bf      	sbcs	r7, r7
 80017bc:	4643      	mov	r3, r8
 80017be:	427f      	negs	r7, r7
 80017c0:	4655      	mov	r5, sl
 80017c2:	464e      	mov	r6, r9
 80017c4:	1bdf      	subs	r7, r3, r7
 80017c6:	e62e      	b.n	8001426 <__aeabi_dadd+0xa2>
 80017c8:	0002      	movs	r2, r0
 80017ca:	431a      	orrs	r2, r3
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dadd+0x44c>
 80017ce:	e0bd      	b.n	800194c <__aeabi_dadd+0x5c8>
 80017d0:	4662      	mov	r2, ip
 80017d2:	4664      	mov	r4, ip
 80017d4:	3a01      	subs	r2, #1
 80017d6:	2c01      	cmp	r4, #1
 80017d8:	d100      	bne.n	80017dc <__aeabi_dadd+0x458>
 80017da:	e0e5      	b.n	80019a8 <__aeabi_dadd+0x624>
 80017dc:	4c85      	ldr	r4, [pc, #532]	; (80019f4 <__aeabi_dadd+0x670>)
 80017de:	45a4      	cmp	ip, r4
 80017e0:	d058      	beq.n	8001894 <__aeabi_dadd+0x510>
 80017e2:	4694      	mov	ip, r2
 80017e4:	e749      	b.n	800167a <__aeabi_dadd+0x2f6>
 80017e6:	4664      	mov	r4, ip
 80017e8:	2220      	movs	r2, #32
 80017ea:	1b12      	subs	r2, r2, r4
 80017ec:	4644      	mov	r4, r8
 80017ee:	4094      	lsls	r4, r2
 80017f0:	000f      	movs	r7, r1
 80017f2:	46a1      	mov	r9, r4
 80017f4:	4664      	mov	r4, ip
 80017f6:	4091      	lsls	r1, r2
 80017f8:	40e7      	lsrs	r7, r4
 80017fa:	464c      	mov	r4, r9
 80017fc:	1e4a      	subs	r2, r1, #1
 80017fe:	4191      	sbcs	r1, r2
 8001800:	433c      	orrs	r4, r7
 8001802:	4642      	mov	r2, r8
 8001804:	430c      	orrs	r4, r1
 8001806:	4661      	mov	r1, ip
 8001808:	40ca      	lsrs	r2, r1
 800180a:	1880      	adds	r0, r0, r2
 800180c:	e6f4      	b.n	80015f8 <__aeabi_dadd+0x274>
 800180e:	4c79      	ldr	r4, [pc, #484]	; (80019f4 <__aeabi_dadd+0x670>)
 8001810:	42a2      	cmp	r2, r4
 8001812:	d100      	bne.n	8001816 <__aeabi_dadd+0x492>
 8001814:	e6fd      	b.n	8001612 <__aeabi_dadd+0x28e>
 8001816:	1859      	adds	r1, r3, r1
 8001818:	4299      	cmp	r1, r3
 800181a:	419b      	sbcs	r3, r3
 800181c:	4440      	add	r0, r8
 800181e:	425f      	negs	r7, r3
 8001820:	19c7      	adds	r7, r0, r7
 8001822:	07fc      	lsls	r4, r7, #31
 8001824:	0849      	lsrs	r1, r1, #1
 8001826:	0016      	movs	r6, r2
 8001828:	430c      	orrs	r4, r1
 800182a:	087f      	lsrs	r7, r7, #1
 800182c:	e6cf      	b.n	80015ce <__aeabi_dadd+0x24a>
 800182e:	1acc      	subs	r4, r1, r3
 8001830:	42a1      	cmp	r1, r4
 8001832:	41bf      	sbcs	r7, r7
 8001834:	4643      	mov	r3, r8
 8001836:	427f      	negs	r7, r7
 8001838:	1a18      	subs	r0, r3, r0
 800183a:	4655      	mov	r5, sl
 800183c:	1bc7      	subs	r7, r0, r7
 800183e:	e5f7      	b.n	8001430 <__aeabi_dadd+0xac>
 8001840:	08c9      	lsrs	r1, r1, #3
 8001842:	077b      	lsls	r3, r7, #29
 8001844:	4655      	mov	r5, sl
 8001846:	430b      	orrs	r3, r1
 8001848:	08f8      	lsrs	r0, r7, #3
 800184a:	e6c8      	b.n	80015de <__aeabi_dadd+0x25a>
 800184c:	2c00      	cmp	r4, #0
 800184e:	d000      	beq.n	8001852 <__aeabi_dadd+0x4ce>
 8001850:	e081      	b.n	8001956 <__aeabi_dadd+0x5d2>
 8001852:	4643      	mov	r3, r8
 8001854:	430b      	orrs	r3, r1
 8001856:	d115      	bne.n	8001884 <__aeabi_dadd+0x500>
 8001858:	2080      	movs	r0, #128	; 0x80
 800185a:	2500      	movs	r5, #0
 800185c:	0300      	lsls	r0, r0, #12
 800185e:	e6e3      	b.n	8001628 <__aeabi_dadd+0x2a4>
 8001860:	1a5c      	subs	r4, r3, r1
 8001862:	42a3      	cmp	r3, r4
 8001864:	419b      	sbcs	r3, r3
 8001866:	1bc7      	subs	r7, r0, r7
 8001868:	425b      	negs	r3, r3
 800186a:	2601      	movs	r6, #1
 800186c:	1aff      	subs	r7, r7, r3
 800186e:	e5da      	b.n	8001426 <__aeabi_dadd+0xa2>
 8001870:	0742      	lsls	r2, r0, #29
 8001872:	08db      	lsrs	r3, r3, #3
 8001874:	4313      	orrs	r3, r2
 8001876:	08c0      	lsrs	r0, r0, #3
 8001878:	e6d2      	b.n	8001620 <__aeabi_dadd+0x29c>
 800187a:	0742      	lsls	r2, r0, #29
 800187c:	08db      	lsrs	r3, r3, #3
 800187e:	4313      	orrs	r3, r2
 8001880:	08c0      	lsrs	r0, r0, #3
 8001882:	e6ac      	b.n	80015de <__aeabi_dadd+0x25a>
 8001884:	4643      	mov	r3, r8
 8001886:	4642      	mov	r2, r8
 8001888:	08c9      	lsrs	r1, r1, #3
 800188a:	075b      	lsls	r3, r3, #29
 800188c:	4655      	mov	r5, sl
 800188e:	430b      	orrs	r3, r1
 8001890:	08d0      	lsrs	r0, r2, #3
 8001892:	e6c5      	b.n	8001620 <__aeabi_dadd+0x29c>
 8001894:	4643      	mov	r3, r8
 8001896:	4642      	mov	r2, r8
 8001898:	075b      	lsls	r3, r3, #29
 800189a:	08c9      	lsrs	r1, r1, #3
 800189c:	430b      	orrs	r3, r1
 800189e:	08d0      	lsrs	r0, r2, #3
 80018a0:	e6be      	b.n	8001620 <__aeabi_dadd+0x29c>
 80018a2:	4303      	orrs	r3, r0
 80018a4:	001c      	movs	r4, r3
 80018a6:	1e63      	subs	r3, r4, #1
 80018a8:	419c      	sbcs	r4, r3
 80018aa:	e6fc      	b.n	80016a6 <__aeabi_dadd+0x322>
 80018ac:	0002      	movs	r2, r0
 80018ae:	3c20      	subs	r4, #32
 80018b0:	40e2      	lsrs	r2, r4
 80018b2:	0014      	movs	r4, r2
 80018b4:	4662      	mov	r2, ip
 80018b6:	2a20      	cmp	r2, #32
 80018b8:	d003      	beq.n	80018c2 <__aeabi_dadd+0x53e>
 80018ba:	2540      	movs	r5, #64	; 0x40
 80018bc:	1aad      	subs	r5, r5, r2
 80018be:	40a8      	lsls	r0, r5
 80018c0:	4303      	orrs	r3, r0
 80018c2:	1e58      	subs	r0, r3, #1
 80018c4:	4183      	sbcs	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	e775      	b.n	80017b6 <__aeabi_dadd+0x432>
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	d0e2      	beq.n	8001894 <__aeabi_dadd+0x510>
 80018ce:	003a      	movs	r2, r7
 80018d0:	430a      	orrs	r2, r1
 80018d2:	d0cd      	beq.n	8001870 <__aeabi_dadd+0x4ec>
 80018d4:	0742      	lsls	r2, r0, #29
 80018d6:	08db      	lsrs	r3, r3, #3
 80018d8:	4313      	orrs	r3, r2
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	08c0      	lsrs	r0, r0, #3
 80018de:	0312      	lsls	r2, r2, #12
 80018e0:	4210      	tst	r0, r2
 80018e2:	d006      	beq.n	80018f2 <__aeabi_dadd+0x56e>
 80018e4:	08fc      	lsrs	r4, r7, #3
 80018e6:	4214      	tst	r4, r2
 80018e8:	d103      	bne.n	80018f2 <__aeabi_dadd+0x56e>
 80018ea:	0020      	movs	r0, r4
 80018ec:	08cb      	lsrs	r3, r1, #3
 80018ee:	077a      	lsls	r2, r7, #29
 80018f0:	4313      	orrs	r3, r2
 80018f2:	0f5a      	lsrs	r2, r3, #29
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	0752      	lsls	r2, r2, #29
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	e690      	b.n	8001620 <__aeabi_dadd+0x29c>
 80018fe:	4643      	mov	r3, r8
 8001900:	430b      	orrs	r3, r1
 8001902:	d100      	bne.n	8001906 <__aeabi_dadd+0x582>
 8001904:	e709      	b.n	800171a <__aeabi_dadd+0x396>
 8001906:	4643      	mov	r3, r8
 8001908:	4642      	mov	r2, r8
 800190a:	08c9      	lsrs	r1, r1, #3
 800190c:	075b      	lsls	r3, r3, #29
 800190e:	4655      	mov	r5, sl
 8001910:	430b      	orrs	r3, r1
 8001912:	08d0      	lsrs	r0, r2, #3
 8001914:	e666      	b.n	80015e4 <__aeabi_dadd+0x260>
 8001916:	1acc      	subs	r4, r1, r3
 8001918:	42a1      	cmp	r1, r4
 800191a:	4189      	sbcs	r1, r1
 800191c:	1a3f      	subs	r7, r7, r0
 800191e:	4249      	negs	r1, r1
 8001920:	4655      	mov	r5, sl
 8001922:	2601      	movs	r6, #1
 8001924:	1a7f      	subs	r7, r7, r1
 8001926:	e57e      	b.n	8001426 <__aeabi_dadd+0xa2>
 8001928:	4642      	mov	r2, r8
 800192a:	1a5c      	subs	r4, r3, r1
 800192c:	1a87      	subs	r7, r0, r2
 800192e:	42a3      	cmp	r3, r4
 8001930:	4192      	sbcs	r2, r2
 8001932:	4252      	negs	r2, r2
 8001934:	1abf      	subs	r7, r7, r2
 8001936:	023a      	lsls	r2, r7, #8
 8001938:	d53d      	bpl.n	80019b6 <__aeabi_dadd+0x632>
 800193a:	1acc      	subs	r4, r1, r3
 800193c:	42a1      	cmp	r1, r4
 800193e:	4189      	sbcs	r1, r1
 8001940:	4643      	mov	r3, r8
 8001942:	4249      	negs	r1, r1
 8001944:	1a1f      	subs	r7, r3, r0
 8001946:	4655      	mov	r5, sl
 8001948:	1a7f      	subs	r7, r7, r1
 800194a:	e595      	b.n	8001478 <__aeabi_dadd+0xf4>
 800194c:	077b      	lsls	r3, r7, #29
 800194e:	08c9      	lsrs	r1, r1, #3
 8001950:	430b      	orrs	r3, r1
 8001952:	08f8      	lsrs	r0, r7, #3
 8001954:	e643      	b.n	80015de <__aeabi_dadd+0x25a>
 8001956:	4644      	mov	r4, r8
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	430c      	orrs	r4, r1
 800195c:	d130      	bne.n	80019c0 <__aeabi_dadd+0x63c>
 800195e:	0742      	lsls	r2, r0, #29
 8001960:	4313      	orrs	r3, r2
 8001962:	08c0      	lsrs	r0, r0, #3
 8001964:	e65c      	b.n	8001620 <__aeabi_dadd+0x29c>
 8001966:	077b      	lsls	r3, r7, #29
 8001968:	08c9      	lsrs	r1, r1, #3
 800196a:	430b      	orrs	r3, r1
 800196c:	08f8      	lsrs	r0, r7, #3
 800196e:	e639      	b.n	80015e4 <__aeabi_dadd+0x260>
 8001970:	185c      	adds	r4, r3, r1
 8001972:	429c      	cmp	r4, r3
 8001974:	419b      	sbcs	r3, r3
 8001976:	4440      	add	r0, r8
 8001978:	425b      	negs	r3, r3
 800197a:	18c7      	adds	r7, r0, r3
 800197c:	023b      	lsls	r3, r7, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x5fe>
 8001980:	e625      	b.n	80015ce <__aeabi_dadd+0x24a>
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <__aeabi_dadd+0x674>)
 8001984:	2601      	movs	r6, #1
 8001986:	401f      	ands	r7, r3
 8001988:	e621      	b.n	80015ce <__aeabi_dadd+0x24a>
 800198a:	0004      	movs	r4, r0
 800198c:	3a20      	subs	r2, #32
 800198e:	40d4      	lsrs	r4, r2
 8001990:	4662      	mov	r2, ip
 8001992:	2a20      	cmp	r2, #32
 8001994:	d004      	beq.n	80019a0 <__aeabi_dadd+0x61c>
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	4666      	mov	r6, ip
 800199a:	1b92      	subs	r2, r2, r6
 800199c:	4090      	lsls	r0, r2
 800199e:	4303      	orrs	r3, r0
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	4193      	sbcs	r3, r2
 80019a4:	431c      	orrs	r4, r3
 80019a6:	e67e      	b.n	80016a6 <__aeabi_dadd+0x322>
 80019a8:	185c      	adds	r4, r3, r1
 80019aa:	428c      	cmp	r4, r1
 80019ac:	4189      	sbcs	r1, r1
 80019ae:	4440      	add	r0, r8
 80019b0:	4249      	negs	r1, r1
 80019b2:	1847      	adds	r7, r0, r1
 80019b4:	e6dd      	b.n	8001772 <__aeabi_dadd+0x3ee>
 80019b6:	0023      	movs	r3, r4
 80019b8:	433b      	orrs	r3, r7
 80019ba:	d100      	bne.n	80019be <__aeabi_dadd+0x63a>
 80019bc:	e6ad      	b.n	800171a <__aeabi_dadd+0x396>
 80019be:	e606      	b.n	80015ce <__aeabi_dadd+0x24a>
 80019c0:	0744      	lsls	r4, r0, #29
 80019c2:	4323      	orrs	r3, r4
 80019c4:	2480      	movs	r4, #128	; 0x80
 80019c6:	08c0      	lsrs	r0, r0, #3
 80019c8:	0324      	lsls	r4, r4, #12
 80019ca:	4220      	tst	r0, r4
 80019cc:	d008      	beq.n	80019e0 <__aeabi_dadd+0x65c>
 80019ce:	4642      	mov	r2, r8
 80019d0:	08d6      	lsrs	r6, r2, #3
 80019d2:	4226      	tst	r6, r4
 80019d4:	d104      	bne.n	80019e0 <__aeabi_dadd+0x65c>
 80019d6:	4655      	mov	r5, sl
 80019d8:	0030      	movs	r0, r6
 80019da:	08cb      	lsrs	r3, r1, #3
 80019dc:	0751      	lsls	r1, r2, #29
 80019de:	430b      	orrs	r3, r1
 80019e0:	0f5a      	lsrs	r2, r3, #29
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	0752      	lsls	r2, r2, #29
 80019e8:	4313      	orrs	r3, r2
 80019ea:	e619      	b.n	8001620 <__aeabi_dadd+0x29c>
 80019ec:	2300      	movs	r3, #0
 80019ee:	4a01      	ldr	r2, [pc, #4]	; (80019f4 <__aeabi_dadd+0x670>)
 80019f0:	001f      	movs	r7, r3
 80019f2:	e55e      	b.n	80014b2 <__aeabi_dadd+0x12e>
 80019f4:	000007ff 	.word	0x000007ff
 80019f8:	ff7fffff 	.word	0xff7fffff

080019fc <__aeabi_ddiv>:
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	4657      	mov	r7, sl
 8001a00:	464e      	mov	r6, r9
 8001a02:	4645      	mov	r5, r8
 8001a04:	46de      	mov	lr, fp
 8001a06:	b5e0      	push	{r5, r6, r7, lr}
 8001a08:	4681      	mov	r9, r0
 8001a0a:	0005      	movs	r5, r0
 8001a0c:	030c      	lsls	r4, r1, #12
 8001a0e:	0048      	lsls	r0, r1, #1
 8001a10:	4692      	mov	sl, r2
 8001a12:	001f      	movs	r7, r3
 8001a14:	b085      	sub	sp, #20
 8001a16:	0b24      	lsrs	r4, r4, #12
 8001a18:	0d40      	lsrs	r0, r0, #21
 8001a1a:	0fce      	lsrs	r6, r1, #31
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_ddiv+0x26>
 8001a20:	e156      	b.n	8001cd0 <__aeabi_ddiv+0x2d4>
 8001a22:	4bd4      	ldr	r3, [pc, #848]	; (8001d74 <__aeabi_ddiv+0x378>)
 8001a24:	4298      	cmp	r0, r3
 8001a26:	d100      	bne.n	8001a2a <__aeabi_ddiv+0x2e>
 8001a28:	e172      	b.n	8001d10 <__aeabi_ddiv+0x314>
 8001a2a:	0f6b      	lsrs	r3, r5, #29
 8001a2c:	00e4      	lsls	r4, r4, #3
 8001a2e:	431c      	orrs	r4, r3
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	4323      	orrs	r3, r4
 8001a36:	4698      	mov	r8, r3
 8001a38:	4bcf      	ldr	r3, [pc, #828]	; (8001d78 <__aeabi_ddiv+0x37c>)
 8001a3a:	00ed      	lsls	r5, r5, #3
 8001a3c:	469b      	mov	fp, r3
 8001a3e:	2300      	movs	r3, #0
 8001a40:	4699      	mov	r9, r3
 8001a42:	4483      	add	fp, r0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	033c      	lsls	r4, r7, #12
 8001a48:	007b      	lsls	r3, r7, #1
 8001a4a:	4650      	mov	r0, sl
 8001a4c:	0b24      	lsrs	r4, r4, #12
 8001a4e:	0d5b      	lsrs	r3, r3, #21
 8001a50:	0fff      	lsrs	r7, r7, #31
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d100      	bne.n	8001a58 <__aeabi_ddiv+0x5c>
 8001a56:	e11f      	b.n	8001c98 <__aeabi_ddiv+0x29c>
 8001a58:	4ac6      	ldr	r2, [pc, #792]	; (8001d74 <__aeabi_ddiv+0x378>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_ddiv+0x64>
 8001a5e:	e162      	b.n	8001d26 <__aeabi_ddiv+0x32a>
 8001a60:	49c5      	ldr	r1, [pc, #788]	; (8001d78 <__aeabi_ddiv+0x37c>)
 8001a62:	0f42      	lsrs	r2, r0, #29
 8001a64:	468c      	mov	ip, r1
 8001a66:	00e4      	lsls	r4, r4, #3
 8001a68:	4659      	mov	r1, fp
 8001a6a:	4314      	orrs	r4, r2
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	4463      	add	r3, ip
 8001a70:	0412      	lsls	r2, r2, #16
 8001a72:	1acb      	subs	r3, r1, r3
 8001a74:	4314      	orrs	r4, r2
 8001a76:	469b      	mov	fp, r3
 8001a78:	00c2      	lsls	r2, r0, #3
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	0033      	movs	r3, r6
 8001a7e:	407b      	eors	r3, r7
 8001a80:	469a      	mov	sl, r3
 8001a82:	464b      	mov	r3, r9
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d827      	bhi.n	8001ad8 <__aeabi_ddiv+0xdc>
 8001a88:	49bc      	ldr	r1, [pc, #752]	; (8001d7c <__aeabi_ddiv+0x380>)
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	58cb      	ldr	r3, [r1, r3]
 8001a8e:	469f      	mov	pc, r3
 8001a90:	46b2      	mov	sl, r6
 8001a92:	9b00      	ldr	r3, [sp, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d016      	beq.n	8001ac6 <__aeabi_ddiv+0xca>
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_ddiv+0xa2>
 8001a9c:	e28e      	b.n	8001fbc <__aeabi_ddiv+0x5c0>
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d000      	beq.n	8001aa4 <__aeabi_ddiv+0xa8>
 8001aa2:	e0d9      	b.n	8001c58 <__aeabi_ddiv+0x25c>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2400      	movs	r4, #0
 8001aa8:	2500      	movs	r5, #0
 8001aaa:	4652      	mov	r2, sl
 8001aac:	051b      	lsls	r3, r3, #20
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	07d2      	lsls	r2, r2, #31
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	0028      	movs	r0, r5
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	b005      	add	sp, #20
 8001aba:	bcf0      	pop	{r4, r5, r6, r7}
 8001abc:	46bb      	mov	fp, r7
 8001abe:	46b2      	mov	sl, r6
 8001ac0:	46a9      	mov	r9, r5
 8001ac2:	46a0      	mov	r8, r4
 8001ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac6:	2400      	movs	r4, #0
 8001ac8:	2500      	movs	r5, #0
 8001aca:	4baa      	ldr	r3, [pc, #680]	; (8001d74 <__aeabi_ddiv+0x378>)
 8001acc:	e7ed      	b.n	8001aaa <__aeabi_ddiv+0xae>
 8001ace:	46ba      	mov	sl, r7
 8001ad0:	46a0      	mov	r8, r4
 8001ad2:	0015      	movs	r5, r2
 8001ad4:	9000      	str	r0, [sp, #0]
 8001ad6:	e7dc      	b.n	8001a92 <__aeabi_ddiv+0x96>
 8001ad8:	4544      	cmp	r4, r8
 8001ada:	d200      	bcs.n	8001ade <__aeabi_ddiv+0xe2>
 8001adc:	e1c7      	b.n	8001e6e <__aeabi_ddiv+0x472>
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_ddiv+0xe6>
 8001ae0:	e1c2      	b.n	8001e68 <__aeabi_ddiv+0x46c>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	469c      	mov	ip, r3
 8001ae8:	002e      	movs	r6, r5
 8001aea:	4640      	mov	r0, r8
 8001aec:	2500      	movs	r5, #0
 8001aee:	44e3      	add	fp, ip
 8001af0:	0223      	lsls	r3, r4, #8
 8001af2:	0e14      	lsrs	r4, r2, #24
 8001af4:	431c      	orrs	r4, r3
 8001af6:	0c1b      	lsrs	r3, r3, #16
 8001af8:	4699      	mov	r9, r3
 8001afa:	0423      	lsls	r3, r4, #16
 8001afc:	0c1f      	lsrs	r7, r3, #16
 8001afe:	0212      	lsls	r2, r2, #8
 8001b00:	4649      	mov	r1, r9
 8001b02:	9200      	str	r2, [sp, #0]
 8001b04:	9701      	str	r7, [sp, #4]
 8001b06:	f7fe fb9f 	bl	8000248 <__aeabi_uidivmod>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	437a      	muls	r2, r7
 8001b0e:	040b      	lsls	r3, r1, #16
 8001b10:	0c31      	lsrs	r1, r6, #16
 8001b12:	4680      	mov	r8, r0
 8001b14:	4319      	orrs	r1, r3
 8001b16:	428a      	cmp	r2, r1
 8001b18:	d907      	bls.n	8001b2a <__aeabi_ddiv+0x12e>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	425b      	negs	r3, r3
 8001b1e:	469c      	mov	ip, r3
 8001b20:	1909      	adds	r1, r1, r4
 8001b22:	44e0      	add	r8, ip
 8001b24:	428c      	cmp	r4, r1
 8001b26:	d800      	bhi.n	8001b2a <__aeabi_ddiv+0x12e>
 8001b28:	e207      	b.n	8001f3a <__aeabi_ddiv+0x53e>
 8001b2a:	1a88      	subs	r0, r1, r2
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	f7fe fb8b 	bl	8000248 <__aeabi_uidivmod>
 8001b32:	0409      	lsls	r1, r1, #16
 8001b34:	468c      	mov	ip, r1
 8001b36:	0431      	lsls	r1, r6, #16
 8001b38:	4666      	mov	r6, ip
 8001b3a:	9a01      	ldr	r2, [sp, #4]
 8001b3c:	0c09      	lsrs	r1, r1, #16
 8001b3e:	4342      	muls	r2, r0
 8001b40:	0003      	movs	r3, r0
 8001b42:	4331      	orrs	r1, r6
 8001b44:	428a      	cmp	r2, r1
 8001b46:	d904      	bls.n	8001b52 <__aeabi_ddiv+0x156>
 8001b48:	1909      	adds	r1, r1, r4
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	428c      	cmp	r4, r1
 8001b4e:	d800      	bhi.n	8001b52 <__aeabi_ddiv+0x156>
 8001b50:	e1ed      	b.n	8001f2e <__aeabi_ddiv+0x532>
 8001b52:	1a88      	subs	r0, r1, r2
 8001b54:	4642      	mov	r2, r8
 8001b56:	0412      	lsls	r2, r2, #16
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	4690      	mov	r8, r2
 8001b5c:	4641      	mov	r1, r8
 8001b5e:	9b00      	ldr	r3, [sp, #0]
 8001b60:	040e      	lsls	r6, r1, #16
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	001f      	movs	r7, r3
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	9b00      	ldr	r3, [sp, #0]
 8001b6a:	0c36      	lsrs	r6, r6, #16
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	0c19      	lsrs	r1, r3, #16
 8001b70:	000b      	movs	r3, r1
 8001b72:	4373      	muls	r3, r6
 8001b74:	0c12      	lsrs	r2, r2, #16
 8001b76:	437e      	muls	r6, r7
 8001b78:	9103      	str	r1, [sp, #12]
 8001b7a:	4351      	muls	r1, r2
 8001b7c:	437a      	muls	r2, r7
 8001b7e:	0c1f      	lsrs	r7, r3, #16
 8001b80:	46bc      	mov	ip, r7
 8001b82:	1876      	adds	r6, r6, r1
 8001b84:	4466      	add	r6, ip
 8001b86:	42b1      	cmp	r1, r6
 8001b88:	d903      	bls.n	8001b92 <__aeabi_ddiv+0x196>
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	0249      	lsls	r1, r1, #9
 8001b8e:	468c      	mov	ip, r1
 8001b90:	4462      	add	r2, ip
 8001b92:	0c31      	lsrs	r1, r6, #16
 8001b94:	188a      	adds	r2, r1, r2
 8001b96:	0431      	lsls	r1, r6, #16
 8001b98:	041e      	lsls	r6, r3, #16
 8001b9a:	0c36      	lsrs	r6, r6, #16
 8001b9c:	198e      	adds	r6, r1, r6
 8001b9e:	4290      	cmp	r0, r2
 8001ba0:	d302      	bcc.n	8001ba8 <__aeabi_ddiv+0x1ac>
 8001ba2:	d112      	bne.n	8001bca <__aeabi_ddiv+0x1ce>
 8001ba4:	42b5      	cmp	r5, r6
 8001ba6:	d210      	bcs.n	8001bca <__aeabi_ddiv+0x1ce>
 8001ba8:	4643      	mov	r3, r8
 8001baa:	1e59      	subs	r1, r3, #1
 8001bac:	9b00      	ldr	r3, [sp, #0]
 8001bae:	469c      	mov	ip, r3
 8001bb0:	4465      	add	r5, ip
 8001bb2:	001f      	movs	r7, r3
 8001bb4:	429d      	cmp	r5, r3
 8001bb6:	419b      	sbcs	r3, r3
 8001bb8:	425b      	negs	r3, r3
 8001bba:	191b      	adds	r3, r3, r4
 8001bbc:	18c0      	adds	r0, r0, r3
 8001bbe:	4284      	cmp	r4, r0
 8001bc0:	d200      	bcs.n	8001bc4 <__aeabi_ddiv+0x1c8>
 8001bc2:	e1a0      	b.n	8001f06 <__aeabi_ddiv+0x50a>
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_ddiv+0x1cc>
 8001bc6:	e19b      	b.n	8001f00 <__aeabi_ddiv+0x504>
 8001bc8:	4688      	mov	r8, r1
 8001bca:	1bae      	subs	r6, r5, r6
 8001bcc:	42b5      	cmp	r5, r6
 8001bce:	41ad      	sbcs	r5, r5
 8001bd0:	1a80      	subs	r0, r0, r2
 8001bd2:	426d      	negs	r5, r5
 8001bd4:	1b40      	subs	r0, r0, r5
 8001bd6:	4284      	cmp	r4, r0
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_ddiv+0x1e0>
 8001bda:	e1d5      	b.n	8001f88 <__aeabi_ddiv+0x58c>
 8001bdc:	4649      	mov	r1, r9
 8001bde:	f7fe fb33 	bl	8000248 <__aeabi_uidivmod>
 8001be2:	9a01      	ldr	r2, [sp, #4]
 8001be4:	040b      	lsls	r3, r1, #16
 8001be6:	4342      	muls	r2, r0
 8001be8:	0c31      	lsrs	r1, r6, #16
 8001bea:	0005      	movs	r5, r0
 8001bec:	4319      	orrs	r1, r3
 8001bee:	428a      	cmp	r2, r1
 8001bf0:	d900      	bls.n	8001bf4 <__aeabi_ddiv+0x1f8>
 8001bf2:	e16c      	b.n	8001ece <__aeabi_ddiv+0x4d2>
 8001bf4:	1a88      	subs	r0, r1, r2
 8001bf6:	4649      	mov	r1, r9
 8001bf8:	f7fe fb26 	bl	8000248 <__aeabi_uidivmod>
 8001bfc:	9a01      	ldr	r2, [sp, #4]
 8001bfe:	0436      	lsls	r6, r6, #16
 8001c00:	4342      	muls	r2, r0
 8001c02:	0409      	lsls	r1, r1, #16
 8001c04:	0c36      	lsrs	r6, r6, #16
 8001c06:	0003      	movs	r3, r0
 8001c08:	430e      	orrs	r6, r1
 8001c0a:	42b2      	cmp	r2, r6
 8001c0c:	d900      	bls.n	8001c10 <__aeabi_ddiv+0x214>
 8001c0e:	e153      	b.n	8001eb8 <__aeabi_ddiv+0x4bc>
 8001c10:	9803      	ldr	r0, [sp, #12]
 8001c12:	1ab6      	subs	r6, r6, r2
 8001c14:	0002      	movs	r2, r0
 8001c16:	042d      	lsls	r5, r5, #16
 8001c18:	431d      	orrs	r5, r3
 8001c1a:	9f02      	ldr	r7, [sp, #8]
 8001c1c:	042b      	lsls	r3, r5, #16
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	435a      	muls	r2, r3
 8001c22:	437b      	muls	r3, r7
 8001c24:	469c      	mov	ip, r3
 8001c26:	0c29      	lsrs	r1, r5, #16
 8001c28:	4348      	muls	r0, r1
 8001c2a:	0c13      	lsrs	r3, r2, #16
 8001c2c:	4484      	add	ip, r0
 8001c2e:	4463      	add	r3, ip
 8001c30:	4379      	muls	r1, r7
 8001c32:	4298      	cmp	r0, r3
 8001c34:	d903      	bls.n	8001c3e <__aeabi_ddiv+0x242>
 8001c36:	2080      	movs	r0, #128	; 0x80
 8001c38:	0240      	lsls	r0, r0, #9
 8001c3a:	4684      	mov	ip, r0
 8001c3c:	4461      	add	r1, ip
 8001c3e:	0c18      	lsrs	r0, r3, #16
 8001c40:	0412      	lsls	r2, r2, #16
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	0c12      	lsrs	r2, r2, #16
 8001c46:	1841      	adds	r1, r0, r1
 8001c48:	189b      	adds	r3, r3, r2
 8001c4a:	428e      	cmp	r6, r1
 8001c4c:	d200      	bcs.n	8001c50 <__aeabi_ddiv+0x254>
 8001c4e:	e0ff      	b.n	8001e50 <__aeabi_ddiv+0x454>
 8001c50:	d100      	bne.n	8001c54 <__aeabi_ddiv+0x258>
 8001c52:	e0fa      	b.n	8001e4a <__aeabi_ddiv+0x44e>
 8001c54:	2301      	movs	r3, #1
 8001c56:	431d      	orrs	r5, r3
 8001c58:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <__aeabi_ddiv+0x384>)
 8001c5a:	445a      	add	r2, fp
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	dc00      	bgt.n	8001c62 <__aeabi_ddiv+0x266>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_ddiv+0x3bc>
 8001c62:	076b      	lsls	r3, r5, #29
 8001c64:	d000      	beq.n	8001c68 <__aeabi_ddiv+0x26c>
 8001c66:	e13d      	b.n	8001ee4 <__aeabi_ddiv+0x4e8>
 8001c68:	08ed      	lsrs	r5, r5, #3
 8001c6a:	4643      	mov	r3, r8
 8001c6c:	01db      	lsls	r3, r3, #7
 8001c6e:	d506      	bpl.n	8001c7e <__aeabi_ddiv+0x282>
 8001c70:	4642      	mov	r2, r8
 8001c72:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <__aeabi_ddiv+0x388>)
 8001c74:	401a      	ands	r2, r3
 8001c76:	4690      	mov	r8, r2
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	00d2      	lsls	r2, r2, #3
 8001c7c:	445a      	add	r2, fp
 8001c7e:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <__aeabi_ddiv+0x38c>)
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dd00      	ble.n	8001c86 <__aeabi_ddiv+0x28a>
 8001c84:	e71f      	b.n	8001ac6 <__aeabi_ddiv+0xca>
 8001c86:	4643      	mov	r3, r8
 8001c88:	075b      	lsls	r3, r3, #29
 8001c8a:	431d      	orrs	r5, r3
 8001c8c:	4643      	mov	r3, r8
 8001c8e:	0552      	lsls	r2, r2, #21
 8001c90:	025c      	lsls	r4, r3, #9
 8001c92:	0b24      	lsrs	r4, r4, #12
 8001c94:	0d53      	lsrs	r3, r2, #21
 8001c96:	e708      	b.n	8001aaa <__aeabi_ddiv+0xae>
 8001c98:	4652      	mov	r2, sl
 8001c9a:	4322      	orrs	r2, r4
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_ddiv+0x2a4>
 8001c9e:	e07b      	b.n	8001d98 <__aeabi_ddiv+0x39c>
 8001ca0:	2c00      	cmp	r4, #0
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_ddiv+0x2aa>
 8001ca4:	e0fa      	b.n	8001e9c <__aeabi_ddiv+0x4a0>
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f001 f99a 	bl	8002fe0 <__clzsi2>
 8001cac:	0002      	movs	r2, r0
 8001cae:	3a0b      	subs	r2, #11
 8001cb0:	231d      	movs	r3, #29
 8001cb2:	0001      	movs	r1, r0
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	4652      	mov	r2, sl
 8001cb8:	3908      	subs	r1, #8
 8001cba:	40da      	lsrs	r2, r3
 8001cbc:	408c      	lsls	r4, r1
 8001cbe:	4314      	orrs	r4, r2
 8001cc0:	4652      	mov	r2, sl
 8001cc2:	408a      	lsls	r2, r1
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <__aeabi_ddiv+0x390>)
 8001cc6:	4458      	add	r0, fp
 8001cc8:	469b      	mov	fp, r3
 8001cca:	4483      	add	fp, r0
 8001ccc:	2000      	movs	r0, #0
 8001cce:	e6d5      	b.n	8001a7c <__aeabi_ddiv+0x80>
 8001cd0:	464b      	mov	r3, r9
 8001cd2:	4323      	orrs	r3, r4
 8001cd4:	4698      	mov	r8, r3
 8001cd6:	d044      	beq.n	8001d62 <__aeabi_ddiv+0x366>
 8001cd8:	2c00      	cmp	r4, #0
 8001cda:	d100      	bne.n	8001cde <__aeabi_ddiv+0x2e2>
 8001cdc:	e0ce      	b.n	8001e7c <__aeabi_ddiv+0x480>
 8001cde:	0020      	movs	r0, r4
 8001ce0:	f001 f97e 	bl	8002fe0 <__clzsi2>
 8001ce4:	0001      	movs	r1, r0
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	390b      	subs	r1, #11
 8001cea:	231d      	movs	r3, #29
 8001cec:	1a5b      	subs	r3, r3, r1
 8001cee:	4649      	mov	r1, r9
 8001cf0:	0010      	movs	r0, r2
 8001cf2:	40d9      	lsrs	r1, r3
 8001cf4:	3808      	subs	r0, #8
 8001cf6:	4084      	lsls	r4, r0
 8001cf8:	000b      	movs	r3, r1
 8001cfa:	464d      	mov	r5, r9
 8001cfc:	4323      	orrs	r3, r4
 8001cfe:	4698      	mov	r8, r3
 8001d00:	4085      	lsls	r5, r0
 8001d02:	4823      	ldr	r0, [pc, #140]	; (8001d90 <__aeabi_ddiv+0x394>)
 8001d04:	1a83      	subs	r3, r0, r2
 8001d06:	469b      	mov	fp, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4699      	mov	r9, r3
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	e69a      	b.n	8001a46 <__aeabi_ddiv+0x4a>
 8001d10:	464b      	mov	r3, r9
 8001d12:	4323      	orrs	r3, r4
 8001d14:	4698      	mov	r8, r3
 8001d16:	d11d      	bne.n	8001d54 <__aeabi_ddiv+0x358>
 8001d18:	2308      	movs	r3, #8
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	3b06      	subs	r3, #6
 8001d1e:	2500      	movs	r5, #0
 8001d20:	4683      	mov	fp, r0
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	e68f      	b.n	8001a46 <__aeabi_ddiv+0x4a>
 8001d26:	4652      	mov	r2, sl
 8001d28:	4322      	orrs	r2, r4
 8001d2a:	d109      	bne.n	8001d40 <__aeabi_ddiv+0x344>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	4649      	mov	r1, r9
 8001d30:	4319      	orrs	r1, r3
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <__aeabi_ddiv+0x398>)
 8001d34:	4689      	mov	r9, r1
 8001d36:	469c      	mov	ip, r3
 8001d38:	2400      	movs	r4, #0
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	44e3      	add	fp, ip
 8001d3e:	e69d      	b.n	8001a7c <__aeabi_ddiv+0x80>
 8001d40:	2303      	movs	r3, #3
 8001d42:	464a      	mov	r2, r9
 8001d44:	431a      	orrs	r2, r3
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <__aeabi_ddiv+0x398>)
 8001d48:	4691      	mov	r9, r2
 8001d4a:	469c      	mov	ip, r3
 8001d4c:	4652      	mov	r2, sl
 8001d4e:	2003      	movs	r0, #3
 8001d50:	44e3      	add	fp, ip
 8001d52:	e693      	b.n	8001a7c <__aeabi_ddiv+0x80>
 8001d54:	230c      	movs	r3, #12
 8001d56:	4699      	mov	r9, r3
 8001d58:	3b09      	subs	r3, #9
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	4683      	mov	fp, r0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	e671      	b.n	8001a46 <__aeabi_ddiv+0x4a>
 8001d62:	2304      	movs	r3, #4
 8001d64:	4699      	mov	r9, r3
 8001d66:	2300      	movs	r3, #0
 8001d68:	469b      	mov	fp, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	2500      	movs	r5, #0
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	e669      	b.n	8001a46 <__aeabi_ddiv+0x4a>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	000007ff 	.word	0x000007ff
 8001d78:	fffffc01 	.word	0xfffffc01
 8001d7c:	08010128 	.word	0x08010128
 8001d80:	000003ff 	.word	0x000003ff
 8001d84:	feffffff 	.word	0xfeffffff
 8001d88:	000007fe 	.word	0x000007fe
 8001d8c:	000003f3 	.word	0x000003f3
 8001d90:	fffffc0d 	.word	0xfffffc0d
 8001d94:	fffff801 	.word	0xfffff801
 8001d98:	4649      	mov	r1, r9
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	4319      	orrs	r1, r3
 8001d9e:	4689      	mov	r9, r1
 8001da0:	2400      	movs	r4, #0
 8001da2:	2001      	movs	r0, #1
 8001da4:	e66a      	b.n	8001a7c <__aeabi_ddiv+0x80>
 8001da6:	2300      	movs	r3, #0
 8001da8:	2480      	movs	r4, #128	; 0x80
 8001daa:	469a      	mov	sl, r3
 8001dac:	2500      	movs	r5, #0
 8001dae:	4b8a      	ldr	r3, [pc, #552]	; (8001fd8 <__aeabi_ddiv+0x5dc>)
 8001db0:	0324      	lsls	r4, r4, #12
 8001db2:	e67a      	b.n	8001aaa <__aeabi_ddiv+0xae>
 8001db4:	2501      	movs	r5, #1
 8001db6:	426d      	negs	r5, r5
 8001db8:	2301      	movs	r3, #1
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	2b38      	cmp	r3, #56	; 0x38
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_ddiv+0x3c6>
 8001dc0:	e670      	b.n	8001aa4 <__aeabi_ddiv+0xa8>
 8001dc2:	2b1f      	cmp	r3, #31
 8001dc4:	dc00      	bgt.n	8001dc8 <__aeabi_ddiv+0x3cc>
 8001dc6:	e0bf      	b.n	8001f48 <__aeabi_ddiv+0x54c>
 8001dc8:	211f      	movs	r1, #31
 8001dca:	4249      	negs	r1, r1
 8001dcc:	1a8a      	subs	r2, r1, r2
 8001dce:	4641      	mov	r1, r8
 8001dd0:	40d1      	lsrs	r1, r2
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d004      	beq.n	8001de2 <__aeabi_ddiv+0x3e6>
 8001dd8:	4641      	mov	r1, r8
 8001dda:	4b80      	ldr	r3, [pc, #512]	; (8001fdc <__aeabi_ddiv+0x5e0>)
 8001ddc:	445b      	add	r3, fp
 8001dde:	4099      	lsls	r1, r3
 8001de0:	430d      	orrs	r5, r1
 8001de2:	1e6b      	subs	r3, r5, #1
 8001de4:	419d      	sbcs	r5, r3
 8001de6:	2307      	movs	r3, #7
 8001de8:	432a      	orrs	r2, r5
 8001dea:	001d      	movs	r5, r3
 8001dec:	2400      	movs	r4, #0
 8001dee:	4015      	ands	r5, r2
 8001df0:	4213      	tst	r3, r2
 8001df2:	d100      	bne.n	8001df6 <__aeabi_ddiv+0x3fa>
 8001df4:	e0d4      	b.n	8001fa0 <__aeabi_ddiv+0x5a4>
 8001df6:	210f      	movs	r1, #15
 8001df8:	2300      	movs	r3, #0
 8001dfa:	4011      	ands	r1, r2
 8001dfc:	2904      	cmp	r1, #4
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_ddiv+0x406>
 8001e00:	e0cb      	b.n	8001f9a <__aeabi_ddiv+0x59e>
 8001e02:	1d11      	adds	r1, r2, #4
 8001e04:	4291      	cmp	r1, r2
 8001e06:	4192      	sbcs	r2, r2
 8001e08:	4252      	negs	r2, r2
 8001e0a:	189b      	adds	r3, r3, r2
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	0219      	lsls	r1, r3, #8
 8001e10:	d400      	bmi.n	8001e14 <__aeabi_ddiv+0x418>
 8001e12:	e0c2      	b.n	8001f9a <__aeabi_ddiv+0x59e>
 8001e14:	2301      	movs	r3, #1
 8001e16:	2400      	movs	r4, #0
 8001e18:	2500      	movs	r5, #0
 8001e1a:	e646      	b.n	8001aaa <__aeabi_ddiv+0xae>
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	4641      	mov	r1, r8
 8001e20:	031b      	lsls	r3, r3, #12
 8001e22:	4219      	tst	r1, r3
 8001e24:	d008      	beq.n	8001e38 <__aeabi_ddiv+0x43c>
 8001e26:	421c      	tst	r4, r3
 8001e28:	d106      	bne.n	8001e38 <__aeabi_ddiv+0x43c>
 8001e2a:	431c      	orrs	r4, r3
 8001e2c:	0324      	lsls	r4, r4, #12
 8001e2e:	46ba      	mov	sl, r7
 8001e30:	0015      	movs	r5, r2
 8001e32:	4b69      	ldr	r3, [pc, #420]	; (8001fd8 <__aeabi_ddiv+0x5dc>)
 8001e34:	0b24      	lsrs	r4, r4, #12
 8001e36:	e638      	b.n	8001aaa <__aeabi_ddiv+0xae>
 8001e38:	2480      	movs	r4, #128	; 0x80
 8001e3a:	4643      	mov	r3, r8
 8001e3c:	0324      	lsls	r4, r4, #12
 8001e3e:	431c      	orrs	r4, r3
 8001e40:	0324      	lsls	r4, r4, #12
 8001e42:	46b2      	mov	sl, r6
 8001e44:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <__aeabi_ddiv+0x5dc>)
 8001e46:	0b24      	lsrs	r4, r4, #12
 8001e48:	e62f      	b.n	8001aaa <__aeabi_ddiv+0xae>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_ddiv+0x454>
 8001e4e:	e703      	b.n	8001c58 <__aeabi_ddiv+0x25c>
 8001e50:	19a6      	adds	r6, r4, r6
 8001e52:	1e68      	subs	r0, r5, #1
 8001e54:	42a6      	cmp	r6, r4
 8001e56:	d200      	bcs.n	8001e5a <__aeabi_ddiv+0x45e>
 8001e58:	e08d      	b.n	8001f76 <__aeabi_ddiv+0x57a>
 8001e5a:	428e      	cmp	r6, r1
 8001e5c:	d200      	bcs.n	8001e60 <__aeabi_ddiv+0x464>
 8001e5e:	e0a3      	b.n	8001fa8 <__aeabi_ddiv+0x5ac>
 8001e60:	d100      	bne.n	8001e64 <__aeabi_ddiv+0x468>
 8001e62:	e0b3      	b.n	8001fcc <__aeabi_ddiv+0x5d0>
 8001e64:	0005      	movs	r5, r0
 8001e66:	e6f5      	b.n	8001c54 <__aeabi_ddiv+0x258>
 8001e68:	42aa      	cmp	r2, r5
 8001e6a:	d900      	bls.n	8001e6e <__aeabi_ddiv+0x472>
 8001e6c:	e639      	b.n	8001ae2 <__aeabi_ddiv+0xe6>
 8001e6e:	4643      	mov	r3, r8
 8001e70:	07de      	lsls	r6, r3, #31
 8001e72:	0858      	lsrs	r0, r3, #1
 8001e74:	086b      	lsrs	r3, r5, #1
 8001e76:	431e      	orrs	r6, r3
 8001e78:	07ed      	lsls	r5, r5, #31
 8001e7a:	e639      	b.n	8001af0 <__aeabi_ddiv+0xf4>
 8001e7c:	4648      	mov	r0, r9
 8001e7e:	f001 f8af 	bl	8002fe0 <__clzsi2>
 8001e82:	0001      	movs	r1, r0
 8001e84:	0002      	movs	r2, r0
 8001e86:	3115      	adds	r1, #21
 8001e88:	3220      	adds	r2, #32
 8001e8a:	291c      	cmp	r1, #28
 8001e8c:	dc00      	bgt.n	8001e90 <__aeabi_ddiv+0x494>
 8001e8e:	e72c      	b.n	8001cea <__aeabi_ddiv+0x2ee>
 8001e90:	464b      	mov	r3, r9
 8001e92:	3808      	subs	r0, #8
 8001e94:	4083      	lsls	r3, r0
 8001e96:	2500      	movs	r5, #0
 8001e98:	4698      	mov	r8, r3
 8001e9a:	e732      	b.n	8001d02 <__aeabi_ddiv+0x306>
 8001e9c:	f001 f8a0 	bl	8002fe0 <__clzsi2>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	3215      	adds	r2, #21
 8001ea6:	3020      	adds	r0, #32
 8001ea8:	2a1c      	cmp	r2, #28
 8001eaa:	dc00      	bgt.n	8001eae <__aeabi_ddiv+0x4b2>
 8001eac:	e700      	b.n	8001cb0 <__aeabi_ddiv+0x2b4>
 8001eae:	4654      	mov	r4, sl
 8001eb0:	3b08      	subs	r3, #8
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	409c      	lsls	r4, r3
 8001eb6:	e705      	b.n	8001cc4 <__aeabi_ddiv+0x2c8>
 8001eb8:	1936      	adds	r6, r6, r4
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	42b4      	cmp	r4, r6
 8001ebe:	d900      	bls.n	8001ec2 <__aeabi_ddiv+0x4c6>
 8001ec0:	e6a6      	b.n	8001c10 <__aeabi_ddiv+0x214>
 8001ec2:	42b2      	cmp	r2, r6
 8001ec4:	d800      	bhi.n	8001ec8 <__aeabi_ddiv+0x4cc>
 8001ec6:	e6a3      	b.n	8001c10 <__aeabi_ddiv+0x214>
 8001ec8:	1e83      	subs	r3, r0, #2
 8001eca:	1936      	adds	r6, r6, r4
 8001ecc:	e6a0      	b.n	8001c10 <__aeabi_ddiv+0x214>
 8001ece:	1909      	adds	r1, r1, r4
 8001ed0:	3d01      	subs	r5, #1
 8001ed2:	428c      	cmp	r4, r1
 8001ed4:	d900      	bls.n	8001ed8 <__aeabi_ddiv+0x4dc>
 8001ed6:	e68d      	b.n	8001bf4 <__aeabi_ddiv+0x1f8>
 8001ed8:	428a      	cmp	r2, r1
 8001eda:	d800      	bhi.n	8001ede <__aeabi_ddiv+0x4e2>
 8001edc:	e68a      	b.n	8001bf4 <__aeabi_ddiv+0x1f8>
 8001ede:	1e85      	subs	r5, r0, #2
 8001ee0:	1909      	adds	r1, r1, r4
 8001ee2:	e687      	b.n	8001bf4 <__aeabi_ddiv+0x1f8>
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	402b      	ands	r3, r5
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d100      	bne.n	8001eee <__aeabi_ddiv+0x4f2>
 8001eec:	e6bc      	b.n	8001c68 <__aeabi_ddiv+0x26c>
 8001eee:	2305      	movs	r3, #5
 8001ef0:	425b      	negs	r3, r3
 8001ef2:	42ab      	cmp	r3, r5
 8001ef4:	419b      	sbcs	r3, r3
 8001ef6:	3504      	adds	r5, #4
 8001ef8:	425b      	negs	r3, r3
 8001efa:	08ed      	lsrs	r5, r5, #3
 8001efc:	4498      	add	r8, r3
 8001efe:	e6b4      	b.n	8001c6a <__aeabi_ddiv+0x26e>
 8001f00:	42af      	cmp	r7, r5
 8001f02:	d900      	bls.n	8001f06 <__aeabi_ddiv+0x50a>
 8001f04:	e660      	b.n	8001bc8 <__aeabi_ddiv+0x1cc>
 8001f06:	4282      	cmp	r2, r0
 8001f08:	d804      	bhi.n	8001f14 <__aeabi_ddiv+0x518>
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_ddiv+0x512>
 8001f0c:	e65c      	b.n	8001bc8 <__aeabi_ddiv+0x1cc>
 8001f0e:	42ae      	cmp	r6, r5
 8001f10:	d800      	bhi.n	8001f14 <__aeabi_ddiv+0x518>
 8001f12:	e659      	b.n	8001bc8 <__aeabi_ddiv+0x1cc>
 8001f14:	2302      	movs	r3, #2
 8001f16:	425b      	negs	r3, r3
 8001f18:	469c      	mov	ip, r3
 8001f1a:	9b00      	ldr	r3, [sp, #0]
 8001f1c:	44e0      	add	r8, ip
 8001f1e:	469c      	mov	ip, r3
 8001f20:	4465      	add	r5, ip
 8001f22:	429d      	cmp	r5, r3
 8001f24:	419b      	sbcs	r3, r3
 8001f26:	425b      	negs	r3, r3
 8001f28:	191b      	adds	r3, r3, r4
 8001f2a:	18c0      	adds	r0, r0, r3
 8001f2c:	e64d      	b.n	8001bca <__aeabi_ddiv+0x1ce>
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d800      	bhi.n	8001f34 <__aeabi_ddiv+0x538>
 8001f32:	e60e      	b.n	8001b52 <__aeabi_ddiv+0x156>
 8001f34:	1e83      	subs	r3, r0, #2
 8001f36:	1909      	adds	r1, r1, r4
 8001f38:	e60b      	b.n	8001b52 <__aeabi_ddiv+0x156>
 8001f3a:	428a      	cmp	r2, r1
 8001f3c:	d800      	bhi.n	8001f40 <__aeabi_ddiv+0x544>
 8001f3e:	e5f4      	b.n	8001b2a <__aeabi_ddiv+0x12e>
 8001f40:	1e83      	subs	r3, r0, #2
 8001f42:	4698      	mov	r8, r3
 8001f44:	1909      	adds	r1, r1, r4
 8001f46:	e5f0      	b.n	8001b2a <__aeabi_ddiv+0x12e>
 8001f48:	4925      	ldr	r1, [pc, #148]	; (8001fe0 <__aeabi_ddiv+0x5e4>)
 8001f4a:	0028      	movs	r0, r5
 8001f4c:	4459      	add	r1, fp
 8001f4e:	408d      	lsls	r5, r1
 8001f50:	4642      	mov	r2, r8
 8001f52:	408a      	lsls	r2, r1
 8001f54:	1e69      	subs	r1, r5, #1
 8001f56:	418d      	sbcs	r5, r1
 8001f58:	4641      	mov	r1, r8
 8001f5a:	40d8      	lsrs	r0, r3
 8001f5c:	40d9      	lsrs	r1, r3
 8001f5e:	4302      	orrs	r2, r0
 8001f60:	432a      	orrs	r2, r5
 8001f62:	000b      	movs	r3, r1
 8001f64:	0751      	lsls	r1, r2, #29
 8001f66:	d100      	bne.n	8001f6a <__aeabi_ddiv+0x56e>
 8001f68:	e751      	b.n	8001e0e <__aeabi_ddiv+0x412>
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	4011      	ands	r1, r2
 8001f6e:	2904      	cmp	r1, #4
 8001f70:	d000      	beq.n	8001f74 <__aeabi_ddiv+0x578>
 8001f72:	e746      	b.n	8001e02 <__aeabi_ddiv+0x406>
 8001f74:	e74b      	b.n	8001e0e <__aeabi_ddiv+0x412>
 8001f76:	0005      	movs	r5, r0
 8001f78:	428e      	cmp	r6, r1
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_ddiv+0x582>
 8001f7c:	e66a      	b.n	8001c54 <__aeabi_ddiv+0x258>
 8001f7e:	9a00      	ldr	r2, [sp, #0]
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d000      	beq.n	8001f86 <__aeabi_ddiv+0x58a>
 8001f84:	e666      	b.n	8001c54 <__aeabi_ddiv+0x258>
 8001f86:	e667      	b.n	8001c58 <__aeabi_ddiv+0x25c>
 8001f88:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <__aeabi_ddiv+0x5e8>)
 8001f8a:	445a      	add	r2, fp
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	dc00      	bgt.n	8001f92 <__aeabi_ddiv+0x596>
 8001f90:	e710      	b.n	8001db4 <__aeabi_ddiv+0x3b8>
 8001f92:	2301      	movs	r3, #1
 8001f94:	2500      	movs	r5, #0
 8001f96:	4498      	add	r8, r3
 8001f98:	e667      	b.n	8001c6a <__aeabi_ddiv+0x26e>
 8001f9a:	075d      	lsls	r5, r3, #29
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	0b1c      	lsrs	r4, r3, #12
 8001fa0:	08d2      	lsrs	r2, r2, #3
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	4315      	orrs	r5, r2
 8001fa6:	e580      	b.n	8001aaa <__aeabi_ddiv+0xae>
 8001fa8:	9800      	ldr	r0, [sp, #0]
 8001faa:	3d02      	subs	r5, #2
 8001fac:	0042      	lsls	r2, r0, #1
 8001fae:	4282      	cmp	r2, r0
 8001fb0:	41bf      	sbcs	r7, r7
 8001fb2:	427f      	negs	r7, r7
 8001fb4:	193c      	adds	r4, r7, r4
 8001fb6:	1936      	adds	r6, r6, r4
 8001fb8:	9200      	str	r2, [sp, #0]
 8001fba:	e7dd      	b.n	8001f78 <__aeabi_ddiv+0x57c>
 8001fbc:	2480      	movs	r4, #128	; 0x80
 8001fbe:	4643      	mov	r3, r8
 8001fc0:	0324      	lsls	r4, r4, #12
 8001fc2:	431c      	orrs	r4, r3
 8001fc4:	0324      	lsls	r4, r4, #12
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__aeabi_ddiv+0x5dc>)
 8001fc8:	0b24      	lsrs	r4, r4, #12
 8001fca:	e56e      	b.n	8001aaa <__aeabi_ddiv+0xae>
 8001fcc:	9a00      	ldr	r2, [sp, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d3ea      	bcc.n	8001fa8 <__aeabi_ddiv+0x5ac>
 8001fd2:	0005      	movs	r5, r0
 8001fd4:	e7d3      	b.n	8001f7e <__aeabi_ddiv+0x582>
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	000007ff 	.word	0x000007ff
 8001fdc:	0000043e 	.word	0x0000043e
 8001fe0:	0000041e 	.word	0x0000041e
 8001fe4:	000003ff 	.word	0x000003ff

08001fe8 <__eqdf2>:
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	464e      	mov	r6, r9
 8001fec:	4645      	mov	r5, r8
 8001fee:	46de      	mov	lr, fp
 8001ff0:	4657      	mov	r7, sl
 8001ff2:	4690      	mov	r8, r2
 8001ff4:	b5e0      	push	{r5, r6, r7, lr}
 8001ff6:	0017      	movs	r7, r2
 8001ff8:	031a      	lsls	r2, r3, #12
 8001ffa:	0b12      	lsrs	r2, r2, #12
 8001ffc:	0005      	movs	r5, r0
 8001ffe:	4684      	mov	ip, r0
 8002000:	4819      	ldr	r0, [pc, #100]	; (8002068 <__eqdf2+0x80>)
 8002002:	030e      	lsls	r6, r1, #12
 8002004:	004c      	lsls	r4, r1, #1
 8002006:	4691      	mov	r9, r2
 8002008:	005a      	lsls	r2, r3, #1
 800200a:	0fdb      	lsrs	r3, r3, #31
 800200c:	469b      	mov	fp, r3
 800200e:	0b36      	lsrs	r6, r6, #12
 8002010:	0d64      	lsrs	r4, r4, #21
 8002012:	0fc9      	lsrs	r1, r1, #31
 8002014:	0d52      	lsrs	r2, r2, #21
 8002016:	4284      	cmp	r4, r0
 8002018:	d019      	beq.n	800204e <__eqdf2+0x66>
 800201a:	4282      	cmp	r2, r0
 800201c:	d010      	beq.n	8002040 <__eqdf2+0x58>
 800201e:	2001      	movs	r0, #1
 8002020:	4294      	cmp	r4, r2
 8002022:	d10e      	bne.n	8002042 <__eqdf2+0x5a>
 8002024:	454e      	cmp	r6, r9
 8002026:	d10c      	bne.n	8002042 <__eqdf2+0x5a>
 8002028:	2001      	movs	r0, #1
 800202a:	45c4      	cmp	ip, r8
 800202c:	d109      	bne.n	8002042 <__eqdf2+0x5a>
 800202e:	4559      	cmp	r1, fp
 8002030:	d017      	beq.n	8002062 <__eqdf2+0x7a>
 8002032:	2c00      	cmp	r4, #0
 8002034:	d105      	bne.n	8002042 <__eqdf2+0x5a>
 8002036:	0030      	movs	r0, r6
 8002038:	4328      	orrs	r0, r5
 800203a:	1e43      	subs	r3, r0, #1
 800203c:	4198      	sbcs	r0, r3
 800203e:	e000      	b.n	8002042 <__eqdf2+0x5a>
 8002040:	2001      	movs	r0, #1
 8002042:	bcf0      	pop	{r4, r5, r6, r7}
 8002044:	46bb      	mov	fp, r7
 8002046:	46b2      	mov	sl, r6
 8002048:	46a9      	mov	r9, r5
 800204a:	46a0      	mov	r8, r4
 800204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204e:	0033      	movs	r3, r6
 8002050:	2001      	movs	r0, #1
 8002052:	432b      	orrs	r3, r5
 8002054:	d1f5      	bne.n	8002042 <__eqdf2+0x5a>
 8002056:	42a2      	cmp	r2, r4
 8002058:	d1f3      	bne.n	8002042 <__eqdf2+0x5a>
 800205a:	464b      	mov	r3, r9
 800205c:	433b      	orrs	r3, r7
 800205e:	d1f0      	bne.n	8002042 <__eqdf2+0x5a>
 8002060:	e7e2      	b.n	8002028 <__eqdf2+0x40>
 8002062:	2000      	movs	r0, #0
 8002064:	e7ed      	b.n	8002042 <__eqdf2+0x5a>
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	000007ff 	.word	0x000007ff

0800206c <__gedf2>:
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	4647      	mov	r7, r8
 8002070:	46ce      	mov	lr, r9
 8002072:	0004      	movs	r4, r0
 8002074:	0018      	movs	r0, r3
 8002076:	0016      	movs	r6, r2
 8002078:	031b      	lsls	r3, r3, #12
 800207a:	0b1b      	lsrs	r3, r3, #12
 800207c:	4d2d      	ldr	r5, [pc, #180]	; (8002134 <__gedf2+0xc8>)
 800207e:	004a      	lsls	r2, r1, #1
 8002080:	4699      	mov	r9, r3
 8002082:	b580      	push	{r7, lr}
 8002084:	0043      	lsls	r3, r0, #1
 8002086:	030f      	lsls	r7, r1, #12
 8002088:	46a4      	mov	ip, r4
 800208a:	46b0      	mov	r8, r6
 800208c:	0b3f      	lsrs	r7, r7, #12
 800208e:	0d52      	lsrs	r2, r2, #21
 8002090:	0fc9      	lsrs	r1, r1, #31
 8002092:	0d5b      	lsrs	r3, r3, #21
 8002094:	0fc0      	lsrs	r0, r0, #31
 8002096:	42aa      	cmp	r2, r5
 8002098:	d021      	beq.n	80020de <__gedf2+0x72>
 800209a:	42ab      	cmp	r3, r5
 800209c:	d013      	beq.n	80020c6 <__gedf2+0x5a>
 800209e:	2a00      	cmp	r2, #0
 80020a0:	d122      	bne.n	80020e8 <__gedf2+0x7c>
 80020a2:	433c      	orrs	r4, r7
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <__gedf2+0x42>
 80020a8:	464d      	mov	r5, r9
 80020aa:	432e      	orrs	r6, r5
 80020ac:	d022      	beq.n	80020f4 <__gedf2+0x88>
 80020ae:	2c00      	cmp	r4, #0
 80020b0:	d010      	beq.n	80020d4 <__gedf2+0x68>
 80020b2:	4281      	cmp	r1, r0
 80020b4:	d022      	beq.n	80020fc <__gedf2+0x90>
 80020b6:	2002      	movs	r0, #2
 80020b8:	3901      	subs	r1, #1
 80020ba:	4008      	ands	r0, r1
 80020bc:	3801      	subs	r0, #1
 80020be:	bcc0      	pop	{r6, r7}
 80020c0:	46b9      	mov	r9, r7
 80020c2:	46b0      	mov	r8, r6
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c6:	464d      	mov	r5, r9
 80020c8:	432e      	orrs	r6, r5
 80020ca:	d129      	bne.n	8002120 <__gedf2+0xb4>
 80020cc:	2a00      	cmp	r2, #0
 80020ce:	d1f0      	bne.n	80020b2 <__gedf2+0x46>
 80020d0:	433c      	orrs	r4, r7
 80020d2:	d1ee      	bne.n	80020b2 <__gedf2+0x46>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d1f2      	bne.n	80020be <__gedf2+0x52>
 80020d8:	2001      	movs	r0, #1
 80020da:	4240      	negs	r0, r0
 80020dc:	e7ef      	b.n	80020be <__gedf2+0x52>
 80020de:	003d      	movs	r5, r7
 80020e0:	4325      	orrs	r5, r4
 80020e2:	d11d      	bne.n	8002120 <__gedf2+0xb4>
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d0ee      	beq.n	80020c6 <__gedf2+0x5a>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1e2      	bne.n	80020b2 <__gedf2+0x46>
 80020ec:	464c      	mov	r4, r9
 80020ee:	4326      	orrs	r6, r4
 80020f0:	d1df      	bne.n	80020b2 <__gedf2+0x46>
 80020f2:	e7e0      	b.n	80020b6 <__gedf2+0x4a>
 80020f4:	2000      	movs	r0, #0
 80020f6:	2c00      	cmp	r4, #0
 80020f8:	d0e1      	beq.n	80020be <__gedf2+0x52>
 80020fa:	e7dc      	b.n	80020b6 <__gedf2+0x4a>
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dc0a      	bgt.n	8002116 <__gedf2+0xaa>
 8002100:	dbe8      	blt.n	80020d4 <__gedf2+0x68>
 8002102:	454f      	cmp	r7, r9
 8002104:	d8d7      	bhi.n	80020b6 <__gedf2+0x4a>
 8002106:	d00e      	beq.n	8002126 <__gedf2+0xba>
 8002108:	2000      	movs	r0, #0
 800210a:	454f      	cmp	r7, r9
 800210c:	d2d7      	bcs.n	80020be <__gedf2+0x52>
 800210e:	2900      	cmp	r1, #0
 8002110:	d0e2      	beq.n	80020d8 <__gedf2+0x6c>
 8002112:	0008      	movs	r0, r1
 8002114:	e7d3      	b.n	80020be <__gedf2+0x52>
 8002116:	4243      	negs	r3, r0
 8002118:	4158      	adcs	r0, r3
 800211a:	0040      	lsls	r0, r0, #1
 800211c:	3801      	subs	r0, #1
 800211e:	e7ce      	b.n	80020be <__gedf2+0x52>
 8002120:	2002      	movs	r0, #2
 8002122:	4240      	negs	r0, r0
 8002124:	e7cb      	b.n	80020be <__gedf2+0x52>
 8002126:	45c4      	cmp	ip, r8
 8002128:	d8c5      	bhi.n	80020b6 <__gedf2+0x4a>
 800212a:	2000      	movs	r0, #0
 800212c:	45c4      	cmp	ip, r8
 800212e:	d2c6      	bcs.n	80020be <__gedf2+0x52>
 8002130:	e7ed      	b.n	800210e <__gedf2+0xa2>
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	000007ff 	.word	0x000007ff

08002138 <__ledf2>:
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	4647      	mov	r7, r8
 800213c:	46ce      	mov	lr, r9
 800213e:	0004      	movs	r4, r0
 8002140:	0018      	movs	r0, r3
 8002142:	0016      	movs	r6, r2
 8002144:	031b      	lsls	r3, r3, #12
 8002146:	0b1b      	lsrs	r3, r3, #12
 8002148:	4d2c      	ldr	r5, [pc, #176]	; (80021fc <__ledf2+0xc4>)
 800214a:	004a      	lsls	r2, r1, #1
 800214c:	4699      	mov	r9, r3
 800214e:	b580      	push	{r7, lr}
 8002150:	0043      	lsls	r3, r0, #1
 8002152:	030f      	lsls	r7, r1, #12
 8002154:	46a4      	mov	ip, r4
 8002156:	46b0      	mov	r8, r6
 8002158:	0b3f      	lsrs	r7, r7, #12
 800215a:	0d52      	lsrs	r2, r2, #21
 800215c:	0fc9      	lsrs	r1, r1, #31
 800215e:	0d5b      	lsrs	r3, r3, #21
 8002160:	0fc0      	lsrs	r0, r0, #31
 8002162:	42aa      	cmp	r2, r5
 8002164:	d00d      	beq.n	8002182 <__ledf2+0x4a>
 8002166:	42ab      	cmp	r3, r5
 8002168:	d010      	beq.n	800218c <__ledf2+0x54>
 800216a:	2a00      	cmp	r2, #0
 800216c:	d127      	bne.n	80021be <__ledf2+0x86>
 800216e:	433c      	orrs	r4, r7
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <__ledf2+0x60>
 8002174:	464d      	mov	r5, r9
 8002176:	432e      	orrs	r6, r5
 8002178:	d10e      	bne.n	8002198 <__ledf2+0x60>
 800217a:	2000      	movs	r0, #0
 800217c:	2c00      	cmp	r4, #0
 800217e:	d015      	beq.n	80021ac <__ledf2+0x74>
 8002180:	e00e      	b.n	80021a0 <__ledf2+0x68>
 8002182:	003d      	movs	r5, r7
 8002184:	4325      	orrs	r5, r4
 8002186:	d110      	bne.n	80021aa <__ledf2+0x72>
 8002188:	4293      	cmp	r3, r2
 800218a:	d118      	bne.n	80021be <__ledf2+0x86>
 800218c:	464d      	mov	r5, r9
 800218e:	432e      	orrs	r6, r5
 8002190:	d10b      	bne.n	80021aa <__ledf2+0x72>
 8002192:	2a00      	cmp	r2, #0
 8002194:	d102      	bne.n	800219c <__ledf2+0x64>
 8002196:	433c      	orrs	r4, r7
 8002198:	2c00      	cmp	r4, #0
 800219a:	d00b      	beq.n	80021b4 <__ledf2+0x7c>
 800219c:	4281      	cmp	r1, r0
 800219e:	d014      	beq.n	80021ca <__ledf2+0x92>
 80021a0:	2002      	movs	r0, #2
 80021a2:	3901      	subs	r1, #1
 80021a4:	4008      	ands	r0, r1
 80021a6:	3801      	subs	r0, #1
 80021a8:	e000      	b.n	80021ac <__ledf2+0x74>
 80021aa:	2002      	movs	r0, #2
 80021ac:	bcc0      	pop	{r6, r7}
 80021ae:	46b9      	mov	r9, r7
 80021b0:	46b0      	mov	r8, r6
 80021b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d1f9      	bne.n	80021ac <__ledf2+0x74>
 80021b8:	2001      	movs	r0, #1
 80021ba:	4240      	negs	r0, r0
 80021bc:	e7f6      	b.n	80021ac <__ledf2+0x74>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ec      	bne.n	800219c <__ledf2+0x64>
 80021c2:	464c      	mov	r4, r9
 80021c4:	4326      	orrs	r6, r4
 80021c6:	d1e9      	bne.n	800219c <__ledf2+0x64>
 80021c8:	e7ea      	b.n	80021a0 <__ledf2+0x68>
 80021ca:	429a      	cmp	r2, r3
 80021cc:	dd04      	ble.n	80021d8 <__ledf2+0xa0>
 80021ce:	4243      	negs	r3, r0
 80021d0:	4158      	adcs	r0, r3
 80021d2:	0040      	lsls	r0, r0, #1
 80021d4:	3801      	subs	r0, #1
 80021d6:	e7e9      	b.n	80021ac <__ledf2+0x74>
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbeb      	blt.n	80021b4 <__ledf2+0x7c>
 80021dc:	454f      	cmp	r7, r9
 80021de:	d8df      	bhi.n	80021a0 <__ledf2+0x68>
 80021e0:	d006      	beq.n	80021f0 <__ledf2+0xb8>
 80021e2:	2000      	movs	r0, #0
 80021e4:	454f      	cmp	r7, r9
 80021e6:	d2e1      	bcs.n	80021ac <__ledf2+0x74>
 80021e8:	2900      	cmp	r1, #0
 80021ea:	d0e5      	beq.n	80021b8 <__ledf2+0x80>
 80021ec:	0008      	movs	r0, r1
 80021ee:	e7dd      	b.n	80021ac <__ledf2+0x74>
 80021f0:	45c4      	cmp	ip, r8
 80021f2:	d8d5      	bhi.n	80021a0 <__ledf2+0x68>
 80021f4:	2000      	movs	r0, #0
 80021f6:	45c4      	cmp	ip, r8
 80021f8:	d2d8      	bcs.n	80021ac <__ledf2+0x74>
 80021fa:	e7f5      	b.n	80021e8 <__ledf2+0xb0>
 80021fc:	000007ff 	.word	0x000007ff

08002200 <__aeabi_dmul>:
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002202:	4657      	mov	r7, sl
 8002204:	464e      	mov	r6, r9
 8002206:	4645      	mov	r5, r8
 8002208:	46de      	mov	lr, fp
 800220a:	b5e0      	push	{r5, r6, r7, lr}
 800220c:	4698      	mov	r8, r3
 800220e:	030c      	lsls	r4, r1, #12
 8002210:	004b      	lsls	r3, r1, #1
 8002212:	0006      	movs	r6, r0
 8002214:	4692      	mov	sl, r2
 8002216:	b087      	sub	sp, #28
 8002218:	0b24      	lsrs	r4, r4, #12
 800221a:	0d5b      	lsrs	r3, r3, #21
 800221c:	0fcf      	lsrs	r7, r1, #31
 800221e:	2b00      	cmp	r3, #0
 8002220:	d100      	bne.n	8002224 <__aeabi_dmul+0x24>
 8002222:	e15c      	b.n	80024de <__aeabi_dmul+0x2de>
 8002224:	4ad9      	ldr	r2, [pc, #868]	; (800258c <__aeabi_dmul+0x38c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d100      	bne.n	800222c <__aeabi_dmul+0x2c>
 800222a:	e175      	b.n	8002518 <__aeabi_dmul+0x318>
 800222c:	0f42      	lsrs	r2, r0, #29
 800222e:	00e4      	lsls	r4, r4, #3
 8002230:	4314      	orrs	r4, r2
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	0412      	lsls	r2, r2, #16
 8002236:	4314      	orrs	r4, r2
 8002238:	4ad5      	ldr	r2, [pc, #852]	; (8002590 <__aeabi_dmul+0x390>)
 800223a:	00c5      	lsls	r5, r0, #3
 800223c:	4694      	mov	ip, r2
 800223e:	4463      	add	r3, ip
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	4699      	mov	r9, r3
 8002246:	469b      	mov	fp, r3
 8002248:	4643      	mov	r3, r8
 800224a:	4642      	mov	r2, r8
 800224c:	031e      	lsls	r6, r3, #12
 800224e:	0fd2      	lsrs	r2, r2, #31
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4650      	mov	r0, sl
 8002254:	4690      	mov	r8, r2
 8002256:	0b36      	lsrs	r6, r6, #12
 8002258:	0d5b      	lsrs	r3, r3, #21
 800225a:	d100      	bne.n	800225e <__aeabi_dmul+0x5e>
 800225c:	e120      	b.n	80024a0 <__aeabi_dmul+0x2a0>
 800225e:	4acb      	ldr	r2, [pc, #812]	; (800258c <__aeabi_dmul+0x38c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d100      	bne.n	8002266 <__aeabi_dmul+0x66>
 8002264:	e162      	b.n	800252c <__aeabi_dmul+0x32c>
 8002266:	49ca      	ldr	r1, [pc, #808]	; (8002590 <__aeabi_dmul+0x390>)
 8002268:	0f42      	lsrs	r2, r0, #29
 800226a:	468c      	mov	ip, r1
 800226c:	9900      	ldr	r1, [sp, #0]
 800226e:	4463      	add	r3, ip
 8002270:	00f6      	lsls	r6, r6, #3
 8002272:	468c      	mov	ip, r1
 8002274:	4316      	orrs	r6, r2
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	449c      	add	ip, r3
 800227a:	0412      	lsls	r2, r2, #16
 800227c:	4663      	mov	r3, ip
 800227e:	4316      	orrs	r6, r2
 8002280:	00c2      	lsls	r2, r0, #3
 8002282:	2000      	movs	r0, #0
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	9900      	ldr	r1, [sp, #0]
 8002288:	4643      	mov	r3, r8
 800228a:	3101      	adds	r1, #1
 800228c:	468c      	mov	ip, r1
 800228e:	4649      	mov	r1, r9
 8002290:	407b      	eors	r3, r7
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	290f      	cmp	r1, #15
 8002296:	d826      	bhi.n	80022e6 <__aeabi_dmul+0xe6>
 8002298:	4bbe      	ldr	r3, [pc, #760]	; (8002594 <__aeabi_dmul+0x394>)
 800229a:	0089      	lsls	r1, r1, #2
 800229c:	5859      	ldr	r1, [r3, r1]
 800229e:	468f      	mov	pc, r1
 80022a0:	4643      	mov	r3, r8
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	0034      	movs	r4, r6
 80022a6:	0015      	movs	r5, r2
 80022a8:	4683      	mov	fp, r0
 80022aa:	465b      	mov	r3, fp
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d016      	beq.n	80022de <__aeabi_dmul+0xde>
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d100      	bne.n	80022b6 <__aeabi_dmul+0xb6>
 80022b4:	e203      	b.n	80026be <__aeabi_dmul+0x4be>
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d000      	beq.n	80022bc <__aeabi_dmul+0xbc>
 80022ba:	e0cd      	b.n	8002458 <__aeabi_dmul+0x258>
 80022bc:	2200      	movs	r2, #0
 80022be:	2400      	movs	r4, #0
 80022c0:	2500      	movs	r5, #0
 80022c2:	9b01      	ldr	r3, [sp, #4]
 80022c4:	0512      	lsls	r2, r2, #20
 80022c6:	4322      	orrs	r2, r4
 80022c8:	07db      	lsls	r3, r3, #31
 80022ca:	431a      	orrs	r2, r3
 80022cc:	0028      	movs	r0, r5
 80022ce:	0011      	movs	r1, r2
 80022d0:	b007      	add	sp, #28
 80022d2:	bcf0      	pop	{r4, r5, r6, r7}
 80022d4:	46bb      	mov	fp, r7
 80022d6:	46b2      	mov	sl, r6
 80022d8:	46a9      	mov	r9, r5
 80022da:	46a0      	mov	r8, r4
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022de:	2400      	movs	r4, #0
 80022e0:	2500      	movs	r5, #0
 80022e2:	4aaa      	ldr	r2, [pc, #680]	; (800258c <__aeabi_dmul+0x38c>)
 80022e4:	e7ed      	b.n	80022c2 <__aeabi_dmul+0xc2>
 80022e6:	0c28      	lsrs	r0, r5, #16
 80022e8:	042d      	lsls	r5, r5, #16
 80022ea:	0c2d      	lsrs	r5, r5, #16
 80022ec:	002b      	movs	r3, r5
 80022ee:	0c11      	lsrs	r1, r2, #16
 80022f0:	0412      	lsls	r2, r2, #16
 80022f2:	0c12      	lsrs	r2, r2, #16
 80022f4:	4353      	muls	r3, r2
 80022f6:	4698      	mov	r8, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	002f      	movs	r7, r5
 80022fc:	4343      	muls	r3, r0
 80022fe:	4699      	mov	r9, r3
 8002300:	434f      	muls	r7, r1
 8002302:	444f      	add	r7, r9
 8002304:	46bb      	mov	fp, r7
 8002306:	4647      	mov	r7, r8
 8002308:	000b      	movs	r3, r1
 800230a:	0c3f      	lsrs	r7, r7, #16
 800230c:	46ba      	mov	sl, r7
 800230e:	4343      	muls	r3, r0
 8002310:	44da      	add	sl, fp
 8002312:	9302      	str	r3, [sp, #8]
 8002314:	45d1      	cmp	r9, sl
 8002316:	d904      	bls.n	8002322 <__aeabi_dmul+0x122>
 8002318:	2780      	movs	r7, #128	; 0x80
 800231a:	027f      	lsls	r7, r7, #9
 800231c:	46b9      	mov	r9, r7
 800231e:	444b      	add	r3, r9
 8002320:	9302      	str	r3, [sp, #8]
 8002322:	4653      	mov	r3, sl
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	469b      	mov	fp, r3
 8002328:	4653      	mov	r3, sl
 800232a:	041f      	lsls	r7, r3, #16
 800232c:	4643      	mov	r3, r8
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	4698      	mov	r8, r3
 8002334:	003b      	movs	r3, r7
 8002336:	4443      	add	r3, r8
 8002338:	9304      	str	r3, [sp, #16]
 800233a:	0c33      	lsrs	r3, r6, #16
 800233c:	0436      	lsls	r6, r6, #16
 800233e:	0c36      	lsrs	r6, r6, #16
 8002340:	4698      	mov	r8, r3
 8002342:	0033      	movs	r3, r6
 8002344:	4343      	muls	r3, r0
 8002346:	4699      	mov	r9, r3
 8002348:	4643      	mov	r3, r8
 800234a:	4343      	muls	r3, r0
 800234c:	002f      	movs	r7, r5
 800234e:	469a      	mov	sl, r3
 8002350:	4643      	mov	r3, r8
 8002352:	4377      	muls	r7, r6
 8002354:	435d      	muls	r5, r3
 8002356:	0c38      	lsrs	r0, r7, #16
 8002358:	444d      	add	r5, r9
 800235a:	1945      	adds	r5, r0, r5
 800235c:	45a9      	cmp	r9, r5
 800235e:	d903      	bls.n	8002368 <__aeabi_dmul+0x168>
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	025b      	lsls	r3, r3, #9
 8002364:	4699      	mov	r9, r3
 8002366:	44ca      	add	sl, r9
 8002368:	043f      	lsls	r7, r7, #16
 800236a:	0c28      	lsrs	r0, r5, #16
 800236c:	0c3f      	lsrs	r7, r7, #16
 800236e:	042d      	lsls	r5, r5, #16
 8002370:	19ed      	adds	r5, r5, r7
 8002372:	0c27      	lsrs	r7, r4, #16
 8002374:	0424      	lsls	r4, r4, #16
 8002376:	0c24      	lsrs	r4, r4, #16
 8002378:	0003      	movs	r3, r0
 800237a:	0020      	movs	r0, r4
 800237c:	4350      	muls	r0, r2
 800237e:	437a      	muls	r2, r7
 8002380:	4691      	mov	r9, r2
 8002382:	003a      	movs	r2, r7
 8002384:	4453      	add	r3, sl
 8002386:	9305      	str	r3, [sp, #20]
 8002388:	0c03      	lsrs	r3, r0, #16
 800238a:	469a      	mov	sl, r3
 800238c:	434a      	muls	r2, r1
 800238e:	4361      	muls	r1, r4
 8002390:	4449      	add	r1, r9
 8002392:	4451      	add	r1, sl
 8002394:	44ab      	add	fp, r5
 8002396:	4589      	cmp	r9, r1
 8002398:	d903      	bls.n	80023a2 <__aeabi_dmul+0x1a2>
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	025b      	lsls	r3, r3, #9
 800239e:	4699      	mov	r9, r3
 80023a0:	444a      	add	r2, r9
 80023a2:	0400      	lsls	r0, r0, #16
 80023a4:	0c0b      	lsrs	r3, r1, #16
 80023a6:	0c00      	lsrs	r0, r0, #16
 80023a8:	0409      	lsls	r1, r1, #16
 80023aa:	1809      	adds	r1, r1, r0
 80023ac:	0020      	movs	r0, r4
 80023ae:	4699      	mov	r9, r3
 80023b0:	4643      	mov	r3, r8
 80023b2:	4370      	muls	r0, r6
 80023b4:	435c      	muls	r4, r3
 80023b6:	437e      	muls	r6, r7
 80023b8:	435f      	muls	r7, r3
 80023ba:	0c03      	lsrs	r3, r0, #16
 80023bc:	4698      	mov	r8, r3
 80023be:	19a4      	adds	r4, r4, r6
 80023c0:	4444      	add	r4, r8
 80023c2:	444a      	add	r2, r9
 80023c4:	9703      	str	r7, [sp, #12]
 80023c6:	42a6      	cmp	r6, r4
 80023c8:	d904      	bls.n	80023d4 <__aeabi_dmul+0x1d4>
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4698      	mov	r8, r3
 80023d0:	4447      	add	r7, r8
 80023d2:	9703      	str	r7, [sp, #12]
 80023d4:	0423      	lsls	r3, r4, #16
 80023d6:	9e02      	ldr	r6, [sp, #8]
 80023d8:	469a      	mov	sl, r3
 80023da:	9b05      	ldr	r3, [sp, #20]
 80023dc:	445e      	add	r6, fp
 80023de:	4698      	mov	r8, r3
 80023e0:	42ae      	cmp	r6, r5
 80023e2:	41ad      	sbcs	r5, r5
 80023e4:	1876      	adds	r6, r6, r1
 80023e6:	428e      	cmp	r6, r1
 80023e8:	4189      	sbcs	r1, r1
 80023ea:	0400      	lsls	r0, r0, #16
 80023ec:	0c00      	lsrs	r0, r0, #16
 80023ee:	4450      	add	r0, sl
 80023f0:	4440      	add	r0, r8
 80023f2:	426d      	negs	r5, r5
 80023f4:	1947      	adds	r7, r0, r5
 80023f6:	46b8      	mov	r8, r7
 80023f8:	4693      	mov	fp, r2
 80023fa:	4249      	negs	r1, r1
 80023fc:	4689      	mov	r9, r1
 80023fe:	44c3      	add	fp, r8
 8002400:	44d9      	add	r9, fp
 8002402:	4298      	cmp	r0, r3
 8002404:	4180      	sbcs	r0, r0
 8002406:	45a8      	cmp	r8, r5
 8002408:	41ad      	sbcs	r5, r5
 800240a:	4593      	cmp	fp, r2
 800240c:	4192      	sbcs	r2, r2
 800240e:	4589      	cmp	r9, r1
 8002410:	4189      	sbcs	r1, r1
 8002412:	426d      	negs	r5, r5
 8002414:	4240      	negs	r0, r0
 8002416:	4328      	orrs	r0, r5
 8002418:	0c24      	lsrs	r4, r4, #16
 800241a:	4252      	negs	r2, r2
 800241c:	4249      	negs	r1, r1
 800241e:	430a      	orrs	r2, r1
 8002420:	9b03      	ldr	r3, [sp, #12]
 8002422:	1900      	adds	r0, r0, r4
 8002424:	1880      	adds	r0, r0, r2
 8002426:	18c7      	adds	r7, r0, r3
 8002428:	464b      	mov	r3, r9
 800242a:	0ddc      	lsrs	r4, r3, #23
 800242c:	9b04      	ldr	r3, [sp, #16]
 800242e:	0275      	lsls	r5, r6, #9
 8002430:	431d      	orrs	r5, r3
 8002432:	1e6a      	subs	r2, r5, #1
 8002434:	4195      	sbcs	r5, r2
 8002436:	464b      	mov	r3, r9
 8002438:	0df6      	lsrs	r6, r6, #23
 800243a:	027f      	lsls	r7, r7, #9
 800243c:	4335      	orrs	r5, r6
 800243e:	025a      	lsls	r2, r3, #9
 8002440:	433c      	orrs	r4, r7
 8002442:	4315      	orrs	r5, r2
 8002444:	01fb      	lsls	r3, r7, #7
 8002446:	d400      	bmi.n	800244a <__aeabi_dmul+0x24a>
 8002448:	e11c      	b.n	8002684 <__aeabi_dmul+0x484>
 800244a:	2101      	movs	r1, #1
 800244c:	086a      	lsrs	r2, r5, #1
 800244e:	400d      	ands	r5, r1
 8002450:	4315      	orrs	r5, r2
 8002452:	07e2      	lsls	r2, r4, #31
 8002454:	4315      	orrs	r5, r2
 8002456:	0864      	lsrs	r4, r4, #1
 8002458:	494f      	ldr	r1, [pc, #316]	; (8002598 <__aeabi_dmul+0x398>)
 800245a:	4461      	add	r1, ip
 800245c:	2900      	cmp	r1, #0
 800245e:	dc00      	bgt.n	8002462 <__aeabi_dmul+0x262>
 8002460:	e0b0      	b.n	80025c4 <__aeabi_dmul+0x3c4>
 8002462:	076b      	lsls	r3, r5, #29
 8002464:	d009      	beq.n	800247a <__aeabi_dmul+0x27a>
 8002466:	220f      	movs	r2, #15
 8002468:	402a      	ands	r2, r5
 800246a:	2a04      	cmp	r2, #4
 800246c:	d005      	beq.n	800247a <__aeabi_dmul+0x27a>
 800246e:	1d2a      	adds	r2, r5, #4
 8002470:	42aa      	cmp	r2, r5
 8002472:	41ad      	sbcs	r5, r5
 8002474:	426d      	negs	r5, r5
 8002476:	1964      	adds	r4, r4, r5
 8002478:	0015      	movs	r5, r2
 800247a:	01e3      	lsls	r3, r4, #7
 800247c:	d504      	bpl.n	8002488 <__aeabi_dmul+0x288>
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	4a46      	ldr	r2, [pc, #280]	; (800259c <__aeabi_dmul+0x39c>)
 8002482:	00c9      	lsls	r1, r1, #3
 8002484:	4014      	ands	r4, r2
 8002486:	4461      	add	r1, ip
 8002488:	4a45      	ldr	r2, [pc, #276]	; (80025a0 <__aeabi_dmul+0x3a0>)
 800248a:	4291      	cmp	r1, r2
 800248c:	dd00      	ble.n	8002490 <__aeabi_dmul+0x290>
 800248e:	e726      	b.n	80022de <__aeabi_dmul+0xde>
 8002490:	0762      	lsls	r2, r4, #29
 8002492:	08ed      	lsrs	r5, r5, #3
 8002494:	0264      	lsls	r4, r4, #9
 8002496:	0549      	lsls	r1, r1, #21
 8002498:	4315      	orrs	r5, r2
 800249a:	0b24      	lsrs	r4, r4, #12
 800249c:	0d4a      	lsrs	r2, r1, #21
 800249e:	e710      	b.n	80022c2 <__aeabi_dmul+0xc2>
 80024a0:	4652      	mov	r2, sl
 80024a2:	4332      	orrs	r2, r6
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dmul+0x2a8>
 80024a6:	e07f      	b.n	80025a8 <__aeabi_dmul+0x3a8>
 80024a8:	2e00      	cmp	r6, #0
 80024aa:	d100      	bne.n	80024ae <__aeabi_dmul+0x2ae>
 80024ac:	e0dc      	b.n	8002668 <__aeabi_dmul+0x468>
 80024ae:	0030      	movs	r0, r6
 80024b0:	f000 fd96 	bl	8002fe0 <__clzsi2>
 80024b4:	0002      	movs	r2, r0
 80024b6:	3a0b      	subs	r2, #11
 80024b8:	231d      	movs	r3, #29
 80024ba:	0001      	movs	r1, r0
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	4652      	mov	r2, sl
 80024c0:	3908      	subs	r1, #8
 80024c2:	40da      	lsrs	r2, r3
 80024c4:	408e      	lsls	r6, r1
 80024c6:	4316      	orrs	r6, r2
 80024c8:	4652      	mov	r2, sl
 80024ca:	408a      	lsls	r2, r1
 80024cc:	9b00      	ldr	r3, [sp, #0]
 80024ce:	4935      	ldr	r1, [pc, #212]	; (80025a4 <__aeabi_dmul+0x3a4>)
 80024d0:	1a18      	subs	r0, r3, r0
 80024d2:	0003      	movs	r3, r0
 80024d4:	468c      	mov	ip, r1
 80024d6:	4463      	add	r3, ip
 80024d8:	2000      	movs	r0, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	e6d3      	b.n	8002286 <__aeabi_dmul+0x86>
 80024de:	0025      	movs	r5, r4
 80024e0:	4305      	orrs	r5, r0
 80024e2:	d04a      	beq.n	800257a <__aeabi_dmul+0x37a>
 80024e4:	2c00      	cmp	r4, #0
 80024e6:	d100      	bne.n	80024ea <__aeabi_dmul+0x2ea>
 80024e8:	e0b0      	b.n	800264c <__aeabi_dmul+0x44c>
 80024ea:	0020      	movs	r0, r4
 80024ec:	f000 fd78 	bl	8002fe0 <__clzsi2>
 80024f0:	0001      	movs	r1, r0
 80024f2:	0002      	movs	r2, r0
 80024f4:	390b      	subs	r1, #11
 80024f6:	231d      	movs	r3, #29
 80024f8:	0010      	movs	r0, r2
 80024fa:	1a5b      	subs	r3, r3, r1
 80024fc:	0031      	movs	r1, r6
 80024fe:	0035      	movs	r5, r6
 8002500:	3808      	subs	r0, #8
 8002502:	4084      	lsls	r4, r0
 8002504:	40d9      	lsrs	r1, r3
 8002506:	4085      	lsls	r5, r0
 8002508:	430c      	orrs	r4, r1
 800250a:	4826      	ldr	r0, [pc, #152]	; (80025a4 <__aeabi_dmul+0x3a4>)
 800250c:	1a83      	subs	r3, r0, r2
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2300      	movs	r3, #0
 8002512:	4699      	mov	r9, r3
 8002514:	469b      	mov	fp, r3
 8002516:	e697      	b.n	8002248 <__aeabi_dmul+0x48>
 8002518:	0005      	movs	r5, r0
 800251a:	4325      	orrs	r5, r4
 800251c:	d126      	bne.n	800256c <__aeabi_dmul+0x36c>
 800251e:	2208      	movs	r2, #8
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2302      	movs	r3, #2
 8002524:	2400      	movs	r4, #0
 8002526:	4691      	mov	r9, r2
 8002528:	469b      	mov	fp, r3
 800252a:	e68d      	b.n	8002248 <__aeabi_dmul+0x48>
 800252c:	4652      	mov	r2, sl
 800252e:	9b00      	ldr	r3, [sp, #0]
 8002530:	4332      	orrs	r2, r6
 8002532:	d110      	bne.n	8002556 <__aeabi_dmul+0x356>
 8002534:	4915      	ldr	r1, [pc, #84]	; (800258c <__aeabi_dmul+0x38c>)
 8002536:	2600      	movs	r6, #0
 8002538:	468c      	mov	ip, r1
 800253a:	4463      	add	r3, ip
 800253c:	4649      	mov	r1, r9
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2302      	movs	r3, #2
 8002542:	4319      	orrs	r1, r3
 8002544:	4689      	mov	r9, r1
 8002546:	2002      	movs	r0, #2
 8002548:	e69d      	b.n	8002286 <__aeabi_dmul+0x86>
 800254a:	465b      	mov	r3, fp
 800254c:	9701      	str	r7, [sp, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d000      	beq.n	8002554 <__aeabi_dmul+0x354>
 8002552:	e6ad      	b.n	80022b0 <__aeabi_dmul+0xb0>
 8002554:	e6c3      	b.n	80022de <__aeabi_dmul+0xde>
 8002556:	4a0d      	ldr	r2, [pc, #52]	; (800258c <__aeabi_dmul+0x38c>)
 8002558:	2003      	movs	r0, #3
 800255a:	4694      	mov	ip, r2
 800255c:	4463      	add	r3, ip
 800255e:	464a      	mov	r2, r9
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2303      	movs	r3, #3
 8002564:	431a      	orrs	r2, r3
 8002566:	4691      	mov	r9, r2
 8002568:	4652      	mov	r2, sl
 800256a:	e68c      	b.n	8002286 <__aeabi_dmul+0x86>
 800256c:	220c      	movs	r2, #12
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2303      	movs	r3, #3
 8002572:	0005      	movs	r5, r0
 8002574:	4691      	mov	r9, r2
 8002576:	469b      	mov	fp, r3
 8002578:	e666      	b.n	8002248 <__aeabi_dmul+0x48>
 800257a:	2304      	movs	r3, #4
 800257c:	4699      	mov	r9, r3
 800257e:	2300      	movs	r3, #0
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	2400      	movs	r4, #0
 8002586:	469b      	mov	fp, r3
 8002588:	e65e      	b.n	8002248 <__aeabi_dmul+0x48>
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	000007ff 	.word	0x000007ff
 8002590:	fffffc01 	.word	0xfffffc01
 8002594:	08010168 	.word	0x08010168
 8002598:	000003ff 	.word	0x000003ff
 800259c:	feffffff 	.word	0xfeffffff
 80025a0:	000007fe 	.word	0x000007fe
 80025a4:	fffffc0d 	.word	0xfffffc0d
 80025a8:	4649      	mov	r1, r9
 80025aa:	2301      	movs	r3, #1
 80025ac:	4319      	orrs	r1, r3
 80025ae:	4689      	mov	r9, r1
 80025b0:	2600      	movs	r6, #0
 80025b2:	2001      	movs	r0, #1
 80025b4:	e667      	b.n	8002286 <__aeabi_dmul+0x86>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2480      	movs	r4, #128	; 0x80
 80025ba:	2500      	movs	r5, #0
 80025bc:	4a43      	ldr	r2, [pc, #268]	; (80026cc <__aeabi_dmul+0x4cc>)
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	0324      	lsls	r4, r4, #12
 80025c2:	e67e      	b.n	80022c2 <__aeabi_dmul+0xc2>
 80025c4:	2001      	movs	r0, #1
 80025c6:	1a40      	subs	r0, r0, r1
 80025c8:	2838      	cmp	r0, #56	; 0x38
 80025ca:	dd00      	ble.n	80025ce <__aeabi_dmul+0x3ce>
 80025cc:	e676      	b.n	80022bc <__aeabi_dmul+0xbc>
 80025ce:	281f      	cmp	r0, #31
 80025d0:	dd5b      	ble.n	800268a <__aeabi_dmul+0x48a>
 80025d2:	221f      	movs	r2, #31
 80025d4:	0023      	movs	r3, r4
 80025d6:	4252      	negs	r2, r2
 80025d8:	1a51      	subs	r1, r2, r1
 80025da:	40cb      	lsrs	r3, r1
 80025dc:	0019      	movs	r1, r3
 80025de:	2820      	cmp	r0, #32
 80025e0:	d003      	beq.n	80025ea <__aeabi_dmul+0x3ea>
 80025e2:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <__aeabi_dmul+0x4d0>)
 80025e4:	4462      	add	r2, ip
 80025e6:	4094      	lsls	r4, r2
 80025e8:	4325      	orrs	r5, r4
 80025ea:	1e6a      	subs	r2, r5, #1
 80025ec:	4195      	sbcs	r5, r2
 80025ee:	002a      	movs	r2, r5
 80025f0:	430a      	orrs	r2, r1
 80025f2:	2107      	movs	r1, #7
 80025f4:	000d      	movs	r5, r1
 80025f6:	2400      	movs	r4, #0
 80025f8:	4015      	ands	r5, r2
 80025fa:	4211      	tst	r1, r2
 80025fc:	d05b      	beq.n	80026b6 <__aeabi_dmul+0x4b6>
 80025fe:	210f      	movs	r1, #15
 8002600:	2400      	movs	r4, #0
 8002602:	4011      	ands	r1, r2
 8002604:	2904      	cmp	r1, #4
 8002606:	d053      	beq.n	80026b0 <__aeabi_dmul+0x4b0>
 8002608:	1d11      	adds	r1, r2, #4
 800260a:	4291      	cmp	r1, r2
 800260c:	4192      	sbcs	r2, r2
 800260e:	4252      	negs	r2, r2
 8002610:	18a4      	adds	r4, r4, r2
 8002612:	000a      	movs	r2, r1
 8002614:	0223      	lsls	r3, r4, #8
 8002616:	d54b      	bpl.n	80026b0 <__aeabi_dmul+0x4b0>
 8002618:	2201      	movs	r2, #1
 800261a:	2400      	movs	r4, #0
 800261c:	2500      	movs	r5, #0
 800261e:	e650      	b.n	80022c2 <__aeabi_dmul+0xc2>
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	421c      	tst	r4, r3
 8002626:	d009      	beq.n	800263c <__aeabi_dmul+0x43c>
 8002628:	421e      	tst	r6, r3
 800262a:	d107      	bne.n	800263c <__aeabi_dmul+0x43c>
 800262c:	4333      	orrs	r3, r6
 800262e:	031c      	lsls	r4, r3, #12
 8002630:	4643      	mov	r3, r8
 8002632:	0015      	movs	r5, r2
 8002634:	0b24      	lsrs	r4, r4, #12
 8002636:	4a25      	ldr	r2, [pc, #148]	; (80026cc <__aeabi_dmul+0x4cc>)
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	e642      	b.n	80022c2 <__aeabi_dmul+0xc2>
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	0312      	lsls	r2, r2, #12
 8002640:	4314      	orrs	r4, r2
 8002642:	0324      	lsls	r4, r4, #12
 8002644:	4a21      	ldr	r2, [pc, #132]	; (80026cc <__aeabi_dmul+0x4cc>)
 8002646:	0b24      	lsrs	r4, r4, #12
 8002648:	9701      	str	r7, [sp, #4]
 800264a:	e63a      	b.n	80022c2 <__aeabi_dmul+0xc2>
 800264c:	f000 fcc8 	bl	8002fe0 <__clzsi2>
 8002650:	0001      	movs	r1, r0
 8002652:	0002      	movs	r2, r0
 8002654:	3115      	adds	r1, #21
 8002656:	3220      	adds	r2, #32
 8002658:	291c      	cmp	r1, #28
 800265a:	dc00      	bgt.n	800265e <__aeabi_dmul+0x45e>
 800265c:	e74b      	b.n	80024f6 <__aeabi_dmul+0x2f6>
 800265e:	0034      	movs	r4, r6
 8002660:	3808      	subs	r0, #8
 8002662:	2500      	movs	r5, #0
 8002664:	4084      	lsls	r4, r0
 8002666:	e750      	b.n	800250a <__aeabi_dmul+0x30a>
 8002668:	f000 fcba 	bl	8002fe0 <__clzsi2>
 800266c:	0003      	movs	r3, r0
 800266e:	001a      	movs	r2, r3
 8002670:	3215      	adds	r2, #21
 8002672:	3020      	adds	r0, #32
 8002674:	2a1c      	cmp	r2, #28
 8002676:	dc00      	bgt.n	800267a <__aeabi_dmul+0x47a>
 8002678:	e71e      	b.n	80024b8 <__aeabi_dmul+0x2b8>
 800267a:	4656      	mov	r6, sl
 800267c:	3b08      	subs	r3, #8
 800267e:	2200      	movs	r2, #0
 8002680:	409e      	lsls	r6, r3
 8002682:	e723      	b.n	80024cc <__aeabi_dmul+0x2cc>
 8002684:	9b00      	ldr	r3, [sp, #0]
 8002686:	469c      	mov	ip, r3
 8002688:	e6e6      	b.n	8002458 <__aeabi_dmul+0x258>
 800268a:	4912      	ldr	r1, [pc, #72]	; (80026d4 <__aeabi_dmul+0x4d4>)
 800268c:	0022      	movs	r2, r4
 800268e:	4461      	add	r1, ip
 8002690:	002e      	movs	r6, r5
 8002692:	408d      	lsls	r5, r1
 8002694:	408a      	lsls	r2, r1
 8002696:	40c6      	lsrs	r6, r0
 8002698:	1e69      	subs	r1, r5, #1
 800269a:	418d      	sbcs	r5, r1
 800269c:	4332      	orrs	r2, r6
 800269e:	432a      	orrs	r2, r5
 80026a0:	40c4      	lsrs	r4, r0
 80026a2:	0753      	lsls	r3, r2, #29
 80026a4:	d0b6      	beq.n	8002614 <__aeabi_dmul+0x414>
 80026a6:	210f      	movs	r1, #15
 80026a8:	4011      	ands	r1, r2
 80026aa:	2904      	cmp	r1, #4
 80026ac:	d1ac      	bne.n	8002608 <__aeabi_dmul+0x408>
 80026ae:	e7b1      	b.n	8002614 <__aeabi_dmul+0x414>
 80026b0:	0765      	lsls	r5, r4, #29
 80026b2:	0264      	lsls	r4, r4, #9
 80026b4:	0b24      	lsrs	r4, r4, #12
 80026b6:	08d2      	lsrs	r2, r2, #3
 80026b8:	4315      	orrs	r5, r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	e601      	b.n	80022c2 <__aeabi_dmul+0xc2>
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	0312      	lsls	r2, r2, #12
 80026c2:	4314      	orrs	r4, r2
 80026c4:	0324      	lsls	r4, r4, #12
 80026c6:	4a01      	ldr	r2, [pc, #4]	; (80026cc <__aeabi_dmul+0x4cc>)
 80026c8:	0b24      	lsrs	r4, r4, #12
 80026ca:	e5fa      	b.n	80022c2 <__aeabi_dmul+0xc2>
 80026cc:	000007ff 	.word	0x000007ff
 80026d0:	0000043e 	.word	0x0000043e
 80026d4:	0000041e 	.word	0x0000041e

080026d8 <__aeabi_dsub>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	4657      	mov	r7, sl
 80026dc:	464e      	mov	r6, r9
 80026de:	4645      	mov	r5, r8
 80026e0:	46de      	mov	lr, fp
 80026e2:	b5e0      	push	{r5, r6, r7, lr}
 80026e4:	001e      	movs	r6, r3
 80026e6:	0017      	movs	r7, r2
 80026e8:	004a      	lsls	r2, r1, #1
 80026ea:	030b      	lsls	r3, r1, #12
 80026ec:	0d52      	lsrs	r2, r2, #21
 80026ee:	0a5b      	lsrs	r3, r3, #9
 80026f0:	4690      	mov	r8, r2
 80026f2:	0f42      	lsrs	r2, r0, #29
 80026f4:	431a      	orrs	r2, r3
 80026f6:	0fcd      	lsrs	r5, r1, #31
 80026f8:	4ccd      	ldr	r4, [pc, #820]	; (8002a30 <__aeabi_dsub+0x358>)
 80026fa:	0331      	lsls	r1, r6, #12
 80026fc:	00c3      	lsls	r3, r0, #3
 80026fe:	4694      	mov	ip, r2
 8002700:	0070      	lsls	r0, r6, #1
 8002702:	0f7a      	lsrs	r2, r7, #29
 8002704:	0a49      	lsrs	r1, r1, #9
 8002706:	00ff      	lsls	r7, r7, #3
 8002708:	469a      	mov	sl, r3
 800270a:	46b9      	mov	r9, r7
 800270c:	0d40      	lsrs	r0, r0, #21
 800270e:	0ff6      	lsrs	r6, r6, #31
 8002710:	4311      	orrs	r1, r2
 8002712:	42a0      	cmp	r0, r4
 8002714:	d100      	bne.n	8002718 <__aeabi_dsub+0x40>
 8002716:	e0b1      	b.n	800287c <__aeabi_dsub+0x1a4>
 8002718:	2201      	movs	r2, #1
 800271a:	4056      	eors	r6, r2
 800271c:	46b3      	mov	fp, r6
 800271e:	42b5      	cmp	r5, r6
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x4c>
 8002722:	e088      	b.n	8002836 <__aeabi_dsub+0x15e>
 8002724:	4642      	mov	r2, r8
 8002726:	1a12      	subs	r2, r2, r0
 8002728:	2a00      	cmp	r2, #0
 800272a:	dc00      	bgt.n	800272e <__aeabi_dsub+0x56>
 800272c:	e0ae      	b.n	800288c <__aeabi_dsub+0x1b4>
 800272e:	2800      	cmp	r0, #0
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x5c>
 8002732:	e0c1      	b.n	80028b8 <__aeabi_dsub+0x1e0>
 8002734:	48be      	ldr	r0, [pc, #760]	; (8002a30 <__aeabi_dsub+0x358>)
 8002736:	4580      	cmp	r8, r0
 8002738:	d100      	bne.n	800273c <__aeabi_dsub+0x64>
 800273a:	e151      	b.n	80029e0 <__aeabi_dsub+0x308>
 800273c:	2080      	movs	r0, #128	; 0x80
 800273e:	0400      	lsls	r0, r0, #16
 8002740:	4301      	orrs	r1, r0
 8002742:	2a38      	cmp	r2, #56	; 0x38
 8002744:	dd00      	ble.n	8002748 <__aeabi_dsub+0x70>
 8002746:	e17b      	b.n	8002a40 <__aeabi_dsub+0x368>
 8002748:	2a1f      	cmp	r2, #31
 800274a:	dd00      	ble.n	800274e <__aeabi_dsub+0x76>
 800274c:	e1ee      	b.n	8002b2c <__aeabi_dsub+0x454>
 800274e:	2020      	movs	r0, #32
 8002750:	003e      	movs	r6, r7
 8002752:	1a80      	subs	r0, r0, r2
 8002754:	000c      	movs	r4, r1
 8002756:	40d6      	lsrs	r6, r2
 8002758:	40d1      	lsrs	r1, r2
 800275a:	4087      	lsls	r7, r0
 800275c:	4662      	mov	r2, ip
 800275e:	4084      	lsls	r4, r0
 8002760:	1a52      	subs	r2, r2, r1
 8002762:	1e78      	subs	r0, r7, #1
 8002764:	4187      	sbcs	r7, r0
 8002766:	4694      	mov	ip, r2
 8002768:	4334      	orrs	r4, r6
 800276a:	4327      	orrs	r7, r4
 800276c:	1bdc      	subs	r4, r3, r7
 800276e:	42a3      	cmp	r3, r4
 8002770:	419b      	sbcs	r3, r3
 8002772:	4662      	mov	r2, ip
 8002774:	425b      	negs	r3, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	4699      	mov	r9, r3
 800277a:	464b      	mov	r3, r9
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	d400      	bmi.n	8002782 <__aeabi_dsub+0xaa>
 8002780:	e118      	b.n	80029b4 <__aeabi_dsub+0x2dc>
 8002782:	464b      	mov	r3, r9
 8002784:	0258      	lsls	r0, r3, #9
 8002786:	0a43      	lsrs	r3, r0, #9
 8002788:	4699      	mov	r9, r3
 800278a:	464b      	mov	r3, r9
 800278c:	2b00      	cmp	r3, #0
 800278e:	d100      	bne.n	8002792 <__aeabi_dsub+0xba>
 8002790:	e137      	b.n	8002a02 <__aeabi_dsub+0x32a>
 8002792:	4648      	mov	r0, r9
 8002794:	f000 fc24 	bl	8002fe0 <__clzsi2>
 8002798:	0001      	movs	r1, r0
 800279a:	3908      	subs	r1, #8
 800279c:	2320      	movs	r3, #32
 800279e:	0022      	movs	r2, r4
 80027a0:	4648      	mov	r0, r9
 80027a2:	1a5b      	subs	r3, r3, r1
 80027a4:	40da      	lsrs	r2, r3
 80027a6:	4088      	lsls	r0, r1
 80027a8:	408c      	lsls	r4, r1
 80027aa:	4643      	mov	r3, r8
 80027ac:	4310      	orrs	r0, r2
 80027ae:	4588      	cmp	r8, r1
 80027b0:	dd00      	ble.n	80027b4 <__aeabi_dsub+0xdc>
 80027b2:	e136      	b.n	8002a22 <__aeabi_dsub+0x34a>
 80027b4:	1ac9      	subs	r1, r1, r3
 80027b6:	1c4b      	adds	r3, r1, #1
 80027b8:	2b1f      	cmp	r3, #31
 80027ba:	dd00      	ble.n	80027be <__aeabi_dsub+0xe6>
 80027bc:	e0ea      	b.n	8002994 <__aeabi_dsub+0x2bc>
 80027be:	2220      	movs	r2, #32
 80027c0:	0026      	movs	r6, r4
 80027c2:	1ad2      	subs	r2, r2, r3
 80027c4:	0001      	movs	r1, r0
 80027c6:	4094      	lsls	r4, r2
 80027c8:	40de      	lsrs	r6, r3
 80027ca:	40d8      	lsrs	r0, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	4091      	lsls	r1, r2
 80027d0:	1e62      	subs	r2, r4, #1
 80027d2:	4194      	sbcs	r4, r2
 80027d4:	4681      	mov	r9, r0
 80027d6:	4698      	mov	r8, r3
 80027d8:	4331      	orrs	r1, r6
 80027da:	430c      	orrs	r4, r1
 80027dc:	0763      	lsls	r3, r4, #29
 80027de:	d009      	beq.n	80027f4 <__aeabi_dsub+0x11c>
 80027e0:	230f      	movs	r3, #15
 80027e2:	4023      	ands	r3, r4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d005      	beq.n	80027f4 <__aeabi_dsub+0x11c>
 80027e8:	1d23      	adds	r3, r4, #4
 80027ea:	42a3      	cmp	r3, r4
 80027ec:	41a4      	sbcs	r4, r4
 80027ee:	4264      	negs	r4, r4
 80027f0:	44a1      	add	r9, r4
 80027f2:	001c      	movs	r4, r3
 80027f4:	464b      	mov	r3, r9
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	d400      	bmi.n	80027fc <__aeabi_dsub+0x124>
 80027fa:	e0de      	b.n	80029ba <__aeabi_dsub+0x2e2>
 80027fc:	4641      	mov	r1, r8
 80027fe:	4b8c      	ldr	r3, [pc, #560]	; (8002a30 <__aeabi_dsub+0x358>)
 8002800:	3101      	adds	r1, #1
 8002802:	4299      	cmp	r1, r3
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x130>
 8002806:	e0e7      	b.n	80029d8 <__aeabi_dsub+0x300>
 8002808:	464b      	mov	r3, r9
 800280a:	488a      	ldr	r0, [pc, #552]	; (8002a34 <__aeabi_dsub+0x35c>)
 800280c:	08e4      	lsrs	r4, r4, #3
 800280e:	4003      	ands	r3, r0
 8002810:	0018      	movs	r0, r3
 8002812:	0549      	lsls	r1, r1, #21
 8002814:	075b      	lsls	r3, r3, #29
 8002816:	0240      	lsls	r0, r0, #9
 8002818:	4323      	orrs	r3, r4
 800281a:	0d4a      	lsrs	r2, r1, #21
 800281c:	0b04      	lsrs	r4, r0, #12
 800281e:	0512      	lsls	r2, r2, #20
 8002820:	07ed      	lsls	r5, r5, #31
 8002822:	4322      	orrs	r2, r4
 8002824:	432a      	orrs	r2, r5
 8002826:	0018      	movs	r0, r3
 8002828:	0011      	movs	r1, r2
 800282a:	bcf0      	pop	{r4, r5, r6, r7}
 800282c:	46bb      	mov	fp, r7
 800282e:	46b2      	mov	sl, r6
 8002830:	46a9      	mov	r9, r5
 8002832:	46a0      	mov	r8, r4
 8002834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002836:	4642      	mov	r2, r8
 8002838:	1a12      	subs	r2, r2, r0
 800283a:	2a00      	cmp	r2, #0
 800283c:	dd52      	ble.n	80028e4 <__aeabi_dsub+0x20c>
 800283e:	2800      	cmp	r0, #0
 8002840:	d100      	bne.n	8002844 <__aeabi_dsub+0x16c>
 8002842:	e09c      	b.n	800297e <__aeabi_dsub+0x2a6>
 8002844:	45a0      	cmp	r8, r4
 8002846:	d100      	bne.n	800284a <__aeabi_dsub+0x172>
 8002848:	e0ca      	b.n	80029e0 <__aeabi_dsub+0x308>
 800284a:	2080      	movs	r0, #128	; 0x80
 800284c:	0400      	lsls	r0, r0, #16
 800284e:	4301      	orrs	r1, r0
 8002850:	2a38      	cmp	r2, #56	; 0x38
 8002852:	dd00      	ble.n	8002856 <__aeabi_dsub+0x17e>
 8002854:	e149      	b.n	8002aea <__aeabi_dsub+0x412>
 8002856:	2a1f      	cmp	r2, #31
 8002858:	dc00      	bgt.n	800285c <__aeabi_dsub+0x184>
 800285a:	e197      	b.n	8002b8c <__aeabi_dsub+0x4b4>
 800285c:	0010      	movs	r0, r2
 800285e:	000e      	movs	r6, r1
 8002860:	3820      	subs	r0, #32
 8002862:	40c6      	lsrs	r6, r0
 8002864:	2a20      	cmp	r2, #32
 8002866:	d004      	beq.n	8002872 <__aeabi_dsub+0x19a>
 8002868:	2040      	movs	r0, #64	; 0x40
 800286a:	1a82      	subs	r2, r0, r2
 800286c:	4091      	lsls	r1, r2
 800286e:	430f      	orrs	r7, r1
 8002870:	46b9      	mov	r9, r7
 8002872:	464c      	mov	r4, r9
 8002874:	1e62      	subs	r2, r4, #1
 8002876:	4194      	sbcs	r4, r2
 8002878:	4334      	orrs	r4, r6
 800287a:	e13a      	b.n	8002af2 <__aeabi_dsub+0x41a>
 800287c:	000a      	movs	r2, r1
 800287e:	433a      	orrs	r2, r7
 8002880:	d028      	beq.n	80028d4 <__aeabi_dsub+0x1fc>
 8002882:	46b3      	mov	fp, r6
 8002884:	42b5      	cmp	r5, r6
 8002886:	d02b      	beq.n	80028e0 <__aeabi_dsub+0x208>
 8002888:	4a6b      	ldr	r2, [pc, #428]	; (8002a38 <__aeabi_dsub+0x360>)
 800288a:	4442      	add	r2, r8
 800288c:	2a00      	cmp	r2, #0
 800288e:	d05d      	beq.n	800294c <__aeabi_dsub+0x274>
 8002890:	4642      	mov	r2, r8
 8002892:	4644      	mov	r4, r8
 8002894:	1a82      	subs	r2, r0, r2
 8002896:	2c00      	cmp	r4, #0
 8002898:	d000      	beq.n	800289c <__aeabi_dsub+0x1c4>
 800289a:	e0f5      	b.n	8002a88 <__aeabi_dsub+0x3b0>
 800289c:	4665      	mov	r5, ip
 800289e:	431d      	orrs	r5, r3
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x1cc>
 80028a2:	e19c      	b.n	8002bde <__aeabi_dsub+0x506>
 80028a4:	1e55      	subs	r5, r2, #1
 80028a6:	2a01      	cmp	r2, #1
 80028a8:	d100      	bne.n	80028ac <__aeabi_dsub+0x1d4>
 80028aa:	e1fb      	b.n	8002ca4 <__aeabi_dsub+0x5cc>
 80028ac:	4c60      	ldr	r4, [pc, #384]	; (8002a30 <__aeabi_dsub+0x358>)
 80028ae:	42a2      	cmp	r2, r4
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dsub+0x1dc>
 80028b2:	e1bd      	b.n	8002c30 <__aeabi_dsub+0x558>
 80028b4:	002a      	movs	r2, r5
 80028b6:	e0f0      	b.n	8002a9a <__aeabi_dsub+0x3c2>
 80028b8:	0008      	movs	r0, r1
 80028ba:	4338      	orrs	r0, r7
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x1e8>
 80028be:	e0c3      	b.n	8002a48 <__aeabi_dsub+0x370>
 80028c0:	1e50      	subs	r0, r2, #1
 80028c2:	2a01      	cmp	r2, #1
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x1f0>
 80028c6:	e1a8      	b.n	8002c1a <__aeabi_dsub+0x542>
 80028c8:	4c59      	ldr	r4, [pc, #356]	; (8002a30 <__aeabi_dsub+0x358>)
 80028ca:	42a2      	cmp	r2, r4
 80028cc:	d100      	bne.n	80028d0 <__aeabi_dsub+0x1f8>
 80028ce:	e087      	b.n	80029e0 <__aeabi_dsub+0x308>
 80028d0:	0002      	movs	r2, r0
 80028d2:	e736      	b.n	8002742 <__aeabi_dsub+0x6a>
 80028d4:	2201      	movs	r2, #1
 80028d6:	4056      	eors	r6, r2
 80028d8:	46b3      	mov	fp, r6
 80028da:	42b5      	cmp	r5, r6
 80028dc:	d000      	beq.n	80028e0 <__aeabi_dsub+0x208>
 80028de:	e721      	b.n	8002724 <__aeabi_dsub+0x4c>
 80028e0:	4a55      	ldr	r2, [pc, #340]	; (8002a38 <__aeabi_dsub+0x360>)
 80028e2:	4442      	add	r2, r8
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	d100      	bne.n	80028ea <__aeabi_dsub+0x212>
 80028e8:	e0b5      	b.n	8002a56 <__aeabi_dsub+0x37e>
 80028ea:	4642      	mov	r2, r8
 80028ec:	4644      	mov	r4, r8
 80028ee:	1a82      	subs	r2, r0, r2
 80028f0:	2c00      	cmp	r4, #0
 80028f2:	d100      	bne.n	80028f6 <__aeabi_dsub+0x21e>
 80028f4:	e138      	b.n	8002b68 <__aeabi_dsub+0x490>
 80028f6:	4e4e      	ldr	r6, [pc, #312]	; (8002a30 <__aeabi_dsub+0x358>)
 80028f8:	42b0      	cmp	r0, r6
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x226>
 80028fc:	e1de      	b.n	8002cbc <__aeabi_dsub+0x5e4>
 80028fe:	2680      	movs	r6, #128	; 0x80
 8002900:	4664      	mov	r4, ip
 8002902:	0436      	lsls	r6, r6, #16
 8002904:	4334      	orrs	r4, r6
 8002906:	46a4      	mov	ip, r4
 8002908:	2a38      	cmp	r2, #56	; 0x38
 800290a:	dd00      	ble.n	800290e <__aeabi_dsub+0x236>
 800290c:	e196      	b.n	8002c3c <__aeabi_dsub+0x564>
 800290e:	2a1f      	cmp	r2, #31
 8002910:	dd00      	ble.n	8002914 <__aeabi_dsub+0x23c>
 8002912:	e224      	b.n	8002d5e <__aeabi_dsub+0x686>
 8002914:	2620      	movs	r6, #32
 8002916:	1ab4      	subs	r4, r6, r2
 8002918:	46a2      	mov	sl, r4
 800291a:	4664      	mov	r4, ip
 800291c:	4656      	mov	r6, sl
 800291e:	40b4      	lsls	r4, r6
 8002920:	46a1      	mov	r9, r4
 8002922:	001c      	movs	r4, r3
 8002924:	464e      	mov	r6, r9
 8002926:	40d4      	lsrs	r4, r2
 8002928:	4326      	orrs	r6, r4
 800292a:	0034      	movs	r4, r6
 800292c:	4656      	mov	r6, sl
 800292e:	40b3      	lsls	r3, r6
 8002930:	1e5e      	subs	r6, r3, #1
 8002932:	41b3      	sbcs	r3, r6
 8002934:	431c      	orrs	r4, r3
 8002936:	4663      	mov	r3, ip
 8002938:	40d3      	lsrs	r3, r2
 800293a:	18c9      	adds	r1, r1, r3
 800293c:	19e4      	adds	r4, r4, r7
 800293e:	42bc      	cmp	r4, r7
 8002940:	41bf      	sbcs	r7, r7
 8002942:	427f      	negs	r7, r7
 8002944:	46b9      	mov	r9, r7
 8002946:	4680      	mov	r8, r0
 8002948:	4489      	add	r9, r1
 800294a:	e0d8      	b.n	8002afe <__aeabi_dsub+0x426>
 800294c:	4640      	mov	r0, r8
 800294e:	4c3b      	ldr	r4, [pc, #236]	; (8002a3c <__aeabi_dsub+0x364>)
 8002950:	3001      	adds	r0, #1
 8002952:	4220      	tst	r0, r4
 8002954:	d000      	beq.n	8002958 <__aeabi_dsub+0x280>
 8002956:	e0b4      	b.n	8002ac2 <__aeabi_dsub+0x3ea>
 8002958:	4640      	mov	r0, r8
 800295a:	2800      	cmp	r0, #0
 800295c:	d000      	beq.n	8002960 <__aeabi_dsub+0x288>
 800295e:	e144      	b.n	8002bea <__aeabi_dsub+0x512>
 8002960:	4660      	mov	r0, ip
 8002962:	4318      	orrs	r0, r3
 8002964:	d100      	bne.n	8002968 <__aeabi_dsub+0x290>
 8002966:	e190      	b.n	8002c8a <__aeabi_dsub+0x5b2>
 8002968:	0008      	movs	r0, r1
 800296a:	4338      	orrs	r0, r7
 800296c:	d000      	beq.n	8002970 <__aeabi_dsub+0x298>
 800296e:	e1aa      	b.n	8002cc6 <__aeabi_dsub+0x5ee>
 8002970:	4661      	mov	r1, ip
 8002972:	08db      	lsrs	r3, r3, #3
 8002974:	0749      	lsls	r1, r1, #29
 8002976:	430b      	orrs	r3, r1
 8002978:	4661      	mov	r1, ip
 800297a:	08cc      	lsrs	r4, r1, #3
 800297c:	e027      	b.n	80029ce <__aeabi_dsub+0x2f6>
 800297e:	0008      	movs	r0, r1
 8002980:	4338      	orrs	r0, r7
 8002982:	d061      	beq.n	8002a48 <__aeabi_dsub+0x370>
 8002984:	1e50      	subs	r0, r2, #1
 8002986:	2a01      	cmp	r2, #1
 8002988:	d100      	bne.n	800298c <__aeabi_dsub+0x2b4>
 800298a:	e139      	b.n	8002c00 <__aeabi_dsub+0x528>
 800298c:	42a2      	cmp	r2, r4
 800298e:	d027      	beq.n	80029e0 <__aeabi_dsub+0x308>
 8002990:	0002      	movs	r2, r0
 8002992:	e75d      	b.n	8002850 <__aeabi_dsub+0x178>
 8002994:	0002      	movs	r2, r0
 8002996:	391f      	subs	r1, #31
 8002998:	40ca      	lsrs	r2, r1
 800299a:	0011      	movs	r1, r2
 800299c:	2b20      	cmp	r3, #32
 800299e:	d003      	beq.n	80029a8 <__aeabi_dsub+0x2d0>
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	4098      	lsls	r0, r3
 80029a6:	4304      	orrs	r4, r0
 80029a8:	1e63      	subs	r3, r4, #1
 80029aa:	419c      	sbcs	r4, r3
 80029ac:	2300      	movs	r3, #0
 80029ae:	4699      	mov	r9, r3
 80029b0:	4698      	mov	r8, r3
 80029b2:	430c      	orrs	r4, r1
 80029b4:	0763      	lsls	r3, r4, #29
 80029b6:	d000      	beq.n	80029ba <__aeabi_dsub+0x2e2>
 80029b8:	e712      	b.n	80027e0 <__aeabi_dsub+0x108>
 80029ba:	464b      	mov	r3, r9
 80029bc:	464a      	mov	r2, r9
 80029be:	08e4      	lsrs	r4, r4, #3
 80029c0:	075b      	lsls	r3, r3, #29
 80029c2:	4323      	orrs	r3, r4
 80029c4:	08d4      	lsrs	r4, r2, #3
 80029c6:	4642      	mov	r2, r8
 80029c8:	4919      	ldr	r1, [pc, #100]	; (8002a30 <__aeabi_dsub+0x358>)
 80029ca:	428a      	cmp	r2, r1
 80029cc:	d00e      	beq.n	80029ec <__aeabi_dsub+0x314>
 80029ce:	0324      	lsls	r4, r4, #12
 80029d0:	0552      	lsls	r2, r2, #21
 80029d2:	0b24      	lsrs	r4, r4, #12
 80029d4:	0d52      	lsrs	r2, r2, #21
 80029d6:	e722      	b.n	800281e <__aeabi_dsub+0x146>
 80029d8:	000a      	movs	r2, r1
 80029da:	2400      	movs	r4, #0
 80029dc:	2300      	movs	r3, #0
 80029de:	e71e      	b.n	800281e <__aeabi_dsub+0x146>
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	4662      	mov	r2, ip
 80029e4:	0752      	lsls	r2, r2, #29
 80029e6:	4313      	orrs	r3, r2
 80029e8:	4662      	mov	r2, ip
 80029ea:	08d4      	lsrs	r4, r2, #3
 80029ec:	001a      	movs	r2, r3
 80029ee:	4322      	orrs	r2, r4
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x31c>
 80029f2:	e1fc      	b.n	8002dee <__aeabi_dsub+0x716>
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0312      	lsls	r2, r2, #12
 80029f8:	4314      	orrs	r4, r2
 80029fa:	0324      	lsls	r4, r4, #12
 80029fc:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <__aeabi_dsub+0x358>)
 80029fe:	0b24      	lsrs	r4, r4, #12
 8002a00:	e70d      	b.n	800281e <__aeabi_dsub+0x146>
 8002a02:	0020      	movs	r0, r4
 8002a04:	f000 faec 	bl	8002fe0 <__clzsi2>
 8002a08:	0001      	movs	r1, r0
 8002a0a:	3118      	adds	r1, #24
 8002a0c:	291f      	cmp	r1, #31
 8002a0e:	dc00      	bgt.n	8002a12 <__aeabi_dsub+0x33a>
 8002a10:	e6c4      	b.n	800279c <__aeabi_dsub+0xc4>
 8002a12:	3808      	subs	r0, #8
 8002a14:	4084      	lsls	r4, r0
 8002a16:	4643      	mov	r3, r8
 8002a18:	0020      	movs	r0, r4
 8002a1a:	2400      	movs	r4, #0
 8002a1c:	4588      	cmp	r8, r1
 8002a1e:	dc00      	bgt.n	8002a22 <__aeabi_dsub+0x34a>
 8002a20:	e6c8      	b.n	80027b4 <__aeabi_dsub+0xdc>
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__aeabi_dsub+0x35c>)
 8002a24:	1a5b      	subs	r3, r3, r1
 8002a26:	4010      	ands	r0, r2
 8002a28:	4698      	mov	r8, r3
 8002a2a:	4681      	mov	r9, r0
 8002a2c:	e6d6      	b.n	80027dc <__aeabi_dsub+0x104>
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	000007ff 	.word	0x000007ff
 8002a34:	ff7fffff 	.word	0xff7fffff
 8002a38:	fffff801 	.word	0xfffff801
 8002a3c:	000007fe 	.word	0x000007fe
 8002a40:	430f      	orrs	r7, r1
 8002a42:	1e7a      	subs	r2, r7, #1
 8002a44:	4197      	sbcs	r7, r2
 8002a46:	e691      	b.n	800276c <__aeabi_dsub+0x94>
 8002a48:	4661      	mov	r1, ip
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	0749      	lsls	r1, r1, #29
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	4661      	mov	r1, ip
 8002a52:	08cc      	lsrs	r4, r1, #3
 8002a54:	e7b8      	b.n	80029c8 <__aeabi_dsub+0x2f0>
 8002a56:	4640      	mov	r0, r8
 8002a58:	4cd3      	ldr	r4, [pc, #844]	; (8002da8 <__aeabi_dsub+0x6d0>)
 8002a5a:	3001      	adds	r0, #1
 8002a5c:	4220      	tst	r0, r4
 8002a5e:	d000      	beq.n	8002a62 <__aeabi_dsub+0x38a>
 8002a60:	e0a2      	b.n	8002ba8 <__aeabi_dsub+0x4d0>
 8002a62:	4640      	mov	r0, r8
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d000      	beq.n	8002a6a <__aeabi_dsub+0x392>
 8002a68:	e101      	b.n	8002c6e <__aeabi_dsub+0x596>
 8002a6a:	4660      	mov	r0, ip
 8002a6c:	4318      	orrs	r0, r3
 8002a6e:	d100      	bne.n	8002a72 <__aeabi_dsub+0x39a>
 8002a70:	e15e      	b.n	8002d30 <__aeabi_dsub+0x658>
 8002a72:	0008      	movs	r0, r1
 8002a74:	4338      	orrs	r0, r7
 8002a76:	d000      	beq.n	8002a7a <__aeabi_dsub+0x3a2>
 8002a78:	e15f      	b.n	8002d3a <__aeabi_dsub+0x662>
 8002a7a:	4661      	mov	r1, ip
 8002a7c:	08db      	lsrs	r3, r3, #3
 8002a7e:	0749      	lsls	r1, r1, #29
 8002a80:	430b      	orrs	r3, r1
 8002a82:	4661      	mov	r1, ip
 8002a84:	08cc      	lsrs	r4, r1, #3
 8002a86:	e7a2      	b.n	80029ce <__aeabi_dsub+0x2f6>
 8002a88:	4dc8      	ldr	r5, [pc, #800]	; (8002dac <__aeabi_dsub+0x6d4>)
 8002a8a:	42a8      	cmp	r0, r5
 8002a8c:	d100      	bne.n	8002a90 <__aeabi_dsub+0x3b8>
 8002a8e:	e0cf      	b.n	8002c30 <__aeabi_dsub+0x558>
 8002a90:	2580      	movs	r5, #128	; 0x80
 8002a92:	4664      	mov	r4, ip
 8002a94:	042d      	lsls	r5, r5, #16
 8002a96:	432c      	orrs	r4, r5
 8002a98:	46a4      	mov	ip, r4
 8002a9a:	2a38      	cmp	r2, #56	; 0x38
 8002a9c:	dc56      	bgt.n	8002b4c <__aeabi_dsub+0x474>
 8002a9e:	2a1f      	cmp	r2, #31
 8002aa0:	dd00      	ble.n	8002aa4 <__aeabi_dsub+0x3cc>
 8002aa2:	e0d1      	b.n	8002c48 <__aeabi_dsub+0x570>
 8002aa4:	2520      	movs	r5, #32
 8002aa6:	001e      	movs	r6, r3
 8002aa8:	1aad      	subs	r5, r5, r2
 8002aaa:	4664      	mov	r4, ip
 8002aac:	40ab      	lsls	r3, r5
 8002aae:	40ac      	lsls	r4, r5
 8002ab0:	40d6      	lsrs	r6, r2
 8002ab2:	1e5d      	subs	r5, r3, #1
 8002ab4:	41ab      	sbcs	r3, r5
 8002ab6:	4334      	orrs	r4, r6
 8002ab8:	4323      	orrs	r3, r4
 8002aba:	4664      	mov	r4, ip
 8002abc:	40d4      	lsrs	r4, r2
 8002abe:	1b09      	subs	r1, r1, r4
 8002ac0:	e049      	b.n	8002b56 <__aeabi_dsub+0x47e>
 8002ac2:	4660      	mov	r0, ip
 8002ac4:	1bdc      	subs	r4, r3, r7
 8002ac6:	1a46      	subs	r6, r0, r1
 8002ac8:	42a3      	cmp	r3, r4
 8002aca:	4180      	sbcs	r0, r0
 8002acc:	4240      	negs	r0, r0
 8002ace:	4681      	mov	r9, r0
 8002ad0:	0030      	movs	r0, r6
 8002ad2:	464e      	mov	r6, r9
 8002ad4:	1b80      	subs	r0, r0, r6
 8002ad6:	4681      	mov	r9, r0
 8002ad8:	0200      	lsls	r0, r0, #8
 8002ada:	d476      	bmi.n	8002bca <__aeabi_dsub+0x4f2>
 8002adc:	464b      	mov	r3, r9
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	d000      	beq.n	8002ae4 <__aeabi_dsub+0x40c>
 8002ae2:	e652      	b.n	800278a <__aeabi_dsub+0xb2>
 8002ae4:	2400      	movs	r4, #0
 8002ae6:	2500      	movs	r5, #0
 8002ae8:	e771      	b.n	80029ce <__aeabi_dsub+0x2f6>
 8002aea:	4339      	orrs	r1, r7
 8002aec:	000c      	movs	r4, r1
 8002aee:	1e62      	subs	r2, r4, #1
 8002af0:	4194      	sbcs	r4, r2
 8002af2:	18e4      	adds	r4, r4, r3
 8002af4:	429c      	cmp	r4, r3
 8002af6:	419b      	sbcs	r3, r3
 8002af8:	425b      	negs	r3, r3
 8002afa:	4463      	add	r3, ip
 8002afc:	4699      	mov	r9, r3
 8002afe:	464b      	mov	r3, r9
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	d400      	bmi.n	8002b06 <__aeabi_dsub+0x42e>
 8002b04:	e756      	b.n	80029b4 <__aeabi_dsub+0x2dc>
 8002b06:	2301      	movs	r3, #1
 8002b08:	469c      	mov	ip, r3
 8002b0a:	4ba8      	ldr	r3, [pc, #672]	; (8002dac <__aeabi_dsub+0x6d4>)
 8002b0c:	44e0      	add	r8, ip
 8002b0e:	4598      	cmp	r8, r3
 8002b10:	d038      	beq.n	8002b84 <__aeabi_dsub+0x4ac>
 8002b12:	464b      	mov	r3, r9
 8002b14:	48a6      	ldr	r0, [pc, #664]	; (8002db0 <__aeabi_dsub+0x6d8>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	4003      	ands	r3, r0
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	0863      	lsrs	r3, r4, #1
 8002b1e:	4014      	ands	r4, r2
 8002b20:	431c      	orrs	r4, r3
 8002b22:	07c3      	lsls	r3, r0, #31
 8002b24:	431c      	orrs	r4, r3
 8002b26:	0843      	lsrs	r3, r0, #1
 8002b28:	4699      	mov	r9, r3
 8002b2a:	e657      	b.n	80027dc <__aeabi_dsub+0x104>
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	000e      	movs	r6, r1
 8002b30:	3820      	subs	r0, #32
 8002b32:	40c6      	lsrs	r6, r0
 8002b34:	2a20      	cmp	r2, #32
 8002b36:	d004      	beq.n	8002b42 <__aeabi_dsub+0x46a>
 8002b38:	2040      	movs	r0, #64	; 0x40
 8002b3a:	1a82      	subs	r2, r0, r2
 8002b3c:	4091      	lsls	r1, r2
 8002b3e:	430f      	orrs	r7, r1
 8002b40:	46b9      	mov	r9, r7
 8002b42:	464f      	mov	r7, r9
 8002b44:	1e7a      	subs	r2, r7, #1
 8002b46:	4197      	sbcs	r7, r2
 8002b48:	4337      	orrs	r7, r6
 8002b4a:	e60f      	b.n	800276c <__aeabi_dsub+0x94>
 8002b4c:	4662      	mov	r2, ip
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	0013      	movs	r3, r2
 8002b52:	1e5a      	subs	r2, r3, #1
 8002b54:	4193      	sbcs	r3, r2
 8002b56:	1afc      	subs	r4, r7, r3
 8002b58:	42a7      	cmp	r7, r4
 8002b5a:	41bf      	sbcs	r7, r7
 8002b5c:	427f      	negs	r7, r7
 8002b5e:	1bcb      	subs	r3, r1, r7
 8002b60:	4699      	mov	r9, r3
 8002b62:	465d      	mov	r5, fp
 8002b64:	4680      	mov	r8, r0
 8002b66:	e608      	b.n	800277a <__aeabi_dsub+0xa2>
 8002b68:	4666      	mov	r6, ip
 8002b6a:	431e      	orrs	r6, r3
 8002b6c:	d100      	bne.n	8002b70 <__aeabi_dsub+0x498>
 8002b6e:	e0be      	b.n	8002cee <__aeabi_dsub+0x616>
 8002b70:	1e56      	subs	r6, r2, #1
 8002b72:	2a01      	cmp	r2, #1
 8002b74:	d100      	bne.n	8002b78 <__aeabi_dsub+0x4a0>
 8002b76:	e109      	b.n	8002d8c <__aeabi_dsub+0x6b4>
 8002b78:	4c8c      	ldr	r4, [pc, #560]	; (8002dac <__aeabi_dsub+0x6d4>)
 8002b7a:	42a2      	cmp	r2, r4
 8002b7c:	d100      	bne.n	8002b80 <__aeabi_dsub+0x4a8>
 8002b7e:	e119      	b.n	8002db4 <__aeabi_dsub+0x6dc>
 8002b80:	0032      	movs	r2, r6
 8002b82:	e6c1      	b.n	8002908 <__aeabi_dsub+0x230>
 8002b84:	4642      	mov	r2, r8
 8002b86:	2400      	movs	r4, #0
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e648      	b.n	800281e <__aeabi_dsub+0x146>
 8002b8c:	2020      	movs	r0, #32
 8002b8e:	000c      	movs	r4, r1
 8002b90:	1a80      	subs	r0, r0, r2
 8002b92:	003e      	movs	r6, r7
 8002b94:	4087      	lsls	r7, r0
 8002b96:	4084      	lsls	r4, r0
 8002b98:	40d6      	lsrs	r6, r2
 8002b9a:	1e78      	subs	r0, r7, #1
 8002b9c:	4187      	sbcs	r7, r0
 8002b9e:	40d1      	lsrs	r1, r2
 8002ba0:	4334      	orrs	r4, r6
 8002ba2:	433c      	orrs	r4, r7
 8002ba4:	448c      	add	ip, r1
 8002ba6:	e7a4      	b.n	8002af2 <__aeabi_dsub+0x41a>
 8002ba8:	4a80      	ldr	r2, [pc, #512]	; (8002dac <__aeabi_dsub+0x6d4>)
 8002baa:	4290      	cmp	r0, r2
 8002bac:	d100      	bne.n	8002bb0 <__aeabi_dsub+0x4d8>
 8002bae:	e0e9      	b.n	8002d84 <__aeabi_dsub+0x6ac>
 8002bb0:	19df      	adds	r7, r3, r7
 8002bb2:	429f      	cmp	r7, r3
 8002bb4:	419b      	sbcs	r3, r3
 8002bb6:	4461      	add	r1, ip
 8002bb8:	425b      	negs	r3, r3
 8002bba:	18c9      	adds	r1, r1, r3
 8002bbc:	07cc      	lsls	r4, r1, #31
 8002bbe:	087f      	lsrs	r7, r7, #1
 8002bc0:	084b      	lsrs	r3, r1, #1
 8002bc2:	4699      	mov	r9, r3
 8002bc4:	4680      	mov	r8, r0
 8002bc6:	433c      	orrs	r4, r7
 8002bc8:	e6f4      	b.n	80029b4 <__aeabi_dsub+0x2dc>
 8002bca:	1afc      	subs	r4, r7, r3
 8002bcc:	42a7      	cmp	r7, r4
 8002bce:	41bf      	sbcs	r7, r7
 8002bd0:	4663      	mov	r3, ip
 8002bd2:	427f      	negs	r7, r7
 8002bd4:	1ac9      	subs	r1, r1, r3
 8002bd6:	1bcb      	subs	r3, r1, r7
 8002bd8:	4699      	mov	r9, r3
 8002bda:	465d      	mov	r5, fp
 8002bdc:	e5d5      	b.n	800278a <__aeabi_dsub+0xb2>
 8002bde:	08ff      	lsrs	r7, r7, #3
 8002be0:	074b      	lsls	r3, r1, #29
 8002be2:	465d      	mov	r5, fp
 8002be4:	433b      	orrs	r3, r7
 8002be6:	08cc      	lsrs	r4, r1, #3
 8002be8:	e6ee      	b.n	80029c8 <__aeabi_dsub+0x2f0>
 8002bea:	4662      	mov	r2, ip
 8002bec:	431a      	orrs	r2, r3
 8002bee:	d000      	beq.n	8002bf2 <__aeabi_dsub+0x51a>
 8002bf0:	e082      	b.n	8002cf8 <__aeabi_dsub+0x620>
 8002bf2:	000b      	movs	r3, r1
 8002bf4:	433b      	orrs	r3, r7
 8002bf6:	d11b      	bne.n	8002c30 <__aeabi_dsub+0x558>
 8002bf8:	2480      	movs	r4, #128	; 0x80
 8002bfa:	2500      	movs	r5, #0
 8002bfc:	0324      	lsls	r4, r4, #12
 8002bfe:	e6f9      	b.n	80029f4 <__aeabi_dsub+0x31c>
 8002c00:	19dc      	adds	r4, r3, r7
 8002c02:	429c      	cmp	r4, r3
 8002c04:	419b      	sbcs	r3, r3
 8002c06:	4461      	add	r1, ip
 8002c08:	4689      	mov	r9, r1
 8002c0a:	425b      	negs	r3, r3
 8002c0c:	4499      	add	r9, r3
 8002c0e:	464b      	mov	r3, r9
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	d444      	bmi.n	8002c9e <__aeabi_dsub+0x5c6>
 8002c14:	2301      	movs	r3, #1
 8002c16:	4698      	mov	r8, r3
 8002c18:	e6cc      	b.n	80029b4 <__aeabi_dsub+0x2dc>
 8002c1a:	1bdc      	subs	r4, r3, r7
 8002c1c:	4662      	mov	r2, ip
 8002c1e:	42a3      	cmp	r3, r4
 8002c20:	419b      	sbcs	r3, r3
 8002c22:	1a51      	subs	r1, r2, r1
 8002c24:	425b      	negs	r3, r3
 8002c26:	1acb      	subs	r3, r1, r3
 8002c28:	4699      	mov	r9, r3
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4698      	mov	r8, r3
 8002c2e:	e5a4      	b.n	800277a <__aeabi_dsub+0xa2>
 8002c30:	08ff      	lsrs	r7, r7, #3
 8002c32:	074b      	lsls	r3, r1, #29
 8002c34:	465d      	mov	r5, fp
 8002c36:	433b      	orrs	r3, r7
 8002c38:	08cc      	lsrs	r4, r1, #3
 8002c3a:	e6d7      	b.n	80029ec <__aeabi_dsub+0x314>
 8002c3c:	4662      	mov	r2, ip
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	0014      	movs	r4, r2
 8002c42:	1e63      	subs	r3, r4, #1
 8002c44:	419c      	sbcs	r4, r3
 8002c46:	e679      	b.n	800293c <__aeabi_dsub+0x264>
 8002c48:	0015      	movs	r5, r2
 8002c4a:	4664      	mov	r4, ip
 8002c4c:	3d20      	subs	r5, #32
 8002c4e:	40ec      	lsrs	r4, r5
 8002c50:	46a0      	mov	r8, r4
 8002c52:	2a20      	cmp	r2, #32
 8002c54:	d005      	beq.n	8002c62 <__aeabi_dsub+0x58a>
 8002c56:	2540      	movs	r5, #64	; 0x40
 8002c58:	4664      	mov	r4, ip
 8002c5a:	1aaa      	subs	r2, r5, r2
 8002c5c:	4094      	lsls	r4, r2
 8002c5e:	4323      	orrs	r3, r4
 8002c60:	469a      	mov	sl, r3
 8002c62:	4654      	mov	r4, sl
 8002c64:	1e63      	subs	r3, r4, #1
 8002c66:	419c      	sbcs	r4, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	4323      	orrs	r3, r4
 8002c6c:	e773      	b.n	8002b56 <__aeabi_dsub+0x47e>
 8002c6e:	4662      	mov	r2, ip
 8002c70:	431a      	orrs	r2, r3
 8002c72:	d023      	beq.n	8002cbc <__aeabi_dsub+0x5e4>
 8002c74:	000a      	movs	r2, r1
 8002c76:	433a      	orrs	r2, r7
 8002c78:	d000      	beq.n	8002c7c <__aeabi_dsub+0x5a4>
 8002c7a:	e0a0      	b.n	8002dbe <__aeabi_dsub+0x6e6>
 8002c7c:	4662      	mov	r2, ip
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	0752      	lsls	r2, r2, #29
 8002c82:	4313      	orrs	r3, r2
 8002c84:	4662      	mov	r2, ip
 8002c86:	08d4      	lsrs	r4, r2, #3
 8002c88:	e6b0      	b.n	80029ec <__aeabi_dsub+0x314>
 8002c8a:	000b      	movs	r3, r1
 8002c8c:	433b      	orrs	r3, r7
 8002c8e:	d100      	bne.n	8002c92 <__aeabi_dsub+0x5ba>
 8002c90:	e728      	b.n	8002ae4 <__aeabi_dsub+0x40c>
 8002c92:	08ff      	lsrs	r7, r7, #3
 8002c94:	074b      	lsls	r3, r1, #29
 8002c96:	465d      	mov	r5, fp
 8002c98:	433b      	orrs	r3, r7
 8002c9a:	08cc      	lsrs	r4, r1, #3
 8002c9c:	e697      	b.n	80029ce <__aeabi_dsub+0x2f6>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	4698      	mov	r8, r3
 8002ca2:	e736      	b.n	8002b12 <__aeabi_dsub+0x43a>
 8002ca4:	1afc      	subs	r4, r7, r3
 8002ca6:	42a7      	cmp	r7, r4
 8002ca8:	41bf      	sbcs	r7, r7
 8002caa:	4663      	mov	r3, ip
 8002cac:	427f      	negs	r7, r7
 8002cae:	1ac9      	subs	r1, r1, r3
 8002cb0:	1bcb      	subs	r3, r1, r7
 8002cb2:	4699      	mov	r9, r3
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	465d      	mov	r5, fp
 8002cb8:	4698      	mov	r8, r3
 8002cba:	e55e      	b.n	800277a <__aeabi_dsub+0xa2>
 8002cbc:	074b      	lsls	r3, r1, #29
 8002cbe:	08ff      	lsrs	r7, r7, #3
 8002cc0:	433b      	orrs	r3, r7
 8002cc2:	08cc      	lsrs	r4, r1, #3
 8002cc4:	e692      	b.n	80029ec <__aeabi_dsub+0x314>
 8002cc6:	1bdc      	subs	r4, r3, r7
 8002cc8:	4660      	mov	r0, ip
 8002cca:	42a3      	cmp	r3, r4
 8002ccc:	41b6      	sbcs	r6, r6
 8002cce:	1a40      	subs	r0, r0, r1
 8002cd0:	4276      	negs	r6, r6
 8002cd2:	1b80      	subs	r0, r0, r6
 8002cd4:	4681      	mov	r9, r0
 8002cd6:	0200      	lsls	r0, r0, #8
 8002cd8:	d560      	bpl.n	8002d9c <__aeabi_dsub+0x6c4>
 8002cda:	1afc      	subs	r4, r7, r3
 8002cdc:	42a7      	cmp	r7, r4
 8002cde:	41bf      	sbcs	r7, r7
 8002ce0:	4663      	mov	r3, ip
 8002ce2:	427f      	negs	r7, r7
 8002ce4:	1ac9      	subs	r1, r1, r3
 8002ce6:	1bcb      	subs	r3, r1, r7
 8002ce8:	4699      	mov	r9, r3
 8002cea:	465d      	mov	r5, fp
 8002cec:	e576      	b.n	80027dc <__aeabi_dsub+0x104>
 8002cee:	08ff      	lsrs	r7, r7, #3
 8002cf0:	074b      	lsls	r3, r1, #29
 8002cf2:	433b      	orrs	r3, r7
 8002cf4:	08cc      	lsrs	r4, r1, #3
 8002cf6:	e667      	b.n	80029c8 <__aeabi_dsub+0x2f0>
 8002cf8:	000a      	movs	r2, r1
 8002cfa:	08db      	lsrs	r3, r3, #3
 8002cfc:	433a      	orrs	r2, r7
 8002cfe:	d100      	bne.n	8002d02 <__aeabi_dsub+0x62a>
 8002d00:	e66f      	b.n	80029e2 <__aeabi_dsub+0x30a>
 8002d02:	4662      	mov	r2, ip
 8002d04:	0752      	lsls	r2, r2, #29
 8002d06:	4313      	orrs	r3, r2
 8002d08:	4662      	mov	r2, ip
 8002d0a:	08d4      	lsrs	r4, r2, #3
 8002d0c:	2280      	movs	r2, #128	; 0x80
 8002d0e:	0312      	lsls	r2, r2, #12
 8002d10:	4214      	tst	r4, r2
 8002d12:	d007      	beq.n	8002d24 <__aeabi_dsub+0x64c>
 8002d14:	08c8      	lsrs	r0, r1, #3
 8002d16:	4210      	tst	r0, r2
 8002d18:	d104      	bne.n	8002d24 <__aeabi_dsub+0x64c>
 8002d1a:	465d      	mov	r5, fp
 8002d1c:	0004      	movs	r4, r0
 8002d1e:	08fb      	lsrs	r3, r7, #3
 8002d20:	0749      	lsls	r1, r1, #29
 8002d22:	430b      	orrs	r3, r1
 8002d24:	0f5a      	lsrs	r2, r3, #29
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	08db      	lsrs	r3, r3, #3
 8002d2a:	0752      	lsls	r2, r2, #29
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	e65d      	b.n	80029ec <__aeabi_dsub+0x314>
 8002d30:	074b      	lsls	r3, r1, #29
 8002d32:	08ff      	lsrs	r7, r7, #3
 8002d34:	433b      	orrs	r3, r7
 8002d36:	08cc      	lsrs	r4, r1, #3
 8002d38:	e649      	b.n	80029ce <__aeabi_dsub+0x2f6>
 8002d3a:	19dc      	adds	r4, r3, r7
 8002d3c:	429c      	cmp	r4, r3
 8002d3e:	419b      	sbcs	r3, r3
 8002d40:	4461      	add	r1, ip
 8002d42:	4689      	mov	r9, r1
 8002d44:	425b      	negs	r3, r3
 8002d46:	4499      	add	r9, r3
 8002d48:	464b      	mov	r3, r9
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	d400      	bmi.n	8002d50 <__aeabi_dsub+0x678>
 8002d4e:	e631      	b.n	80029b4 <__aeabi_dsub+0x2dc>
 8002d50:	464a      	mov	r2, r9
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <__aeabi_dsub+0x6d8>)
 8002d54:	401a      	ands	r2, r3
 8002d56:	2301      	movs	r3, #1
 8002d58:	4691      	mov	r9, r2
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	e62a      	b.n	80029b4 <__aeabi_dsub+0x2dc>
 8002d5e:	0016      	movs	r6, r2
 8002d60:	4664      	mov	r4, ip
 8002d62:	3e20      	subs	r6, #32
 8002d64:	40f4      	lsrs	r4, r6
 8002d66:	46a0      	mov	r8, r4
 8002d68:	2a20      	cmp	r2, #32
 8002d6a:	d005      	beq.n	8002d78 <__aeabi_dsub+0x6a0>
 8002d6c:	2640      	movs	r6, #64	; 0x40
 8002d6e:	4664      	mov	r4, ip
 8002d70:	1ab2      	subs	r2, r6, r2
 8002d72:	4094      	lsls	r4, r2
 8002d74:	4323      	orrs	r3, r4
 8002d76:	469a      	mov	sl, r3
 8002d78:	4654      	mov	r4, sl
 8002d7a:	1e63      	subs	r3, r4, #1
 8002d7c:	419c      	sbcs	r4, r3
 8002d7e:	4643      	mov	r3, r8
 8002d80:	431c      	orrs	r4, r3
 8002d82:	e5db      	b.n	800293c <__aeabi_dsub+0x264>
 8002d84:	0002      	movs	r2, r0
 8002d86:	2400      	movs	r4, #0
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e548      	b.n	800281e <__aeabi_dsub+0x146>
 8002d8c:	19dc      	adds	r4, r3, r7
 8002d8e:	42bc      	cmp	r4, r7
 8002d90:	41bf      	sbcs	r7, r7
 8002d92:	4461      	add	r1, ip
 8002d94:	4689      	mov	r9, r1
 8002d96:	427f      	negs	r7, r7
 8002d98:	44b9      	add	r9, r7
 8002d9a:	e738      	b.n	8002c0e <__aeabi_dsub+0x536>
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	d100      	bne.n	8002da4 <__aeabi_dsub+0x6cc>
 8002da2:	e69f      	b.n	8002ae4 <__aeabi_dsub+0x40c>
 8002da4:	e606      	b.n	80029b4 <__aeabi_dsub+0x2dc>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	000007fe 	.word	0x000007fe
 8002dac:	000007ff 	.word	0x000007ff
 8002db0:	ff7fffff 	.word	0xff7fffff
 8002db4:	08ff      	lsrs	r7, r7, #3
 8002db6:	074b      	lsls	r3, r1, #29
 8002db8:	433b      	orrs	r3, r7
 8002dba:	08cc      	lsrs	r4, r1, #3
 8002dbc:	e616      	b.n	80029ec <__aeabi_dsub+0x314>
 8002dbe:	4662      	mov	r2, ip
 8002dc0:	08db      	lsrs	r3, r3, #3
 8002dc2:	0752      	lsls	r2, r2, #29
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	4662      	mov	r2, ip
 8002dc8:	08d4      	lsrs	r4, r2, #3
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	0312      	lsls	r2, r2, #12
 8002dce:	4214      	tst	r4, r2
 8002dd0:	d007      	beq.n	8002de2 <__aeabi_dsub+0x70a>
 8002dd2:	08c8      	lsrs	r0, r1, #3
 8002dd4:	4210      	tst	r0, r2
 8002dd6:	d104      	bne.n	8002de2 <__aeabi_dsub+0x70a>
 8002dd8:	465d      	mov	r5, fp
 8002dda:	0004      	movs	r4, r0
 8002ddc:	08fb      	lsrs	r3, r7, #3
 8002dde:	0749      	lsls	r1, r1, #29
 8002de0:	430b      	orrs	r3, r1
 8002de2:	0f5a      	lsrs	r2, r3, #29
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	0752      	lsls	r2, r2, #29
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	e5fe      	b.n	80029ec <__aeabi_dsub+0x314>
 8002dee:	2300      	movs	r3, #0
 8002df0:	4a01      	ldr	r2, [pc, #4]	; (8002df8 <__aeabi_dsub+0x720>)
 8002df2:	001c      	movs	r4, r3
 8002df4:	e513      	b.n	800281e <__aeabi_dsub+0x146>
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	000007ff 	.word	0x000007ff

08002dfc <__aeabi_dcmpun>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	0005      	movs	r5, r0
 8002e00:	480c      	ldr	r0, [pc, #48]	; (8002e34 <__aeabi_dcmpun+0x38>)
 8002e02:	031c      	lsls	r4, r3, #12
 8002e04:	0016      	movs	r6, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	030a      	lsls	r2, r1, #12
 8002e0a:	0049      	lsls	r1, r1, #1
 8002e0c:	0b12      	lsrs	r2, r2, #12
 8002e0e:	0d49      	lsrs	r1, r1, #21
 8002e10:	0b24      	lsrs	r4, r4, #12
 8002e12:	0d5b      	lsrs	r3, r3, #21
 8002e14:	4281      	cmp	r1, r0
 8002e16:	d008      	beq.n	8002e2a <__aeabi_dcmpun+0x2e>
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <__aeabi_dcmpun+0x38>)
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d103      	bne.n	8002e28 <__aeabi_dcmpun+0x2c>
 8002e20:	0020      	movs	r0, r4
 8002e22:	4330      	orrs	r0, r6
 8002e24:	1e43      	subs	r3, r0, #1
 8002e26:	4198      	sbcs	r0, r3
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	432a      	orrs	r2, r5
 8002e2e:	d1fb      	bne.n	8002e28 <__aeabi_dcmpun+0x2c>
 8002e30:	e7f2      	b.n	8002e18 <__aeabi_dcmpun+0x1c>
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	000007ff 	.word	0x000007ff

08002e38 <__aeabi_d2iz>:
 8002e38:	000a      	movs	r2, r1
 8002e3a:	b530      	push	{r4, r5, lr}
 8002e3c:	4c13      	ldr	r4, [pc, #76]	; (8002e8c <__aeabi_d2iz+0x54>)
 8002e3e:	0053      	lsls	r3, r2, #1
 8002e40:	0309      	lsls	r1, r1, #12
 8002e42:	0005      	movs	r5, r0
 8002e44:	0b09      	lsrs	r1, r1, #12
 8002e46:	2000      	movs	r0, #0
 8002e48:	0d5b      	lsrs	r3, r3, #21
 8002e4a:	0fd2      	lsrs	r2, r2, #31
 8002e4c:	42a3      	cmp	r3, r4
 8002e4e:	dd04      	ble.n	8002e5a <__aeabi_d2iz+0x22>
 8002e50:	480f      	ldr	r0, [pc, #60]	; (8002e90 <__aeabi_d2iz+0x58>)
 8002e52:	4283      	cmp	r3, r0
 8002e54:	dd02      	ble.n	8002e5c <__aeabi_d2iz+0x24>
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <__aeabi_d2iz+0x5c>)
 8002e58:	18d0      	adds	r0, r2, r3
 8002e5a:	bd30      	pop	{r4, r5, pc}
 8002e5c:	2080      	movs	r0, #128	; 0x80
 8002e5e:	0340      	lsls	r0, r0, #13
 8002e60:	4301      	orrs	r1, r0
 8002e62:	480d      	ldr	r0, [pc, #52]	; (8002e98 <__aeabi_d2iz+0x60>)
 8002e64:	1ac0      	subs	r0, r0, r3
 8002e66:	281f      	cmp	r0, #31
 8002e68:	dd08      	ble.n	8002e7c <__aeabi_d2iz+0x44>
 8002e6a:	480c      	ldr	r0, [pc, #48]	; (8002e9c <__aeabi_d2iz+0x64>)
 8002e6c:	1ac3      	subs	r3, r0, r3
 8002e6e:	40d9      	lsrs	r1, r3
 8002e70:	000b      	movs	r3, r1
 8002e72:	4258      	negs	r0, r3
 8002e74:	2a00      	cmp	r2, #0
 8002e76:	d1f0      	bne.n	8002e5a <__aeabi_d2iz+0x22>
 8002e78:	0018      	movs	r0, r3
 8002e7a:	e7ee      	b.n	8002e5a <__aeabi_d2iz+0x22>
 8002e7c:	4c08      	ldr	r4, [pc, #32]	; (8002ea0 <__aeabi_d2iz+0x68>)
 8002e7e:	40c5      	lsrs	r5, r0
 8002e80:	46a4      	mov	ip, r4
 8002e82:	4463      	add	r3, ip
 8002e84:	4099      	lsls	r1, r3
 8002e86:	000b      	movs	r3, r1
 8002e88:	432b      	orrs	r3, r5
 8002e8a:	e7f2      	b.n	8002e72 <__aeabi_d2iz+0x3a>
 8002e8c:	000003fe 	.word	0x000003fe
 8002e90:	0000041d 	.word	0x0000041d
 8002e94:	7fffffff 	.word	0x7fffffff
 8002e98:	00000433 	.word	0x00000433
 8002e9c:	00000413 	.word	0x00000413
 8002ea0:	fffffbed 	.word	0xfffffbed

08002ea4 <__aeabi_i2d>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d016      	beq.n	8002ed8 <__aeabi_i2d+0x34>
 8002eaa:	17c3      	asrs	r3, r0, #31
 8002eac:	18c5      	adds	r5, r0, r3
 8002eae:	405d      	eors	r5, r3
 8002eb0:	0fc4      	lsrs	r4, r0, #31
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f894 	bl	8002fe0 <__clzsi2>
 8002eb8:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <__aeabi_i2d+0x5c>)
 8002eba:	1a12      	subs	r2, r2, r0
 8002ebc:	280a      	cmp	r0, #10
 8002ebe:	dc16      	bgt.n	8002eee <__aeabi_i2d+0x4a>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	002e      	movs	r6, r5
 8002ec4:	3315      	adds	r3, #21
 8002ec6:	409e      	lsls	r6, r3
 8002ec8:	230b      	movs	r3, #11
 8002eca:	1a18      	subs	r0, r3, r0
 8002ecc:	40c5      	lsrs	r5, r0
 8002ece:	0552      	lsls	r2, r2, #21
 8002ed0:	032d      	lsls	r5, r5, #12
 8002ed2:	0b2d      	lsrs	r5, r5, #12
 8002ed4:	0d53      	lsrs	r3, r2, #21
 8002ed6:	e003      	b.n	8002ee0 <__aeabi_i2d+0x3c>
 8002ed8:	2400      	movs	r4, #0
 8002eda:	2300      	movs	r3, #0
 8002edc:	2500      	movs	r5, #0
 8002ede:	2600      	movs	r6, #0
 8002ee0:	051b      	lsls	r3, r3, #20
 8002ee2:	432b      	orrs	r3, r5
 8002ee4:	07e4      	lsls	r4, r4, #31
 8002ee6:	4323      	orrs	r3, r4
 8002ee8:	0030      	movs	r0, r6
 8002eea:	0019      	movs	r1, r3
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	380b      	subs	r0, #11
 8002ef0:	4085      	lsls	r5, r0
 8002ef2:	0552      	lsls	r2, r2, #21
 8002ef4:	032d      	lsls	r5, r5, #12
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	0b2d      	lsrs	r5, r5, #12
 8002efa:	0d53      	lsrs	r3, r2, #21
 8002efc:	e7f0      	b.n	8002ee0 <__aeabi_i2d+0x3c>
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	0000041e 	.word	0x0000041e

08002f04 <__aeabi_ui2d>:
 8002f04:	b510      	push	{r4, lr}
 8002f06:	1e04      	subs	r4, r0, #0
 8002f08:	d010      	beq.n	8002f2c <__aeabi_ui2d+0x28>
 8002f0a:	f000 f869 	bl	8002fe0 <__clzsi2>
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <__aeabi_ui2d+0x48>)
 8002f10:	1a1b      	subs	r3, r3, r0
 8002f12:	280a      	cmp	r0, #10
 8002f14:	dc11      	bgt.n	8002f3a <__aeabi_ui2d+0x36>
 8002f16:	220b      	movs	r2, #11
 8002f18:	0021      	movs	r1, r4
 8002f1a:	1a12      	subs	r2, r2, r0
 8002f1c:	40d1      	lsrs	r1, r2
 8002f1e:	3015      	adds	r0, #21
 8002f20:	030a      	lsls	r2, r1, #12
 8002f22:	055b      	lsls	r3, r3, #21
 8002f24:	4084      	lsls	r4, r0
 8002f26:	0b12      	lsrs	r2, r2, #12
 8002f28:	0d5b      	lsrs	r3, r3, #21
 8002f2a:	e001      	b.n	8002f30 <__aeabi_ui2d+0x2c>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2200      	movs	r2, #0
 8002f30:	051b      	lsls	r3, r3, #20
 8002f32:	4313      	orrs	r3, r2
 8002f34:	0020      	movs	r0, r4
 8002f36:	0019      	movs	r1, r3
 8002f38:	bd10      	pop	{r4, pc}
 8002f3a:	0022      	movs	r2, r4
 8002f3c:	380b      	subs	r0, #11
 8002f3e:	4082      	lsls	r2, r0
 8002f40:	055b      	lsls	r3, r3, #21
 8002f42:	0312      	lsls	r2, r2, #12
 8002f44:	2400      	movs	r4, #0
 8002f46:	0b12      	lsrs	r2, r2, #12
 8002f48:	0d5b      	lsrs	r3, r3, #21
 8002f4a:	e7f1      	b.n	8002f30 <__aeabi_ui2d+0x2c>
 8002f4c:	0000041e 	.word	0x0000041e

08002f50 <__aeabi_f2d>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	0043      	lsls	r3, r0, #1
 8002f54:	0246      	lsls	r6, r0, #9
 8002f56:	0fc4      	lsrs	r4, r0, #31
 8002f58:	20fe      	movs	r0, #254	; 0xfe
 8002f5a:	0e1b      	lsrs	r3, r3, #24
 8002f5c:	1c59      	adds	r1, r3, #1
 8002f5e:	0a75      	lsrs	r5, r6, #9
 8002f60:	4208      	tst	r0, r1
 8002f62:	d00c      	beq.n	8002f7e <__aeabi_f2d+0x2e>
 8002f64:	22e0      	movs	r2, #224	; 0xe0
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4694      	mov	ip, r2
 8002f6a:	076d      	lsls	r5, r5, #29
 8002f6c:	0b36      	lsrs	r6, r6, #12
 8002f6e:	4463      	add	r3, ip
 8002f70:	051b      	lsls	r3, r3, #20
 8002f72:	4333      	orrs	r3, r6
 8002f74:	07e4      	lsls	r4, r4, #31
 8002f76:	4323      	orrs	r3, r4
 8002f78:	0028      	movs	r0, r5
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d114      	bne.n	8002fac <__aeabi_f2d+0x5c>
 8002f82:	2d00      	cmp	r5, #0
 8002f84:	d01b      	beq.n	8002fbe <__aeabi_f2d+0x6e>
 8002f86:	0028      	movs	r0, r5
 8002f88:	f000 f82a 	bl	8002fe0 <__clzsi2>
 8002f8c:	280a      	cmp	r0, #10
 8002f8e:	dc1c      	bgt.n	8002fca <__aeabi_f2d+0x7a>
 8002f90:	230b      	movs	r3, #11
 8002f92:	002e      	movs	r6, r5
 8002f94:	1a1b      	subs	r3, r3, r0
 8002f96:	40de      	lsrs	r6, r3
 8002f98:	0003      	movs	r3, r0
 8002f9a:	3315      	adds	r3, #21
 8002f9c:	409d      	lsls	r5, r3
 8002f9e:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <__aeabi_f2d+0x88>)
 8002fa0:	0336      	lsls	r6, r6, #12
 8002fa2:	1a12      	subs	r2, r2, r0
 8002fa4:	0552      	lsls	r2, r2, #21
 8002fa6:	0b36      	lsrs	r6, r6, #12
 8002fa8:	0d53      	lsrs	r3, r2, #21
 8002faa:	e7e1      	b.n	8002f70 <__aeabi_f2d+0x20>
 8002fac:	2d00      	cmp	r5, #0
 8002fae:	d009      	beq.n	8002fc4 <__aeabi_f2d+0x74>
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	0b36      	lsrs	r6, r6, #12
 8002fb4:	0312      	lsls	r2, r2, #12
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <__aeabi_f2d+0x8c>)
 8002fb8:	076d      	lsls	r5, r5, #29
 8002fba:	4316      	orrs	r6, r2
 8002fbc:	e7d8      	b.n	8002f70 <__aeabi_f2d+0x20>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	e7d5      	b.n	8002f70 <__aeabi_f2d+0x20>
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <__aeabi_f2d+0x8c>)
 8002fc8:	e7d2      	b.n	8002f70 <__aeabi_f2d+0x20>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	3b0b      	subs	r3, #11
 8002fce:	409d      	lsls	r5, r3
 8002fd0:	002e      	movs	r6, r5
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	e7e3      	b.n	8002f9e <__aeabi_f2d+0x4e>
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	00000389 	.word	0x00000389
 8002fdc:	000007ff 	.word	0x000007ff

08002fe0 <__clzsi2>:
 8002fe0:	211c      	movs	r1, #28
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	4298      	cmp	r0, r3
 8002fe8:	d301      	bcc.n	8002fee <__clzsi2+0xe>
 8002fea:	0c00      	lsrs	r0, r0, #16
 8002fec:	3910      	subs	r1, #16
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	4298      	cmp	r0, r3
 8002ff2:	d301      	bcc.n	8002ff8 <__clzsi2+0x18>
 8002ff4:	0a00      	lsrs	r0, r0, #8
 8002ff6:	3908      	subs	r1, #8
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	4298      	cmp	r0, r3
 8002ffc:	d301      	bcc.n	8003002 <__clzsi2+0x22>
 8002ffe:	0900      	lsrs	r0, r0, #4
 8003000:	3904      	subs	r1, #4
 8003002:	a202      	add	r2, pc, #8	; (adr r2, 800300c <__clzsi2+0x2c>)
 8003004:	5c10      	ldrb	r0, [r2, r0]
 8003006:	1840      	adds	r0, r0, r1
 8003008:	4770      	bx	lr
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	02020304 	.word	0x02020304
 8003010:	01010101 	.word	0x01010101
	...

0800301c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	// MCU Configuration
	MCU_SETUP();
 8003020:	f009 fa08 	bl	800c434 <MCU_SETUP>

	//Configuration du driver automatique à chaque reveil
	Turn_Off_Motor( &board ); //Mise en sommeil tant que non utilisé
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <main+0x20>)
 8003026:	0018      	movs	r0, r3
 8003028:	f008 fc04 	bl	800b834 <Turn_Off_Motor>

	stander_Update_Eos( &board );
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <main+0x20>)
 800302e:	0018      	movs	r0, r3
 8003030:	f009 fee4 	bl	800cdfc <stander_Update_Eos>
	SUB_MAIN();
 8003034:	f008 fe4c 	bl	800bcd0 <SUB_MAIN>

	/* Infinite loop */
	while (1) {
 8003038:	e7fe      	b.n	8003038 <main+0x1c>
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	20000508 	.word	0x20000508

08003040 <HAL_GPIO_EXTI_Callback>:
	}
}

//Interuption déclenché par les capteurs à effet hall,l'encoder et le capteur fin de course
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	0002      	movs	r2, r0
 8003048:	1dbb      	adds	r3, r7, #6
 800304a:	801a      	strh	r2, [r3, #0]
	if( (GPIO_Pin == DRV_NFAULT_Pin) ){
 800304c:	1dbb      	adds	r3, r7, #6
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d101      	bne.n	8003058 <HAL_GPIO_EXTI_Callback+0x18>
			DRV_FaultResolution();
 8003054:	f008 f966 	bl	800b324 <DRV_FaultResolution>
	}
#endif



	if((GPIO_Pin == HALL_A_Pin) || (GPIO_Pin == HALL_B_Pin) || (GPIO_Pin == HALL_C_Pin)){
 8003058:	1dbb      	adds	r3, r7, #6
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d009      	beq.n	8003074 <HAL_GPIO_EXTI_Callback+0x34>
 8003060:	1dbb      	adds	r3, r7, #6
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d005      	beq.n	8003074 <HAL_GPIO_EXTI_Callback+0x34>
 8003068:	1dbb      	adds	r3, r7, #6
 800306a:	881a      	ldrh	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	429a      	cmp	r2, r3
 8003072:	d103      	bne.n	800307c <HAL_GPIO_EXTI_Callback+0x3c>
		DRV_UpdateHalls();
 8003074:	f008 f8ea 	bl	800b24c <DRV_UpdateHalls>
		Motor_UpdatePosition();
 8003078:	f008 faac 	bl	800b5d4 <Motor_UpdatePosition>
	}

}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}

08003084 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003088:	b672      	cpsid	i
}
 800308a:	46c0      	nop			; (mov r8, r8)
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800308c:	e7fe      	b.n	800308c <Error_Handler+0x8>
	...

08003090 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
* Initializes the Global MSP.
*/
void HAL_MspInit(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <HAL_MspInit+0x44>)
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_MspInit+0x44>)
 800309c:	2101      	movs	r1, #1
 800309e:	430a      	orrs	r2, r1
 80030a0:	619a      	str	r2, [r3, #24]
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_MspInit+0x44>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_MspInit+0x44>)
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_MspInit+0x44>)
 80030b4:	2180      	movs	r1, #128	; 0x80
 80030b6:	0549      	lsls	r1, r1, #21
 80030b8:	430a      	orrs	r2, r1
 80030ba:	61da      	str	r2, [r3, #28]
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_MspInit+0x44>)
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	055b      	lsls	r3, r3, #21
 80030c4:	4013      	ands	r3, r2
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	40021000 	.word	0x40021000

080030d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b08b      	sub	sp, #44	; 0x2c
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	2414      	movs	r4, #20
 80030e2:	193b      	adds	r3, r7, r4
 80030e4:	0018      	movs	r0, r3
 80030e6:	2314      	movs	r3, #20
 80030e8:	001a      	movs	r2, r3
 80030ea:	2100      	movs	r1, #0
 80030ec:	f009 ff8f 	bl	800d00e <memset>
  if(hadc->Instance==ADC1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a44      	ldr	r2, [pc, #272]	; (8003208 <HAL_ADC_MspInit+0x130>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d000      	beq.n	80030fc <HAL_ADC_MspInit+0x24>
 80030fa:	e080      	b.n	80031fe <HAL_ADC_MspInit+0x126>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030fc:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_ADC_MspInit+0x134>)
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	4b42      	ldr	r3, [pc, #264]	; (800320c <HAL_ADC_MspInit+0x134>)
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	0089      	lsls	r1, r1, #2
 8003106:	430a      	orrs	r2, r1
 8003108:	619a      	str	r2, [r3, #24]
 800310a:	4b40      	ldr	r3, [pc, #256]	; (800320c <HAL_ADC_MspInit+0x134>)
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003118:	4b3c      	ldr	r3, [pc, #240]	; (800320c <HAL_ADC_MspInit+0x134>)
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_ADC_MspInit+0x134>)
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	0289      	lsls	r1, r1, #10
 8003122:	430a      	orrs	r2, r1
 8003124:	615a      	str	r2, [r3, #20]
 8003126:	4b39      	ldr	r3, [pc, #228]	; (800320c <HAL_ADC_MspInit+0x134>)
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	029b      	lsls	r3, r3, #10
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003134:	4b35      	ldr	r3, [pc, #212]	; (800320c <HAL_ADC_MspInit+0x134>)
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	4b34      	ldr	r3, [pc, #208]	; (800320c <HAL_ADC_MspInit+0x134>)
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	02c9      	lsls	r1, r1, #11
 800313e:	430a      	orrs	r2, r1
 8003140:	615a      	str	r2, [r3, #20]
 8003142:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_ADC_MspInit+0x134>)
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	02db      	lsls	r3, r3, #11
 800314a:	4013      	ands	r3, r2
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = DRV_SIA_Pin|DRV_SIB_Pin|DRV_SIC_Pin;
 8003150:	193b      	adds	r3, r7, r4
 8003152:	2207      	movs	r2, #7
 8003154:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003156:	193b      	adds	r3, r7, r4
 8003158:	2203      	movs	r2, #3
 800315a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	193b      	adds	r3, r7, r4
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003162:	193a      	adds	r2, r7, r4
 8003164:	2390      	movs	r3, #144	; 0x90
 8003166:	05db      	lsls	r3, r3, #23
 8003168:	0011      	movs	r1, r2
 800316a:	0018      	movs	r0, r3
 800316c:	f002 f9d6 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HANDLE_X_Pin|HANDLE_Z_Pin;
 8003170:	193b      	adds	r3, r7, r4
 8003172:	2203      	movs	r2, #3
 8003174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003176:	193b      	adds	r3, r7, r4
 8003178:	2203      	movs	r2, #3
 800317a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	193b      	adds	r3, r7, r4
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003182:	193b      	adds	r3, r7, r4
 8003184:	4a22      	ldr	r2, [pc, #136]	; (8003210 <HAL_ADC_MspInit+0x138>)
 8003186:	0019      	movs	r1, r3
 8003188:	0010      	movs	r0, r2
 800318a:	f002 f9c7 	bl	800551c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
	/* ADC Init */
	hdma_adc.Instance = DMA1_Channel1;
 800318e:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <HAL_ADC_MspInit+0x140>)
 8003192:	601a      	str	r2, [r3, #0]
	hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003194:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 8003196:	2200      	movs	r2, #0
 8003198:	605a      	str	r2, [r3, #4]
	hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800319a:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
	hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80031a0:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	60da      	str	r2, [r3, #12]
	hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	611a      	str	r2, [r3, #16]
	hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	615a      	str	r2, [r3, #20]
	hdma_adc.Init.Mode = DMA_CIRCULAR;
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 80031b8:	2220      	movs	r2, #32
 80031ba:	619a      	str	r2, [r3, #24]
	hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
	if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f001 ff75 	bl	80050b4 <HAL_DMA_Init>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_ADC_MspInit+0xfa>
	{
	  Error_Handler();
 80031ce:	f7ff ff59 	bl	8003084 <Error_Handler>
	}

	__HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 80031d2:	4a12      	ldr	r2, [pc, #72]	; (800321c <HAL_ADC_MspInit+0x144>)
 80031d4:	23a8      	movs	r3, #168	; 0xa8
 80031d6:	58d3      	ldr	r3, [r2, r3]
 80031d8:	4910      	ldr	r1, [pc, #64]	; (800321c <HAL_ADC_MspInit+0x144>)
 80031da:	220f      	movs	r2, #15
 80031dc:	4393      	bics	r3, r2
 80031de:	22a8      	movs	r2, #168	; 0xa8
 80031e0:	508b      	str	r3, [r1, r2]
 80031e2:	4a0e      	ldr	r2, [pc, #56]	; (800321c <HAL_ADC_MspInit+0x144>)
 80031e4:	23a8      	movs	r3, #168	; 0xa8
 80031e6:	58d3      	ldr	r3, [r2, r3]
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <HAL_ADC_MspInit+0x144>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	4313      	orrs	r3, r2
 80031ee:	22a8      	movs	r2, #168	; 0xa8
 80031f0:	508b      	str	r3, [r1, r2]

	__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a07      	ldr	r2, [pc, #28]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_ADC_MspInit+0x13c>)
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b00b      	add	sp, #44	; 0x2c
 8003204:	bd90      	pop	{r4, r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	40012400 	.word	0x40012400
 800320c:	40021000 	.word	0x40021000
 8003210:	48000400 	.word	0x48000400
 8003214:	200002d8 	.word	0x200002d8
 8003218:	40020008 	.word	0x40020008
 800321c:	40020000 	.word	0x40020000

08003220 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b08b      	sub	sp, #44	; 0x2c
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	2414      	movs	r4, #20
 800322a:	193b      	adds	r3, r7, r4
 800322c:	0018      	movs	r0, r3
 800322e:	2314      	movs	r3, #20
 8003230:	001a      	movs	r2, r3
 8003232:	2100      	movs	r1, #0
 8003234:	f009 feeb 	bl	800d00e <memset>
  if(hcan->Instance==CAN)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_CAN_MspInit+0x94>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d133      	bne.n	80032aa <HAL_CAN_MspInit+0x8a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_CAN_MspInit+0x98>)
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <HAL_CAN_MspInit+0x98>)
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	0489      	lsls	r1, r1, #18
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_CAN_MspInit+0x98>)
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	049b      	lsls	r3, r3, #18
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_CAN_MspInit+0x98>)
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_CAN_MspInit+0x98>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0289      	lsls	r1, r1, #10
 8003268:	430a      	orrs	r2, r1
 800326a:	615a      	str	r2, [r3, #20]
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_CAN_MspInit+0x98>)
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	029b      	lsls	r3, r3, #10
 8003274:	4013      	ands	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800327a:	193b      	adds	r3, r7, r4
 800327c:	22c0      	movs	r2, #192	; 0xc0
 800327e:	0152      	lsls	r2, r2, #5
 8003280:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	0021      	movs	r1, r4
 8003284:	187b      	adds	r3, r7, r1
 8003286:	2202      	movs	r2, #2
 8003288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	187b      	adds	r3, r7, r1
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003290:	187b      	adds	r3, r7, r1
 8003292:	2203      	movs	r2, #3
 8003294:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8003296:	187b      	adds	r3, r7, r1
 8003298:	2204      	movs	r2, #4
 800329a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329c:	187a      	adds	r2, r7, r1
 800329e:	2390      	movs	r3, #144	; 0x90
 80032a0:	05db      	lsls	r3, r3, #23
 80032a2:	0011      	movs	r1, r2
 80032a4:	0018      	movs	r0, r3
 80032a6:	f002 f939 	bl	800551c <HAL_GPIO_Init>
  }
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b00b      	add	sp, #44	; 0x2c
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	40006400 	.word	0x40006400
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b08b      	sub	sp, #44	; 0x2c
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	2414      	movs	r4, #20
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	0018      	movs	r0, r3
 80032ca:	2314      	movs	r3, #20
 80032cc:	001a      	movs	r2, r3
 80032ce:	2100      	movs	r1, #0
 80032d0:	f009 fe9d 	bl	800d00e <memset>
  if(hspi->Instance==SPI1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_SPI_MspInit+0x90>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d132      	bne.n	8003344 <HAL_SPI_MspInit+0x88>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <HAL_SPI_MspInit+0x94>)
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_SPI_MspInit+0x94>)
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	0149      	lsls	r1, r1, #5
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_SPI_MspInit+0x94>)
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	015b      	lsls	r3, r3, #5
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_SPI_MspInit+0x94>)
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_SPI_MspInit+0x94>)
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	0289      	lsls	r1, r1, #10
 8003304:	430a      	orrs	r2, r1
 8003306:	615a      	str	r2, [r3, #20]
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_SPI_MspInit+0x94>)
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	029b      	lsls	r3, r3, #10
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003316:	0021      	movs	r1, r4
 8003318:	187b      	adds	r3, r7, r1
 800331a:	22e0      	movs	r2, #224	; 0xe0
 800331c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2202      	movs	r2, #2
 8003322:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2203      	movs	r2, #3
 800332e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003330:	187b      	adds	r3, r7, r1
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003336:	187a      	adds	r2, r7, r1
 8003338:	2390      	movs	r3, #144	; 0x90
 800333a:	05db      	lsls	r3, r3, #23
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f002 f8ec 	bl	800551c <HAL_GPIO_Init>
  }
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b00b      	add	sp, #44	; 0x2c
 800334a:	bd90      	pop	{r4, r7, pc}
 800334c:	40013000 	.word	0x40013000
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a16      	ldr	r2, [pc, #88]	; (80033bc <HAL_TIM_Base_MspInit+0x68>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10d      	bne.n	8003382 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_TIM_Base_MspInit+0x6c>)
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_TIM_Base_MspInit+0x6c>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	0109      	lsls	r1, r1, #4
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_TIM_Base_MspInit+0x6c>)
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
  }

  if(htim_base->Instance==TIM7)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <HAL_TIM_Base_MspInit+0x70>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d113      	bne.n	80033b4 <HAL_TIM_Base_MspInit+0x60>
  {
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <HAL_TIM_Base_MspInit+0x6c>)
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_TIM_Base_MspInit+0x6c>)
 8003392:	2120      	movs	r1, #32
 8003394:	430a      	orrs	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_TIM_Base_MspInit+0x6c>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	2220      	movs	r2, #32
 800339e:	4013      	ands	r3, r2
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn,1, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2101      	movs	r1, #1
 80033a8:	2012      	movs	r0, #18
 80033aa:	f001 fe51 	bl	8005050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033ae:	2012      	movs	r0, #18
 80033b0:	f001 fe63 	bl	800507a <HAL_NVIC_EnableIRQ>
  }
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40001400 	.word	0x40001400

080033c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	240c      	movs	r4, #12
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	0018      	movs	r0, r3
 80033d6:	2314      	movs	r3, #20
 80033d8:	001a      	movs	r2, r3
 80033da:	2100      	movs	r1, #0
 80033dc:	f009 fe17 	bl	800d00e <memset>
  if(htim->Instance==TIM1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_TIM_MspPostInit+0x78>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d125      	bne.n	8003436 <HAL_TIM_MspPostInit+0x6e>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <HAL_TIM_MspPostInit+0x7c>)
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_TIM_MspPostInit+0x7c>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0289      	lsls	r1, r1, #10
 80033f4:	430a      	orrs	r2, r1
 80033f6:	615a      	str	r2, [r3, #20]
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_TIM_MspPostInit+0x7c>)
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	029b      	lsls	r3, r3, #10
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_INHA_Pin;
 8003406:	193b      	adds	r3, r7, r4
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	0052      	lsls	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	0021      	movs	r1, r4
 8003410:	187b      	adds	r3, r7, r1
 8003412:	2202      	movs	r2, #2
 8003414:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	187b      	adds	r3, r7, r1
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	187b      	adds	r3, r7, r1
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003422:	187b      	adds	r3, r7, r1
 8003424:	2202      	movs	r2, #2
 8003426:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_INHA_GPIO_Port, &GPIO_InitStruct);
 8003428:	187a      	adds	r2, r7, r1
 800342a:	2390      	movs	r3, #144	; 0x90
 800342c:	05db      	lsls	r3, r3, #23
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f002 f873 	bl	800551c <HAL_GPIO_Init>
  }

}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b009      	add	sp, #36	; 0x24
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40021000 	.word	0x40021000

08003448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	2414      	movs	r4, #20
 8003452:	193b      	adds	r3, r7, r4
 8003454:	0018      	movs	r0, r3
 8003456:	2314      	movs	r3, #20
 8003458:	001a      	movs	r2, r3
 800345a:	2100      	movs	r1, #0
 800345c:	f009 fdd7 	bl	800d00e <memset>
  if(huart->Instance==USART1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_UART_MspInit+0xa0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d139      	bne.n	80034de <HAL_UART_MspInit+0x96>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_UART_MspInit+0xa4>)
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	4b1f      	ldr	r3, [pc, #124]	; (80034ec <HAL_UART_MspInit+0xa4>)
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	01c9      	lsls	r1, r1, #7
 8003474:	430a      	orrs	r2, r1
 8003476:	619a      	str	r2, [r3, #24]
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_UART_MspInit+0xa4>)
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	01db      	lsls	r3, r3, #7
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003486:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_UART_MspInit+0xa4>)
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_UART_MspInit+0xa4>)
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	02c9      	lsls	r1, r1, #11
 8003490:	430a      	orrs	r2, r1
 8003492:	615a      	str	r2, [r3, #20]
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_UART_MspInit+0xa4>)
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	02db      	lsls	r3, r3, #11
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034a2:	0021      	movs	r1, r4
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	22c0      	movs	r2, #192	; 0xc0
 80034a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2202      	movs	r2, #2
 80034ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2203      	movs	r2, #3
 80034ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <HAL_UART_MspInit+0xa8>)
 80034c6:	0019      	movs	r1, r3
 80034c8:	0010      	movs	r0, r2
 80034ca:	f002 f827 	bl	800551c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2100      	movs	r1, #0
 80034d2:	201b      	movs	r0, #27
 80034d4:	f001 fdbc 	bl	8005050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034d8:	201b      	movs	r0, #27
 80034da:	f001 fdce 	bl	800507a <HAL_NVIC_EnableIRQ>
  }

}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b00b      	add	sp, #44	; 0x2c
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	40013800 	.word	0x40013800
 80034ec:	40021000 	.word	0x40021000
 80034f0:	48000400 	.word	0x48000400

080034f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  while (1)
 80034f8:	e7fe      	b.n	80034f8 <NMI_Handler+0x4>

080034fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	af00      	add	r7, sp, #0
  while (1)
 80034fe:	e7fe      	b.n	80034fe <HardFault_Handler+0x4>

08003500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0

}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	af00      	add	r7, sp, #0

}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003518:	f000 f9a8 	bl	800386c <HAL_IncTick>
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(DRV_NFAULT_Pin);
 8003526:	2008      	movs	r0, #8
 8003528:	f002 f9aa 	bl	8005880 <HAL_GPIO_EXTI_IRQHandler>
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(HALL_A_Pin);
 8003536:	2040      	movs	r0, #64	; 0x40
 8003538:	f002 f9a2 	bl	8005880 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HALL_B_Pin);
 800353c:	2080      	movs	r0, #128	; 0x80
 800353e:	f002 f99f 	bl	8005880 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	0018      	movs	r0, r3
 8003548:	f002 f99a 	bl	8005880 <HAL_GPIO_EXTI_IRQHandler>
#ifdef ENCODER_ON
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
#endif
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc);
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <DMA1_Ch1_IRQHandler+0x14>)
 800355a:	0018      	movs	r0, r3
 800355c:	f001 fed5 	bl	800530a <HAL_DMA_IRQHandler>
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	200002d8 	.word	0x200002d8

0800356c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <USART1_IRQHandler+0x14>)
 8003572:	0018      	movs	r0, r3
 8003574:	f004 ffec 	bl	8008550 <HAL_UART_IRQHandler>
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	20000484 	.word	0x20000484

08003584 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <TIM7_IRQHandler+0x14>)
 800358a:	0018      	movs	r0, r3
 800358c:	f003 ffd4 	bl	8007538 <HAL_TIM_IRQHandler>
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	2000043c 	.word	0x2000043c

0800359c <CEC_CAN_IRQHandler>:
* @brief  This function handles CAN1 RX0 interrupt request.
* @param  None
* @retval None
*/
void CEC_CAN_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan);
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <CEC_CAN_IRQHandler+0x58>)
 80035a4:	0018      	movs	r0, r3
 80035a6:	f001 fa8b 	bl	8004ac0 <HAL_CAN_IRQHandler>

  uint8_t               RxData[8];

  /* Get RX message */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, RxData);
 80035aa:	003b      	movs	r3, r7
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <CEC_CAN_IRQHandler+0x5c>)
 80035ae:	4811      	ldr	r0, [pc, #68]	; (80035f4 <CEC_CAN_IRQHandler+0x58>)
 80035b0:	2100      	movs	r1, #0
 80035b2:	f001 f93f 	bl	8004834 <HAL_CAN_GetRxMessage>

  memcpy(&msg_can.RX.bytes[msg_can.RX.idx][0], &RxData[0], 8) ;
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <CEC_CAN_IRQHandler+0x60>)
 80035b8:	7e1b      	ldrb	r3, [r3, #24]
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	3303      	adds	r3, #3
 80035be:	00da      	lsls	r2, r3, #3
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <CEC_CAN_IRQHandler+0x60>)
 80035c2:	18d3      	adds	r3, r2, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	0039      	movs	r1, r7
 80035c8:	2208      	movs	r2, #8
 80035ca:	0018      	movs	r0, r3
 80035cc:	f009 fd16 	bl	800cffc <memcpy>

  msg_can.RX.idx ++;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <CEC_CAN_IRQHandler+0x60>)
 80035d2:	7e1b      	ldrb	r3, [r3, #24]
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <CEC_CAN_IRQHandler+0x60>)
 80035e0:	761a      	strb	r2, [r3, #24]
  msg_can.RX.last_time = HAL_GetTick();
 80035e2:	f000 f955 	bl	8003890 <HAL_GetTick>
 80035e6:	0002      	movs	r2, r0
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <CEC_CAN_IRQHandler+0x60>)
 80035ea:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	2000031c 	.word	0x2000031c
 80035f8:	2000072c 	.word	0x2000072c
 80035fc:	20000778 	.word	0x20000778

08003600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
	return 1;
 8003604:	2301      	movs	r3, #1
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_kill>:

int _kill(int pid, int sig)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003616:	f009 fcb3 	bl	800cf80 <__errno>
 800361a:	0003      	movs	r3, r0
 800361c:	2216      	movs	r2, #22
 800361e:	601a      	str	r2, [r3, #0]
	return -1;
 8003620:	2301      	movs	r3, #1
 8003622:	425b      	negs	r3, r3
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b002      	add	sp, #8
 800362a:	bd80      	pop	{r7, pc}

0800362c <_exit>:

void _exit (int status)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003634:	2301      	movs	r3, #1
 8003636:	425a      	negs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0011      	movs	r1, r2
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff ffe5 	bl	800360c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003642:	e7fe      	b.n	8003642 <_exit+0x16>

08003644 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e00a      	b.n	800366c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003656:	e000      	b.n	800365a <_read+0x16>
 8003658:	bf00      	nop
 800365a:	0001      	movs	r1, r0
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	60ba      	str	r2, [r7, #8]
 8003662:	b2ca      	uxtb	r2, r1
 8003664:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3301      	adds	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	dbf0      	blt.n	8003656 <_read+0x12>
	}

return len;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b006      	add	sp, #24
 800367c:	bd80      	pop	{r7, pc}

0800367e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e009      	b.n	80036a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	60ba      	str	r2, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	0018      	movs	r0, r3
 800369a:	e000      	b.n	800369e <_write+0x20>
 800369c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	dbf1      	blt.n	8003690 <_write+0x12>
	}
	return len;
 80036ac:	687b      	ldr	r3, [r7, #4]
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b006      	add	sp, #24
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_close>:

int _close(int file)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
	return -1;
 80036be:	2301      	movs	r3, #1
 80036c0:	425b      	negs	r3, r3
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}

080036ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	0192      	lsls	r2, r2, #6
 80036da:	605a      	str	r2, [r3, #4]
	return 0;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_isatty>:

int _isatty(int file)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
	return 1;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
	return 0;
 8003704:	2300      	movs	r3, #0
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b004      	add	sp, #16
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <_sbrk+0x5c>)
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <_sbrk+0x60>)
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <_sbrk+0x64>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_sbrk+0x64>)
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <_sbrk+0x68>)
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <_sbrk+0x64>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d207      	bcs.n	8003750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003740:	f009 fc1e 	bl	800cf80 <__errno>
 8003744:	0003      	movs	r3, r0
 8003746:	220c      	movs	r2, #12
 8003748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800374a:	2301      	movs	r3, #1
 800374c:	425b      	negs	r3, r3
 800374e:	e009      	b.n	8003764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <_sbrk+0x64>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	18d2      	adds	r2, r2, r3
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <_sbrk+0x64>)
 8003760:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b006      	add	sp, #24
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20008000 	.word	0x20008000
 8003770:	00000400 	.word	0x00000400
 8003774:	20000748 	.word	0x20000748
 8003778:	20001088 	.word	0x20001088

0800377c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003788:	480d      	ldr	r0, [pc, #52]	; (80037c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800378a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800378c:	480d      	ldr	r0, [pc, #52]	; (80037c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800378e:	490e      	ldr	r1, [pc, #56]	; (80037c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003790:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <LoopForever+0xe>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003794:	e002      	b.n	800379c <LoopCopyDataInit>

08003796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379a:	3304      	adds	r3, #4

0800379c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800379c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a0:	d3f9      	bcc.n	8003796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a2:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037a4:	4c0b      	ldr	r4, [pc, #44]	; (80037d4 <LoopForever+0x16>)
  movs r3, #0
 80037a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a8:	e001      	b.n	80037ae <LoopFillZerobss>

080037aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037ac:	3204      	adds	r2, #4

080037ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b0:	d3fb      	bcc.n	80037aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80037b2:	f7ff ffe3 	bl	800377c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80037b6:	f009 fbe9 	bl	800cf8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037ba:	f7ff fc2f 	bl	800301c <main>

080037be <LoopForever>:

LoopForever:
    b LoopForever
 80037be:	e7fe      	b.n	80037be <LoopForever>
  ldr   r0, =_estack
 80037c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80037c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c8:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 80037cc:	080106dc 	.word	0x080106dc
  ldr r2, =_sbss
 80037d0:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 80037d4:	20001088 	.word	0x20001088

080037d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037d8:	e7fe      	b.n	80037d8 <ADC1_COMP_IRQHandler>
	...

080037dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_Init+0x24>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_Init+0x24>)
 80037e6:	2110      	movs	r1, #16
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f000 f809 	bl	8003804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f2:	f7ff fc4d 	bl	8003090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	40022000 	.word	0x40022000

08003804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_InitTick+0x5c>)
 800380e:	681c      	ldr	r4, [r3, #0]
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <HAL_InitTick+0x60>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	0019      	movs	r1, r3
 8003816:	23fa      	movs	r3, #250	; 0xfa
 8003818:	0098      	lsls	r0, r3, #2
 800381a:	f7fc fc8f 	bl	800013c <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	0019      	movs	r1, r3
 8003822:	0020      	movs	r0, r4
 8003824:	f7fc fc8a 	bl	800013c <__udivsi3>
 8003828:	0003      	movs	r3, r0
 800382a:	0018      	movs	r0, r3
 800382c:	f001 fc35 	bl	800509a <HAL_SYSTICK_Config>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d001      	beq.n	8003838 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e00f      	b.n	8003858 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d80b      	bhi.n	8003856 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	2301      	movs	r3, #1
 8003842:	425b      	negs	r3, r3
 8003844:	2200      	movs	r2, #0
 8003846:	0018      	movs	r0, r3
 8003848:	f001 fc02 	bl	8005050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_InitTick+0x64>)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b003      	add	sp, #12
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	20000000 	.word	0x20000000
 8003864:	20000008 	.word	0x20000008
 8003868:	20000004 	.word	0x20000004

0800386c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_IncTick+0x1c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	001a      	movs	r2, r3
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_IncTick+0x20>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	18d2      	adds	r2, r2, r3
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_IncTick+0x20>)
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	20000008 	.word	0x20000008
 800388c:	2000074c 	.word	0x2000074c

08003890 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  return uwTick;
 8003894:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <HAL_GetTick+0x10>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	2000074c 	.word	0x2000074c

080038a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff fff0 	bl	8003890 <HAL_GetTick>
 80038b0:	0003      	movs	r3, r0
 80038b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	d005      	beq.n	80038ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_Delay+0x44>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	001a      	movs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	f7ff ffe0 	bl	8003890 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d8f7      	bhi.n	80038cc <HAL_Delay+0x28>
  {
  }
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000008 	.word	0x20000008

080038ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f4:	230f      	movs	r3, #15
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e125      	b.n	8003b56 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2234      	movs	r2, #52	; 0x34
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	0018      	movs	r0, r3
 8003924:	f7ff fbd8 	bl	80030d8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	2210      	movs	r2, #16
 800392e:	4013      	ands	r3, r2
 8003930:	d000      	beq.n	8003934 <HAL_ADC_Init+0x48>
 8003932:	e103      	b.n	8003b3c <HAL_ADC_Init+0x250>
 8003934:	230f      	movs	r3, #15
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d000      	beq.n	8003940 <HAL_ADC_Init+0x54>
 800393e:	e0fd      	b.n	8003b3c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2204      	movs	r2, #4
 8003948:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800394a:	d000      	beq.n	800394e <HAL_ADC_Init+0x62>
 800394c:	e0f6      	b.n	8003b3c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	4a83      	ldr	r2, [pc, #524]	; (8003b60 <HAL_ADC_Init+0x274>)
 8003954:	4013      	ands	r3, r2
 8003956:	2202      	movs	r2, #2
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2203      	movs	r2, #3
 8003966:	4013      	ands	r3, r2
 8003968:	2b01      	cmp	r3, #1
 800396a:	d112      	bne.n	8003992 <HAL_ADC_Init+0xa6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2201      	movs	r2, #1
 8003974:	4013      	ands	r3, r2
 8003976:	2b01      	cmp	r3, #1
 8003978:	d009      	beq.n	800398e <HAL_ADC_Init+0xa2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	401a      	ands	r2, r3
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	429a      	cmp	r2, r3
 800398c:	d101      	bne.n	8003992 <HAL_ADC_Init+0xa6>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <HAL_ADC_Init+0xa8>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d116      	bne.n	80039c6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2218      	movs	r2, #24
 80039a0:	4393      	bics	r3, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	0899      	lsrs	r1, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4964      	ldr	r1, [pc, #400]	; (8003b64 <HAL_ADC_Init+0x278>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7e1b      	ldrb	r3, [r3, #24]
 80039da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7e5b      	ldrb	r3, [r3, #25]
 80039e0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7e9b      	ldrb	r3, [r3, #26]
 80039e8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80039ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <HAL_ADC_Init+0x10e>
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	015b      	lsls	r3, r3, #5
 80039f8:	e000      	b.n	80039fc <HAL_ADC_Init+0x110>
 80039fa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80039fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003a02:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADC_Init+0x124>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	e000      	b.n	8003a12 <HAL_ADC_Init+0x126>
 8003a10:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003a12:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2124      	movs	r1, #36	; 0x24
 8003a18:	5c5b      	ldrb	r3, [r3, r1]
 8003a1a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003a1c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7edb      	ldrb	r3, [r3, #27]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d115      	bne.n	8003a58 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7e9b      	ldrb	r3, [r3, #26]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	0252      	lsls	r2, r2, #9
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	e00b      	b.n	8003a58 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	2220      	movs	r2, #32
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	2201      	movs	r2, #1
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	23c2      	movs	r3, #194	; 0xc2
 8003a5e:	33ff      	adds	r3, #255	; 0xff
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d007      	beq.n	8003a74 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68d9      	ldr	r1, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	055b      	lsls	r3, r3, #21
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_ADC_Init+0x1dc>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d017      	beq.n	8003ac8 <HAL_ADC_Init+0x1dc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_ADC_Init+0x1dc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d00f      	beq.n	8003ac8 <HAL_ADC_Init+0x1dc>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d00b      	beq.n	8003ac8 <HAL_ADC_Init+0x1dc>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d007      	beq.n	8003ac8 <HAL_ADC_Init+0x1dc>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d003      	beq.n	8003ac8 <HAL_ADC_Init+0x1dc>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	2b07      	cmp	r3, #7
 8003ac6:	d112      	bne.n	8003aee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2107      	movs	r1, #7
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6959      	ldr	r1, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	2207      	movs	r2, #7
 8003ae4:	401a      	ands	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_ADC_Init+0x27c>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d10b      	bne.n	8003b16 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	2203      	movs	r2, #3
 8003b0a:	4393      	bics	r3, r2
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003b14:	e01c      	b.n	8003b50 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	2212      	movs	r2, #18
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	2210      	movs	r2, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003b32:	230f      	movs	r3, #15
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003b3a:	e009      	b.n	8003b50 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	2210      	movs	r2, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003b48:	230f      	movs	r3, #15
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b50:	230f      	movs	r3, #15
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	781b      	ldrb	r3, [r3, #0]
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	fffffefd 	.word	0xfffffefd
 8003b64:	fffe0219 	.word	0xfffe0219
 8003b68:	833fffe7 	.word	0x833fffe7

08003b6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b78:	2317      	movs	r3, #23
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2204      	movs	r2, #4
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d15e      	bne.n	8003c4a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2234      	movs	r2, #52	; 0x34
 8003b90:	5c9b      	ldrb	r3, [r3, r2]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_Start_DMA+0x2e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e05e      	b.n	8003c58 <HAL_ADC_Start_DMA+0xec>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2234      	movs	r2, #52	; 0x34
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	7e5b      	ldrb	r3, [r3, #25]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d007      	beq.n	8003bba <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003baa:	2317      	movs	r3, #23
 8003bac:	18fc      	adds	r4, r7, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 f97b 	bl	8003eac <ADC_Enable>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003bba:	2317      	movs	r3, #23
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d146      	bne.n	8003c52 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	4a25      	ldr	r2, [pc, #148]	; (8003c60 <HAL_ADC_Start_DMA+0xf4>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	0052      	lsls	r2, r2, #1
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2234      	movs	r2, #52	; 0x34
 8003be0:	2100      	movs	r1, #0
 8003be2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_ADC_Start_DMA+0xf8>)
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <HAL_ADC_Start_DMA+0xfc>)
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_ADC_Start_DMA+0x100>)
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	221c      	movs	r2, #28
 8003c02:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2110      	movs	r1, #16
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3340      	adds	r3, #64	; 0x40
 8003c2e:	0019      	movs	r1, r3
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f001 fa86 	bl	8005144 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2104      	movs	r1, #4
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	e003      	b.n	8003c52 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c4a:	2317      	movs	r3, #23
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	2202      	movs	r2, #2
 8003c50:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003c52:	2317      	movs	r3, #23
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	781b      	ldrb	r3, [r3, #0]
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b007      	add	sp, #28
 8003c5e:	bd90      	pop	{r4, r7, pc}
 8003c60:	fffff0fe 	.word	0xfffff0fe
 8003c64:	08003fb5 	.word	0x08003fb5
 8003c68:	08004069 	.word	0x08004069
 8003c6c:	08004087 	.word	0x08004087

08003c70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c9a:	230f      	movs	r3, #15
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	055b      	lsls	r3, r3, #21
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d011      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x46>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x46>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x46>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d005      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x46>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d001      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x46>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2234      	movs	r2, #52	; 0x34
 8003cda:	5c9b      	ldrb	r3, [r3, r2]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x54>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e0d0      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x1f6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2234      	movs	r2, #52	; 0x34
 8003ce8:	2101      	movs	r1, #1
 8003cea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d000      	beq.n	8003cfa <HAL_ADC_ConfigChannel+0x6a>
 8003cf8:	e0b4      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4a64      	ldr	r2, [pc, #400]	; (8003e90 <HAL_ADC_ConfigChannel+0x200>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d100      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x76>
 8003d04:	e082      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	409a      	lsls	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	055b      	lsls	r3, r3, #21
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d037      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d033      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d02f      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d02b      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d027      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d023      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	2b06      	cmp	r3, #6
 8003d56:	d01f      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	2b07      	cmp	r3, #7
 8003d5e:	d01b      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2107      	movs	r1, #7
 8003d6c:	400b      	ands	r3, r1
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d012      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2107      	movs	r1, #7
 8003d7e:	438a      	bics	r2, r1
 8003d80:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6959      	ldr	r1, [r3, #20]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	401a      	ands	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d007      	beq.n	8003db0 <HAL_ADC_ConfigChannel+0x120>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b11      	cmp	r3, #17
 8003da6:	d003      	beq.n	8003db0 <HAL_ADC_ConfigChannel+0x120>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b12      	cmp	r3, #18
 8003dae:	d163      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003db0:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <HAL_ADC_ConfigChannel+0x204>)
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d009      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0x140>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b11      	cmp	r3, #17
 8003dc2:	d102      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x13a>
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	03db      	lsls	r3, r3, #15
 8003dc8:	e004      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x144>
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	045b      	lsls	r3, r3, #17
 8003dce:	e001      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x144>
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <HAL_ADC_ConfigChannel+0x204>)
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d14a      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003de2:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <HAL_ADC_ConfigChannel+0x208>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	492d      	ldr	r1, [pc, #180]	; (8003e9c <HAL_ADC_ConfigChannel+0x20c>)
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7fc f9a7 	bl	800013c <__udivsi3>
 8003dee:	0003      	movs	r3, r0
 8003df0:	001a      	movs	r2, r3
 8003df2:	0013      	movs	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	189b      	adds	r3, r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003dfc:	e002      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f9      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x16e>
 8003e0a:	e035      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2101      	movs	r1, #1
 8003e18:	4099      	lsls	r1, r3
 8003e1a:	000b      	movs	r3, r1
 8003e1c:	43d9      	mvns	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	400a      	ands	r2, r1
 8003e24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d007      	beq.n	8003e3e <HAL_ADC_ConfigChannel+0x1ae>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b11      	cmp	r3, #17
 8003e34:	d003      	beq.n	8003e3e <HAL_ADC_ConfigChannel+0x1ae>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b12      	cmp	r3, #18
 8003e3c:	d11c      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_ADC_ConfigChannel+0x204>)
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d007      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x1ca>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b11      	cmp	r3, #17
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x1c6>
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_ADC_ConfigChannel+0x210>)
 8003e54:	e002      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x1cc>
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_ADC_ConfigChannel+0x214>)
 8003e58:	e000      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x1cc>
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <HAL_ADC_ConfigChannel+0x218>)
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <HAL_ADC_ConfigChannel+0x204>)
 8003e5e:	400b      	ands	r3, r1
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e009      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	2220      	movs	r2, #32
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003e70:	230f      	movs	r3, #15
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2234      	movs	r2, #52	; 0x34
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003e80:	230f      	movs	r3, #15
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	781b      	ldrb	r3, [r3, #0]
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b004      	add	sp, #16
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	00001001 	.word	0x00001001
 8003e94:	40012708 	.word	0x40012708
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	000f4240 	.word	0x000f4240
 8003ea0:	ffbfffff 	.word	0xffbfffff
 8003ea4:	feffffff 	.word	0xfeffffff
 8003ea8:	ff7fffff 	.word	0xff7fffff

08003eac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d112      	bne.n	8003ef0 <ADC_Enable+0x44>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d009      	beq.n	8003eec <ADC_Enable+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d101      	bne.n	8003ef0 <ADC_Enable+0x44>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <ADC_Enable+0x46>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d152      	bne.n	8003f9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <ADC_Enable+0xfc>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	d00d      	beq.n	8003f1e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	2210      	movs	r2, #16
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	2201      	movs	r2, #1
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e03f      	b.n	8003f9e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <ADC_Enable+0x100>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	491f      	ldr	r1, [pc, #124]	; (8003fb0 <ADC_Enable+0x104>)
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7fc f901 	bl	800013c <__udivsi3>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f3e:	e002      	b.n	8003f46 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f9      	bne.n	8003f40 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f4c:	f7ff fca0 	bl	8003890 <HAL_GetTick>
 8003f50:	0003      	movs	r3, r0
 8003f52:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f54:	e01b      	b.n	8003f8e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f56:	f7ff fc9b 	bl	8003890 <HAL_GetTick>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d914      	bls.n	8003f8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d00d      	beq.n	8003f8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2210      	movs	r2, #16
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	2201      	movs	r2, #1
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e007      	b.n	8003f9e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2201      	movs	r2, #1
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d1dc      	bne.n	8003f56 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b004      	add	sp, #16
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	80000017 	.word	0x80000017
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	000f4240 	.word	0x000f4240

08003fb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	2250      	movs	r2, #80	; 0x50
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d140      	bne.n	800404e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	0092      	lsls	r2, r2, #2
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	23c0      	movs	r3, #192	; 0xc0
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d12d      	bne.n	8004044 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d129      	bne.n	8004044 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d122      	bne.n	8004044 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2204      	movs	r2, #4
 8004006:	4013      	ands	r3, r2
 8004008:	d110      	bne.n	800402c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	210c      	movs	r1, #12
 8004016:	438a      	bics	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	4a11      	ldr	r2, [pc, #68]	; (8004064 <ADC_DMAConvCplt+0xb0>)
 8004020:	4013      	ands	r3, r2
 8004022:	2201      	movs	r2, #1
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
 800402a:	e00b      	b.n	8004044 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	2220      	movs	r2, #32
 8004032:	431a      	orrs	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	2201      	movs	r2, #1
 800403e:	431a      	orrs	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	0018      	movs	r0, r3
 8004048:	f008 f802 	bl	800c050 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800404c:	e005      	b.n	800405a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	0010      	movs	r0, r2
 8004058:	4798      	blx	r3
}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	46bd      	mov	sp, r7
 800405e:	b004      	add	sp, #16
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	fffffefe 	.word	0xfffffefe

08004068 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff fdf9 	bl	8003c70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	b004      	add	sp, #16
 8004084:	bd80      	pop	{r7, pc}

08004086 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	2240      	movs	r2, #64	; 0x40
 800409a:	431a      	orrs	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	2204      	movs	r2, #4
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fde6 	bl	8003c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b004      	add	sp, #16
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c4:	2317      	movs	r3, #23
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2234      	movs	r2, #52	; 0x34
 80040d8:	5c9b      	ldrb	r3, [r3, r2]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_ADCEx_Calibration_Start+0x26>
 80040de:	2302      	movs	r3, #2
 80040e0:	e08d      	b.n	80041fe <HAL_ADCEx_Calibration_Start+0x142>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2234      	movs	r2, #52	; 0x34
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2203      	movs	r2, #3
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d112      	bne.n	800411e <HAL_ADCEx_Calibration_Start+0x62>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	4013      	ands	r3, r2
 8004102:	2b01      	cmp	r3, #1
 8004104:	d009      	beq.n	800411a <HAL_ADCEx_Calibration_Start+0x5e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	401a      	ands	r2, r3
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	429a      	cmp	r2, r3
 8004118:	d101      	bne.n	800411e <HAL_ADCEx_Calibration_Start+0x62>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_ADCEx_Calibration_Start+0x64>
 800411e:	2300      	movs	r3, #0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d15b      	bne.n	80041dc <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	4a37      	ldr	r2, [pc, #220]	; (8004208 <HAL_ADCEx_Calibration_Start+0x14c>)
 800412a:	4013      	ands	r3, r2
 800412c:	2202      	movs	r2, #2
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2203      	movs	r2, #3
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2103      	movs	r1, #3
 800414c:	438a      	bics	r2, r1
 800414e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	0609      	lsls	r1, r1, #24
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004162:	f7ff fb95 	bl	8003890 <HAL_GetTick>
 8004166:	0003      	movs	r3, r0
 8004168:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800416a:	e01d      	b.n	80041a8 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800416c:	f7ff fb90 	bl	8003890 <HAL_GetTick>
 8004170:	0002      	movs	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d916      	bls.n	80041a8 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	0fdb      	lsrs	r3, r3, #31
 8004182:	07da      	lsls	r2, r3, #31
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	429a      	cmp	r2, r3
 800418a:	d10d      	bne.n	80041a8 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	2212      	movs	r2, #18
 8004192:	4393      	bics	r3, r2
 8004194:	2210      	movs	r2, #16
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2234      	movs	r2, #52	; 0x34
 80041a0:	2100      	movs	r1, #0
 80041a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e02a      	b.n	80041fe <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	0fdb      	lsrs	r3, r3, #31
 80041b0:	07da      	lsls	r2, r3, #31
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d0d8      	beq.n	800416c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68d9      	ldr	r1, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	2203      	movs	r2, #3
 80041d0:	4393      	bics	r3, r2
 80041d2:	2201      	movs	r2, #1
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	639a      	str	r2, [r3, #56]	; 0x38
 80041da:	e009      	b.n	80041f0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	2220      	movs	r2, #32
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80041e8:	2317      	movs	r3, #23
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2234      	movs	r2, #52	; 0x34
 80041f4:	2100      	movs	r1, #0
 80041f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80041f8:	2317      	movs	r3, #23
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	781b      	ldrb	r3, [r3, #0]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b006      	add	sp, #24
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	fffffefd 	.word	0xfffffefd

0800420c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0f0      	b.n	8004400 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	5c9b      	ldrb	r3, [r3, r2]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fe fff7 	bl	8003220 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2101      	movs	r1, #1
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004242:	f7ff fb25 	bl	8003890 <HAL_GetTick>
 8004246:	0003      	movs	r3, r0
 8004248:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800424a:	e013      	b.n	8004274 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800424c:	f7ff fb20 	bl	8003890 <HAL_GetTick>
 8004250:	0002      	movs	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b0a      	cmp	r3, #10
 8004258:	d90c      	bls.n	8004274 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	0292      	lsls	r2, r2, #10
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	2105      	movs	r1, #5
 800426e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0c5      	b.n	8004400 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	4013      	ands	r3, r2
 800427e:	d0e5      	beq.n	800424c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2102      	movs	r1, #2
 800428c:	438a      	bics	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004290:	f7ff fafe 	bl	8003890 <HAL_GetTick>
 8004294:	0003      	movs	r3, r0
 8004296:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004298:	e013      	b.n	80042c2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800429a:	f7ff faf9 	bl	8003890 <HAL_GetTick>
 800429e:	0002      	movs	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b0a      	cmp	r3, #10
 80042a6:	d90c      	bls.n	80042c2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	0292      	lsls	r2, r2, #10
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	2105      	movs	r1, #5
 80042bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e09e      	b.n	8004400 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	d1e5      	bne.n	800429a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7e1b      	ldrb	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d108      	bne.n	80042e8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e007      	b.n	80042f8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	438a      	bics	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7e5b      	ldrb	r3, [r3, #25]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d108      	bne.n	8004312 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	430a      	orrs	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e007      	b.n	8004322 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2140      	movs	r1, #64	; 0x40
 800431e:	438a      	bics	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7e9b      	ldrb	r3, [r3, #26]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d108      	bne.n	800433c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2120      	movs	r1, #32
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e007      	b.n	800434c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2120      	movs	r1, #32
 8004348:	438a      	bics	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7edb      	ldrb	r3, [r3, #27]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d108      	bne.n	8004366 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2110      	movs	r1, #16
 8004360:	438a      	bics	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e007      	b.n	8004376 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2110      	movs	r1, #16
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7f1b      	ldrb	r3, [r3, #28]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d108      	bne.n	8004390 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2108      	movs	r1, #8
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e007      	b.n	80043a0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2108      	movs	r1, #8
 800439c:	438a      	bics	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7f5b      	ldrb	r3, [r3, #29]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d108      	bne.n	80043ba <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2104      	movs	r1, #4
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e007      	b.n	80043ca <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2104      	movs	r1, #4
 80043c6:	438a      	bics	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	431a      	orrs	r2, r3
 80043e0:	0011      	movs	r1, r2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	1e5a      	subs	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b004      	add	sp, #16
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004418:	2013      	movs	r0, #19
 800441a:	183b      	adds	r3, r7, r0
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	2120      	movs	r1, #32
 8004420:	5c52      	ldrb	r2, [r2, r1]
 8004422:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8004424:	0002      	movs	r2, r0
 8004426:	18bb      	adds	r3, r7, r2
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d004      	beq.n	8004438 <HAL_CAN_ConfigFilter+0x30>
 800442e:	18bb      	adds	r3, r7, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d000      	beq.n	8004438 <HAL_CAN_ConfigFilter+0x30>
 8004436:	e0cd      	b.n	80045d4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	58d3      	ldr	r3, [r2, r3]
 8004440:	2201      	movs	r2, #1
 8004442:	431a      	orrs	r2, r3
 8004444:	0011      	movs	r1, r2
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	221f      	movs	r2, #31
 8004454:	4013      	ands	r3, r2
 8004456:	2201      	movs	r2, #1
 8004458:	409a      	lsls	r2, r3
 800445a:	0013      	movs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	2387      	movs	r3, #135	; 0x87
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	58d3      	ldr	r3, [r2, r3]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	43d2      	mvns	r2, r2
 800446a:	401a      	ands	r2, r3
 800446c:	0011      	movs	r1, r2
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	2387      	movs	r3, #135	; 0x87
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d129      	bne.n	80044d2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	2383      	movs	r3, #131	; 0x83
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	58d3      	ldr	r3, [r2, r3]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	43d2      	mvns	r2, r2
 800448a:	401a      	ands	r2, r3
 800448c:	0011      	movs	r1, r2
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	2383      	movs	r3, #131	; 0x83
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044a8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	3248      	adds	r2, #72	; 0x48
 80044ae:	00d2      	lsls	r2, r2, #3
 80044b0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	3348      	adds	r3, #72	; 0x48
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	18cb      	adds	r3, r1, r3
 80044ce:	3304      	adds	r3, #4
 80044d0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d128      	bne.n	800452c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	2383      	movs	r3, #131	; 0x83
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	58d2      	ldr	r2, [r2, r3]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	0011      	movs	r1, r2
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	2383      	movs	r3, #131	; 0x83
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004502:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3248      	adds	r2, #72	; 0x48
 8004508:	00d2      	lsls	r2, r2, #3
 800450a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800451e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	3348      	adds	r3, #72	; 0x48
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	18cb      	adds	r3, r1, r3
 8004528:	3304      	adds	r3, #4
 800452a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10c      	bne.n	800454e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	2381      	movs	r3, #129	; 0x81
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	58d3      	ldr	r3, [r2, r3]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	43d2      	mvns	r2, r2
 8004540:	401a      	ands	r2, r3
 8004542:	0011      	movs	r1, r2
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	2381      	movs	r3, #129	; 0x81
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	50d1      	str	r1, [r2, r3]
 800454c:	e00a      	b.n	8004564 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	2381      	movs	r3, #129	; 0x81
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	58d2      	ldr	r2, [r2, r3]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	431a      	orrs	r2, r3
 800455a:	0011      	movs	r1, r2
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	2381      	movs	r3, #129	; 0x81
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10c      	bne.n	8004586 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	2385      	movs	r3, #133	; 0x85
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	58d3      	ldr	r3, [r2, r3]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	43d2      	mvns	r2, r2
 8004578:	401a      	ands	r2, r3
 800457a:	0011      	movs	r1, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	2385      	movs	r3, #133	; 0x85
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	50d1      	str	r1, [r2, r3]
 8004584:	e00a      	b.n	800459c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	2385      	movs	r3, #133	; 0x85
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	58d2      	ldr	r2, [r2, r3]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	431a      	orrs	r2, r3
 8004592:	0011      	movs	r1, r2
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	2385      	movs	r3, #133	; 0x85
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10a      	bne.n	80045ba <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	2387      	movs	r3, #135	; 0x87
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	58d2      	ldr	r2, [r2, r3]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	0011      	movs	r1, r2
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	2387      	movs	r3, #135	; 0x87
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	58d3      	ldr	r3, [r2, r3]
 80045c2:	2201      	movs	r2, #1
 80045c4:	4393      	bics	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e007      	b.n	80045e4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2280      	movs	r2, #128	; 0x80
 80045da:	02d2      	lsls	r2, r2, #11
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
  }
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b006      	add	sp, #24
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	5c9b      	ldrb	r3, [r3, r2]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d12f      	bne.n	8004660 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	2102      	movs	r1, #2
 8004606:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2101      	movs	r1, #1
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004618:	f7ff f93a 	bl	8003890 <HAL_GetTick>
 800461c:	0003      	movs	r3, r0
 800461e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004620:	e013      	b.n	800464a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004622:	f7ff f935 	bl	8003890 <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b0a      	cmp	r3, #10
 800462e:	d90c      	bls.n	800464a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2280      	movs	r2, #128	; 0x80
 8004636:	0292      	lsls	r2, r2, #10
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
       hcan->State = HAL_CAN_STATE_ERROR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	2105      	movs	r1, #5
 8004644:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e012      	b.n	8004670 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	4013      	ands	r3, r2
 8004654:	d1e5      	bne.n	8004622 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e007      	b.n	8004670 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	2280      	movs	r2, #128	; 0x80
 8004666:	0312      	lsls	r2, r2, #12
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
  }
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b004      	add	sp, #16
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004686:	201f      	movs	r0, #31
 8004688:	183b      	adds	r3, r7, r0
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	2120      	movs	r1, #32
 800468e:	5c52      	ldrb	r2, [r2, r1]
 8004690:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800469a:	183b      	adds	r3, r7, r0
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d004      	beq.n	80046ac <HAL_CAN_AddTxMessage+0x34>
 80046a2:	183b      	adds	r3, r7, r0
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d000      	beq.n	80046ac <HAL_CAN_AddTxMessage+0x34>
 80046aa:	e0b7      	b.n	800481c <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	04db      	lsls	r3, r3, #19
 80046b2:	4013      	ands	r3, r2
 80046b4:	d10a      	bne.n	80046cc <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	051b      	lsls	r3, r3, #20
 80046bc:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80046be:	d105      	bne.n	80046cc <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	055b      	lsls	r3, r3, #21
 80046c6:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80046c8:	d100      	bne.n	80046cc <HAL_CAN_AddTxMessage+0x54>
 80046ca:	e09e      	b.n	800480a <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	0e1b      	lsrs	r3, r3, #24
 80046d0:	2203      	movs	r2, #3
 80046d2:	4013      	ands	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d908      	bls.n	80046ee <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	0412      	lsls	r2, r2, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e09e      	b.n	800482c <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80046ee:	2201      	movs	r2, #1
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	409a      	lsls	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10c      	bne.n	800471a <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4311      	orrs	r1, r2
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	3218      	adds	r2, #24
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	50d1      	str	r1, [r2, r3]
 8004718:	e00f      	b.n	800473a <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004724:	431a      	orrs	r2, r3
 8004726:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8004730:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	3218      	adds	r2, #24
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	3318      	adds	r3, #24
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	18cb      	adds	r3, r1, r3
 800474a:	3304      	adds	r3, #4
 800474c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	7d1b      	ldrb	r3, [r3, #20]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d112      	bne.n	800477c <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	3318      	adds	r3, #24
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	18d3      	adds	r3, r2, r3
 8004762:	3304      	adds	r3, #4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6819      	ldr	r1, [r3, #0]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	431a      	orrs	r2, r3
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3318      	adds	r3, #24
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	18cb      	adds	r3, r1, r3
 8004778:	3304      	adds	r3, #4
 800477a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3307      	adds	r3, #7
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	061a      	lsls	r2, r3, #24
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3306      	adds	r3, #6
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3305      	adds	r3, #5
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	0019      	movs	r1, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	23c6      	movs	r3, #198	; 0xc6
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	0109      	lsls	r1, r1, #4
 80047ae:	1841      	adds	r1, r0, r1
 80047b0:	18cb      	adds	r3, r1, r3
 80047b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3303      	adds	r3, #3
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	061a      	lsls	r2, r3, #24
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3302      	adds	r3, #2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3301      	adds	r3, #1
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	0019      	movs	r1, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	6979      	ldr	r1, [r7, #20]
 80047de:	23c4      	movs	r3, #196	; 0xc4
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	0109      	lsls	r1, r1, #4
 80047e4:	1841      	adds	r1, r0, r1
 80047e6:	18cb      	adds	r3, r1, r3
 80047e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	3218      	adds	r2, #24
 80047f2:	0112      	lsls	r2, r2, #4
 80047f4:	58d2      	ldr	r2, [r2, r3]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2101      	movs	r1, #1
 80047fc:	4311      	orrs	r1, r2
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	3218      	adds	r2, #24
 8004802:	0112      	lsls	r2, r2, #4
 8004804:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e010      	b.n	800482c <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2280      	movs	r2, #128	; 0x80
 8004810:	0392      	lsls	r2, r2, #14
 8004812:	431a      	orrs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2280      	movs	r2, #128	; 0x80
 8004822:	02d2      	lsls	r2, r2, #11
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
  }
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b008      	add	sp, #32
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004842:	2017      	movs	r0, #23
 8004844:	183b      	adds	r3, r7, r0
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	2120      	movs	r1, #32
 800484a:	5c52      	ldrb	r2, [r2, r1]
 800484c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800484e:	0002      	movs	r2, r0
 8004850:	18bb      	adds	r3, r7, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d004      	beq.n	8004862 <HAL_CAN_GetRxMessage+0x2e>
 8004858:	18bb      	adds	r3, r7, r2
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d000      	beq.n	8004862 <HAL_CAN_GetRxMessage+0x2e>
 8004860:	e0f8      	b.n	8004a54 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10e      	bne.n	8004886 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2203      	movs	r2, #3
 8004870:	4013      	ands	r3, r2
 8004872:	d117      	bne.n	80048a4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	0392      	lsls	r2, r2, #14
 800487c:	431a      	orrs	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0ee      	b.n	8004a64 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2203      	movs	r2, #3
 800488e:	4013      	ands	r3, r2
 8004890:	d108      	bne.n	80048a4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	0392      	lsls	r2, r2, #14
 800489a:	431a      	orrs	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0df      	b.n	8004a64 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	321b      	adds	r2, #27
 80048ac:	0112      	lsls	r2, r2, #4
 80048ae:	58d3      	ldr	r3, [r2, r3]
 80048b0:	2204      	movs	r2, #4
 80048b2:	401a      	ands	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	321b      	adds	r2, #27
 80048c8:	0112      	lsls	r2, r2, #4
 80048ca:	58d3      	ldr	r3, [r2, r3]
 80048cc:	0d5b      	lsrs	r3, r3, #21
 80048ce:	055b      	lsls	r3, r3, #21
 80048d0:	0d5a      	lsrs	r2, r3, #21
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e00a      	b.n	80048ee <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	321b      	adds	r2, #27
 80048e0:	0112      	lsls	r2, r2, #4
 80048e2:	58d3      	ldr	r3, [r2, r3]
 80048e4:	08db      	lsrs	r3, r3, #3
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	08da      	lsrs	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	321b      	adds	r2, #27
 80048f6:	0112      	lsls	r2, r2, #4
 80048f8:	58d3      	ldr	r3, [r2, r3]
 80048fa:	2202      	movs	r2, #2
 80048fc:	401a      	ands	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	331b      	adds	r3, #27
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	18d3      	adds	r3, r2, r3
 800490e:	3304      	adds	r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	220f      	movs	r2, #15
 8004914:	401a      	ands	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	331b      	adds	r3, #27
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	18d3      	adds	r3, r2, r3
 8004926:	3304      	adds	r3, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	401a      	ands	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	331b      	adds	r3, #27
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	18d3      	adds	r3, r2, r3
 8004940:	3304      	adds	r3, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	0c1a      	lsrs	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	23dc      	movs	r3, #220	; 0xdc
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	0112      	lsls	r2, r2, #4
 800495a:	188a      	adds	r2, r1, r2
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6819      	ldr	r1, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	23dc      	movs	r3, #220	; 0xdc
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	0112      	lsls	r2, r2, #4
 8004972:	188a      	adds	r2, r1, r2
 8004974:	18d3      	adds	r3, r2, r3
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	0a1a      	lsrs	r2, r3, #8
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	23dc      	movs	r3, #220	; 0xdc
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	0112      	lsls	r2, r2, #4
 800498e:	188a      	adds	r2, r1, r2
 8004990:	18d3      	adds	r3, r2, r3
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0c1a      	lsrs	r2, r3, #16
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	3302      	adds	r3, #2
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	23dc      	movs	r3, #220	; 0xdc
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	0112      	lsls	r2, r2, #4
 80049aa:	188a      	adds	r2, r1, r2
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0e1a      	lsrs	r2, r3, #24
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	3303      	adds	r3, #3
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6819      	ldr	r1, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	23de      	movs	r3, #222	; 0xde
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	0112      	lsls	r2, r2, #4
 80049c6:	188a      	adds	r2, r1, r2
 80049c8:	18d3      	adds	r3, r2, r3
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	3304      	adds	r3, #4
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6819      	ldr	r1, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	23de      	movs	r3, #222	; 0xde
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	188a      	adds	r2, r1, r2
 80049e2:	18d3      	adds	r3, r2, r3
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	0a1a      	lsrs	r2, r3, #8
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	3305      	adds	r3, #5
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	23de      	movs	r3, #222	; 0xde
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	0112      	lsls	r2, r2, #4
 80049fc:	188a      	adds	r2, r1, r2
 80049fe:	18d3      	adds	r3, r2, r3
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	0c1a      	lsrs	r2, r3, #16
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	3306      	adds	r3, #6
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	23de      	movs	r3, #222	; 0xde
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	188a      	adds	r2, r1, r2
 8004a1a:	18d3      	adds	r3, r2, r3
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	0e1a      	lsrs	r2, r3, #24
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	3307      	adds	r3, #7
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d108      	bne.n	8004a40 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2120      	movs	r1, #32
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	e007      	b.n	8004a50 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e007      	b.n	8004a64 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	02d2      	lsls	r2, r2, #11
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
  }
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b006      	add	sp, #24
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a76:	200f      	movs	r0, #15
 8004a78:	183b      	adds	r3, r7, r0
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	5c52      	ldrb	r2, [r2, r1]
 8004a80:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a82:	0002      	movs	r2, r0
 8004a84:	18bb      	adds	r3, r7, r2
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d003      	beq.n	8004a94 <HAL_CAN_ActivateNotification+0x28>
 8004a8c:	18bb      	adds	r3, r7, r2
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d109      	bne.n	8004aa8 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6959      	ldr	r1, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e007      	b.n	8004ab8 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	02d2      	lsls	r2, r2, #11
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
  }
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b004      	add	sp, #16
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	2201      	movs	r2, #1
 8004b00:	4013      	ands	r3, r2
 8004b02:	d100      	bne.n	8004b06 <HAL_CAN_IRQHandler+0x46>
 8004b04:	e084      	b.n	8004c10 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d024      	beq.n	8004b58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f000 f981 	bl	8004e28 <HAL_CAN_TxMailbox0CompleteCallback>
 8004b26:	e017      	b.n	8004b58 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d005      	beq.n	8004b3c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	0112      	lsls	r2, r2, #4
 8004b36:	4313      	orrs	r3, r2
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3a:	e00d      	b.n	8004b58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2208      	movs	r2, #8
 8004b40:	4013      	ands	r3, r2
 8004b42:	d005      	beq.n	8004b50 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	2280      	movs	r2, #128	; 0x80
 8004b48:	0152      	lsls	r2, r2, #5
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4e:	e003      	b.n	8004b58 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 f980 	bl	8004e58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d028      	beq.n	8004bb4 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	0052      	lsls	r2, r2, #1
 8004b6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4013      	ands	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 f95d 	bl	8004e38 <HAL_CAN_TxMailbox1CompleteCallback>
 8004b7e:	e019      	b.n	8004bb4 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4013      	ands	r3, r2
 8004b88:	d005      	beq.n	8004b96 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	2280      	movs	r2, #128	; 0x80
 8004b8e:	0192      	lsls	r2, r2, #6
 8004b90:	4313      	orrs	r3, r2
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	e00e      	b.n	8004bb4 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d005      	beq.n	8004bac <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	01d2      	lsls	r2, r2, #7
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	e003      	b.n	8004bb4 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 f95a 	bl	8004e68 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	025b      	lsls	r3, r3, #9
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d028      	beq.n	8004c10 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	0252      	lsls	r2, r2, #9
 8004bc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 f937 	bl	8004e48 <HAL_CAN_TxMailbox2CompleteCallback>
 8004bda:	e019      	b.n	8004c10 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	02db      	lsls	r3, r3, #11
 8004be2:	4013      	ands	r3, r2
 8004be4:	d005      	beq.n	8004bf2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	0212      	lsls	r2, r2, #8
 8004bec:	4313      	orrs	r3, r2
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	e00e      	b.n	8004c10 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	031b      	lsls	r3, r3, #12
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d005      	beq.n	8004c08 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	2280      	movs	r2, #128	; 0x80
 8004c00:	0252      	lsls	r2, r2, #9
 8004c02:	4313      	orrs	r3, r2
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e003      	b.n	8004c10 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 f934 	bl	8004e78 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	2208      	movs	r2, #8
 8004c14:	4013      	ands	r3, r2
 8004c16:	d00c      	beq.n	8004c32 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d008      	beq.n	8004c32 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	0092      	lsls	r2, r2, #2
 8004c26:	4313      	orrs	r3, r2
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	2204      	movs	r2, #4
 8004c36:	4013      	ands	r3, r2
 8004c38:	d00b      	beq.n	8004c52 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d007      	beq.n	8004c52 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2208      	movs	r2, #8
 8004c48:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 f923 	bl	8004e98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	2202      	movs	r2, #2
 8004c56:	4013      	ands	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2203      	movs	r2, #3
 8004c62:	4013      	ands	r3, r2
 8004c64:	d003      	beq.n	8004c6e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 f90d 	bl	8004e88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2240      	movs	r2, #64	; 0x40
 8004c72:	4013      	ands	r3, r2
 8004c74:	d00c      	beq.n	8004c90 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d008      	beq.n	8004c90 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	2280      	movs	r2, #128	; 0x80
 8004c82:	00d2      	lsls	r2, r2, #3
 8004c84:	4313      	orrs	r3, r2
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	2220      	movs	r2, #32
 8004c94:	4013      	ands	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f000 f904 	bl	8004eb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f000 f8ee 	bl	8004ea8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004ccc:	6a3a      	ldr	r2, [r7, #32]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d00b      	beq.n	8004cee <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2210      	movs	r2, #16
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d007      	beq.n	8004cee <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f000 f8ed 	bl	8004ec8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004cee:	6a3a      	ldr	r2, [r7, #32]
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	025b      	lsls	r3, r3, #9
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2208      	movs	r2, #8
 8004d06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 f8e4 	bl	8004ed8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	4013      	ands	r3, r2
 8004d18:	d100      	bne.n	8004d1c <HAL_CAN_IRQHandler+0x25c>
 8004d1a:	e074      	b.n	8004e06 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	4013      	ands	r3, r2
 8004d22:	d100      	bne.n	8004d26 <HAL_CAN_IRQHandler+0x266>
 8004d24:	e06b      	b.n	8004dfe <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d36:	d003      	beq.n	8004d40 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	d007      	beq.n	8004d5a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d50:	d003      	beq.n	8004d5a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	2202      	movs	r2, #2
 8004d56:	4313      	orrs	r3, r2
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d5a:	6a3a      	ldr	r2, [r7, #32]
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4013      	ands	r3, r2
 8004d62:	d007      	beq.n	8004d74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2204      	movs	r2, #4
 8004d68:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d6a:	d003      	beq.n	8004d74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2204      	movs	r2, #4
 8004d70:	4313      	orrs	r3, r2
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d03f      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2270      	movs	r2, #112	; 0x70
 8004d82:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d84:	d03b      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2270      	movs	r2, #112	; 0x70
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b60      	cmp	r3, #96	; 0x60
 8004d8e:	d027      	beq.n	8004de0 <HAL_CAN_IRQHandler+0x320>
 8004d90:	d82c      	bhi.n	8004dec <HAL_CAN_IRQHandler+0x32c>
 8004d92:	2b50      	cmp	r3, #80	; 0x50
 8004d94:	d01f      	beq.n	8004dd6 <HAL_CAN_IRQHandler+0x316>
 8004d96:	d829      	bhi.n	8004dec <HAL_CAN_IRQHandler+0x32c>
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d017      	beq.n	8004dcc <HAL_CAN_IRQHandler+0x30c>
 8004d9c:	d826      	bhi.n	8004dec <HAL_CAN_IRQHandler+0x32c>
 8004d9e:	2b30      	cmp	r3, #48	; 0x30
 8004da0:	d00f      	beq.n	8004dc2 <HAL_CAN_IRQHandler+0x302>
 8004da2:	d823      	bhi.n	8004dec <HAL_CAN_IRQHandler+0x32c>
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d002      	beq.n	8004dae <HAL_CAN_IRQHandler+0x2ee>
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d005      	beq.n	8004db8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004dac:	e01e      	b.n	8004dec <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	2208      	movs	r2, #8
 8004db2:	4313      	orrs	r3, r2
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004db6:	e01a      	b.n	8004dee <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	2210      	movs	r2, #16
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dc0:	e015      	b.n	8004dee <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dca:	e010      	b.n	8004dee <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	2240      	movs	r2, #64	; 0x40
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dd4:	e00b      	b.n	8004dee <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dde:	e006      	b.n	8004dee <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	2280      	movs	r2, #128	; 0x80
 8004de4:	0052      	lsls	r2, r2, #1
 8004de6:	4313      	orrs	r3, r2
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dea:	e000      	b.n	8004dee <HAL_CAN_IRQHandler+0x32e>
            break;
 8004dec:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699a      	ldr	r2, [r3, #24]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2170      	movs	r1, #112	; 0x70
 8004dfa:	438a      	bics	r2, r1
 8004dfc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2204      	movs	r2, #4
 8004e04:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 f864 	bl	8004ee8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b00a      	add	sp, #40	; 0x28
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b002      	add	sp, #8
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b002      	add	sp, #8
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b002      	add	sp, #8
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e70:	46c0      	nop			; (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b002      	add	sp, #8
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b002      	add	sp, #8
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b002      	add	sp, #8
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	0002      	movs	r2, r0
 8004f00:	1dfb      	adds	r3, r7, #7
 8004f02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f04:	1dfb      	adds	r3, r7, #7
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b7f      	cmp	r3, #127	; 0x7f
 8004f0a:	d809      	bhi.n	8004f20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f0c:	1dfb      	adds	r3, r7, #7
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	001a      	movs	r2, r3
 8004f12:	231f      	movs	r3, #31
 8004f14:	401a      	ands	r2, r3
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <__NVIC_EnableIRQ+0x30>)
 8004f18:	2101      	movs	r1, #1
 8004f1a:	4091      	lsls	r1, r2
 8004f1c:	000a      	movs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
  }
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	e000e100 	.word	0xe000e100

08004f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	0002      	movs	r2, r0
 8004f34:	6039      	str	r1, [r7, #0]
 8004f36:	1dfb      	adds	r3, r7, #7
 8004f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f3a:	1dfb      	adds	r3, r7, #7
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f40:	d828      	bhi.n	8004f94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f42:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <__NVIC_SetPriority+0xd4>)
 8004f44:	1dfb      	adds	r3, r7, #7
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b25b      	sxtb	r3, r3
 8004f4a:	089b      	lsrs	r3, r3, #2
 8004f4c:	33c0      	adds	r3, #192	; 0xc0
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	589b      	ldr	r3, [r3, r2]
 8004f52:	1dfa      	adds	r2, r7, #7
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	0011      	movs	r1, r2
 8004f58:	2203      	movs	r2, #3
 8004f5a:	400a      	ands	r2, r1
 8004f5c:	00d2      	lsls	r2, r2, #3
 8004f5e:	21ff      	movs	r1, #255	; 0xff
 8004f60:	4091      	lsls	r1, r2
 8004f62:	000a      	movs	r2, r1
 8004f64:	43d2      	mvns	r2, r2
 8004f66:	401a      	ands	r2, r3
 8004f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	019b      	lsls	r3, r3, #6
 8004f6e:	22ff      	movs	r2, #255	; 0xff
 8004f70:	401a      	ands	r2, r3
 8004f72:	1dfb      	adds	r3, r7, #7
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	0018      	movs	r0, r3
 8004f78:	2303      	movs	r3, #3
 8004f7a:	4003      	ands	r3, r0
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f80:	481f      	ldr	r0, [pc, #124]	; (8005000 <__NVIC_SetPriority+0xd4>)
 8004f82:	1dfb      	adds	r3, r7, #7
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b25b      	sxtb	r3, r3
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	33c0      	adds	r3, #192	; 0xc0
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f92:	e031      	b.n	8004ff8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f94:	4a1b      	ldr	r2, [pc, #108]	; (8005004 <__NVIC_SetPriority+0xd8>)
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	230f      	movs	r3, #15
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	3b08      	subs	r3, #8
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	3306      	adds	r3, #6
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	18d3      	adds	r3, r2, r3
 8004faa:	3304      	adds	r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	1dfa      	adds	r2, r7, #7
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	0011      	movs	r1, r2
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	00d2      	lsls	r2, r2, #3
 8004fba:	21ff      	movs	r1, #255	; 0xff
 8004fbc:	4091      	lsls	r1, r2
 8004fbe:	000a      	movs	r2, r1
 8004fc0:	43d2      	mvns	r2, r2
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	019b      	lsls	r3, r3, #6
 8004fca:	22ff      	movs	r2, #255	; 0xff
 8004fcc:	401a      	ands	r2, r3
 8004fce:	1dfb      	adds	r3, r7, #7
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	4003      	ands	r3, r0
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fdc:	4809      	ldr	r0, [pc, #36]	; (8005004 <__NVIC_SetPriority+0xd8>)
 8004fde:	1dfb      	adds	r3, r7, #7
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	001c      	movs	r4, r3
 8004fe4:	230f      	movs	r3, #15
 8004fe6:	4023      	ands	r3, r4
 8004fe8:	3b08      	subs	r3, #8
 8004fea:	089b      	lsrs	r3, r3, #2
 8004fec:	430a      	orrs	r2, r1
 8004fee:	3306      	adds	r3, #6
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	18c3      	adds	r3, r0, r3
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	601a      	str	r2, [r3, #0]
}
 8004ff8:	46c0      	nop			; (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b003      	add	sp, #12
 8004ffe:	bd90      	pop	{r4, r7, pc}
 8005000:	e000e100 	.word	0xe000e100
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	045b      	lsls	r3, r3, #17
 8005018:	429a      	cmp	r2, r3
 800501a:	d301      	bcc.n	8005020 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800501c:	2301      	movs	r3, #1
 800501e:	e010      	b.n	8005042 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <SysTick_Config+0x44>)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	3a01      	subs	r2, #1
 8005026:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005028:	2301      	movs	r3, #1
 800502a:	425b      	negs	r3, r3
 800502c:	2103      	movs	r1, #3
 800502e:	0018      	movs	r0, r3
 8005030:	f7ff ff7c 	bl	8004f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <SysTick_Config+0x44>)
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800503a:	4b04      	ldr	r3, [pc, #16]	; (800504c <SysTick_Config+0x44>)
 800503c:	2207      	movs	r2, #7
 800503e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005040:	2300      	movs	r3, #0
}
 8005042:	0018      	movs	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	b002      	add	sp, #8
 8005048:	bd80      	pop	{r7, pc}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	e000e010 	.word	0xe000e010

08005050 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	210f      	movs	r1, #15
 800505c:	187b      	adds	r3, r7, r1
 800505e:	1c02      	adds	r2, r0, #0
 8005060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	187b      	adds	r3, r7, r1
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b25b      	sxtb	r3, r3
 800506a:	0011      	movs	r1, r2
 800506c:	0018      	movs	r0, r3
 800506e:	f7ff ff5d 	bl	8004f2c <__NVIC_SetPriority>
}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	46bd      	mov	sp, r7
 8005076:	b004      	add	sp, #16
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	0002      	movs	r2, r0
 8005082:	1dfb      	adds	r3, r7, #7
 8005084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005086:	1dfb      	adds	r3, r7, #7
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	b25b      	sxtb	r3, r3
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff ff33 	bl	8004ef8 <__NVIC_EnableIRQ>
}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	46bd      	mov	sp, r7
 8005096:	b002      	add	sp, #8
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff ffaf 	bl	8005008 <SysTick_Config>
 80050aa:	0003      	movs	r3, r0
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b002      	add	sp, #8
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e036      	b.n	8005138 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2221      	movs	r2, #33	; 0x21
 80050ce:	2102      	movs	r1, #2
 80050d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_DMA_Init+0x8c>)
 80050de:	4013      	ands	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80050ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	0018      	movs	r0, r3
 800511c:	f000 f9c4 	bl	80054a8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2221      	movs	r2, #33	; 0x21
 800512a:	2101      	movs	r1, #1
 800512c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	2100      	movs	r1, #0
 8005134:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}  
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b004      	add	sp, #16
 800513e:	bd80      	pop	{r7, pc}
 8005140:	ffffc00f 	.word	0xffffc00f

08005144 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005152:	2317      	movs	r3, #23
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	5c9b      	ldrb	r3, [r3, r2]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_DMA_Start_IT+0x24>
 8005164:	2302      	movs	r3, #2
 8005166:	e04f      	b.n	8005208 <HAL_DMA_Start_IT+0xc4>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	2101      	movs	r1, #1
 800516e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2221      	movs	r2, #33	; 0x21
 8005174:	5c9b      	ldrb	r3, [r3, r2]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d13a      	bne.n	80051f2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2221      	movs	r2, #33	; 0x21
 8005180:	2102      	movs	r1, #2
 8005182:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2101      	movs	r1, #1
 8005196:	438a      	bics	r2, r1
 8005198:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f954 	bl	800544e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	210e      	movs	r1, #14
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e00f      	b.n	80051e0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	210a      	movs	r1, #10
 80051cc:	430a      	orrs	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2104      	movs	r1, #4
 80051dc:	438a      	bics	r2, r1
 80051de:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2101      	movs	r1, #1
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e007      	b.n	8005202 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80051fa:	2317      	movs	r3, #23
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	2202      	movs	r2, #2
 8005200:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8005202:	2317      	movs	r3, #23
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	781b      	ldrb	r3, [r3, #0]
} 
 8005208:	0018      	movs	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	b006      	add	sp, #24
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2221      	movs	r2, #33	; 0x21
 800521c:	5c9b      	ldrb	r3, [r3, r2]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d008      	beq.n	8005236 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2204      	movs	r2, #4
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	2100      	movs	r1, #0
 8005230:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e020      	b.n	8005278 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	210e      	movs	r1, #14
 8005242:	438a      	bics	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2101      	movs	r1, #1
 8005252:	438a      	bics	r2, r1
 8005254:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	2101      	movs	r1, #1
 8005260:	4091      	lsls	r1, r2
 8005262:	000a      	movs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2221      	movs	r2, #33	; 0x21
 800526a:	2101      	movs	r1, #1
 800526c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	2100      	movs	r1, #0
 8005274:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	b002      	add	sp, #8
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005288:	210f      	movs	r1, #15
 800528a:	187b      	adds	r3, r7, r1
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2221      	movs	r2, #33	; 0x21
 8005294:	5c9b      	ldrb	r3, [r3, r2]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d006      	beq.n	80052aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2204      	movs	r2, #4
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80052a2:	187b      	adds	r3, r7, r1
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e028      	b.n	80052fc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	210e      	movs	r1, #14
 80052b6:	438a      	bics	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	438a      	bics	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	2101      	movs	r1, #1
 80052d4:	4091      	lsls	r1, r2
 80052d6:	000a      	movs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2221      	movs	r2, #33	; 0x21
 80052de:	2101      	movs	r1, #1
 80052e0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	0010      	movs	r0, r2
 80052fa:	4798      	blx	r3
    } 
  }
  return status;
 80052fc:	230f      	movs	r3, #15
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	781b      	ldrb	r3, [r3, #0]
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b004      	add	sp, #16
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2204      	movs	r2, #4
 8005328:	409a      	lsls	r2, r3
 800532a:	0013      	movs	r3, r2
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4013      	ands	r3, r2
 8005330:	d024      	beq.n	800537c <HAL_DMA_IRQHandler+0x72>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2204      	movs	r2, #4
 8005336:	4013      	ands	r3, r2
 8005338:	d020      	beq.n	800537c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2220      	movs	r2, #32
 8005342:	4013      	ands	r3, r2
 8005344:	d107      	bne.n	8005356 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2104      	movs	r1, #4
 8005352:	438a      	bics	r2, r1
 8005354:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535e:	2104      	movs	r1, #4
 8005360:	4091      	lsls	r1, r2
 8005362:	000a      	movs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d100      	bne.n	8005370 <HAL_DMA_IRQHandler+0x66>
 800536e:	e06a      	b.n	8005446 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	0010      	movs	r0, r2
 8005378:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800537a:	e064      	b.n	8005446 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	2202      	movs	r2, #2
 8005382:	409a      	lsls	r2, r3
 8005384:	0013      	movs	r3, r2
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4013      	ands	r3, r2
 800538a:	d02b      	beq.n	80053e4 <HAL_DMA_IRQHandler+0xda>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2202      	movs	r2, #2
 8005390:	4013      	ands	r3, r2
 8005392:	d027      	beq.n	80053e4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2220      	movs	r2, #32
 800539c:	4013      	ands	r3, r2
 800539e:	d10b      	bne.n	80053b8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	210a      	movs	r1, #10
 80053ac:	438a      	bics	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2221      	movs	r2, #33	; 0x21
 80053b4:	2101      	movs	r1, #1
 80053b6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	2102      	movs	r1, #2
 80053c2:	4091      	lsls	r1, r2
 80053c4:	000a      	movs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	2100      	movs	r1, #0
 80053ce:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d036      	beq.n	8005446 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	0010      	movs	r0, r2
 80053e0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80053e2:	e030      	b.n	8005446 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	2208      	movs	r2, #8
 80053ea:	409a      	lsls	r2, r3
 80053ec:	0013      	movs	r3, r2
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4013      	ands	r3, r2
 80053f2:	d028      	beq.n	8005446 <HAL_DMA_IRQHandler+0x13c>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2208      	movs	r2, #8
 80053f8:	4013      	ands	r3, r2
 80053fa:	d024      	beq.n	8005446 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	210e      	movs	r1, #14
 8005408:	438a      	bics	r2, r1
 800540a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	2101      	movs	r1, #1
 8005416:	4091      	lsls	r1, r2
 8005418:	000a      	movs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2221      	movs	r2, #33	; 0x21
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	2100      	movs	r1, #0
 8005430:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	0010      	movs	r0, r2
 8005442:	4798      	blx	r3
    }
   }
}  
 8005444:	e7ff      	b.n	8005446 <HAL_DMA_IRQHandler+0x13c>
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	46bd      	mov	sp, r7
 800544a:	b004      	add	sp, #16
 800544c:	bd80      	pop	{r7, pc}

0800544e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005464:	2101      	movs	r1, #1
 8005466:	4091      	lsls	r1, r2
 8005468:	000a      	movs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b10      	cmp	r3, #16
 800547a:	d108      	bne.n	800548e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800548c:	e007      	b.n	800549e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]
}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b004      	add	sp, #16
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	001a      	movs	r2, r3
 80054b6:	4b14      	ldr	r3, [pc, #80]	; (8005508 <DMA_CalcBaseAndBitshift+0x60>)
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d810      	bhi.n	80054de <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a12      	ldr	r2, [pc, #72]	; (800550c <DMA_CalcBaseAndBitshift+0x64>)
 80054c2:	4694      	mov	ip, r2
 80054c4:	4463      	add	r3, ip
 80054c6:	2114      	movs	r1, #20
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fa fe37 	bl	800013c <__udivsi3>
 80054ce:	0003      	movs	r3, r0
 80054d0:	009a      	lsls	r2, r3, #2
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <DMA_CalcBaseAndBitshift+0x68>)
 80054da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80054dc:	e00f      	b.n	80054fe <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a0c      	ldr	r2, [pc, #48]	; (8005514 <DMA_CalcBaseAndBitshift+0x6c>)
 80054e4:	4694      	mov	ip, r2
 80054e6:	4463      	add	r3, ip
 80054e8:	2114      	movs	r1, #20
 80054ea:	0018      	movs	r0, r3
 80054ec:	f7fa fe26 	bl	800013c <__udivsi3>
 80054f0:	0003      	movs	r3, r0
 80054f2:	009a      	lsls	r2, r3, #2
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a07      	ldr	r2, [pc, #28]	; (8005518 <DMA_CalcBaseAndBitshift+0x70>)
 80054fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	46bd      	mov	sp, r7
 8005502:	b002      	add	sp, #8
 8005504:	bd80      	pop	{r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	40020407 	.word	0x40020407
 800550c:	bffdfff8 	.word	0xbffdfff8
 8005510:	40020000 	.word	0x40020000
 8005514:	bffdfbf8 	.word	0xbffdfbf8
 8005518:	40020400 	.word	0x40020400

0800551c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800552a:	e155      	b.n	80057d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2101      	movs	r1, #1
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4091      	lsls	r1, r2
 8005536:	000a      	movs	r2, r1
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d100      	bne.n	8005544 <HAL_GPIO_Init+0x28>
 8005542:	e146      	b.n	80057d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2203      	movs	r2, #3
 800554a:	4013      	ands	r3, r2
 800554c:	2b01      	cmp	r3, #1
 800554e:	d005      	beq.n	800555c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2203      	movs	r2, #3
 8005556:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005558:	2b02      	cmp	r3, #2
 800555a:	d130      	bne.n	80055be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	2203      	movs	r2, #3
 8005568:	409a      	lsls	r2, r3
 800556a:	0013      	movs	r3, r2
 800556c:	43da      	mvns	r2, r3
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4013      	ands	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	409a      	lsls	r2, r3
 800557e:	0013      	movs	r3, r2
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005592:	2201      	movs	r2, #1
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	409a      	lsls	r2, r3
 8005598:	0013      	movs	r3, r2
 800559a:	43da      	mvns	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4013      	ands	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	2201      	movs	r2, #1
 80055aa:	401a      	ands	r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	409a      	lsls	r2, r3
 80055b0:	0013      	movs	r3, r2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2203      	movs	r2, #3
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d017      	beq.n	80055fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	2203      	movs	r2, #3
 80055d6:	409a      	lsls	r2, r3
 80055d8:	0013      	movs	r3, r2
 80055da:	43da      	mvns	r2, r3
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	409a      	lsls	r2, r3
 80055ec:	0013      	movs	r3, r2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2203      	movs	r2, #3
 8005600:	4013      	ands	r3, r2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d123      	bne.n	800564e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	08da      	lsrs	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3208      	adds	r2, #8
 800560e:	0092      	lsls	r2, r2, #2
 8005610:	58d3      	ldr	r3, [r2, r3]
 8005612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2207      	movs	r2, #7
 8005618:	4013      	ands	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	220f      	movs	r2, #15
 800561e:	409a      	lsls	r2, r3
 8005620:	0013      	movs	r3, r2
 8005622:	43da      	mvns	r2, r3
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4013      	ands	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2107      	movs	r1, #7
 8005632:	400b      	ands	r3, r1
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	409a      	lsls	r2, r3
 8005638:	0013      	movs	r3, r2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	08da      	lsrs	r2, r3, #3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3208      	adds	r2, #8
 8005648:	0092      	lsls	r2, r2, #2
 800564a:	6939      	ldr	r1, [r7, #16]
 800564c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	2203      	movs	r2, #3
 800565a:	409a      	lsls	r2, r3
 800565c:	0013      	movs	r3, r2
 800565e:	43da      	mvns	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2203      	movs	r2, #3
 800566c:	401a      	ands	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	0013      	movs	r3, r2
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	23c0      	movs	r3, #192	; 0xc0
 8005688:	029b      	lsls	r3, r3, #10
 800568a:	4013      	ands	r3, r2
 800568c:	d100      	bne.n	8005690 <HAL_GPIO_Init+0x174>
 800568e:	e0a0      	b.n	80057d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005690:	4b57      	ldr	r3, [pc, #348]	; (80057f0 <HAL_GPIO_Init+0x2d4>)
 8005692:	699a      	ldr	r2, [r3, #24]
 8005694:	4b56      	ldr	r3, [pc, #344]	; (80057f0 <HAL_GPIO_Init+0x2d4>)
 8005696:	2101      	movs	r1, #1
 8005698:	430a      	orrs	r2, r1
 800569a:	619a      	str	r2, [r3, #24]
 800569c:	4b54      	ldr	r3, [pc, #336]	; (80057f0 <HAL_GPIO_Init+0x2d4>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2201      	movs	r2, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80056a8:	4a52      	ldr	r2, [pc, #328]	; (80057f4 <HAL_GPIO_Init+0x2d8>)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	089b      	lsrs	r3, r3, #2
 80056ae:	3302      	adds	r3, #2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	589b      	ldr	r3, [r3, r2]
 80056b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2203      	movs	r2, #3
 80056ba:	4013      	ands	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	220f      	movs	r2, #15
 80056c0:	409a      	lsls	r2, r3
 80056c2:	0013      	movs	r3, r2
 80056c4:	43da      	mvns	r2, r3
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	2390      	movs	r3, #144	; 0x90
 80056d0:	05db      	lsls	r3, r3, #23
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d019      	beq.n	800570a <HAL_GPIO_Init+0x1ee>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a47      	ldr	r2, [pc, #284]	; (80057f8 <HAL_GPIO_Init+0x2dc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_GPIO_Init+0x1ea>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a46      	ldr	r2, [pc, #280]	; (80057fc <HAL_GPIO_Init+0x2e0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00d      	beq.n	8005702 <HAL_GPIO_Init+0x1e6>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a45      	ldr	r2, [pc, #276]	; (8005800 <HAL_GPIO_Init+0x2e4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d007      	beq.n	80056fe <HAL_GPIO_Init+0x1e2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a44      	ldr	r2, [pc, #272]	; (8005804 <HAL_GPIO_Init+0x2e8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <HAL_GPIO_Init+0x1de>
 80056f6:	2304      	movs	r3, #4
 80056f8:	e008      	b.n	800570c <HAL_GPIO_Init+0x1f0>
 80056fa:	2305      	movs	r3, #5
 80056fc:	e006      	b.n	800570c <HAL_GPIO_Init+0x1f0>
 80056fe:	2303      	movs	r3, #3
 8005700:	e004      	b.n	800570c <HAL_GPIO_Init+0x1f0>
 8005702:	2302      	movs	r3, #2
 8005704:	e002      	b.n	800570c <HAL_GPIO_Init+0x1f0>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_GPIO_Init+0x1f0>
 800570a:	2300      	movs	r3, #0
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	2103      	movs	r1, #3
 8005710:	400a      	ands	r2, r1
 8005712:	0092      	lsls	r2, r2, #2
 8005714:	4093      	lsls	r3, r2
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800571c:	4935      	ldr	r1, [pc, #212]	; (80057f4 <HAL_GPIO_Init+0x2d8>)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	089b      	lsrs	r3, r3, #2
 8005722:	3302      	adds	r3, #2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800572a:	4b37      	ldr	r3, [pc, #220]	; (8005808 <HAL_GPIO_Init+0x2ec>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	43da      	mvns	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4013      	ands	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	025b      	lsls	r3, r3, #9
 8005742:	4013      	ands	r3, r2
 8005744:	d003      	beq.n	800574e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800574e:	4b2e      	ldr	r3, [pc, #184]	; (8005808 <HAL_GPIO_Init+0x2ec>)
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005754:	4b2c      	ldr	r3, [pc, #176]	; (8005808 <HAL_GPIO_Init+0x2ec>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	43da      	mvns	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	4013      	ands	r3, r2
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005778:	4b23      	ldr	r3, [pc, #140]	; (8005808 <HAL_GPIO_Init+0x2ec>)
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_GPIO_Init+0x2ec>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	43da      	mvns	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	035b      	lsls	r3, r3, #13
 8005796:	4013      	ands	r3, r2
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <HAL_GPIO_Init+0x2ec>)
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80057a8:	4b17      	ldr	r3, [pc, #92]	; (8005808 <HAL_GPIO_Init+0x2ec>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	43da      	mvns	r2, r3
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4013      	ands	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	039b      	lsls	r3, r3, #14
 80057c0:	4013      	ands	r3, r2
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <HAL_GPIO_Init+0x2ec>)
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	3301      	adds	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	40da      	lsrs	r2, r3
 80057e0:	1e13      	subs	r3, r2, #0
 80057e2:	d000      	beq.n	80057e6 <HAL_GPIO_Init+0x2ca>
 80057e4:	e6a2      	b.n	800552c <HAL_GPIO_Init+0x10>
  } 
}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	46c0      	nop			; (mov r8, r8)
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b006      	add	sp, #24
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40010000 	.word	0x40010000
 80057f8:	48000400 	.word	0x48000400
 80057fc:	48000800 	.word	0x48000800
 8005800:	48000c00 	.word	0x48000c00
 8005804:	48001000 	.word	0x48001000
 8005808:	40010400 	.word	0x40010400

0800580c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	000a      	movs	r2, r1
 8005816:	1cbb      	adds	r3, r7, #2
 8005818:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	1cba      	adds	r2, r7, #2
 8005820:	8812      	ldrh	r2, [r2, #0]
 8005822:	4013      	ands	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005826:	230f      	movs	r3, #15
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	e003      	b.n	8005838 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005830:	230f      	movs	r3, #15
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005838:	230f      	movs	r3, #15
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	781b      	ldrb	r3, [r3, #0]
  }
 800583e:	0018      	movs	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	b004      	add	sp, #16
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	0008      	movs	r0, r1
 8005850:	0011      	movs	r1, r2
 8005852:	1cbb      	adds	r3, r7, #2
 8005854:	1c02      	adds	r2, r0, #0
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	1c7b      	adds	r3, r7, #1
 800585a:	1c0a      	adds	r2, r1, #0
 800585c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800585e:	1c7b      	adds	r3, r7, #1
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005866:	1cbb      	adds	r3, r7, #2
 8005868:	881a      	ldrh	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800586e:	e003      	b.n	8005878 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005870:	1cbb      	adds	r3, r7, #2
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b002      	add	sp, #8
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	0002      	movs	r2, r0
 8005888:	1dbb      	adds	r3, r7, #6
 800588a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	1dba      	adds	r2, r7, #6
 8005892:	8812      	ldrh	r2, [r2, #0]
 8005894:	4013      	ands	r3, r2
 8005896:	d008      	beq.n	80058aa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005898:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800589a:	1dba      	adds	r2, r7, #6
 800589c:	8812      	ldrh	r2, [r2, #0]
 800589e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058a0:	1dbb      	adds	r3, r7, #6
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7fd fbcb 	bl	8003040 <HAL_GPIO_EXTI_Callback>
  }
}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b002      	add	sp, #8
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	40010400 	.word	0x40010400

080058b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e082      	b.n	80059d0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2241      	movs	r2, #65	; 0x41
 80058ce:	5c9b      	ldrb	r3, [r3, r2]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d107      	bne.n	80058e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2240      	movs	r2, #64	; 0x40
 80058da:	2100      	movs	r1, #0
 80058dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f000 f87f 	bl	80059e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2241      	movs	r2, #65	; 0x41
 80058ea:	2124      	movs	r1, #36	; 0x24
 80058ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2101      	movs	r1, #1
 80058fa:	438a      	bics	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4934      	ldr	r1, [pc, #208]	; (80059d8 <HAL_I2C_Init+0x120>)
 8005908:	400a      	ands	r2, r1
 800590a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4931      	ldr	r1, [pc, #196]	; (80059dc <HAL_I2C_Init+0x124>)
 8005918:	400a      	ands	r2, r1
 800591a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d108      	bne.n	8005936 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2180      	movs	r1, #128	; 0x80
 800592e:	0209      	lsls	r1, r1, #8
 8005930:	430a      	orrs	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	e007      	b.n	8005946 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2184      	movs	r1, #132	; 0x84
 8005940:	0209      	lsls	r1, r1, #8
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d104      	bne.n	8005958 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2280      	movs	r2, #128	; 0x80
 8005954:	0112      	lsls	r2, r2, #4
 8005956:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	491f      	ldr	r1, [pc, #124]	; (80059e0 <HAL_I2C_Init+0x128>)
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	491a      	ldr	r1, [pc, #104]	; (80059dc <HAL_I2C_Init+0x124>)
 8005974:	400a      	ands	r2, r1
 8005976:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	431a      	orrs	r2, r3
 8005982:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69d9      	ldr	r1, [r3, #28]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2101      	movs	r1, #1
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2241      	movs	r2, #65	; 0x41
 80059bc:	2120      	movs	r1, #32
 80059be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2242      	movs	r2, #66	; 0x42
 80059ca:	2100      	movs	r1, #0
 80059cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b002      	add	sp, #8
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	f0ffffff 	.word	0xf0ffffff
 80059dc:	ffff7fff 	.word	0xffff7fff
 80059e0:	02008000 	.word	0x02008000

080059e4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2241      	movs	r2, #65	; 0x41
 8005a02:	5c9b      	ldrb	r3, [r3, r2]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d138      	bne.n	8005a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2240      	movs	r2, #64	; 0x40
 8005a0e:	5c9b      	ldrb	r3, [r3, r2]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e032      	b.n	8005a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2240      	movs	r2, #64	; 0x40
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2241      	movs	r2, #65	; 0x41
 8005a24:	2124      	movs	r1, #36	; 0x24
 8005a26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2101      	movs	r1, #1
 8005a34:	438a      	bics	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4911      	ldr	r1, [pc, #68]	; (8005a88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a44:	400a      	ands	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6819      	ldr	r1, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2101      	movs	r1, #1
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2241      	movs	r2, #65	; 0x41
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2240      	movs	r2, #64	; 0x40
 8005a74:	2100      	movs	r1, #0
 8005a76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e000      	b.n	8005a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
  }
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b002      	add	sp, #8
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	ffffefff 	.word	0xffffefff

08005a8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2241      	movs	r2, #65	; 0x41
 8005a9a:	5c9b      	ldrb	r3, [r3, r2]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d139      	bne.n	8005b16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2240      	movs	r2, #64	; 0x40
 8005aa6:	5c9b      	ldrb	r3, [r3, r2]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e033      	b.n	8005b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2240      	movs	r2, #64	; 0x40
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2241      	movs	r2, #65	; 0x41
 8005abc:	2124      	movs	r1, #36	; 0x24
 8005abe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2101      	movs	r1, #1
 8005acc:	438a      	bics	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a11      	ldr	r2, [pc, #68]	; (8005b20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2101      	movs	r1, #1
 8005afe:	430a      	orrs	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2241      	movs	r2, #65	; 0x41
 8005b06:	2120      	movs	r1, #32
 8005b08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2240      	movs	r2, #64	; 0x40
 8005b0e:	2100      	movs	r1, #0
 8005b10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e000      	b.n	8005b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
  }
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b004      	add	sp, #16
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	fffff0ff 	.word	0xfffff0ff

08005b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f000 fb76 	bl	8006224 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d100      	bne.n	8005b44 <HAL_RCC_OscConfig+0x20>
 8005b42:	e08e      	b.n	8005c62 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005b44:	4bc5      	ldr	r3, [pc, #788]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	220c      	movs	r2, #12
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d00e      	beq.n	8005b6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b50:	4bc2      	ldr	r3, [pc, #776]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	220c      	movs	r2, #12
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d117      	bne.n	8005b8c <HAL_RCC_OscConfig+0x68>
 8005b5c:	4bbf      	ldr	r3, [pc, #764]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	23c0      	movs	r3, #192	; 0xc0
 8005b62:	025b      	lsls	r3, r3, #9
 8005b64:	401a      	ands	r2, r3
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	025b      	lsls	r3, r3, #9
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10e      	bne.n	8005b8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b6e:	4bbb      	ldr	r3, [pc, #748]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	4013      	ands	r3, r2
 8005b78:	d100      	bne.n	8005b7c <HAL_RCC_OscConfig+0x58>
 8005b7a:	e071      	b.n	8005c60 <HAL_RCC_OscConfig+0x13c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d000      	beq.n	8005b86 <HAL_RCC_OscConfig+0x62>
 8005b84:	e06c      	b.n	8005c60 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f000 fb4c 	bl	8006224 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d107      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x80>
 8005b94:	4bb1      	ldr	r3, [pc, #708]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4bb0      	ldr	r3, [pc, #704]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	0249      	lsls	r1, r1, #9
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e02f      	b.n	8005c04 <HAL_RCC_OscConfig+0xe0>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10c      	bne.n	8005bc6 <HAL_RCC_OscConfig+0xa2>
 8005bac:	4bab      	ldr	r3, [pc, #684]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4baa      	ldr	r3, [pc, #680]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bb2:	49ab      	ldr	r1, [pc, #684]	; (8005e60 <HAL_RCC_OscConfig+0x33c>)
 8005bb4:	400a      	ands	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	4ba8      	ldr	r3, [pc, #672]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4ba7      	ldr	r3, [pc, #668]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bbe:	49a9      	ldr	r1, [pc, #676]	; (8005e64 <HAL_RCC_OscConfig+0x340>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e01e      	b.n	8005c04 <HAL_RCC_OscConfig+0xe0>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d10e      	bne.n	8005bec <HAL_RCC_OscConfig+0xc8>
 8005bce:	4ba3      	ldr	r3, [pc, #652]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4ba2      	ldr	r3, [pc, #648]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bd4:	2180      	movs	r1, #128	; 0x80
 8005bd6:	02c9      	lsls	r1, r1, #11
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	4b9f      	ldr	r3, [pc, #636]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4b9e      	ldr	r3, [pc, #632]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005be2:	2180      	movs	r1, #128	; 0x80
 8005be4:	0249      	lsls	r1, r1, #9
 8005be6:	430a      	orrs	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e00b      	b.n	8005c04 <HAL_RCC_OscConfig+0xe0>
 8005bec:	4b9b      	ldr	r3, [pc, #620]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b9a      	ldr	r3, [pc, #616]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bf2:	499b      	ldr	r1, [pc, #620]	; (8005e60 <HAL_RCC_OscConfig+0x33c>)
 8005bf4:	400a      	ands	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	4b98      	ldr	r3, [pc, #608]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4b97      	ldr	r3, [pc, #604]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005bfe:	4999      	ldr	r1, [pc, #612]	; (8005e64 <HAL_RCC_OscConfig+0x340>)
 8005c00:	400a      	ands	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d014      	beq.n	8005c36 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0c:	f7fd fe40 	bl	8003890 <HAL_GetTick>
 8005c10:	0003      	movs	r3, r0
 8005c12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c16:	f7fd fe3b 	bl	8003890 <HAL_GetTick>
 8005c1a:	0002      	movs	r2, r0
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b64      	cmp	r3, #100	; 0x64
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e2fd      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c28:	4b8c      	ldr	r3, [pc, #560]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	029b      	lsls	r3, r3, #10
 8005c30:	4013      	ands	r3, r2
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCC_OscConfig+0xf2>
 8005c34:	e015      	b.n	8005c62 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c36:	f7fd fe2b 	bl	8003890 <HAL_GetTick>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c40:	f7fd fe26 	bl	8003890 <HAL_GetTick>
 8005c44:	0002      	movs	r2, r0
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e2e8      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c52:	4b82      	ldr	r3, [pc, #520]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	029b      	lsls	r3, r3, #10
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d1f0      	bne.n	8005c40 <HAL_RCC_OscConfig+0x11c>
 8005c5e:	e000      	b.n	8005c62 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2202      	movs	r2, #2
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d100      	bne.n	8005c6e <HAL_RCC_OscConfig+0x14a>
 8005c6c:	e06c      	b.n	8005d48 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c6e:	4b7b      	ldr	r3, [pc, #492]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	220c      	movs	r2, #12
 8005c74:	4013      	ands	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c78:	4b78      	ldr	r3, [pc, #480]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	220c      	movs	r2, #12
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d11f      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x1a0>
 8005c84:	4b75      	ldr	r3, [pc, #468]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	23c0      	movs	r3, #192	; 0xc0
 8005c8a:	025b      	lsls	r3, r3, #9
 8005c8c:	401a      	ands	r2, r3
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d116      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c96:	4b71      	ldr	r3, [pc, #452]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d005      	beq.n	8005cac <HAL_RCC_OscConfig+0x188>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e2bb      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cac:	4b6b      	ldr	r3, [pc, #428]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	22f8      	movs	r2, #248	; 0xf8
 8005cb2:	4393      	bics	r3, r2
 8005cb4:	0019      	movs	r1, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	00da      	lsls	r2, r3, #3
 8005cbc:	4b67      	ldr	r3, [pc, #412]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cc2:	e041      	b.n	8005d48 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d024      	beq.n	8005d16 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ccc:	4b63      	ldr	r3, [pc, #396]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b62      	ldr	r3, [pc, #392]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fd fdda 	bl	8003890 <HAL_GetTick>
 8005cdc:	0003      	movs	r3, r0
 8005cde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ce2:	f7fd fdd5 	bl	8003890 <HAL_GetTick>
 8005ce6:	0002      	movs	r2, r0
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e297      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf4:	4b59      	ldr	r3, [pc, #356]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d0f1      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfe:	4b57      	ldr	r3, [pc, #348]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	22f8      	movs	r2, #248	; 0xf8
 8005d04:	4393      	bics	r3, r2
 8005d06:	0019      	movs	r1, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	00da      	lsls	r2, r3, #3
 8005d0e:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d10:	430a      	orrs	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e018      	b.n	8005d48 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d16:	4b51      	ldr	r3, [pc, #324]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4b50      	ldr	r3, [pc, #320]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	438a      	bics	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fd fdb5 	bl	8003890 <HAL_GetTick>
 8005d26:	0003      	movs	r3, r0
 8005d28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d2c:	f7fd fdb0 	bl	8003890 <HAL_GetTick>
 8005d30:	0002      	movs	r2, r0
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e272      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d3e:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2202      	movs	r2, #2
 8005d44:	4013      	ands	r3, r2
 8005d46:	d1f1      	bne.n	8005d2c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d036      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d019      	beq.n	8005d8e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d5a:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d60:	2101      	movs	r1, #1
 8005d62:	430a      	orrs	r2, r1
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d66:	f7fd fd93 	bl	8003890 <HAL_GetTick>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d70:	f7fd fd8e 	bl	8003890 <HAL_GetTick>
 8005d74:	0002      	movs	r2, r0
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e250      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d82:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2202      	movs	r2, #2
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d0f1      	beq.n	8005d70 <HAL_RCC_OscConfig+0x24c>
 8005d8c:	e018      	b.n	8005dc0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d8e:	4b33      	ldr	r3, [pc, #204]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d92:	4b32      	ldr	r3, [pc, #200]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005d94:	2101      	movs	r1, #1
 8005d96:	438a      	bics	r2, r1
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9a:	f7fd fd79 	bl	8003890 <HAL_GetTick>
 8005d9e:	0003      	movs	r3, r0
 8005da0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da4:	f7fd fd74 	bl	8003890 <HAL_GetTick>
 8005da8:	0002      	movs	r2, r0
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e236      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db6:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d1f1      	bne.n	8005da4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d100      	bne.n	8005dcc <HAL_RCC_OscConfig+0x2a8>
 8005dca:	e0b5      	b.n	8005f38 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dcc:	201f      	movs	r0, #31
 8005dce:	183b      	adds	r3, r7, r0
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd4:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	055b      	lsls	r3, r3, #21
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d110      	bne.n	8005e02 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de0:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	0549      	lsls	r1, r1, #21
 8005dea:	430a      	orrs	r2, r1
 8005dec:	61da      	str	r2, [r3, #28]
 8005dee:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	055b      	lsls	r3, r3, #21
 8005df6:	4013      	ands	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005dfc:	183b      	adds	r3, r7, r0
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e02:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <HAL_RCC_OscConfig+0x344>)
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d11a      	bne.n	8005e44 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e0e:	4b16      	ldr	r3, [pc, #88]	; (8005e68 <HAL_RCC_OscConfig+0x344>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <HAL_RCC_OscConfig+0x344>)
 8005e14:	2180      	movs	r1, #128	; 0x80
 8005e16:	0049      	lsls	r1, r1, #1
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e1c:	f7fd fd38 	bl	8003890 <HAL_GetTick>
 8005e20:	0003      	movs	r3, r0
 8005e22:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e26:	f7fd fd33 	bl	8003890 <HAL_GetTick>
 8005e2a:	0002      	movs	r2, r0
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b64      	cmp	r3, #100	; 0x64
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e1f5      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <HAL_RCC_OscConfig+0x344>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	4013      	ands	r3, r2
 8005e42:	d0f0      	beq.n	8005e26 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10f      	bne.n	8005e6c <HAL_RCC_OscConfig+0x348>
 8005e4c:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <HAL_RCC_OscConfig+0x338>)
 8005e52:	2101      	movs	r1, #1
 8005e54:	430a      	orrs	r2, r1
 8005e56:	621a      	str	r2, [r3, #32]
 8005e58:	e036      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3a4>
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	fffeffff 	.word	0xfffeffff
 8005e64:	fffbffff 	.word	0xfffbffff
 8005e68:	40007000 	.word	0x40007000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10c      	bne.n	8005e8e <HAL_RCC_OscConfig+0x36a>
 8005e74:	4bca      	ldr	r3, [pc, #808]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	4bc9      	ldr	r3, [pc, #804]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	438a      	bics	r2, r1
 8005e7e:	621a      	str	r2, [r3, #32]
 8005e80:	4bc7      	ldr	r3, [pc, #796]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	4bc6      	ldr	r3, [pc, #792]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005e86:	2104      	movs	r1, #4
 8005e88:	438a      	bics	r2, r1
 8005e8a:	621a      	str	r2, [r3, #32]
 8005e8c:	e01c      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3a4>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x38c>
 8005e96:	4bc2      	ldr	r3, [pc, #776]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	4bc1      	ldr	r3, [pc, #772]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005e9c:	2104      	movs	r1, #4
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	621a      	str	r2, [r3, #32]
 8005ea2:	4bbf      	ldr	r3, [pc, #764]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	4bbe      	ldr	r3, [pc, #760]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	621a      	str	r2, [r3, #32]
 8005eae:	e00b      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3a4>
 8005eb0:	4bbb      	ldr	r3, [pc, #748]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005eb2:	6a1a      	ldr	r2, [r3, #32]
 8005eb4:	4bba      	ldr	r3, [pc, #744]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	438a      	bics	r2, r1
 8005eba:	621a      	str	r2, [r3, #32]
 8005ebc:	4bb8      	ldr	r3, [pc, #736]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005ebe:	6a1a      	ldr	r2, [r3, #32]
 8005ec0:	4bb7      	ldr	r3, [pc, #732]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	438a      	bics	r2, r1
 8005ec6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d014      	beq.n	8005efa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed0:	f7fd fcde 	bl	8003890 <HAL_GetTick>
 8005ed4:	0003      	movs	r3, r0
 8005ed6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed8:	e009      	b.n	8005eee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fd fcd9 	bl	8003890 <HAL_GetTick>
 8005ede:	0002      	movs	r2, r0
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	4aaf      	ldr	r2, [pc, #700]	; (80061a4 <HAL_RCC_OscConfig+0x680>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e19a      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eee:	4bac      	ldr	r3, [pc, #688]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x3b6>
 8005ef8:	e013      	b.n	8005f22 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005efa:	f7fd fcc9 	bl	8003890 <HAL_GetTick>
 8005efe:	0003      	movs	r3, r0
 8005f00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f02:	e009      	b.n	8005f18 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f04:	f7fd fcc4 	bl	8003890 <HAL_GetTick>
 8005f08:	0002      	movs	r2, r0
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	4aa5      	ldr	r2, [pc, #660]	; (80061a4 <HAL_RCC_OscConfig+0x680>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e185      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f18:	4ba1      	ldr	r3, [pc, #644]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f22:	231f      	movs	r3, #31
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2c:	4b9c      	ldr	r3, [pc, #624]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	4b9b      	ldr	r3, [pc, #620]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f32:	499d      	ldr	r1, [pc, #628]	; (80061a8 <HAL_RCC_OscConfig+0x684>)
 8005f34:	400a      	ands	r2, r1
 8005f36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d063      	beq.n	800600a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d12a      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005f4a:	4b95      	ldr	r3, [pc, #596]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4e:	4b94      	ldr	r3, [pc, #592]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f50:	2104      	movs	r1, #4
 8005f52:	430a      	orrs	r2, r1
 8005f54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005f56:	4b92      	ldr	r3, [pc, #584]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5a:	4b91      	ldr	r3, [pc, #580]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f62:	f7fd fc95 	bl	8003890 <HAL_GetTick>
 8005f66:	0003      	movs	r3, r0
 8005f68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005f6c:	f7fd fc90 	bl	8003890 <HAL_GetTick>
 8005f70:	0002      	movs	r2, r0
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e152      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005f7e:	4b88      	ldr	r3, [pc, #544]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	2202      	movs	r2, #2
 8005f84:	4013      	ands	r3, r2
 8005f86:	d0f1      	beq.n	8005f6c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005f88:	4b85      	ldr	r3, [pc, #532]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	22f8      	movs	r2, #248	; 0xf8
 8005f8e:	4393      	bics	r3, r2
 8005f90:	0019      	movs	r1, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	00da      	lsls	r2, r3, #3
 8005f98:	4b81      	ldr	r3, [pc, #516]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8005f9e:	e034      	b.n	800600a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	3305      	adds	r3, #5
 8005fa6:	d111      	bne.n	8005fcc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005fa8:	4b7d      	ldr	r3, [pc, #500]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fac:	4b7c      	ldr	r3, [pc, #496]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005fae:	2104      	movs	r1, #4
 8005fb0:	438a      	bics	r2, r1
 8005fb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005fb4:	4b7a      	ldr	r3, [pc, #488]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	22f8      	movs	r2, #248	; 0xf8
 8005fba:	4393      	bics	r3, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	00da      	lsls	r2, r3, #3
 8005fc4:	4b76      	ldr	r3, [pc, #472]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8005fca:	e01e      	b.n	800600a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005fcc:	4b74      	ldr	r3, [pc, #464]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd0:	4b73      	ldr	r3, [pc, #460]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005fd2:	2104      	movs	r1, #4
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005fd8:	4b71      	ldr	r3, [pc, #452]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fdc:	4b70      	ldr	r3, [pc, #448]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8005fde:	2101      	movs	r1, #1
 8005fe0:	438a      	bics	r2, r1
 8005fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe4:	f7fd fc54 	bl	8003890 <HAL_GetTick>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005fee:	f7fd fc4f 	bl	8003890 <HAL_GetTick>
 8005ff2:	0002      	movs	r2, r0
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e111      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006000:	4b67      	ldr	r3, [pc, #412]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	2202      	movs	r2, #2
 8006006:	4013      	ands	r3, r2
 8006008:	d1f1      	bne.n	8005fee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2220      	movs	r2, #32
 8006010:	4013      	ands	r3, r2
 8006012:	d05c      	beq.n	80060ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006014:	4b62      	ldr	r3, [pc, #392]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	220c      	movs	r2, #12
 800601a:	4013      	ands	r3, r2
 800601c:	2b0c      	cmp	r3, #12
 800601e:	d00e      	beq.n	800603e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006020:	4b5f      	ldr	r3, [pc, #380]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	220c      	movs	r2, #12
 8006026:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006028:	2b08      	cmp	r3, #8
 800602a:	d114      	bne.n	8006056 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800602c:	4b5c      	ldr	r3, [pc, #368]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	23c0      	movs	r3, #192	; 0xc0
 8006032:	025b      	lsls	r3, r3, #9
 8006034:	401a      	ands	r2, r3
 8006036:	23c0      	movs	r3, #192	; 0xc0
 8006038:	025b      	lsls	r3, r3, #9
 800603a:	429a      	cmp	r2, r3
 800603c:	d10b      	bne.n	8006056 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800603e:	4b58      	ldr	r3, [pc, #352]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	025b      	lsls	r3, r3, #9
 8006046:	4013      	ands	r3, r2
 8006048:	d040      	beq.n	80060cc <HAL_RCC_OscConfig+0x5a8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d03c      	beq.n	80060cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e0e6      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01b      	beq.n	8006096 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800605e:	4b50      	ldr	r3, [pc, #320]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006062:	4b4f      	ldr	r3, [pc, #316]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006064:	2180      	movs	r1, #128	; 0x80
 8006066:	0249      	lsls	r1, r1, #9
 8006068:	430a      	orrs	r2, r1
 800606a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606c:	f7fd fc10 	bl	8003890 <HAL_GetTick>
 8006070:	0003      	movs	r3, r0
 8006072:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006076:	f7fd fc0b 	bl	8003890 <HAL_GetTick>
 800607a:	0002      	movs	r2, r0
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e0cd      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006088:	4b45      	ldr	r3, [pc, #276]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 800608a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608c:	2380      	movs	r3, #128	; 0x80
 800608e:	025b      	lsls	r3, r3, #9
 8006090:	4013      	ands	r3, r2
 8006092:	d0f0      	beq.n	8006076 <HAL_RCC_OscConfig+0x552>
 8006094:	e01b      	b.n	80060ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006096:	4b42      	ldr	r3, [pc, #264]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800609a:	4b41      	ldr	r3, [pc, #260]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 800609c:	4943      	ldr	r1, [pc, #268]	; (80061ac <HAL_RCC_OscConfig+0x688>)
 800609e:	400a      	ands	r2, r1
 80060a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a2:	f7fd fbf5 	bl	8003890 <HAL_GetTick>
 80060a6:	0003      	movs	r3, r0
 80060a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060ac:	f7fd fbf0 	bl	8003890 <HAL_GetTick>
 80060b0:	0002      	movs	r2, r0
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e0b2      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80060be:	4b38      	ldr	r3, [pc, #224]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 80060c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	025b      	lsls	r3, r3, #9
 80060c6:	4013      	ands	r3, r2
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x588>
 80060ca:	e000      	b.n	80060ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80060cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d100      	bne.n	80060d8 <HAL_RCC_OscConfig+0x5b4>
 80060d6:	e0a4      	b.n	8006222 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060d8:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	220c      	movs	r2, #12
 80060de:	4013      	ands	r3, r2
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d100      	bne.n	80060e6 <HAL_RCC_OscConfig+0x5c2>
 80060e4:	e078      	b.n	80061d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d14c      	bne.n	8006188 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b2c      	ldr	r3, [pc, #176]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b2b      	ldr	r3, [pc, #172]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 80060f4:	492e      	ldr	r1, [pc, #184]	; (80061b0 <HAL_RCC_OscConfig+0x68c>)
 80060f6:	400a      	ands	r2, r1
 80060f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fa:	f7fd fbc9 	bl	8003890 <HAL_GetTick>
 80060fe:	0003      	movs	r3, r0
 8006100:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006104:	f7fd fbc4 	bl	8003890 <HAL_GetTick>
 8006108:	0002      	movs	r2, r0
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e086      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006116:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	049b      	lsls	r3, r3, #18
 800611e:	4013      	ands	r3, r2
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006122:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	220f      	movs	r2, #15
 8006128:	4393      	bics	r3, r2
 800612a:	0019      	movs	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006132:	430a      	orrs	r2, r1
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c
 8006136:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <HAL_RCC_OscConfig+0x690>)
 800613c:	4013      	ands	r3, r2
 800613e:	0019      	movs	r1, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	431a      	orrs	r2, r3
 800614a:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 800614c:	430a      	orrs	r2, r1
 800614e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006150:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	0449      	lsls	r1, r1, #17
 800615a:	430a      	orrs	r2, r1
 800615c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615e:	f7fd fb97 	bl	8003890 <HAL_GetTick>
 8006162:	0003      	movs	r3, r0
 8006164:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006168:	f7fd fb92 	bl	8003890 <HAL_GetTick>
 800616c:	0002      	movs	r2, r0
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e054      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800617a:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	2380      	movs	r3, #128	; 0x80
 8006180:	049b      	lsls	r3, r3, #18
 8006182:	4013      	ands	r3, r2
 8006184:	d0f0      	beq.n	8006168 <HAL_RCC_OscConfig+0x644>
 8006186:	e04c      	b.n	8006222 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <HAL_RCC_OscConfig+0x67c>)
 800618e:	4908      	ldr	r1, [pc, #32]	; (80061b0 <HAL_RCC_OscConfig+0x68c>)
 8006190:	400a      	ands	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fd fb7c 	bl	8003890 <HAL_GetTick>
 8006198:	0003      	movs	r3, r0
 800619a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800619c:	e015      	b.n	80061ca <HAL_RCC_OscConfig+0x6a6>
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	40021000 	.word	0x40021000
 80061a4:	00001388 	.word	0x00001388
 80061a8:	efffffff 	.word	0xefffffff
 80061ac:	fffeffff 	.word	0xfffeffff
 80061b0:	feffffff 	.word	0xfeffffff
 80061b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b8:	f7fd fb6a 	bl	8003890 <HAL_GetTick>
 80061bc:	0002      	movs	r2, r0
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e02c      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ca:	4b18      	ldr	r3, [pc, #96]	; (800622c <HAL_RCC_OscConfig+0x708>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	049b      	lsls	r3, r3, #18
 80061d2:	4013      	ands	r3, r2
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x694>
 80061d6:	e024      	b.n	8006222 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e01f      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <HAL_RCC_OscConfig+0x708>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <HAL_RCC_OscConfig+0x708>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	23c0      	movs	r3, #192	; 0xc0
 80061f4:	025b      	lsls	r3, r3, #9
 80061f6:	401a      	ands	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d10e      	bne.n	800621e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	220f      	movs	r2, #15
 8006204:	401a      	ands	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d107      	bne.n	800621e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	23f0      	movs	r3, #240	; 0xf0
 8006212:	039b      	lsls	r3, r3, #14
 8006214:	401a      	ands	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800621a:	429a      	cmp	r2, r3
 800621c:	d001      	beq.n	8006222 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	0018      	movs	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	b008      	add	sp, #32
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40021000 	.word	0x40021000

08006230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0bf      	b.n	80063c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006244:	4b61      	ldr	r3, [pc, #388]	; (80063cc <HAL_RCC_ClockConfig+0x19c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2201      	movs	r2, #1
 800624a:	4013      	ands	r3, r2
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d911      	bls.n	8006276 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006252:	4b5e      	ldr	r3, [pc, #376]	; (80063cc <HAL_RCC_ClockConfig+0x19c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2201      	movs	r2, #1
 8006258:	4393      	bics	r3, r2
 800625a:	0019      	movs	r1, r3
 800625c:	4b5b      	ldr	r3, [pc, #364]	; (80063cc <HAL_RCC_ClockConfig+0x19c>)
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006264:	4b59      	ldr	r3, [pc, #356]	; (80063cc <HAL_RCC_ClockConfig+0x19c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2201      	movs	r2, #1
 800626a:	4013      	ands	r3, r2
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d001      	beq.n	8006276 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e0a6      	b.n	80063c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2202      	movs	r2, #2
 800627c:	4013      	ands	r3, r2
 800627e:	d015      	beq.n	80062ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2204      	movs	r2, #4
 8006286:	4013      	ands	r3, r2
 8006288:	d006      	beq.n	8006298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800628a:	4b51      	ldr	r3, [pc, #324]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	4b50      	ldr	r3, [pc, #320]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 8006290:	21e0      	movs	r1, #224	; 0xe0
 8006292:	00c9      	lsls	r1, r1, #3
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006298:	4b4d      	ldr	r3, [pc, #308]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	22f0      	movs	r2, #240	; 0xf0
 800629e:	4393      	bics	r3, r2
 80062a0:	0019      	movs	r1, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	4b4a      	ldr	r3, [pc, #296]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2201      	movs	r2, #1
 80062b2:	4013      	ands	r3, r2
 80062b4:	d04c      	beq.n	8006350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d107      	bne.n	80062ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	4b44      	ldr	r3, [pc, #272]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	029b      	lsls	r3, r3, #10
 80062c6:	4013      	ands	r3, r2
 80062c8:	d120      	bne.n	800630c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e07a      	b.n	80063c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d107      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d6:	4b3e      	ldr	r3, [pc, #248]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	049b      	lsls	r3, r3, #18
 80062de:	4013      	ands	r3, r2
 80062e0:	d114      	bne.n	800630c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e06e      	b.n	80063c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d107      	bne.n	80062fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80062ee:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 80062f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	025b      	lsls	r3, r3, #9
 80062f6:	4013      	ands	r3, r2
 80062f8:	d108      	bne.n	800630c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e062      	b.n	80063c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062fe:	4b34      	ldr	r3, [pc, #208]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2202      	movs	r2, #2
 8006304:	4013      	ands	r3, r2
 8006306:	d101      	bne.n	800630c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e05b      	b.n	80063c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800630c:	4b30      	ldr	r3, [pc, #192]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2203      	movs	r2, #3
 8006312:	4393      	bics	r3, r2
 8006314:	0019      	movs	r1, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006320:	f7fd fab6 	bl	8003890 <HAL_GetTick>
 8006324:	0003      	movs	r3, r0
 8006326:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006328:	e009      	b.n	800633e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800632a:	f7fd fab1 	bl	8003890 <HAL_GetTick>
 800632e:	0002      	movs	r2, r0
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	4a27      	ldr	r2, [pc, #156]	; (80063d4 <HAL_RCC_ClockConfig+0x1a4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d901      	bls.n	800633e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e042      	b.n	80063c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633e:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	220c      	movs	r2, #12
 8006344:	401a      	ands	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	429a      	cmp	r2, r3
 800634e:	d1ec      	bne.n	800632a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006350:	4b1e      	ldr	r3, [pc, #120]	; (80063cc <HAL_RCC_ClockConfig+0x19c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2201      	movs	r2, #1
 8006356:	4013      	ands	r3, r2
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d211      	bcs.n	8006382 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635e:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <HAL_RCC_ClockConfig+0x19c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2201      	movs	r2, #1
 8006364:	4393      	bics	r3, r2
 8006366:	0019      	movs	r1, r3
 8006368:	4b18      	ldr	r3, [pc, #96]	; (80063cc <HAL_RCC_ClockConfig+0x19c>)
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006370:	4b16      	ldr	r3, [pc, #88]	; (80063cc <HAL_RCC_ClockConfig+0x19c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2201      	movs	r2, #1
 8006376:	4013      	ands	r3, r2
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d001      	beq.n	8006382 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e020      	b.n	80063c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2204      	movs	r2, #4
 8006388:	4013      	ands	r3, r2
 800638a:	d009      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800638c:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a11      	ldr	r2, [pc, #68]	; (80063d8 <HAL_RCC_ClockConfig+0x1a8>)
 8006392:	4013      	ands	r3, r2
 8006394:	0019      	movs	r1, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80063a0:	f000 f820 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 80063a4:	0001      	movs	r1, r0
 80063a6:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <HAL_RCC_ClockConfig+0x1a0>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	091b      	lsrs	r3, r3, #4
 80063ac:	220f      	movs	r2, #15
 80063ae:	4013      	ands	r3, r2
 80063b0:	4a0a      	ldr	r2, [pc, #40]	; (80063dc <HAL_RCC_ClockConfig+0x1ac>)
 80063b2:	5cd3      	ldrb	r3, [r2, r3]
 80063b4:	000a      	movs	r2, r1
 80063b6:	40da      	lsrs	r2, r3
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <HAL_RCC_ClockConfig+0x1b0>)
 80063ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80063bc:	2000      	movs	r0, #0
 80063be:	f7fd fa21 	bl	8003804 <HAL_InitTick>
  
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	0018      	movs	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b004      	add	sp, #16
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40022000 	.word	0x40022000
 80063d0:	40021000 	.word	0x40021000
 80063d4:	00001388 	.word	0x00001388
 80063d8:	fffff8ff 	.word	0xfffff8ff
 80063dc:	080101a8 	.word	0x080101a8
 80063e0:	20000000 	.word	0x20000000

080063e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b08f      	sub	sp, #60	; 0x3c
 80063e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80063ea:	2314      	movs	r3, #20
 80063ec:	18fb      	adds	r3, r7, r3
 80063ee:	4a38      	ldr	r2, [pc, #224]	; (80064d0 <HAL_RCC_GetSysClockFreq+0xec>)
 80063f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80063f2:	c313      	stmia	r3!, {r0, r1, r4}
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	4a36      	ldr	r2, [pc, #216]	; (80064d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80063fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80063fe:	c313      	stmia	r3!, {r0, r1, r4}
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006408:	2300      	movs	r3, #0
 800640a:	62bb      	str	r3, [r7, #40]	; 0x28
 800640c:	2300      	movs	r3, #0
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
 8006410:	2300      	movs	r3, #0
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006418:	4b2f      	ldr	r3, [pc, #188]	; (80064d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	220c      	movs	r2, #12
 8006422:	4013      	ands	r3, r2
 8006424:	2b0c      	cmp	r3, #12
 8006426:	d047      	beq.n	80064b8 <HAL_RCC_GetSysClockFreq+0xd4>
 8006428:	d849      	bhi.n	80064be <HAL_RCC_GetSysClockFreq+0xda>
 800642a:	2b04      	cmp	r3, #4
 800642c:	d002      	beq.n	8006434 <HAL_RCC_GetSysClockFreq+0x50>
 800642e:	2b08      	cmp	r3, #8
 8006430:	d003      	beq.n	800643a <HAL_RCC_GetSysClockFreq+0x56>
 8006432:	e044      	b.n	80064be <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006434:	4b29      	ldr	r3, [pc, #164]	; (80064dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006436:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006438:	e044      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	0c9b      	lsrs	r3, r3, #18
 800643e:	220f      	movs	r2, #15
 8006440:	4013      	ands	r3, r2
 8006442:	2214      	movs	r2, #20
 8006444:	18ba      	adds	r2, r7, r2
 8006446:	5cd3      	ldrb	r3, [r2, r3]
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800644a:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	220f      	movs	r2, #15
 8006450:	4013      	ands	r3, r2
 8006452:	1d3a      	adds	r2, r7, #4
 8006454:	5cd3      	ldrb	r3, [r2, r3]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800645a:	23c0      	movs	r3, #192	; 0xc0
 800645c:	025b      	lsls	r3, r3, #9
 800645e:	401a      	ands	r2, r3
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	025b      	lsls	r3, r3, #9
 8006464:	429a      	cmp	r2, r3
 8006466:	d109      	bne.n	800647c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800646a:	481c      	ldr	r0, [pc, #112]	; (80064dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800646c:	f7f9 fe66 	bl	800013c <__udivsi3>
 8006470:	0003      	movs	r3, r0
 8006472:	001a      	movs	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	4353      	muls	r3, r2
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
 800647a:	e01a      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800647c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800647e:	23c0      	movs	r3, #192	; 0xc0
 8006480:	025b      	lsls	r3, r3, #9
 8006482:	401a      	ands	r2, r3
 8006484:	23c0      	movs	r3, #192	; 0xc0
 8006486:	025b      	lsls	r3, r3, #9
 8006488:	429a      	cmp	r2, r3
 800648a:	d109      	bne.n	80064a0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800648c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648e:	4814      	ldr	r0, [pc, #80]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006490:	f7f9 fe54 	bl	800013c <__udivsi3>
 8006494:	0003      	movs	r3, r0
 8006496:	001a      	movs	r2, r3
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	4353      	muls	r3, r2
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
 800649e:	e008      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064a2:	480e      	ldr	r0, [pc, #56]	; (80064dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80064a4:	f7f9 fe4a 	bl	800013c <__udivsi3>
 80064a8:	0003      	movs	r3, r0
 80064aa:	001a      	movs	r2, r3
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	4353      	muls	r3, r2
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80064b6:	e005      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80064bc:	e002      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064be:	4b07      	ldr	r3, [pc, #28]	; (80064dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80064c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80064c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b00f      	add	sp, #60	; 0x3c
 80064cc:	bd90      	pop	{r4, r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	0800ff48 	.word	0x0800ff48
 80064d4:	0800ff58 	.word	0x0800ff58
 80064d8:	40021000 	.word	0x40021000
 80064dc:	007a1200 	.word	0x007a1200
 80064e0:	02dc6c00 	.word	0x02dc6c00

080064e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064e8:	4b02      	ldr	r3, [pc, #8]	; (80064f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80064ea:	681b      	ldr	r3, [r3, #0]
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	20000000 	.word	0x20000000

080064f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80064fc:	f7ff fff2 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 8006500:	0001      	movs	r1, r0
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	2207      	movs	r2, #7
 800650a:	4013      	ands	r3, r2
 800650c:	4a04      	ldr	r2, [pc, #16]	; (8006520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800650e:	5cd3      	ldrb	r3, [r2, r3]
 8006510:	40d9      	lsrs	r1, r3
 8006512:	000b      	movs	r3, r1
}    
 8006514:	0018      	movs	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	40021000 	.word	0x40021000
 8006520:	080101b8 	.word	0x080101b8

08006524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	2380      	movs	r3, #128	; 0x80
 800653a:	025b      	lsls	r3, r3, #9
 800653c:	4013      	ands	r3, r2
 800653e:	d100      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006540:	e08e      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006542:	2017      	movs	r0, #23
 8006544:	183b      	adds	r3, r7, r0
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800654a:	4b6e      	ldr	r3, [pc, #440]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	055b      	lsls	r3, r3, #21
 8006552:	4013      	ands	r3, r2
 8006554:	d110      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006556:	4b6b      	ldr	r3, [pc, #428]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006558:	69da      	ldr	r2, [r3, #28]
 800655a:	4b6a      	ldr	r3, [pc, #424]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	0549      	lsls	r1, r1, #21
 8006560:	430a      	orrs	r2, r1
 8006562:	61da      	str	r2, [r3, #28]
 8006564:	4b67      	ldr	r3, [pc, #412]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006566:	69da      	ldr	r2, [r3, #28]
 8006568:	2380      	movs	r3, #128	; 0x80
 800656a:	055b      	lsls	r3, r3, #21
 800656c:	4013      	ands	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]
 8006570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006572:	183b      	adds	r3, r7, r0
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006578:	4b63      	ldr	r3, [pc, #396]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	4013      	ands	r3, r2
 8006582:	d11a      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006584:	4b60      	ldr	r3, [pc, #384]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	4b5f      	ldr	r3, [pc, #380]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800658a:	2180      	movs	r1, #128	; 0x80
 800658c:	0049      	lsls	r1, r1, #1
 800658e:	430a      	orrs	r2, r1
 8006590:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006592:	f7fd f97d 	bl	8003890 <HAL_GetTick>
 8006596:	0003      	movs	r3, r0
 8006598:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659a:	e008      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659c:	f7fd f978 	bl	8003890 <HAL_GetTick>
 80065a0:	0002      	movs	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	; 0x64
 80065a8:	d901      	bls.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e0a6      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ae:	4b56      	ldr	r3, [pc, #344]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	4013      	ands	r3, r2
 80065b8:	d0f0      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065ba:	4b52      	ldr	r3, [pc, #328]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	23c0      	movs	r3, #192	; 0xc0
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4013      	ands	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d034      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	23c0      	movs	r3, #192	; 0xc0
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4013      	ands	r3, r2
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d02c      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065dc:	4b49      	ldr	r3, [pc, #292]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	4a4a      	ldr	r2, [pc, #296]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065e6:	4b47      	ldr	r3, [pc, #284]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065e8:	6a1a      	ldr	r2, [r3, #32]
 80065ea:	4b46      	ldr	r3, [pc, #280]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065ec:	2180      	movs	r1, #128	; 0x80
 80065ee:	0249      	lsls	r1, r1, #9
 80065f0:	430a      	orrs	r2, r1
 80065f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065f4:	4b43      	ldr	r3, [pc, #268]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065f6:	6a1a      	ldr	r2, [r3, #32]
 80065f8:	4b42      	ldr	r3, [pc, #264]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065fa:	4945      	ldr	r1, [pc, #276]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80065fc:	400a      	ands	r2, r1
 80065fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006600:	4b40      	ldr	r3, [pc, #256]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	4013      	ands	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660e:	f7fd f93f 	bl	8003890 <HAL_GetTick>
 8006612:	0003      	movs	r3, r0
 8006614:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006616:	e009      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006618:	f7fd f93a 	bl	8003890 <HAL_GetTick>
 800661c:	0002      	movs	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	4a3c      	ldr	r2, [pc, #240]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d901      	bls.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e067      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800662c:	4b35      	ldr	r3, [pc, #212]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	2202      	movs	r2, #2
 8006632:	4013      	ands	r3, r2
 8006634:	d0f0      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006636:	4b33      	ldr	r3, [pc, #204]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	4a34      	ldr	r2, [pc, #208]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800663c:	4013      	ands	r3, r2
 800663e:	0019      	movs	r1, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	4b2f      	ldr	r3, [pc, #188]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006646:	430a      	orrs	r2, r1
 8006648:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800664a:	2317      	movs	r3, #23
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d105      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006654:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800665a:	492f      	ldr	r1, [pc, #188]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800665c:	400a      	ands	r2, r1
 800665e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2201      	movs	r2, #1
 8006666:	4013      	ands	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800666a:	4b26      	ldr	r3, [pc, #152]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	2203      	movs	r2, #3
 8006670:	4393      	bics	r3, r2
 8006672:	0019      	movs	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	4b22      	ldr	r3, [pc, #136]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800667a:	430a      	orrs	r2, r1
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2202      	movs	r2, #2
 8006684:	4013      	ands	r3, r2
 8006686:	d009      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006688:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	4a23      	ldr	r2, [pc, #140]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800668e:	4013      	ands	r3, r2
 8006690:	0019      	movs	r1, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006698:	430a      	orrs	r2, r1
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	02db      	lsls	r3, r3, #11
 80066a4:	4013      	ands	r3, r2
 80066a6:	d009      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066a8:	4b16      	ldr	r3, [pc, #88]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	4a1c      	ldr	r2, [pc, #112]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	0019      	movs	r1, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	4b13      	ldr	r3, [pc, #76]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80066b8:	430a      	orrs	r2, r1
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2220      	movs	r2, #32
 80066c2:	4013      	ands	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066c6:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	2210      	movs	r2, #16
 80066cc:	4393      	bics	r3, r2
 80066ce:	0019      	movs	r1, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	695a      	ldr	r2, [r3, #20]
 80066d4:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80066d6:	430a      	orrs	r2, r1
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4013      	ands	r3, r2
 80066e4:	d009      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066e6:	4b07      	ldr	r3, [pc, #28]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	2240      	movs	r2, #64	; 0x40
 80066ec:	4393      	bics	r3, r2
 80066ee:	0019      	movs	r1, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80066f6:	430a      	orrs	r2, r1
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	0018      	movs	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	b006      	add	sp, #24
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40021000 	.word	0x40021000
 8006708:	40007000 	.word	0x40007000
 800670c:	fffffcff 	.word	0xfffffcff
 8006710:	fffeffff 	.word	0xfffeffff
 8006714:	00001388 	.word	0x00001388
 8006718:	efffffff 	.word	0xefffffff
 800671c:	fffcffff 	.word	0xfffcffff
 8006720:	fff3ffff 	.word	0xfff3ffff

08006724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e0a8      	b.n	8006888 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	2382      	movs	r3, #130	; 0x82
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	429a      	cmp	r2, r3
 8006748:	d009      	beq.n	800675e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	61da      	str	r2, [r3, #28]
 8006750:	e005      	b.n	800675e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	225d      	movs	r2, #93	; 0x5d
 8006768:	5c9b      	ldrb	r3, [r3, r2]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d107      	bne.n	8006780 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	225c      	movs	r2, #92	; 0x5c
 8006774:	2100      	movs	r1, #0
 8006776:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0018      	movs	r0, r3
 800677c:	f7fc fd9e 	bl	80032bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	225d      	movs	r2, #93	; 0x5d
 8006784:	2102      	movs	r1, #2
 8006786:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2140      	movs	r1, #64	; 0x40
 8006794:	438a      	bics	r2, r1
 8006796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	23e0      	movs	r3, #224	; 0xe0
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d902      	bls.n	80067aa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e002      	b.n	80067b0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	015b      	lsls	r3, r3, #5
 80067ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	23f0      	movs	r3, #240	; 0xf0
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d008      	beq.n	80067ce <HAL_SPI_Init+0xaa>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	23e0      	movs	r3, #224	; 0xe0
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d002      	beq.n	80067ce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	2382      	movs	r3, #130	; 0x82
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	401a      	ands	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6899      	ldr	r1, [r3, #8]
 80067dc:	2384      	movs	r3, #132	; 0x84
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	400b      	ands	r3, r1
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2102      	movs	r1, #2
 80067ea:	400b      	ands	r3, r1
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	2101      	movs	r1, #1
 80067f4:	400b      	ands	r3, r1
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6999      	ldr	r1, [r3, #24]
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	400b      	ands	r3, r1
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2138      	movs	r1, #56	; 0x38
 800680a:	400b      	ands	r3, r1
 800680c:	431a      	orrs	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	2180      	movs	r1, #128	; 0x80
 8006814:	400b      	ands	r3, r1
 8006816:	431a      	orrs	r2, r3
 8006818:	0011      	movs	r1, r2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800681e:	2380      	movs	r3, #128	; 0x80
 8006820:	019b      	lsls	r3, r3, #6
 8006822:	401a      	ands	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	0c1b      	lsrs	r3, r3, #16
 8006832:	2204      	movs	r2, #4
 8006834:	401a      	ands	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	2110      	movs	r1, #16
 800683c:	400b      	ands	r3, r1
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006844:	2108      	movs	r1, #8
 8006846:	400b      	ands	r3, r1
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68d9      	ldr	r1, [r3, #12]
 800684e:	23f0      	movs	r3, #240	; 0xf0
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	400b      	ands	r3, r1
 8006854:	431a      	orrs	r2, r3
 8006856:	0011      	movs	r1, r2
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	015b      	lsls	r3, r3, #5
 800685e:	401a      	ands	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69da      	ldr	r2, [r3, #28]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4907      	ldr	r1, [pc, #28]	; (8006890 <HAL_SPI_Init+0x16c>)
 8006874:	400a      	ands	r2, r1
 8006876:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	225d      	movs	r2, #93	; 0x5d
 8006882:	2101      	movs	r1, #1
 8006884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b004      	add	sp, #16
 800688e:	bd80      	pop	{r7, pc}
 8006890:	fffff7ff 	.word	0xfffff7ff

08006894 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	1dbb      	adds	r3, r7, #6
 80068a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068a4:	231f      	movs	r3, #31
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	225c      	movs	r2, #92	; 0x5c
 80068b0:	5c9b      	ldrb	r3, [r3, r2]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_SPI_Transmit+0x26>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e140      	b.n	8006b3c <HAL_SPI_Transmit+0x2a8>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	225c      	movs	r2, #92	; 0x5c
 80068be:	2101      	movs	r1, #1
 80068c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068c2:	f7fc ffe5 	bl	8003890 <HAL_GetTick>
 80068c6:	0003      	movs	r3, r0
 80068c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80068ca:	2316      	movs	r3, #22
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	1dba      	adds	r2, r7, #6
 80068d0:	8812      	ldrh	r2, [r2, #0]
 80068d2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	225d      	movs	r2, #93	; 0x5d
 80068d8:	5c9b      	ldrb	r3, [r3, r2]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d004      	beq.n	80068ea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80068e0:	231f      	movs	r3, #31
 80068e2:	18fb      	adds	r3, r7, r3
 80068e4:	2202      	movs	r2, #2
 80068e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80068e8:	e11d      	b.n	8006b26 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_SPI_Transmit+0x64>
 80068f0:	1dbb      	adds	r3, r7, #6
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80068f8:	231f      	movs	r3, #31
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	2201      	movs	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8006900:	e111      	b.n	8006b26 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	225d      	movs	r2, #93	; 0x5d
 8006906:	2103      	movs	r1, #3
 8006908:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1dba      	adds	r2, r7, #6
 800691a:	8812      	ldrh	r2, [r2, #0]
 800691c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1dba      	adds	r2, r7, #6
 8006922:	8812      	ldrh	r2, [r2, #0]
 8006924:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2244      	movs	r2, #68	; 0x44
 8006930:	2100      	movs	r1, #0
 8006932:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2246      	movs	r2, #70	; 0x46
 8006938:	2100      	movs	r1, #0
 800693a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	429a      	cmp	r2, r3
 8006952:	d110      	bne.n	8006976 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2140      	movs	r1, #64	; 0x40
 8006960:	438a      	bics	r2, r1
 8006962:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2180      	movs	r1, #128	; 0x80
 8006970:	01c9      	lsls	r1, r1, #7
 8006972:	430a      	orrs	r2, r1
 8006974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	4013      	ands	r3, r2
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d007      	beq.n	8006994 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2140      	movs	r1, #64	; 0x40
 8006990:	430a      	orrs	r2, r1
 8006992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	23e0      	movs	r3, #224	; 0xe0
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	429a      	cmp	r2, r3
 800699e:	d94e      	bls.n	8006a3e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <HAL_SPI_Transmit+0x11e>
 80069a8:	2316      	movs	r3, #22
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d13f      	bne.n	8006a32 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	881a      	ldrh	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	1c9a      	adds	r2, r3, #2
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069d6:	e02c      	b.n	8006a32 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2202      	movs	r2, #2
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d112      	bne.n	8006a0c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	881a      	ldrh	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	1c9a      	adds	r2, r3, #2
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a0a:	e012      	b.n	8006a32 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0c:	f7fc ff40 	bl	8003890 <HAL_GetTick>
 8006a10:	0002      	movs	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d802      	bhi.n	8006a22 <HAL_SPI_Transmit+0x18e>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	d102      	bne.n	8006a28 <HAL_SPI_Transmit+0x194>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006a28:	231f      	movs	r3, #31
 8006a2a:	18fb      	adds	r3, r7, r3
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006a30:	e079      	b.n	8006b26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1cd      	bne.n	80069d8 <HAL_SPI_Transmit+0x144>
 8006a3c:	e04f      	b.n	8006ade <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <HAL_SPI_Transmit+0x1bc>
 8006a46:	2316      	movs	r3, #22
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d141      	bne.n	8006ad4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006a76:	e02d      	b.n	8006ad4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d113      	bne.n	8006aae <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aac:	e012      	b.n	8006ad4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aae:	f7fc feef 	bl	8003890 <HAL_GetTick>
 8006ab2:	0002      	movs	r2, r0
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d802      	bhi.n	8006ac4 <HAL_SPI_Transmit+0x230>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	d102      	bne.n	8006aca <HAL_SPI_Transmit+0x236>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d104      	bne.n	8006ad4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006aca:	231f      	movs	r3, #31
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	2203      	movs	r2, #3
 8006ad0:	701a      	strb	r2, [r3, #0]
          goto error;
 8006ad2:	e028      	b.n	8006b26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1cc      	bne.n	8006a78 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 fb2f 	bl	8007148 <SPI_EndRxTxTransaction>
 8006aea:	1e03      	subs	r3, r0, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006afc:	2300      	movs	r3, #0
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006b1a:	231f      	movs	r3, #31
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	2201      	movs	r2, #1
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	e000      	b.n	8006b26 <HAL_SPI_Transmit+0x292>
  }

error:
 8006b24:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	225d      	movs	r2, #93	; 0x5d
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	225c      	movs	r2, #92	; 0x5c
 8006b32:	2100      	movs	r1, #0
 8006b34:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b36:	231f      	movs	r3, #31
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	781b      	ldrb	r3, [r3, #0]
}
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b008      	add	sp, #32
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	; 0x28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	001a      	movs	r2, r3
 8006b52:	1cbb      	adds	r3, r7, #2
 8006b54:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b56:	2301      	movs	r3, #1
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b5a:	2323      	movs	r3, #35	; 0x23
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	225c      	movs	r2, #92	; 0x5c
 8006b66:	5c9b      	ldrb	r3, [r3, r2]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x2c>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e1b5      	b.n	8006edc <HAL_SPI_TransmitReceive+0x398>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	225c      	movs	r2, #92	; 0x5c
 8006b74:	2101      	movs	r1, #1
 8006b76:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b78:	f7fc fe8a 	bl	8003890 <HAL_GetTick>
 8006b7c:	0003      	movs	r3, r0
 8006b7e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b80:	201b      	movs	r0, #27
 8006b82:	183b      	adds	r3, r7, r0
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	215d      	movs	r1, #93	; 0x5d
 8006b88:	5c52      	ldrb	r2, [r2, r1]
 8006b8a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006b92:	2312      	movs	r3, #18
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	1cba      	adds	r2, r7, #2
 8006b98:	8812      	ldrh	r2, [r2, #0]
 8006b9a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b9c:	183b      	adds	r3, r7, r0
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d011      	beq.n	8006bc8 <HAL_SPI_TransmitReceive+0x84>
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	2382      	movs	r3, #130	; 0x82
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d107      	bne.n	8006bbe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <HAL_SPI_TransmitReceive+0x7a>
 8006bb6:	183b      	adds	r3, r7, r0
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d004      	beq.n	8006bc8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006bbe:	2323      	movs	r3, #35	; 0x23
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	701a      	strb	r2, [r3, #0]
    goto error;
 8006bc6:	e17e      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d006      	beq.n	8006bdc <HAL_SPI_TransmitReceive+0x98>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_SPI_TransmitReceive+0x98>
 8006bd4:	1cbb      	adds	r3, r7, #2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006bdc:	2323      	movs	r3, #35	; 0x23
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006be4:	e16f      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	225d      	movs	r2, #93	; 0x5d
 8006bea:	5c9b      	ldrb	r3, [r3, r2]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d003      	beq.n	8006bfa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	225d      	movs	r2, #93	; 0x5d
 8006bf6:	2105      	movs	r1, #5
 8006bf8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1cba      	adds	r2, r7, #2
 8006c0a:	2146      	movs	r1, #70	; 0x46
 8006c0c:	8812      	ldrh	r2, [r2, #0]
 8006c0e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	1cba      	adds	r2, r7, #2
 8006c14:	2144      	movs	r1, #68	; 0x44
 8006c16:	8812      	ldrh	r2, [r2, #0]
 8006c18:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	1cba      	adds	r2, r7, #2
 8006c24:	8812      	ldrh	r2, [r2, #0]
 8006c26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	1cba      	adds	r2, r7, #2
 8006c2c:	8812      	ldrh	r2, [r2, #0]
 8006c2e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	23e0      	movs	r3, #224	; 0xe0
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d908      	bls.n	8006c5a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	49a4      	ldr	r1, [pc, #656]	; (8006ee4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006c54:	400a      	ands	r2, r1
 8006c56:	605a      	str	r2, [r3, #4]
 8006c58:	e008      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2180      	movs	r1, #128	; 0x80
 8006c66:	0149      	lsls	r1, r1, #5
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2240      	movs	r2, #64	; 0x40
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d007      	beq.n	8006c8a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2140      	movs	r1, #64	; 0x40
 8006c86:	430a      	orrs	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	23e0      	movs	r3, #224	; 0xe0
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d800      	bhi.n	8006c98 <HAL_SPI_TransmitReceive+0x154>
 8006c96:	e07f      	b.n	8006d98 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <HAL_SPI_TransmitReceive+0x168>
 8006ca0:	2312      	movs	r3, #18
 8006ca2:	18fb      	adds	r3, r7, r3
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d000      	beq.n	8006cac <HAL_SPI_TransmitReceive+0x168>
 8006caa:	e069      	b.n	8006d80 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	881a      	ldrh	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	1c9a      	adds	r2, r3, #2
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd0:	e056      	b.n	8006d80 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d11b      	bne.n	8006d18 <HAL_SPI_TransmitReceive+0x1d4>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d016      	beq.n	8006d18 <HAL_SPI_TransmitReceive+0x1d4>
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d113      	bne.n	8006d18 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d11c      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x21c>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2246      	movs	r2, #70	; 0x46
 8006d2a:	5a9b      	ldrh	r3, [r3, r2]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d016      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	b292      	uxth	r2, r2
 8006d3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	1c9a      	adds	r2, r3, #2
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2246      	movs	r2, #70	; 0x46
 8006d4e:	5a9b      	ldrh	r3, [r3, r2]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b299      	uxth	r1, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2246      	movs	r2, #70	; 0x46
 8006d5a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d60:	f7fc fd96 	bl	8003890 <HAL_GetTick>
 8006d64:	0002      	movs	r2, r0
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d807      	bhi.n	8006d80 <HAL_SPI_TransmitReceive+0x23c>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	3301      	adds	r3, #1
 8006d74:	d004      	beq.n	8006d80 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006d76:	2323      	movs	r3, #35	; 0x23
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	701a      	strb	r2, [r3, #0]
        goto error;
 8006d7e:	e0a2      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1a3      	bne.n	8006cd2 <HAL_SPI_TransmitReceive+0x18e>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2246      	movs	r2, #70	; 0x46
 8006d8e:	5a9b      	ldrh	r3, [r3, r2]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d19d      	bne.n	8006cd2 <HAL_SPI_TransmitReceive+0x18e>
 8006d96:	e085      	b.n	8006ea4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x268>
 8006da0:	2312      	movs	r3, #18
 8006da2:	18fb      	adds	r3, r7, r3
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d000      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x268>
 8006daa:	e070      	b.n	8006e8e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dd2:	e05c      	b.n	8006e8e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d11c      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x2d8>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d017      	beq.n	8006e1c <HAL_SPI_TransmitReceive+0x2d8>
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d114      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	7812      	ldrb	r2, [r2, #0]
 8006dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2201      	movs	r2, #1
 8006e24:	4013      	ands	r3, r2
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d11e      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x324>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2246      	movs	r2, #70	; 0x46
 8006e2e:	5a9b      	ldrh	r3, [r3, r2]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d018      	beq.n	8006e68 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	001a      	movs	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2246      	movs	r2, #70	; 0x46
 8006e56:	5a9b      	ldrh	r3, [r3, r2]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b299      	uxth	r1, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2246      	movs	r2, #70	; 0x46
 8006e62:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e64:	2301      	movs	r3, #1
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e68:	f7fc fd12 	bl	8003890 <HAL_GetTick>
 8006e6c:	0002      	movs	r2, r0
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d802      	bhi.n	8006e7e <HAL_SPI_TransmitReceive+0x33a>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	d102      	bne.n	8006e84 <HAL_SPI_TransmitReceive+0x340>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d104      	bne.n	8006e8e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006e84:	2323      	movs	r3, #35	; 0x23
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	2203      	movs	r2, #3
 8006e8a:	701a      	strb	r2, [r3, #0]
        goto error;
 8006e8c:	e01b      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d19d      	bne.n	8006dd4 <HAL_SPI_TransmitReceive+0x290>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2246      	movs	r2, #70	; 0x46
 8006e9c:	5a9b      	ldrh	r3, [r3, r2]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d197      	bne.n	8006dd4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f000 f94c 	bl	8007148 <SPI_EndRxTxTransaction>
 8006eb0:	1e03      	subs	r3, r0, #0
 8006eb2:	d007      	beq.n	8006ec4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006eb4:	2323      	movs	r3, #35	; 0x23
 8006eb6:	18fb      	adds	r3, r7, r3
 8006eb8:	2201      	movs	r2, #1
 8006eba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60
 8006ec2:	e000      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006ec4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	225d      	movs	r2, #93	; 0x5d
 8006eca:	2101      	movs	r1, #1
 8006ecc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	225c      	movs	r2, #92	; 0x5c
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006ed6:	2323      	movs	r3, #35	; 0x23
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	781b      	ldrb	r3, [r3, #0]
}
 8006edc:	0018      	movs	r0, r3
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	b00a      	add	sp, #40	; 0x28
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	ffffefff 	.word	0xffffefff

08006ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	1dfb      	adds	r3, r7, #7
 8006ef6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ef8:	f7fc fcca 	bl	8003890 <HAL_GetTick>
 8006efc:	0002      	movs	r2, r0
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	18d3      	adds	r3, r2, r3
 8006f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f08:	f7fc fcc2 	bl	8003890 <HAL_GetTick>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f10:	4b3a      	ldr	r3, [pc, #232]	; (8006ffc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	015b      	lsls	r3, r3, #5
 8006f16:	0d1b      	lsrs	r3, r3, #20
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	4353      	muls	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f1e:	e058      	b.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	d055      	beq.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f26:	f7fc fcb3 	bl	8003890 <HAL_GetTick>
 8006f2a:	0002      	movs	r2, r0
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d902      	bls.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d142      	bne.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	21e0      	movs	r1, #224	; 0xe0
 8006f48:	438a      	bics	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	2382      	movs	r3, #130	; 0x82
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d113      	bne.n	8006f80 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d005      	beq.n	8006f70 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d107      	bne.n	8006f80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2140      	movs	r1, #64	; 0x40
 8006f7c:	438a      	bics	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	019b      	lsls	r3, r3, #6
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d110      	bne.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	491a      	ldr	r1, [pc, #104]	; (8007000 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006f98:	400a      	ands	r2, r1
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2180      	movs	r1, #128	; 0x80
 8006fa8:	0189      	lsls	r1, r1, #6
 8006faa:	430a      	orrs	r2, r1
 8006fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	225d      	movs	r2, #93	; 0x5d
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	225c      	movs	r2, #92	; 0x5c
 8006fba:	2100      	movs	r1, #0
 8006fbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e017      	b.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	425a      	negs	r2, r3
 8006fe2:	4153      	adcs	r3, r2
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	001a      	movs	r2, r3
 8006fe8:	1dfb      	adds	r3, r7, #7
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d197      	bne.n	8006f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b008      	add	sp, #32
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	20000000 	.word	0x20000000
 8007000:	ffffdfff 	.word	0xffffdfff

08007004 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007012:	2317      	movs	r3, #23
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	2200      	movs	r2, #0
 8007018:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800701a:	f7fc fc39 	bl	8003890 <HAL_GetTick>
 800701e:	0002      	movs	r2, r0
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	18d3      	adds	r3, r2, r3
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800702a:	f7fc fc31 	bl	8003890 <HAL_GetTick>
 800702e:	0003      	movs	r3, r0
 8007030:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800703a:	4b41      	ldr	r3, [pc, #260]	; (8007140 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	0013      	movs	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	189b      	adds	r3, r3, r2
 8007044:	00da      	lsls	r2, r3, #3
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	0d1b      	lsrs	r3, r3, #20
 800704a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704c:	4353      	muls	r3, r2
 800704e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007050:	e068      	b.n	8007124 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	23c0      	movs	r3, #192	; 0xc0
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	429a      	cmp	r2, r3
 800705a:	d10a      	bne.n	8007072 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d107      	bne.n	8007072 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	2117      	movs	r1, #23
 800706a:	187b      	adds	r3, r7, r1
 800706c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800706e:	187b      	adds	r3, r7, r1
 8007070:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	d055      	beq.n	8007124 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007078:	f7fc fc0a 	bl	8003890 <HAL_GetTick>
 800707c:	0002      	movs	r2, r0
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007084:	429a      	cmp	r2, r3
 8007086:	d902      	bls.n	800708e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	d142      	bne.n	8007114 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	21e0      	movs	r1, #224	; 0xe0
 800709a:	438a      	bics	r2, r1
 800709c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	2382      	movs	r3, #130	; 0x82
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d113      	bne.n	80070d2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	2380      	movs	r3, #128	; 0x80
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d005      	beq.n	80070c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	2380      	movs	r3, #128	; 0x80
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	429a      	cmp	r2, r3
 80070c0:	d107      	bne.n	80070d2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2140      	movs	r1, #64	; 0x40
 80070ce:	438a      	bics	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	019b      	lsls	r3, r3, #6
 80070da:	429a      	cmp	r2, r3
 80070dc:	d110      	bne.n	8007100 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4916      	ldr	r1, [pc, #88]	; (8007144 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2180      	movs	r1, #128	; 0x80
 80070fa:	0189      	lsls	r1, r1, #6
 80070fc:	430a      	orrs	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	225d      	movs	r2, #93	; 0x5d
 8007104:	2101      	movs	r1, #1
 8007106:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	225c      	movs	r2, #92	; 0x5c
 800710c:	2100      	movs	r1, #0
 800710e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e010      	b.n	8007136 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	3b01      	subs	r3, #1
 8007122:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4013      	ands	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d18e      	bne.n	8007052 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	0018      	movs	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	b00a      	add	sp, #40	; 0x28
 800713c:	bd80      	pop	{r7, pc}
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	20000000 	.word	0x20000000
 8007144:	ffffdfff 	.word	0xffffdfff

08007148 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	23c0      	movs	r3, #192	; 0xc0
 8007158:	0159      	lsls	r1, r3, #5
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	0013      	movs	r3, r2
 8007162:	2200      	movs	r2, #0
 8007164:	f7ff ff4e 	bl	8007004 <SPI_WaitFifoStateUntilTimeout>
 8007168:	1e03      	subs	r3, r0, #0
 800716a:	d007      	beq.n	800717c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007170:	2220      	movs	r2, #32
 8007172:	431a      	orrs	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e027      	b.n	80071cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	0013      	movs	r3, r2
 8007186:	2200      	movs	r2, #0
 8007188:	2180      	movs	r1, #128	; 0x80
 800718a:	f7ff fead 	bl	8006ee8 <SPI_WaitFlagStateUntilTimeout>
 800718e:	1e03      	subs	r3, r0, #0
 8007190:	d007      	beq.n	80071a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007196:	2220      	movs	r2, #32
 8007198:	431a      	orrs	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e014      	b.n	80071cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	23c0      	movs	r3, #192	; 0xc0
 80071a6:	00d9      	lsls	r1, r3, #3
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	0013      	movs	r3, r2
 80071b0:	2200      	movs	r2, #0
 80071b2:	f7ff ff27 	bl	8007004 <SPI_WaitFifoStateUntilTimeout>
 80071b6:	1e03      	subs	r3, r0, #0
 80071b8:	d007      	beq.n	80071ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071be:	2220      	movs	r2, #32
 80071c0:	431a      	orrs	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e000      	b.n	80071cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	0018      	movs	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b004      	add	sp, #16
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e042      	b.n	800726c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	223d      	movs	r2, #61	; 0x3d
 80071ea:	5c9b      	ldrb	r3, [r3, r2]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d107      	bne.n	8007202 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	223c      	movs	r2, #60	; 0x3c
 80071f6:	2100      	movs	r1, #0
 80071f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f7fc f8a9 	bl	8003354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	223d      	movs	r2, #61	; 0x3d
 8007206:	2102      	movs	r1, #2
 8007208:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3304      	adds	r3, #4
 8007212:	0019      	movs	r1, r3
 8007214:	0010      	movs	r0, r2
 8007216:	f000 fc5f 	bl	8007ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2246      	movs	r2, #70	; 0x46
 800721e:	2101      	movs	r1, #1
 8007220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	223e      	movs	r2, #62	; 0x3e
 8007226:	2101      	movs	r1, #1
 8007228:	5499      	strb	r1, [r3, r2]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	223f      	movs	r2, #63	; 0x3f
 800722e:	2101      	movs	r1, #1
 8007230:	5499      	strb	r1, [r3, r2]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2240      	movs	r2, #64	; 0x40
 8007236:	2101      	movs	r1, #1
 8007238:	5499      	strb	r1, [r3, r2]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2241      	movs	r2, #65	; 0x41
 800723e:	2101      	movs	r1, #1
 8007240:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2242      	movs	r2, #66	; 0x42
 8007246:	2101      	movs	r1, #1
 8007248:	5499      	strb	r1, [r3, r2]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2243      	movs	r2, #67	; 0x43
 800724e:	2101      	movs	r1, #1
 8007250:	5499      	strb	r1, [r3, r2]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2244      	movs	r2, #68	; 0x44
 8007256:	2101      	movs	r1, #1
 8007258:	5499      	strb	r1, [r3, r2]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2245      	movs	r2, #69	; 0x45
 800725e:	2101      	movs	r1, #1
 8007260:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	223d      	movs	r2, #61	; 0x3d
 8007266:	2101      	movs	r1, #1
 8007268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	0018      	movs	r0, r3
 800726e:	46bd      	mov	sp, r7
 8007270:	b002      	add	sp, #8
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	223d      	movs	r2, #61	; 0x3d
 8007280:	5c9b      	ldrb	r3, [r3, r2]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d001      	beq.n	800728c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e03b      	b.n	8007304 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	223d      	movs	r2, #61	; 0x3d
 8007290:	2102      	movs	r1, #2
 8007292:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2101      	movs	r1, #1
 80072a0:	430a      	orrs	r2, r1
 80072a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <HAL_TIM_Base_Start_IT+0x98>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00f      	beq.n	80072ce <HAL_TIM_Base_Start_IT+0x5a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	2380      	movs	r3, #128	; 0x80
 80072b4:	05db      	lsls	r3, r3, #23
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d009      	beq.n	80072ce <HAL_TIM_Base_Start_IT+0x5a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a14      	ldr	r2, [pc, #80]	; (8007310 <HAL_TIM_Base_Start_IT+0x9c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_TIM_Base_Start_IT+0x5a>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a12      	ldr	r2, [pc, #72]	; (8007314 <HAL_TIM_Base_Start_IT+0xa0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d111      	bne.n	80072f2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	2207      	movs	r2, #7
 80072d6:	4013      	ands	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b06      	cmp	r3, #6
 80072de:	d010      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2101      	movs	r1, #1
 80072ec:	430a      	orrs	r2, r1
 80072ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f0:	e007      	b.n	8007302 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2101      	movs	r1, #1
 80072fe:	430a      	orrs	r2, r1
 8007300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	0018      	movs	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	b004      	add	sp, #16
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40012c00 	.word	0x40012c00
 8007310:	40000400 	.word	0x40000400
 8007314:	40014000 	.word	0x40014000

08007318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e042      	b.n	80073b0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	223d      	movs	r2, #61	; 0x3d
 800732e:	5c9b      	ldrb	r3, [r3, r2]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d107      	bne.n	8007346 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	223c      	movs	r2, #60	; 0x3c
 800733a:	2100      	movs	r1, #0
 800733c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	0018      	movs	r0, r3
 8007342:	f000 f839 	bl	80073b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	223d      	movs	r2, #61	; 0x3d
 800734a:	2102      	movs	r1, #2
 800734c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3304      	adds	r3, #4
 8007356:	0019      	movs	r1, r3
 8007358:	0010      	movs	r0, r2
 800735a:	f000 fbbd 	bl	8007ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2246      	movs	r2, #70	; 0x46
 8007362:	2101      	movs	r1, #1
 8007364:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	223e      	movs	r2, #62	; 0x3e
 800736a:	2101      	movs	r1, #1
 800736c:	5499      	strb	r1, [r3, r2]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	223f      	movs	r2, #63	; 0x3f
 8007372:	2101      	movs	r1, #1
 8007374:	5499      	strb	r1, [r3, r2]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2240      	movs	r2, #64	; 0x40
 800737a:	2101      	movs	r1, #1
 800737c:	5499      	strb	r1, [r3, r2]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2241      	movs	r2, #65	; 0x41
 8007382:	2101      	movs	r1, #1
 8007384:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2242      	movs	r2, #66	; 0x42
 800738a:	2101      	movs	r1, #1
 800738c:	5499      	strb	r1, [r3, r2]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2243      	movs	r2, #67	; 0x43
 8007392:	2101      	movs	r1, #1
 8007394:	5499      	strb	r1, [r3, r2]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2244      	movs	r2, #68	; 0x44
 800739a:	2101      	movs	r1, #1
 800739c:	5499      	strb	r1, [r3, r2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2245      	movs	r2, #69	; 0x45
 80073a2:	2101      	movs	r1, #1
 80073a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	223d      	movs	r2, #61	; 0x3d
 80073aa:	2101      	movs	r1, #1
 80073ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b002      	add	sp, #8
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b002      	add	sp, #8
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <HAL_TIM_PWM_Start+0x22>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	223e      	movs	r2, #62	; 0x3e
 80073dc:	5c9b      	ldrb	r3, [r3, r2]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	1e5a      	subs	r2, r3, #1
 80073e4:	4193      	sbcs	r3, r2
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	e01f      	b.n	800742a <HAL_TIM_PWM_Start+0x62>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d108      	bne.n	8007402 <HAL_TIM_PWM_Start+0x3a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	223f      	movs	r2, #63	; 0x3f
 80073f4:	5c9b      	ldrb	r3, [r3, r2]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	1e5a      	subs	r2, r3, #1
 80073fc:	4193      	sbcs	r3, r2
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	e013      	b.n	800742a <HAL_TIM_PWM_Start+0x62>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b08      	cmp	r3, #8
 8007406:	d108      	bne.n	800741a <HAL_TIM_PWM_Start+0x52>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2240      	movs	r2, #64	; 0x40
 800740c:	5c9b      	ldrb	r3, [r3, r2]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	1e5a      	subs	r2, r3, #1
 8007414:	4193      	sbcs	r3, r2
 8007416:	b2db      	uxtb	r3, r3
 8007418:	e007      	b.n	800742a <HAL_TIM_PWM_Start+0x62>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2241      	movs	r2, #65	; 0x41
 800741e:	5c9b      	ldrb	r3, [r3, r2]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	1e5a      	subs	r2, r3, #1
 8007426:	4193      	sbcs	r3, r2
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e074      	b.n	800751c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <HAL_TIM_PWM_Start+0x7a>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	223e      	movs	r2, #62	; 0x3e
 800743c:	2102      	movs	r1, #2
 800743e:	5499      	strb	r1, [r3, r2]
 8007440:	e013      	b.n	800746a <HAL_TIM_PWM_Start+0xa2>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b04      	cmp	r3, #4
 8007446:	d104      	bne.n	8007452 <HAL_TIM_PWM_Start+0x8a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	223f      	movs	r2, #63	; 0x3f
 800744c:	2102      	movs	r1, #2
 800744e:	5499      	strb	r1, [r3, r2]
 8007450:	e00b      	b.n	800746a <HAL_TIM_PWM_Start+0xa2>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d104      	bne.n	8007462 <HAL_TIM_PWM_Start+0x9a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2240      	movs	r2, #64	; 0x40
 800745c:	2102      	movs	r1, #2
 800745e:	5499      	strb	r1, [r3, r2]
 8007460:	e003      	b.n	800746a <HAL_TIM_PWM_Start+0xa2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2241      	movs	r2, #65	; 0x41
 8007466:	2102      	movs	r1, #2
 8007468:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	2201      	movs	r2, #1
 8007472:	0018      	movs	r0, r3
 8007474:	f000 fe46 	bl	8008104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a29      	ldr	r2, [pc, #164]	; (8007524 <HAL_TIM_PWM_Start+0x15c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <HAL_TIM_PWM_Start+0xd8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a28      	ldr	r2, [pc, #160]	; (8007528 <HAL_TIM_PWM_Start+0x160>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d009      	beq.n	80074a0 <HAL_TIM_PWM_Start+0xd8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a26      	ldr	r2, [pc, #152]	; (800752c <HAL_TIM_PWM_Start+0x164>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_TIM_PWM_Start+0xd8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a25      	ldr	r2, [pc, #148]	; (8007530 <HAL_TIM_PWM_Start+0x168>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d101      	bne.n	80074a4 <HAL_TIM_PWM_Start+0xdc>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e000      	b.n	80074a6 <HAL_TIM_PWM_Start+0xde>
 80074a4:	2300      	movs	r3, #0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2180      	movs	r1, #128	; 0x80
 80074b6:	0209      	lsls	r1, r1, #8
 80074b8:	430a      	orrs	r2, r1
 80074ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a18      	ldr	r2, [pc, #96]	; (8007524 <HAL_TIM_PWM_Start+0x15c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00f      	beq.n	80074e6 <HAL_TIM_PWM_Start+0x11e>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	2380      	movs	r3, #128	; 0x80
 80074cc:	05db      	lsls	r3, r3, #23
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d009      	beq.n	80074e6 <HAL_TIM_PWM_Start+0x11e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a17      	ldr	r2, [pc, #92]	; (8007534 <HAL_TIM_PWM_Start+0x16c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d004      	beq.n	80074e6 <HAL_TIM_PWM_Start+0x11e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a11      	ldr	r2, [pc, #68]	; (8007528 <HAL_TIM_PWM_Start+0x160>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d111      	bne.n	800750a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2207      	movs	r2, #7
 80074ee:	4013      	ands	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b06      	cmp	r3, #6
 80074f6:	d010      	beq.n	800751a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2101      	movs	r1, #1
 8007504:	430a      	orrs	r2, r1
 8007506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007508:	e007      	b.n	800751a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2101      	movs	r1, #1
 8007516:	430a      	orrs	r2, r1
 8007518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	0018      	movs	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	b004      	add	sp, #16
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40012c00 	.word	0x40012c00
 8007528:	40014000 	.word	0x40014000
 800752c:	40014400 	.word	0x40014400
 8007530:	40014800 	.word	0x40014800
 8007534:	40000400 	.word	0x40000400

08007538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2202      	movs	r2, #2
 8007548:	4013      	ands	r3, r2
 800754a:	2b02      	cmp	r3, #2
 800754c:	d124      	bne.n	8007598 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2202      	movs	r2, #2
 8007556:	4013      	ands	r3, r2
 8007558:	2b02      	cmp	r3, #2
 800755a:	d11d      	bne.n	8007598 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2203      	movs	r2, #3
 8007562:	4252      	negs	r2, r2
 8007564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2203      	movs	r2, #3
 8007574:	4013      	ands	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	0018      	movs	r0, r3
 800757c:	f000 fa94 	bl	8007aa8 <HAL_TIM_IC_CaptureCallback>
 8007580:	e007      	b.n	8007592 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	0018      	movs	r0, r3
 8007586:	f000 fa87 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	0018      	movs	r0, r3
 800758e:	f000 fa93 	bl	8007ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2204      	movs	r2, #4
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d125      	bne.n	80075f2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	2204      	movs	r2, #4
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d11e      	bne.n	80075f2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2205      	movs	r2, #5
 80075ba:	4252      	negs	r2, r2
 80075bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	23c0      	movs	r3, #192	; 0xc0
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4013      	ands	r3, r2
 80075d0:	d004      	beq.n	80075dc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 fa67 	bl	8007aa8 <HAL_TIM_IC_CaptureCallback>
 80075da:	e007      	b.n	80075ec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	0018      	movs	r0, r3
 80075e0:	f000 fa5a 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	0018      	movs	r0, r3
 80075e8:	f000 fa66 	bl	8007ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2208      	movs	r2, #8
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d124      	bne.n	800764a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2208      	movs	r2, #8
 8007608:	4013      	ands	r3, r2
 800760a:	2b08      	cmp	r3, #8
 800760c:	d11d      	bne.n	800764a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2209      	movs	r2, #9
 8007614:	4252      	negs	r2, r2
 8007616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2204      	movs	r2, #4
 800761c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	2203      	movs	r2, #3
 8007626:	4013      	ands	r3, r2
 8007628:	d004      	beq.n	8007634 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	0018      	movs	r0, r3
 800762e:	f000 fa3b 	bl	8007aa8 <HAL_TIM_IC_CaptureCallback>
 8007632:	e007      	b.n	8007644 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	0018      	movs	r0, r3
 8007638:	f000 fa2e 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	0018      	movs	r0, r3
 8007640:	f000 fa3a 	bl	8007ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2210      	movs	r2, #16
 8007652:	4013      	ands	r3, r2
 8007654:	2b10      	cmp	r3, #16
 8007656:	d125      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	2210      	movs	r2, #16
 8007660:	4013      	ands	r3, r2
 8007662:	2b10      	cmp	r3, #16
 8007664:	d11e      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2211      	movs	r2, #17
 800766c:	4252      	negs	r2, r2
 800766e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2208      	movs	r2, #8
 8007674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	23c0      	movs	r3, #192	; 0xc0
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4013      	ands	r3, r2
 8007682:	d004      	beq.n	800768e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	0018      	movs	r0, r3
 8007688:	f000 fa0e 	bl	8007aa8 <HAL_TIM_IC_CaptureCallback>
 800768c:	e007      	b.n	800769e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	0018      	movs	r0, r3
 8007692:	f000 fa01 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	0018      	movs	r0, r3
 800769a:	f000 fa0d 	bl	8007ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2201      	movs	r2, #1
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d10f      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d108      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2202      	movs	r2, #2
 80076c6:	4252      	negs	r2, r2
 80076c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	0018      	movs	r0, r3
 80076ce:	f004 fc89 	bl	800bfe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	4013      	ands	r3, r2
 80076dc:	2b80      	cmp	r3, #128	; 0x80
 80076de:	d10f      	bne.n	8007700 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2280      	movs	r2, #128	; 0x80
 80076e8:	4013      	ands	r3, r2
 80076ea:	2b80      	cmp	r3, #128	; 0x80
 80076ec:	d108      	bne.n	8007700 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2281      	movs	r2, #129	; 0x81
 80076f4:	4252      	negs	r2, r2
 80076f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	0018      	movs	r0, r3
 80076fc:	f000 fdea 	bl	80082d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	2240      	movs	r2, #64	; 0x40
 8007708:	4013      	ands	r3, r2
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d10f      	bne.n	800772e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2240      	movs	r2, #64	; 0x40
 8007716:	4013      	ands	r3, r2
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d108      	bne.n	800772e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2241      	movs	r2, #65	; 0x41
 8007722:	4252      	negs	r2, r2
 8007724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0018      	movs	r0, r3
 800772a:	f000 f9cd 	bl	8007ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2220      	movs	r2, #32
 8007736:	4013      	ands	r3, r2
 8007738:	2b20      	cmp	r3, #32
 800773a:	d10f      	bne.n	800775c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	4013      	ands	r3, r2
 8007746:	2b20      	cmp	r3, #32
 8007748:	d108      	bne.n	800775c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2221      	movs	r2, #33	; 0x21
 8007750:	4252      	negs	r2, r2
 8007752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	0018      	movs	r0, r3
 8007758:	f000 fdb4 	bl	80082c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800775c:	46c0      	nop			; (mov r8, r8)
 800775e:	46bd      	mov	sp, r7
 8007760:	b002      	add	sp, #8
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007770:	2317      	movs	r3, #23
 8007772:	18fb      	adds	r3, r7, r3
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	223c      	movs	r2, #60	; 0x3c
 800777c:	5c9b      	ldrb	r3, [r3, r2]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007782:	2302      	movs	r3, #2
 8007784:	e0ad      	b.n	80078e2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	223c      	movs	r2, #60	; 0x3c
 800778a:	2101      	movs	r1, #1
 800778c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b0c      	cmp	r3, #12
 8007792:	d100      	bne.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007794:	e076      	b.n	8007884 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b0c      	cmp	r3, #12
 800779a:	d900      	bls.n	800779e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800779c:	e095      	b.n	80078ca <HAL_TIM_PWM_ConfigChannel+0x166>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d04e      	beq.n	8007842 <HAL_TIM_PWM_ConfigChannel+0xde>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d900      	bls.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x48>
 80077aa:	e08e      	b.n	80078ca <HAL_TIM_PWM_ConfigChannel+0x166>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_TIM_PWM_ConfigChannel+0x56>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d021      	beq.n	80077fc <HAL_TIM_PWM_ConfigChannel+0x98>
 80077b8:	e087      	b.n	80078ca <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	0011      	movs	r1, r2
 80077c2:	0018      	movs	r0, r3
 80077c4:	f000 fa08 	bl	8007bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2108      	movs	r1, #8
 80077d4:	430a      	orrs	r2, r1
 80077d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2104      	movs	r1, #4
 80077e4:	438a      	bics	r2, r1
 80077e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6999      	ldr	r1, [r3, #24]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	619a      	str	r2, [r3, #24]
      break;
 80077fa:	e06b      	b.n	80078d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	0011      	movs	r1, r2
 8007804:	0018      	movs	r0, r3
 8007806:	f000 fa6f 	bl	8007ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2180      	movs	r1, #128	; 0x80
 8007816:	0109      	lsls	r1, r1, #4
 8007818:	430a      	orrs	r2, r1
 800781a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4931      	ldr	r1, [pc, #196]	; (80078ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007828:	400a      	ands	r2, r1
 800782a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6999      	ldr	r1, [r3, #24]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	021a      	lsls	r2, r3, #8
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	619a      	str	r2, [r3, #24]
      break;
 8007840:	e048      	b.n	80078d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	0011      	movs	r1, r2
 800784a:	0018      	movs	r0, r3
 800784c:	f000 fad0 	bl	8007df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69da      	ldr	r2, [r3, #28]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2108      	movs	r1, #8
 800785c:	430a      	orrs	r2, r1
 800785e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69da      	ldr	r2, [r3, #28]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2104      	movs	r1, #4
 800786c:	438a      	bics	r2, r1
 800786e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69d9      	ldr	r1, [r3, #28]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	61da      	str	r2, [r3, #28]
      break;
 8007882:	e027      	b.n	80078d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	0011      	movs	r1, r2
 800788c:	0018      	movs	r0, r3
 800788e:	f000 fb35 	bl	8007efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2180      	movs	r1, #128	; 0x80
 800789e:	0109      	lsls	r1, r1, #4
 80078a0:	430a      	orrs	r2, r1
 80078a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69da      	ldr	r2, [r3, #28]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	490f      	ldr	r1, [pc, #60]	; (80078ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 80078b0:	400a      	ands	r2, r1
 80078b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69d9      	ldr	r1, [r3, #28]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	021a      	lsls	r2, r3, #8
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	61da      	str	r2, [r3, #28]
      break;
 80078c8:	e004      	b.n	80078d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80078ca:	2317      	movs	r3, #23
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	2201      	movs	r2, #1
 80078d0:	701a      	strb	r2, [r3, #0]
      break;
 80078d2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	223c      	movs	r2, #60	; 0x3c
 80078d8:	2100      	movs	r1, #0
 80078da:	5499      	strb	r1, [r3, r2]

  return status;
 80078dc:	2317      	movs	r3, #23
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	781b      	ldrb	r3, [r3, #0]
}
 80078e2:	0018      	movs	r0, r3
 80078e4:	46bd      	mov	sp, r7
 80078e6:	b006      	add	sp, #24
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	fffffbff 	.word	0xfffffbff

080078f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078fa:	230f      	movs	r3, #15
 80078fc:	18fb      	adds	r3, r7, r3
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	223c      	movs	r2, #60	; 0x3c
 8007906:	5c9b      	ldrb	r3, [r3, r2]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIM_ConfigClockSource+0x20>
 800790c:	2302      	movs	r3, #2
 800790e:	e0bc      	b.n	8007a8a <HAL_TIM_ConfigClockSource+0x19a>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	223c      	movs	r2, #60	; 0x3c
 8007914:	2101      	movs	r1, #1
 8007916:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	223d      	movs	r2, #61	; 0x3d
 800791c:	2102      	movs	r1, #2
 800791e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2277      	movs	r2, #119	; 0x77
 800792c:	4393      	bics	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4a58      	ldr	r2, [pc, #352]	; (8007a94 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007934:	4013      	ands	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2280      	movs	r2, #128	; 0x80
 8007946:	0192      	lsls	r2, r2, #6
 8007948:	4293      	cmp	r3, r2
 800794a:	d040      	beq.n	80079ce <HAL_TIM_ConfigClockSource+0xde>
 800794c:	2280      	movs	r2, #128	; 0x80
 800794e:	0192      	lsls	r2, r2, #6
 8007950:	4293      	cmp	r3, r2
 8007952:	d900      	bls.n	8007956 <HAL_TIM_ConfigClockSource+0x66>
 8007954:	e088      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
 8007956:	2280      	movs	r2, #128	; 0x80
 8007958:	0152      	lsls	r2, r2, #5
 800795a:	4293      	cmp	r3, r2
 800795c:	d100      	bne.n	8007960 <HAL_TIM_ConfigClockSource+0x70>
 800795e:	e088      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x182>
 8007960:	2280      	movs	r2, #128	; 0x80
 8007962:	0152      	lsls	r2, r2, #5
 8007964:	4293      	cmp	r3, r2
 8007966:	d900      	bls.n	800796a <HAL_TIM_ConfigClockSource+0x7a>
 8007968:	e07e      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
 800796a:	2b70      	cmp	r3, #112	; 0x70
 800796c:	d018      	beq.n	80079a0 <HAL_TIM_ConfigClockSource+0xb0>
 800796e:	d900      	bls.n	8007972 <HAL_TIM_ConfigClockSource+0x82>
 8007970:	e07a      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
 8007972:	2b60      	cmp	r3, #96	; 0x60
 8007974:	d04f      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x126>
 8007976:	d900      	bls.n	800797a <HAL_TIM_ConfigClockSource+0x8a>
 8007978:	e076      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
 800797a:	2b50      	cmp	r3, #80	; 0x50
 800797c:	d03b      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x106>
 800797e:	d900      	bls.n	8007982 <HAL_TIM_ConfigClockSource+0x92>
 8007980:	e072      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d057      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x146>
 8007986:	d900      	bls.n	800798a <HAL_TIM_ConfigClockSource+0x9a>
 8007988:	e06e      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
 800798a:	2b30      	cmp	r3, #48	; 0x30
 800798c:	d063      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x166>
 800798e:	d86b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
 8007990:	2b20      	cmp	r3, #32
 8007992:	d060      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x166>
 8007994:	d868      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d05d      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x166>
 800799a:	2b10      	cmp	r3, #16
 800799c:	d05b      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x166>
 800799e:	e063      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	6899      	ldr	r1, [r3, #8]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f000 fb88 	bl	80080c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2277      	movs	r2, #119	; 0x77
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	609a      	str	r2, [r3, #8]
      break;
 80079cc:	e052      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6899      	ldr	r1, [r3, #8]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f000 fb71 	bl	80080c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2180      	movs	r1, #128	; 0x80
 80079ee:	01c9      	lsls	r1, r1, #7
 80079f0:	430a      	orrs	r2, r1
 80079f2:	609a      	str	r2, [r3, #8]
      break;
 80079f4:	e03e      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	001a      	movs	r2, r3
 8007a04:	f000 fae4 	bl	8007fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2150      	movs	r1, #80	; 0x50
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f000 fb3e 	bl	8008090 <TIM_ITRx_SetConfig>
      break;
 8007a14:	e02e      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	001a      	movs	r2, r3
 8007a24:	f000 fb02 	bl	800802c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2160      	movs	r1, #96	; 0x60
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f000 fb2e 	bl	8008090 <TIM_ITRx_SetConfig>
      break;
 8007a34:	e01e      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	001a      	movs	r2, r3
 8007a44:	f000 fac4 	bl	8007fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f000 fb1e 	bl	8008090 <TIM_ITRx_SetConfig>
      break;
 8007a54:	e00e      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	0019      	movs	r1, r3
 8007a60:	0010      	movs	r0, r2
 8007a62:	f000 fb15 	bl	8008090 <TIM_ITRx_SetConfig>
      break;
 8007a66:	e005      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007a68:	230f      	movs	r3, #15
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
      break;
 8007a70:	e000      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007a72:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	223d      	movs	r2, #61	; 0x3d
 8007a78:	2101      	movs	r1, #1
 8007a7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	223c      	movs	r2, #60	; 0x3c
 8007a80:	2100      	movs	r1, #0
 8007a82:	5499      	strb	r1, [r3, r2]

  return status;
 8007a84:	230f      	movs	r3, #15
 8007a86:	18fb      	adds	r3, r7, r3
 8007a88:	781b      	ldrb	r3, [r3, #0]
}
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b004      	add	sp, #16
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	ffff00ff 	.word	0xffff00ff

08007a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007aa0:	46c0      	nop			; (mov r8, r8)
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b002      	add	sp, #8
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ab0:	46c0      	nop			; (mov r8, r8)
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	b002      	add	sp, #8
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ac0:	46c0      	nop			; (mov r8, r8)
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b002      	add	sp, #8
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ad0:	46c0      	nop			; (mov r8, r8)
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b002      	add	sp, #8
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a34      	ldr	r2, [pc, #208]	; (8007bbc <TIM_Base_SetConfig+0xe4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d008      	beq.n	8007b02 <TIM_Base_SetConfig+0x2a>
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	05db      	lsls	r3, r3, #23
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d003      	beq.n	8007b02 <TIM_Base_SetConfig+0x2a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a30      	ldr	r2, [pc, #192]	; (8007bc0 <TIM_Base_SetConfig+0xe8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d108      	bne.n	8007b14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2270      	movs	r2, #112	; 0x70
 8007b06:	4393      	bics	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a29      	ldr	r2, [pc, #164]	; (8007bbc <TIM_Base_SetConfig+0xe4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d018      	beq.n	8007b4e <TIM_Base_SetConfig+0x76>
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	2380      	movs	r3, #128	; 0x80
 8007b20:	05db      	lsls	r3, r3, #23
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d013      	beq.n	8007b4e <TIM_Base_SetConfig+0x76>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a25      	ldr	r2, [pc, #148]	; (8007bc0 <TIM_Base_SetConfig+0xe8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00f      	beq.n	8007b4e <TIM_Base_SetConfig+0x76>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a24      	ldr	r2, [pc, #144]	; (8007bc4 <TIM_Base_SetConfig+0xec>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00b      	beq.n	8007b4e <TIM_Base_SetConfig+0x76>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a23      	ldr	r2, [pc, #140]	; (8007bc8 <TIM_Base_SetConfig+0xf0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d007      	beq.n	8007b4e <TIM_Base_SetConfig+0x76>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a22      	ldr	r2, [pc, #136]	; (8007bcc <TIM_Base_SetConfig+0xf4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d003      	beq.n	8007b4e <TIM_Base_SetConfig+0x76>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a21      	ldr	r2, [pc, #132]	; (8007bd0 <TIM_Base_SetConfig+0xf8>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d108      	bne.n	8007b60 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4a20      	ldr	r2, [pc, #128]	; (8007bd4 <TIM_Base_SetConfig+0xfc>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2280      	movs	r2, #128	; 0x80
 8007b64:	4393      	bics	r3, r2
 8007b66:	001a      	movs	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <TIM_Base_SetConfig+0xe4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00b      	beq.n	8007ba6 <TIM_Base_SetConfig+0xce>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a0d      	ldr	r2, [pc, #52]	; (8007bc8 <TIM_Base_SetConfig+0xf0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d007      	beq.n	8007ba6 <TIM_Base_SetConfig+0xce>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a0c      	ldr	r2, [pc, #48]	; (8007bcc <TIM_Base_SetConfig+0xf4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d003      	beq.n	8007ba6 <TIM_Base_SetConfig+0xce>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a0b      	ldr	r2, [pc, #44]	; (8007bd0 <TIM_Base_SetConfig+0xf8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d103      	bne.n	8007bae <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	615a      	str	r2, [r3, #20]
}
 8007bb4:	46c0      	nop			; (mov r8, r8)
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b004      	add	sp, #16
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	40012c00 	.word	0x40012c00
 8007bc0:	40000400 	.word	0x40000400
 8007bc4:	40002000 	.word	0x40002000
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800
 8007bd4:	fffffcff 	.word	0xfffffcff

08007bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	2201      	movs	r2, #1
 8007be8:	4393      	bics	r3, r2
 8007bea:	001a      	movs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2270      	movs	r2, #112	; 0x70
 8007c06:	4393      	bics	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	4393      	bics	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	4393      	bics	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a27      	ldr	r2, [pc, #156]	; (8007cd0 <TIM_OC1_SetConfig+0xf8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <TIM_OC1_SetConfig+0x76>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <TIM_OC1_SetConfig+0xfc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <TIM_OC1_SetConfig+0x76>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a25      	ldr	r2, [pc, #148]	; (8007cd8 <TIM_OC1_SetConfig+0x100>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_OC1_SetConfig+0x76>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a24      	ldr	r2, [pc, #144]	; (8007cdc <TIM_OC1_SetConfig+0x104>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d10c      	bne.n	8007c68 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2208      	movs	r2, #8
 8007c52:	4393      	bics	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2204      	movs	r2, #4
 8007c64:	4393      	bics	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a19      	ldr	r2, [pc, #100]	; (8007cd0 <TIM_OC1_SetConfig+0xf8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d00b      	beq.n	8007c88 <TIM_OC1_SetConfig+0xb0>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a18      	ldr	r2, [pc, #96]	; (8007cd4 <TIM_OC1_SetConfig+0xfc>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d007      	beq.n	8007c88 <TIM_OC1_SetConfig+0xb0>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <TIM_OC1_SetConfig+0x100>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d003      	beq.n	8007c88 <TIM_OC1_SetConfig+0xb0>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a16      	ldr	r2, [pc, #88]	; (8007cdc <TIM_OC1_SetConfig+0x104>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d111      	bne.n	8007cac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <TIM_OC1_SetConfig+0x108>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	4a14      	ldr	r2, [pc, #80]	; (8007ce4 <TIM_OC1_SetConfig+0x10c>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	b006      	add	sp, #24
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40014000 	.word	0x40014000
 8007cd8:	40014400 	.word	0x40014400
 8007cdc:	40014800 	.word	0x40014800
 8007ce0:	fffffeff 	.word	0xfffffeff
 8007ce4:	fffffdff 	.word	0xfffffdff

08007ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	2210      	movs	r2, #16
 8007cf8:	4393      	bics	r3, r2
 8007cfa:	001a      	movs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4a2e      	ldr	r2, [pc, #184]	; (8007dd0 <TIM_OC2_SetConfig+0xe8>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a2d      	ldr	r2, [pc, #180]	; (8007dd4 <TIM_OC2_SetConfig+0xec>)
 8007d1e:	4013      	ands	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2220      	movs	r2, #32
 8007d32:	4393      	bics	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a24      	ldr	r2, [pc, #144]	; (8007dd8 <TIM_OC2_SetConfig+0xf0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d10d      	bne.n	8007d66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2280      	movs	r2, #128	; 0x80
 8007d4e:	4393      	bics	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2240      	movs	r2, #64	; 0x40
 8007d62:	4393      	bics	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a1b      	ldr	r2, [pc, #108]	; (8007dd8 <TIM_OC2_SetConfig+0xf0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00b      	beq.n	8007d86 <TIM_OC2_SetConfig+0x9e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a1a      	ldr	r2, [pc, #104]	; (8007ddc <TIM_OC2_SetConfig+0xf4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d007      	beq.n	8007d86 <TIM_OC2_SetConfig+0x9e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a19      	ldr	r2, [pc, #100]	; (8007de0 <TIM_OC2_SetConfig+0xf8>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d003      	beq.n	8007d86 <TIM_OC2_SetConfig+0x9e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a18      	ldr	r2, [pc, #96]	; (8007de4 <TIM_OC2_SetConfig+0xfc>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d113      	bne.n	8007dae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <TIM_OC2_SetConfig+0x100>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4a16      	ldr	r2, [pc, #88]	; (8007dec <TIM_OC2_SetConfig+0x104>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	621a      	str	r2, [r3, #32]
}
 8007dc8:	46c0      	nop			; (mov r8, r8)
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b006      	add	sp, #24
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	ffff8fff 	.word	0xffff8fff
 8007dd4:	fffffcff 	.word	0xfffffcff
 8007dd8:	40012c00 	.word	0x40012c00
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40014400 	.word	0x40014400
 8007de4:	40014800 	.word	0x40014800
 8007de8:	fffffbff 	.word	0xfffffbff
 8007dec:	fffff7ff 	.word	0xfffff7ff

08007df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	4a35      	ldr	r2, [pc, #212]	; (8007ed4 <TIM_OC3_SetConfig+0xe4>)
 8007e00:	401a      	ands	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2270      	movs	r2, #112	; 0x70
 8007e1c:	4393      	bics	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2203      	movs	r2, #3
 8007e24:	4393      	bics	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	4a28      	ldr	r2, [pc, #160]	; (8007ed8 <TIM_OC3_SetConfig+0xe8>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a24      	ldr	r2, [pc, #144]	; (8007edc <TIM_OC3_SetConfig+0xec>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d10d      	bne.n	8007e6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	4a23      	ldr	r2, [pc, #140]	; (8007ee0 <TIM_OC3_SetConfig+0xf0>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	021b      	lsls	r3, r3, #8
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	4a1f      	ldr	r2, [pc, #124]	; (8007ee4 <TIM_OC3_SetConfig+0xf4>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a1b      	ldr	r2, [pc, #108]	; (8007edc <TIM_OC3_SetConfig+0xec>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00b      	beq.n	8007e8a <TIM_OC3_SetConfig+0x9a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <TIM_OC3_SetConfig+0xf8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <TIM_OC3_SetConfig+0x9a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <TIM_OC3_SetConfig+0xfc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC3_SetConfig+0x9a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a1a      	ldr	r2, [pc, #104]	; (8007ef0 <TIM_OC3_SetConfig+0x100>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d113      	bne.n	8007eb2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <TIM_OC3_SetConfig+0x104>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4a18      	ldr	r2, [pc, #96]	; (8007ef8 <TIM_OC3_SetConfig+0x108>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	621a      	str	r2, [r3, #32]
}
 8007ecc:	46c0      	nop			; (mov r8, r8)
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	b006      	add	sp, #24
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	fffffeff 	.word	0xfffffeff
 8007ed8:	fffffdff 	.word	0xfffffdff
 8007edc:	40012c00 	.word	0x40012c00
 8007ee0:	fffff7ff 	.word	0xfffff7ff
 8007ee4:	fffffbff 	.word	0xfffffbff
 8007ee8:	40014000 	.word	0x40014000
 8007eec:	40014400 	.word	0x40014400
 8007ef0:	40014800 	.word	0x40014800
 8007ef4:	ffffefff 	.word	0xffffefff
 8007ef8:	ffffdfff 	.word	0xffffdfff

08007efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	4a28      	ldr	r2, [pc, #160]	; (8007fac <TIM_OC4_SetConfig+0xb0>)
 8007f0c:	401a      	ands	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4a22      	ldr	r2, [pc, #136]	; (8007fb0 <TIM_OC4_SetConfig+0xb4>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a21      	ldr	r2, [pc, #132]	; (8007fb4 <TIM_OC4_SetConfig+0xb8>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	4a1d      	ldr	r2, [pc, #116]	; (8007fb8 <TIM_OC4_SetConfig+0xbc>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	031b      	lsls	r3, r3, #12
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a19      	ldr	r2, [pc, #100]	; (8007fbc <TIM_OC4_SetConfig+0xc0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00b      	beq.n	8007f74 <TIM_OC4_SetConfig+0x78>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a18      	ldr	r2, [pc, #96]	; (8007fc0 <TIM_OC4_SetConfig+0xc4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d007      	beq.n	8007f74 <TIM_OC4_SetConfig+0x78>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a17      	ldr	r2, [pc, #92]	; (8007fc4 <TIM_OC4_SetConfig+0xc8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <TIM_OC4_SetConfig+0x78>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a16      	ldr	r2, [pc, #88]	; (8007fc8 <TIM_OC4_SetConfig+0xcc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d109      	bne.n	8007f88 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <TIM_OC4_SetConfig+0xd0>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	019b      	lsls	r3, r3, #6
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	b006      	add	sp, #24
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	ffffefff 	.word	0xffffefff
 8007fb0:	ffff8fff 	.word	0xffff8fff
 8007fb4:	fffffcff 	.word	0xfffffcff
 8007fb8:	ffffdfff 	.word	0xffffdfff
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40014400 	.word	0x40014400
 8007fc8:	40014800 	.word	0x40014800
 8007fcc:	ffffbfff 	.word	0xffffbfff

08007fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4393      	bics	r3, r2
 8007fea:	001a      	movs	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	22f0      	movs	r2, #240	; 0xf0
 8007ffa:	4393      	bics	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	220a      	movs	r2, #10
 800800c:	4393      	bics	r3, r2
 800800e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	621a      	str	r2, [r3, #32]
}
 8008024:	46c0      	nop			; (mov r8, r8)
 8008026:	46bd      	mov	sp, r7
 8008028:	b006      	add	sp, #24
 800802a:	bd80      	pop	{r7, pc}

0800802c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	2210      	movs	r2, #16
 800803e:	4393      	bics	r3, r2
 8008040:	001a      	movs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	4a0d      	ldr	r2, [pc, #52]	; (800808c <TIM_TI2_ConfigInputStage+0x60>)
 8008056:	4013      	ands	r3, r2
 8008058:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	031b      	lsls	r3, r3, #12
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	22a0      	movs	r2, #160	; 0xa0
 8008068:	4393      	bics	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	621a      	str	r2, [r3, #32]
}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	46bd      	mov	sp, r7
 8008086:	b006      	add	sp, #24
 8008088:	bd80      	pop	{r7, pc}
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	ffff0fff 	.word	0xffff0fff

08008090 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2270      	movs	r2, #112	; 0x70
 80080a4:	4393      	bics	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	2207      	movs	r2, #7
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	609a      	str	r2, [r3, #8]
}
 80080ba:	46c0      	nop			; (mov r8, r8)
 80080bc:	46bd      	mov	sp, r7
 80080be:	b004      	add	sp, #16
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	4a09      	ldr	r2, [pc, #36]	; (8008100 <TIM_ETR_SetConfig+0x3c>)
 80080dc:	4013      	ands	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	021a      	lsls	r2, r3, #8
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	609a      	str	r2, [r3, #8]
}
 80080f8:	46c0      	nop			; (mov r8, r8)
 80080fa:	46bd      	mov	sp, r7
 80080fc:	b006      	add	sp, #24
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	ffff00ff 	.word	0xffff00ff

08008104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	221f      	movs	r2, #31
 8008114:	4013      	ands	r3, r2
 8008116:	2201      	movs	r2, #1
 8008118:	409a      	lsls	r2, r3
 800811a:	0013      	movs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	43d2      	mvns	r2, r2
 8008126:	401a      	ands	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	211f      	movs	r1, #31
 8008134:	400b      	ands	r3, r1
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	4099      	lsls	r1, r3
 800813a:	000b      	movs	r3, r1
 800813c:	431a      	orrs	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	46bd      	mov	sp, r7
 8008146:	b006      	add	sp, #24
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	223c      	movs	r2, #60	; 0x3c
 800815a:	5c9b      	ldrb	r3, [r3, r2]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d101      	bne.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008160:	2302      	movs	r3, #2
 8008162:	e047      	b.n	80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	223c      	movs	r2, #60	; 0x3c
 8008168:	2101      	movs	r1, #1
 800816a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	223d      	movs	r2, #61	; 0x3d
 8008170:	2102      	movs	r1, #2
 8008172:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2270      	movs	r2, #112	; 0x70
 8008188:	4393      	bics	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a16      	ldr	r2, [pc, #88]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00f      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	2380      	movs	r3, #128	; 0x80
 80081ae:	05db      	lsls	r3, r3, #23
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d009      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a11      	ldr	r2, [pc, #68]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d004      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a10      	ldr	r2, [pc, #64]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d10c      	bne.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2280      	movs	r2, #128	; 0x80
 80081cc:	4393      	bics	r3, r2
 80081ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	223d      	movs	r2, #61	; 0x3d
 80081e6:	2101      	movs	r1, #1
 80081e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	223c      	movs	r2, #60	; 0x3c
 80081ee:	2100      	movs	r1, #0
 80081f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	0018      	movs	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b004      	add	sp, #16
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40000400 	.word	0x40000400
 8008204:	40014000 	.word	0x40014000

08008208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	223c      	movs	r2, #60	; 0x3c
 800821a:	5c9b      	ldrb	r3, [r3, r2]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008220:	2302      	movs	r3, #2
 8008222:	e03e      	b.n	80082a2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	223c      	movs	r2, #60	; 0x3c
 8008228:	2101      	movs	r1, #1
 800822a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	22ff      	movs	r2, #255	; 0xff
 8008230:	4393      	bics	r3, r2
 8008232:	001a      	movs	r2, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	4313      	orrs	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4a1b      	ldr	r2, [pc, #108]	; (80082ac <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8008240:	401a      	ands	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4a18      	ldr	r2, [pc, #96]	; (80082b0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800824e:	401a      	ands	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4a16      	ldr	r2, [pc, #88]	; (80082b4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800825c:	401a      	ands	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4313      	orrs	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4a13      	ldr	r2, [pc, #76]	; (80082b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800826a:	401a      	ands	r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4a11      	ldr	r2, [pc, #68]	; (80082bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8008278:	401a      	ands	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4a0e      	ldr	r2, [pc, #56]	; (80082c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8008286:	401a      	ands	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	223c      	movs	r2, #60	; 0x3c
 800829c:	2100      	movs	r1, #0
 800829e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	0018      	movs	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	b004      	add	sp, #16
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	fffffcff 	.word	0xfffffcff
 80082b0:	fffffbff 	.word	0xfffffbff
 80082b4:	fffff7ff 	.word	0xfffff7ff
 80082b8:	ffffefff 	.word	0xffffefff
 80082bc:	ffffdfff 	.word	0xffffdfff
 80082c0:	ffffbfff 	.word	0xffffbfff

080082c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082cc:	46c0      	nop			; (mov r8, r8)
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b002      	add	sp, #8
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082dc:	46c0      	nop			; (mov r8, r8)
 80082de:	46bd      	mov	sp, r7
 80082e0:	b002      	add	sp, #8
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e044      	b.n	8008380 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d107      	bne.n	800830e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2274      	movs	r2, #116	; 0x74
 8008302:	2100      	movs	r1, #0
 8008304:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	0018      	movs	r0, r3
 800830a:	f7fb f89d 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2224      	movs	r2, #36	; 0x24
 8008312:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2101      	movs	r1, #1
 8008320:	438a      	bics	r2, r1
 8008322:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	0018      	movs	r0, r3
 8008328:	f000 fbfe 	bl	8008b28 <UART_SetConfig>
 800832c:	0003      	movs	r3, r0
 800832e:	2b01      	cmp	r3, #1
 8008330:	d101      	bne.n	8008336 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e024      	b.n	8008380 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	0018      	movs	r0, r3
 8008342:	f000 fdd9 	bl	8008ef8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	490d      	ldr	r1, [pc, #52]	; (8008388 <HAL_UART_Init+0xa4>)
 8008352:	400a      	ands	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	212a      	movs	r1, #42	; 0x2a
 8008362:	438a      	bics	r2, r1
 8008364:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2101      	movs	r1, #1
 8008372:	430a      	orrs	r2, r1
 8008374:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	0018      	movs	r0, r3
 800837a:	f000 fe71 	bl	8009060 <UART_CheckIdleState>
 800837e:	0003      	movs	r3, r0
}
 8008380:	0018      	movs	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	b002      	add	sp, #8
 8008386:	bd80      	pop	{r7, pc}
 8008388:	ffffb7ff 	.word	0xffffb7ff

0800838c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	1dbb      	adds	r3, r7, #6
 8008398:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d000      	beq.n	80083a4 <HAL_UART_Transmit_IT+0x18>
 80083a2:	e06a      	b.n	800847a <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_UART_Transmit_IT+0x26>
 80083aa:	1dbb      	adds	r3, r7, #6
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e062      	b.n	800847c <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	2380      	movs	r3, #128	; 0x80
 80083bc:	015b      	lsls	r3, r3, #5
 80083be:	429a      	cmp	r2, r3
 80083c0:	d109      	bne.n	80083d6 <HAL_UART_Transmit_IT+0x4a>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2201      	movs	r2, #1
 80083ce:	4013      	ands	r3, r2
 80083d0:	d001      	beq.n	80083d6 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e052      	b.n	800847c <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2274      	movs	r2, #116	; 0x74
 80083da:	5c9b      	ldrb	r3, [r3, r2]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_UART_Transmit_IT+0x58>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e04b      	b.n	800847c <HAL_UART_Transmit_IT+0xf0>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2274      	movs	r2, #116	; 0x74
 80083e8:	2101      	movs	r1, #1
 80083ea:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	1dba      	adds	r2, r7, #6
 80083f6:	2150      	movs	r1, #80	; 0x50
 80083f8:	8812      	ldrh	r2, [r2, #0]
 80083fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	1dba      	adds	r2, r7, #6
 8008400:	2152      	movs	r1, #82	; 0x52
 8008402:	8812      	ldrh	r2, [r2, #0]
 8008404:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2280      	movs	r2, #128	; 0x80
 8008410:	2100      	movs	r1, #0
 8008412:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2221      	movs	r2, #33	; 0x21
 8008418:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	015b      	lsls	r3, r3, #5
 8008422:	429a      	cmp	r2, r3
 8008424:	d107      	bne.n	8008436 <HAL_UART_Transmit_IT+0xaa>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d103      	bne.n	8008436 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a14      	ldr	r2, [pc, #80]	; (8008484 <HAL_UART_Transmit_IT+0xf8>)
 8008432:	669a      	str	r2, [r3, #104]	; 0x68
 8008434:	e002      	b.n	800843c <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4a13      	ldr	r2, [pc, #76]	; (8008488 <HAL_UART_Transmit_IT+0xfc>)
 800843a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2274      	movs	r2, #116	; 0x74
 8008440:	2100      	movs	r1, #0
 8008442:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008444:	f3ef 8310 	mrs	r3, PRIMASK
 8008448:	613b      	str	r3, [r7, #16]
  return(result);
 800844a:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800844c:	61fb      	str	r3, [r7, #28]
 800844e:	2301      	movs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f383 8810 	msr	PRIMASK, r3
}
 8008458:	46c0      	nop			; (mov r8, r8)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2180      	movs	r1, #128	; 0x80
 8008466:	430a      	orrs	r2, r1
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	f383 8810 	msr	PRIMASK, r3
}
 8008474:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	e000      	b.n	800847c <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 800847a:	2302      	movs	r3, #2
  }
}
 800847c:	0018      	movs	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	b008      	add	sp, #32
 8008482:	bd80      	pop	{r7, pc}
 8008484:	0800957f 	.word	0x0800957f
 8008488:	080094cb 	.word	0x080094cb

0800848c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	1dbb      	adds	r3, r7, #6
 8008498:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849e:	2b20      	cmp	r3, #32
 80084a0:	d150      	bne.n	8008544 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_UART_Receive_IT+0x24>
 80084a8:	1dbb      	adds	r3, r7, #6
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e048      	b.n	8008546 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	2380      	movs	r3, #128	; 0x80
 80084ba:	015b      	lsls	r3, r3, #5
 80084bc:	429a      	cmp	r2, r3
 80084be:	d109      	bne.n	80084d4 <HAL_UART_Receive_IT+0x48>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d105      	bne.n	80084d4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2201      	movs	r2, #1
 80084cc:	4013      	ands	r3, r2
 80084ce:	d001      	beq.n	80084d4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e038      	b.n	8008546 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2274      	movs	r2, #116	; 0x74
 80084d8:	5c9b      	ldrb	r3, [r3, r2]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d101      	bne.n	80084e2 <HAL_UART_Receive_IT+0x56>
 80084de:	2302      	movs	r3, #2
 80084e0:	e031      	b.n	8008546 <HAL_UART_Receive_IT+0xba>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2274      	movs	r2, #116	; 0x74
 80084e6:	2101      	movs	r1, #1
 80084e8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	2380      	movs	r3, #128	; 0x80
 80084f8:	041b      	lsls	r3, r3, #16
 80084fa:	4013      	ands	r3, r2
 80084fc:	d019      	beq.n	8008532 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008502:	613b      	str	r3, [r7, #16]
  return(result);
 8008504:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008506:	61fb      	str	r3, [r7, #28]
 8008508:	2301      	movs	r3, #1
 800850a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f383 8810 	msr	PRIMASK, r3
}
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2180      	movs	r1, #128	; 0x80
 8008520:	04c9      	lsls	r1, r1, #19
 8008522:	430a      	orrs	r2, r1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f383 8810 	msr	PRIMASK, r3
}
 8008530:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008532:	1dbb      	adds	r3, r7, #6
 8008534:	881a      	ldrh	r2, [r3, #0]
 8008536:	68b9      	ldr	r1, [r7, #8]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	0018      	movs	r0, r3
 800853c:	f000 fe9c 	bl	8009278 <UART_Start_Receive_IT>
 8008540:	0003      	movs	r3, r0
 8008542:	e000      	b.n	8008546 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008544:	2302      	movs	r3, #2
  }
}
 8008546:	0018      	movs	r0, r3
 8008548:	46bd      	mov	sp, r7
 800854a:	b008      	add	sp, #32
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008550:	b590      	push	{r4, r7, lr}
 8008552:	b0ab      	sub	sp, #172	; 0xac
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	22a4      	movs	r2, #164	; 0xa4
 8008560:	18b9      	adds	r1, r7, r2
 8008562:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	20a0      	movs	r0, #160	; 0xa0
 800856c:	1839      	adds	r1, r7, r0
 800856e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	219c      	movs	r1, #156	; 0x9c
 8008578:	1879      	adds	r1, r7, r1
 800857a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800857c:	0011      	movs	r1, r2
 800857e:	18bb      	adds	r3, r7, r2
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a99      	ldr	r2, [pc, #612]	; (80087e8 <HAL_UART_IRQHandler+0x298>)
 8008584:	4013      	ands	r3, r2
 8008586:	2298      	movs	r2, #152	; 0x98
 8008588:	18bc      	adds	r4, r7, r2
 800858a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800858c:	18bb      	adds	r3, r7, r2
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d114      	bne.n	80085be <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008594:	187b      	adds	r3, r7, r1
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2220      	movs	r2, #32
 800859a:	4013      	ands	r3, r2
 800859c:	d00f      	beq.n	80085be <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800859e:	183b      	adds	r3, r7, r0
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2220      	movs	r2, #32
 80085a4:	4013      	ands	r3, r2
 80085a6:	d00a      	beq.n	80085be <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d100      	bne.n	80085b2 <HAL_UART_IRQHandler+0x62>
 80085b0:	e296      	b.n	8008ae0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	0010      	movs	r0, r2
 80085ba:	4798      	blx	r3
      }
      return;
 80085bc:	e290      	b.n	8008ae0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085be:	2398      	movs	r3, #152	; 0x98
 80085c0:	18fb      	adds	r3, r7, r3
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d100      	bne.n	80085ca <HAL_UART_IRQHandler+0x7a>
 80085c8:	e114      	b.n	80087f4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80085ca:	239c      	movs	r3, #156	; 0x9c
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2201      	movs	r2, #1
 80085d2:	4013      	ands	r3, r2
 80085d4:	d106      	bne.n	80085e4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80085d6:	23a0      	movs	r3, #160	; 0xa0
 80085d8:	18fb      	adds	r3, r7, r3
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a83      	ldr	r2, [pc, #524]	; (80087ec <HAL_UART_IRQHandler+0x29c>)
 80085de:	4013      	ands	r3, r2
 80085e0:	d100      	bne.n	80085e4 <HAL_UART_IRQHandler+0x94>
 80085e2:	e107      	b.n	80087f4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085e4:	23a4      	movs	r3, #164	; 0xa4
 80085e6:	18fb      	adds	r3, r7, r3
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2201      	movs	r2, #1
 80085ec:	4013      	ands	r3, r2
 80085ee:	d012      	beq.n	8008616 <HAL_UART_IRQHandler+0xc6>
 80085f0:	23a0      	movs	r3, #160	; 0xa0
 80085f2:	18fb      	adds	r3, r7, r3
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	2380      	movs	r3, #128	; 0x80
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	4013      	ands	r3, r2
 80085fc:	d00b      	beq.n	8008616 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2201      	movs	r2, #1
 8008604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2280      	movs	r2, #128	; 0x80
 800860a:	589b      	ldr	r3, [r3, r2]
 800860c:	2201      	movs	r2, #1
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2180      	movs	r1, #128	; 0x80
 8008614:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008616:	23a4      	movs	r3, #164	; 0xa4
 8008618:	18fb      	adds	r3, r7, r3
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2202      	movs	r2, #2
 800861e:	4013      	ands	r3, r2
 8008620:	d011      	beq.n	8008646 <HAL_UART_IRQHandler+0xf6>
 8008622:	239c      	movs	r3, #156	; 0x9c
 8008624:	18fb      	adds	r3, r7, r3
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2201      	movs	r2, #1
 800862a:	4013      	ands	r3, r2
 800862c:	d00b      	beq.n	8008646 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2202      	movs	r2, #2
 8008634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2280      	movs	r2, #128	; 0x80
 800863a:	589b      	ldr	r3, [r3, r2]
 800863c:	2204      	movs	r2, #4
 800863e:	431a      	orrs	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2180      	movs	r1, #128	; 0x80
 8008644:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008646:	23a4      	movs	r3, #164	; 0xa4
 8008648:	18fb      	adds	r3, r7, r3
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2204      	movs	r2, #4
 800864e:	4013      	ands	r3, r2
 8008650:	d011      	beq.n	8008676 <HAL_UART_IRQHandler+0x126>
 8008652:	239c      	movs	r3, #156	; 0x9c
 8008654:	18fb      	adds	r3, r7, r3
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2201      	movs	r2, #1
 800865a:	4013      	ands	r3, r2
 800865c:	d00b      	beq.n	8008676 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2204      	movs	r2, #4
 8008664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2280      	movs	r2, #128	; 0x80
 800866a:	589b      	ldr	r3, [r3, r2]
 800866c:	2202      	movs	r2, #2
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2180      	movs	r1, #128	; 0x80
 8008674:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008676:	23a4      	movs	r3, #164	; 0xa4
 8008678:	18fb      	adds	r3, r7, r3
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2208      	movs	r2, #8
 800867e:	4013      	ands	r3, r2
 8008680:	d017      	beq.n	80086b2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008682:	23a0      	movs	r3, #160	; 0xa0
 8008684:	18fb      	adds	r3, r7, r3
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2220      	movs	r2, #32
 800868a:	4013      	ands	r3, r2
 800868c:	d105      	bne.n	800869a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800868e:	239c      	movs	r3, #156	; 0x9c
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2201      	movs	r2, #1
 8008696:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008698:	d00b      	beq.n	80086b2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2208      	movs	r2, #8
 80086a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2280      	movs	r2, #128	; 0x80
 80086a6:	589b      	ldr	r3, [r3, r2]
 80086a8:	2208      	movs	r2, #8
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2180      	movs	r1, #128	; 0x80
 80086b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086b2:	23a4      	movs	r3, #164	; 0xa4
 80086b4:	18fb      	adds	r3, r7, r3
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	2380      	movs	r3, #128	; 0x80
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	4013      	ands	r3, r2
 80086be:	d013      	beq.n	80086e8 <HAL_UART_IRQHandler+0x198>
 80086c0:	23a0      	movs	r3, #160	; 0xa0
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	2380      	movs	r3, #128	; 0x80
 80086c8:	04db      	lsls	r3, r3, #19
 80086ca:	4013      	ands	r3, r2
 80086cc:	d00c      	beq.n	80086e8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2280      	movs	r2, #128	; 0x80
 80086d4:	0112      	lsls	r2, r2, #4
 80086d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2280      	movs	r2, #128	; 0x80
 80086dc:	589b      	ldr	r3, [r3, r2]
 80086de:	2220      	movs	r2, #32
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2180      	movs	r1, #128	; 0x80
 80086e6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2280      	movs	r2, #128	; 0x80
 80086ec:	589b      	ldr	r3, [r3, r2]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d100      	bne.n	80086f4 <HAL_UART_IRQHandler+0x1a4>
 80086f2:	e1f7      	b.n	8008ae4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086f4:	23a4      	movs	r3, #164	; 0xa4
 80086f6:	18fb      	adds	r3, r7, r3
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2220      	movs	r2, #32
 80086fc:	4013      	ands	r3, r2
 80086fe:	d00e      	beq.n	800871e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008700:	23a0      	movs	r3, #160	; 0xa0
 8008702:	18fb      	adds	r3, r7, r3
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2220      	movs	r2, #32
 8008708:	4013      	ands	r3, r2
 800870a:	d008      	beq.n	800871e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	0010      	movs	r0, r2
 800871c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2280      	movs	r2, #128	; 0x80
 8008722:	589b      	ldr	r3, [r3, r2]
 8008724:	2194      	movs	r1, #148	; 0x94
 8008726:	187a      	adds	r2, r7, r1
 8008728:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	2240      	movs	r2, #64	; 0x40
 8008732:	4013      	ands	r3, r2
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	d004      	beq.n	8008742 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008738:	187b      	adds	r3, r7, r1
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2228      	movs	r2, #40	; 0x28
 800873e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008740:	d047      	beq.n	80087d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	0018      	movs	r0, r3
 8008746:	f000 fe47 	bl	80093d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	2240      	movs	r2, #64	; 0x40
 8008752:	4013      	ands	r3, r2
 8008754:	2b40      	cmp	r3, #64	; 0x40
 8008756:	d137      	bne.n	80087c8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008758:	f3ef 8310 	mrs	r3, PRIMASK
 800875c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800875e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008760:	2090      	movs	r0, #144	; 0x90
 8008762:	183a      	adds	r2, r7, r0
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	2301      	movs	r3, #1
 8008768:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800876a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800876c:	f383 8810 	msr	PRIMASK, r3
}
 8008770:	46c0      	nop			; (mov r8, r8)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2140      	movs	r1, #64	; 0x40
 800877e:	438a      	bics	r2, r1
 8008780:	609a      	str	r2, [r3, #8]
 8008782:	183b      	adds	r3, r7, r0
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800878a:	f383 8810 	msr	PRIMASK, r3
}
 800878e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008794:	2b00      	cmp	r3, #0
 8008796:	d012      	beq.n	80087be <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879c:	4a14      	ldr	r2, [pc, #80]	; (80087f0 <HAL_UART_IRQHandler+0x2a0>)
 800879e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a4:	0018      	movs	r0, r3
 80087a6:	f7fc fd6b 	bl	8005280 <HAL_DMA_Abort_IT>
 80087aa:	1e03      	subs	r3, r0, #0
 80087ac:	d01a      	beq.n	80087e4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b8:	0018      	movs	r0, r3
 80087ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087bc:	e012      	b.n	80087e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	0018      	movs	r0, r3
 80087c2:	f000 f99d 	bl	8008b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c6:	e00d      	b.n	80087e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	0018      	movs	r0, r3
 80087cc:	f000 f998 	bl	8008b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d0:	e008      	b.n	80087e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	0018      	movs	r0, r3
 80087d6:	f000 f993 	bl	8008b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2280      	movs	r2, #128	; 0x80
 80087de:	2100      	movs	r1, #0
 80087e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80087e2:	e17f      	b.n	8008ae4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e4:	46c0      	nop			; (mov r8, r8)
    return;
 80087e6:	e17d      	b.n	8008ae4 <HAL_UART_IRQHandler+0x594>
 80087e8:	0000080f 	.word	0x0000080f
 80087ec:	04000120 	.word	0x04000120
 80087f0:	0800949d 	.word	0x0800949d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d000      	beq.n	80087fe <HAL_UART_IRQHandler+0x2ae>
 80087fc:	e131      	b.n	8008a62 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087fe:	23a4      	movs	r3, #164	; 0xa4
 8008800:	18fb      	adds	r3, r7, r3
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2210      	movs	r2, #16
 8008806:	4013      	ands	r3, r2
 8008808:	d100      	bne.n	800880c <HAL_UART_IRQHandler+0x2bc>
 800880a:	e12a      	b.n	8008a62 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800880c:	23a0      	movs	r3, #160	; 0xa0
 800880e:	18fb      	adds	r3, r7, r3
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2210      	movs	r2, #16
 8008814:	4013      	ands	r3, r2
 8008816:	d100      	bne.n	800881a <HAL_UART_IRQHandler+0x2ca>
 8008818:	e123      	b.n	8008a62 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2210      	movs	r2, #16
 8008820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2240      	movs	r2, #64	; 0x40
 800882a:	4013      	ands	r3, r2
 800882c:	2b40      	cmp	r3, #64	; 0x40
 800882e:	d000      	beq.n	8008832 <HAL_UART_IRQHandler+0x2e2>
 8008830:	e09b      	b.n	800896a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	217e      	movs	r1, #126	; 0x7e
 800883c:	187b      	adds	r3, r7, r1
 800883e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008840:	187b      	adds	r3, r7, r1
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d100      	bne.n	800884a <HAL_UART_IRQHandler+0x2fa>
 8008848:	e14e      	b.n	8008ae8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2258      	movs	r2, #88	; 0x58
 800884e:	5a9b      	ldrh	r3, [r3, r2]
 8008850:	187a      	adds	r2, r7, r1
 8008852:	8812      	ldrh	r2, [r2, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d300      	bcc.n	800885a <HAL_UART_IRQHandler+0x30a>
 8008858:	e146      	b.n	8008ae8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	187a      	adds	r2, r7, r1
 800885e:	215a      	movs	r1, #90	; 0x5a
 8008860:	8812      	ldrh	r2, [r2, #0]
 8008862:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	2b20      	cmp	r3, #32
 800886c:	d06e      	beq.n	800894c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886e:	f3ef 8310 	mrs	r3, PRIMASK
 8008872:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008876:	67bb      	str	r3, [r7, #120]	; 0x78
 8008878:	2301      	movs	r3, #1
 800887a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	f383 8810 	msr	PRIMASK, r3
}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	499a      	ldr	r1, [pc, #616]	; (8008af8 <HAL_UART_IRQHandler+0x5a8>)
 8008890:	400a      	ands	r2, r1
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008896:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	f383 8810 	msr	PRIMASK, r3
}
 800889e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a0:	f3ef 8310 	mrs	r3, PRIMASK
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80088a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a8:	677b      	str	r3, [r7, #116]	; 0x74
 80088aa:	2301      	movs	r3, #1
 80088ac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b0:	f383 8810 	msr	PRIMASK, r3
}
 80088b4:	46c0      	nop			; (mov r8, r8)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2101      	movs	r1, #1
 80088c2:	438a      	bics	r2, r1
 80088c4:	609a      	str	r2, [r3, #8]
 80088c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088c8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088cc:	f383 8810 	msr	PRIMASK, r3
}
 80088d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d2:	f3ef 8310 	mrs	r3, PRIMASK
 80088d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80088d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	673b      	str	r3, [r7, #112]	; 0x70
 80088dc:	2301      	movs	r3, #1
 80088de:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e2:	f383 8810 	msr	PRIMASK, r3
}
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2140      	movs	r1, #64	; 0x40
 80088f4:	438a      	bics	r2, r1
 80088f6:	609a      	str	r2, [r3, #8]
 80088f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088fa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088fe:	f383 8810 	msr	PRIMASK, r3
}
 8008902:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2220      	movs	r2, #32
 8008908:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008910:	f3ef 8310 	mrs	r3, PRIMASK
 8008914:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008916:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008918:	66fb      	str	r3, [r7, #108]	; 0x6c
 800891a:	2301      	movs	r3, #1
 800891c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008920:	f383 8810 	msr	PRIMASK, r3
}
 8008924:	46c0      	nop			; (mov r8, r8)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2110      	movs	r1, #16
 8008932:	438a      	bics	r2, r1
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008938:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800893a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800893c:	f383 8810 	msr	PRIMASK, r3
}
 8008940:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008946:	0018      	movs	r0, r3
 8008948:	f7fc fc62 	bl	8005210 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2258      	movs	r2, #88	; 0x58
 8008950:	5a9a      	ldrh	r2, [r3, r2]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	215a      	movs	r1, #90	; 0x5a
 8008956:	5a5b      	ldrh	r3, [r3, r1]
 8008958:	b29b      	uxth	r3, r3
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	b29a      	uxth	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	0011      	movs	r1, r2
 8008962:	0018      	movs	r0, r3
 8008964:	f000 f8d4 	bl	8008b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008968:	e0be      	b.n	8008ae8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2258      	movs	r2, #88	; 0x58
 800896e:	5a99      	ldrh	r1, [r3, r2]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	225a      	movs	r2, #90	; 0x5a
 8008974:	5a9b      	ldrh	r3, [r3, r2]
 8008976:	b29a      	uxth	r2, r3
 8008978:	208e      	movs	r0, #142	; 0x8e
 800897a:	183b      	adds	r3, r7, r0
 800897c:	1a8a      	subs	r2, r1, r2
 800897e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	225a      	movs	r2, #90	; 0x5a
 8008984:	5a9b      	ldrh	r3, [r3, r2]
 8008986:	b29b      	uxth	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d100      	bne.n	800898e <HAL_UART_IRQHandler+0x43e>
 800898c:	e0ae      	b.n	8008aec <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800898e:	183b      	adds	r3, r7, r0
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d100      	bne.n	8008998 <HAL_UART_IRQHandler+0x448>
 8008996:	e0a9      	b.n	8008aec <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008998:	f3ef 8310 	mrs	r3, PRIMASK
 800899c:	60fb      	str	r3, [r7, #12]
  return(result);
 800899e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089a0:	2488      	movs	r4, #136	; 0x88
 80089a2:	193a      	adds	r2, r7, r4
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	2301      	movs	r3, #1
 80089a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f383 8810 	msr	PRIMASK, r3
}
 80089b0:	46c0      	nop			; (mov r8, r8)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	494f      	ldr	r1, [pc, #316]	; (8008afc <HAL_UART_IRQHandler+0x5ac>)
 80089be:	400a      	ands	r2, r1
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	193b      	adds	r3, r7, r4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f383 8810 	msr	PRIMASK, r3
}
 80089ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089d0:	f3ef 8310 	mrs	r3, PRIMASK
 80089d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80089d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d8:	2484      	movs	r4, #132	; 0x84
 80089da:	193a      	adds	r2, r7, r4
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	2301      	movs	r3, #1
 80089e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	f383 8810 	msr	PRIMASK, r3
}
 80089e8:	46c0      	nop			; (mov r8, r8)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2101      	movs	r1, #1
 80089f6:	438a      	bics	r2, r1
 80089f8:	609a      	str	r2, [r3, #8]
 80089fa:	193b      	adds	r3, r7, r4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	f383 8810 	msr	PRIMASK, r3
}
 8008a06:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a22:	2480      	movs	r4, #128	; 0x80
 8008a24:	193a      	adds	r2, r7, r4
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	2301      	movs	r3, #1
 8008a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	f383 8810 	msr	PRIMASK, r3
}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2110      	movs	r1, #16
 8008a40:	438a      	bics	r2, r1
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	193b      	adds	r3, r7, r4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	f383 8810 	msr	PRIMASK, r3
}
 8008a50:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a52:	183b      	adds	r3, r7, r0
 8008a54:	881a      	ldrh	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	0011      	movs	r1, r2
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f000 f858 	bl	8008b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a60:	e044      	b.n	8008aec <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a62:	23a4      	movs	r3, #164	; 0xa4
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	035b      	lsls	r3, r3, #13
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	d010      	beq.n	8008a92 <HAL_UART_IRQHandler+0x542>
 8008a70:	239c      	movs	r3, #156	; 0x9c
 8008a72:	18fb      	adds	r3, r7, r3
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	2380      	movs	r3, #128	; 0x80
 8008a78:	03db      	lsls	r3, r3, #15
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	d009      	beq.n	8008a92 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2280      	movs	r2, #128	; 0x80
 8008a84:	0352      	lsls	r2, r2, #13
 8008a86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f000 ff68 	bl	8009960 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a90:	e02f      	b.n	8008af2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a92:	23a4      	movs	r3, #164	; 0xa4
 8008a94:	18fb      	adds	r3, r7, r3
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2280      	movs	r2, #128	; 0x80
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	d00f      	beq.n	8008abe <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a9e:	23a0      	movs	r3, #160	; 0xa0
 8008aa0:	18fb      	adds	r3, r7, r3
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2280      	movs	r2, #128	; 0x80
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	d009      	beq.n	8008abe <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01e      	beq.n	8008af0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	0010      	movs	r0, r2
 8008aba:	4798      	blx	r3
    }
    return;
 8008abc:	e018      	b.n	8008af0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008abe:	23a4      	movs	r3, #164	; 0xa4
 8008ac0:	18fb      	adds	r3, r7, r3
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2240      	movs	r2, #64	; 0x40
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	d013      	beq.n	8008af2 <HAL_UART_IRQHandler+0x5a2>
 8008aca:	23a0      	movs	r3, #160	; 0xa0
 8008acc:	18fb      	adds	r3, r7, r3
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2240      	movs	r2, #64	; 0x40
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	d00d      	beq.n	8008af2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f000 fdae 	bl	800963a <UART_EndTransmit_IT>
    return;
 8008ade:	e008      	b.n	8008af2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8008ae0:	46c0      	nop			; (mov r8, r8)
 8008ae2:	e006      	b.n	8008af2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8008ae4:	46c0      	nop			; (mov r8, r8)
 8008ae6:	e004      	b.n	8008af2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8008ae8:	46c0      	nop			; (mov r8, r8)
 8008aea:	e002      	b.n	8008af2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8008aec:	46c0      	nop			; (mov r8, r8)
 8008aee:	e000      	b.n	8008af2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8008af0:	46c0      	nop			; (mov r8, r8)
  }

}
 8008af2:	46bd      	mov	sp, r7
 8008af4:	b02b      	add	sp, #172	; 0xac
 8008af6:	bd90      	pop	{r4, r7, pc}
 8008af8:	fffffeff 	.word	0xfffffeff
 8008afc:	fffffedf 	.word	0xfffffedf

08008b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b08:	46c0      	nop			; (mov r8, r8)
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	000a      	movs	r2, r1
 8008b1a:	1cbb      	adds	r3, r7, #2
 8008b1c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b1e:	46c0      	nop			; (mov r8, r8)
 8008b20:	46bd      	mov	sp, r7
 8008b22:	b002      	add	sp, #8
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b30:	231e      	movs	r3, #30
 8008b32:	18fb      	adds	r3, r7, r3
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4abe      	ldr	r2, [pc, #760]	; (8008e50 <UART_SetConfig+0x328>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4ab9      	ldr	r2, [pc, #740]	; (8008e54 <UART_SetConfig+0x32c>)
 8008b6e:	4013      	ands	r3, r2
 8008b70:	0019      	movs	r1, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	4ab0      	ldr	r2, [pc, #704]	; (8008e58 <UART_SetConfig+0x330>)
 8008b96:	4013      	ands	r3, r2
 8008b98:	0019      	movs	r1, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4aac      	ldr	r2, [pc, #688]	; (8008e5c <UART_SetConfig+0x334>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d127      	bne.n	8008bfe <UART_SetConfig+0xd6>
 8008bae:	4bac      	ldr	r3, [pc, #688]	; (8008e60 <UART_SetConfig+0x338>)
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d00d      	beq.n	8008bd6 <UART_SetConfig+0xae>
 8008bba:	d81b      	bhi.n	8008bf4 <UART_SetConfig+0xcc>
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d014      	beq.n	8008bea <UART_SetConfig+0xc2>
 8008bc0:	d818      	bhi.n	8008bf4 <UART_SetConfig+0xcc>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <UART_SetConfig+0xa4>
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d00a      	beq.n	8008be0 <UART_SetConfig+0xb8>
 8008bca:	e013      	b.n	8008bf4 <UART_SetConfig+0xcc>
 8008bcc:	231f      	movs	r3, #31
 8008bce:	18fb      	adds	r3, r7, r3
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
 8008bd4:	e0bd      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008bd6:	231f      	movs	r3, #31
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	2202      	movs	r2, #2
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e0b8      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008be0:	231f      	movs	r3, #31
 8008be2:	18fb      	adds	r3, r7, r3
 8008be4:	2204      	movs	r2, #4
 8008be6:	701a      	strb	r2, [r3, #0]
 8008be8:	e0b3      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008bea:	231f      	movs	r3, #31
 8008bec:	18fb      	adds	r3, r7, r3
 8008bee:	2208      	movs	r2, #8
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	e0ae      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008bf4:	231f      	movs	r3, #31
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	2210      	movs	r2, #16
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	e0a9      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a98      	ldr	r2, [pc, #608]	; (8008e64 <UART_SetConfig+0x33c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d134      	bne.n	8008c72 <UART_SetConfig+0x14a>
 8008c08:	4b95      	ldr	r3, [pc, #596]	; (8008e60 <UART_SetConfig+0x338>)
 8008c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c0c:	23c0      	movs	r3, #192	; 0xc0
 8008c0e:	029b      	lsls	r3, r3, #10
 8008c10:	4013      	ands	r3, r2
 8008c12:	22c0      	movs	r2, #192	; 0xc0
 8008c14:	0292      	lsls	r2, r2, #10
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d017      	beq.n	8008c4a <UART_SetConfig+0x122>
 8008c1a:	22c0      	movs	r2, #192	; 0xc0
 8008c1c:	0292      	lsls	r2, r2, #10
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d822      	bhi.n	8008c68 <UART_SetConfig+0x140>
 8008c22:	2280      	movs	r2, #128	; 0x80
 8008c24:	0292      	lsls	r2, r2, #10
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d019      	beq.n	8008c5e <UART_SetConfig+0x136>
 8008c2a:	2280      	movs	r2, #128	; 0x80
 8008c2c:	0292      	lsls	r2, r2, #10
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d81a      	bhi.n	8008c68 <UART_SetConfig+0x140>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <UART_SetConfig+0x118>
 8008c36:	2280      	movs	r2, #128	; 0x80
 8008c38:	0252      	lsls	r2, r2, #9
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00a      	beq.n	8008c54 <UART_SetConfig+0x12c>
 8008c3e:	e013      	b.n	8008c68 <UART_SetConfig+0x140>
 8008c40:	231f      	movs	r3, #31
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	e083      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008c4a:	231f      	movs	r3, #31
 8008c4c:	18fb      	adds	r3, r7, r3
 8008c4e:	2202      	movs	r2, #2
 8008c50:	701a      	strb	r2, [r3, #0]
 8008c52:	e07e      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008c54:	231f      	movs	r3, #31
 8008c56:	18fb      	adds	r3, r7, r3
 8008c58:	2204      	movs	r2, #4
 8008c5a:	701a      	strb	r2, [r3, #0]
 8008c5c:	e079      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008c5e:	231f      	movs	r3, #31
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	2208      	movs	r2, #8
 8008c64:	701a      	strb	r2, [r3, #0]
 8008c66:	e074      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008c68:	231f      	movs	r3, #31
 8008c6a:	18fb      	adds	r3, r7, r3
 8008c6c:	2210      	movs	r2, #16
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	e06f      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a7c      	ldr	r2, [pc, #496]	; (8008e68 <UART_SetConfig+0x340>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d134      	bne.n	8008ce6 <UART_SetConfig+0x1be>
 8008c7c:	4b78      	ldr	r3, [pc, #480]	; (8008e60 <UART_SetConfig+0x338>)
 8008c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c80:	23c0      	movs	r3, #192	; 0xc0
 8008c82:	031b      	lsls	r3, r3, #12
 8008c84:	4013      	ands	r3, r2
 8008c86:	22c0      	movs	r2, #192	; 0xc0
 8008c88:	0312      	lsls	r2, r2, #12
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d017      	beq.n	8008cbe <UART_SetConfig+0x196>
 8008c8e:	22c0      	movs	r2, #192	; 0xc0
 8008c90:	0312      	lsls	r2, r2, #12
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d822      	bhi.n	8008cdc <UART_SetConfig+0x1b4>
 8008c96:	2280      	movs	r2, #128	; 0x80
 8008c98:	0312      	lsls	r2, r2, #12
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d019      	beq.n	8008cd2 <UART_SetConfig+0x1aa>
 8008c9e:	2280      	movs	r2, #128	; 0x80
 8008ca0:	0312      	lsls	r2, r2, #12
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d81a      	bhi.n	8008cdc <UART_SetConfig+0x1b4>
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d004      	beq.n	8008cb4 <UART_SetConfig+0x18c>
 8008caa:	2280      	movs	r2, #128	; 0x80
 8008cac:	02d2      	lsls	r2, r2, #11
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00a      	beq.n	8008cc8 <UART_SetConfig+0x1a0>
 8008cb2:	e013      	b.n	8008cdc <UART_SetConfig+0x1b4>
 8008cb4:	231f      	movs	r3, #31
 8008cb6:	18fb      	adds	r3, r7, r3
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	e049      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008cbe:	231f      	movs	r3, #31
 8008cc0:	18fb      	adds	r3, r7, r3
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	e044      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008cc8:	231f      	movs	r3, #31
 8008cca:	18fb      	adds	r3, r7, r3
 8008ccc:	2204      	movs	r2, #4
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e03f      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008cd2:	231f      	movs	r3, #31
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	2208      	movs	r2, #8
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	e03a      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008cdc:	231f      	movs	r3, #31
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	2210      	movs	r2, #16
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	e035      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a60      	ldr	r2, [pc, #384]	; (8008e6c <UART_SetConfig+0x344>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d104      	bne.n	8008cfa <UART_SetConfig+0x1d2>
 8008cf0:	231f      	movs	r3, #31
 8008cf2:	18fb      	adds	r3, r7, r3
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	e02b      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a5c      	ldr	r2, [pc, #368]	; (8008e70 <UART_SetConfig+0x348>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d104      	bne.n	8008d0e <UART_SetConfig+0x1e6>
 8008d04:	231f      	movs	r3, #31
 8008d06:	18fb      	adds	r3, r7, r3
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	e021      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a58      	ldr	r2, [pc, #352]	; (8008e74 <UART_SetConfig+0x34c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d104      	bne.n	8008d22 <UART_SetConfig+0x1fa>
 8008d18:	231f      	movs	r3, #31
 8008d1a:	18fb      	adds	r3, r7, r3
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
 8008d20:	e017      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a54      	ldr	r2, [pc, #336]	; (8008e78 <UART_SetConfig+0x350>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d104      	bne.n	8008d36 <UART_SetConfig+0x20e>
 8008d2c:	231f      	movs	r3, #31
 8008d2e:	18fb      	adds	r3, r7, r3
 8008d30:	2200      	movs	r2, #0
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	e00d      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a50      	ldr	r2, [pc, #320]	; (8008e7c <UART_SetConfig+0x354>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d104      	bne.n	8008d4a <UART_SetConfig+0x222>
 8008d40:	231f      	movs	r3, #31
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	e003      	b.n	8008d52 <UART_SetConfig+0x22a>
 8008d4a:	231f      	movs	r3, #31
 8008d4c:	18fb      	adds	r3, r7, r3
 8008d4e:	2210      	movs	r2, #16
 8008d50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	69da      	ldr	r2, [r3, #28]
 8008d56:	2380      	movs	r3, #128	; 0x80
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d15d      	bne.n	8008e1a <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8008d5e:	231f      	movs	r3, #31
 8008d60:	18fb      	adds	r3, r7, r3
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b08      	cmp	r3, #8
 8008d66:	d015      	beq.n	8008d94 <UART_SetConfig+0x26c>
 8008d68:	dc18      	bgt.n	8008d9c <UART_SetConfig+0x274>
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d00d      	beq.n	8008d8a <UART_SetConfig+0x262>
 8008d6e:	dc15      	bgt.n	8008d9c <UART_SetConfig+0x274>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <UART_SetConfig+0x252>
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d005      	beq.n	8008d84 <UART_SetConfig+0x25c>
 8008d78:	e010      	b.n	8008d9c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d7a:	f7fd fbbd 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	61bb      	str	r3, [r7, #24]
        break;
 8008d82:	e012      	b.n	8008daa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d84:	4b3e      	ldr	r3, [pc, #248]	; (8008e80 <UART_SetConfig+0x358>)
 8008d86:	61bb      	str	r3, [r7, #24]
        break;
 8008d88:	e00f      	b.n	8008daa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d8a:	f7fd fb2b 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 8008d8e:	0003      	movs	r3, r0
 8008d90:	61bb      	str	r3, [r7, #24]
        break;
 8008d92:	e00a      	b.n	8008daa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d94:	2380      	movs	r3, #128	; 0x80
 8008d96:	021b      	lsls	r3, r3, #8
 8008d98:	61bb      	str	r3, [r7, #24]
        break;
 8008d9a:	e006      	b.n	8008daa <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008da0:	231e      	movs	r3, #30
 8008da2:	18fb      	adds	r3, r7, r3
 8008da4:	2201      	movs	r2, #1
 8008da6:	701a      	strb	r2, [r3, #0]
        break;
 8008da8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d100      	bne.n	8008db2 <UART_SetConfig+0x28a>
 8008db0:	e095      	b.n	8008ede <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	005a      	lsls	r2, r3, #1
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	085b      	lsrs	r3, r3, #1
 8008dbc:	18d2      	adds	r2, r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	0019      	movs	r1, r3
 8008dc4:	0010      	movs	r0, r2
 8008dc6:	f7f7 f9b9 	bl	800013c <__udivsi3>
 8008dca:	0003      	movs	r3, r0
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b0f      	cmp	r3, #15
 8008dd4:	d91c      	bls.n	8008e10 <UART_SetConfig+0x2e8>
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	2380      	movs	r3, #128	; 0x80
 8008dda:	025b      	lsls	r3, r3, #9
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d217      	bcs.n	8008e10 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	200e      	movs	r0, #14
 8008de6:	183b      	adds	r3, r7, r0
 8008de8:	210f      	movs	r1, #15
 8008dea:	438a      	bics	r2, r1
 8008dec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	085b      	lsrs	r3, r3, #1
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	2207      	movs	r2, #7
 8008df6:	4013      	ands	r3, r2
 8008df8:	b299      	uxth	r1, r3
 8008dfa:	183b      	adds	r3, r7, r0
 8008dfc:	183a      	adds	r2, r7, r0
 8008dfe:	8812      	ldrh	r2, [r2, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	183a      	adds	r2, r7, r0
 8008e0a:	8812      	ldrh	r2, [r2, #0]
 8008e0c:	60da      	str	r2, [r3, #12]
 8008e0e:	e066      	b.n	8008ede <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8008e10:	231e      	movs	r3, #30
 8008e12:	18fb      	adds	r3, r7, r3
 8008e14:	2201      	movs	r2, #1
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	e061      	b.n	8008ede <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e1a:	231f      	movs	r3, #31
 8008e1c:	18fb      	adds	r3, r7, r3
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d02f      	beq.n	8008e84 <UART_SetConfig+0x35c>
 8008e24:	dc32      	bgt.n	8008e8c <UART_SetConfig+0x364>
 8008e26:	2b04      	cmp	r3, #4
 8008e28:	d00d      	beq.n	8008e46 <UART_SetConfig+0x31e>
 8008e2a:	dc2f      	bgt.n	8008e8c <UART_SetConfig+0x364>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <UART_SetConfig+0x30e>
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d005      	beq.n	8008e40 <UART_SetConfig+0x318>
 8008e34:	e02a      	b.n	8008e8c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e36:	f7fd fb5f 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008e3a:	0003      	movs	r3, r0
 8008e3c:	61bb      	str	r3, [r7, #24]
        break;
 8008e3e:	e02c      	b.n	8008e9a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e40:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <UART_SetConfig+0x358>)
 8008e42:	61bb      	str	r3, [r7, #24]
        break;
 8008e44:	e029      	b.n	8008e9a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e46:	f7fd facd 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 8008e4a:	0003      	movs	r3, r0
 8008e4c:	61bb      	str	r3, [r7, #24]
        break;
 8008e4e:	e024      	b.n	8008e9a <UART_SetConfig+0x372>
 8008e50:	efff69f3 	.word	0xefff69f3
 8008e54:	ffffcfff 	.word	0xffffcfff
 8008e58:	fffff4ff 	.word	0xfffff4ff
 8008e5c:	40013800 	.word	0x40013800
 8008e60:	40021000 	.word	0x40021000
 8008e64:	40004400 	.word	0x40004400
 8008e68:	40004800 	.word	0x40004800
 8008e6c:	40004c00 	.word	0x40004c00
 8008e70:	40005000 	.word	0x40005000
 8008e74:	40011400 	.word	0x40011400
 8008e78:	40011800 	.word	0x40011800
 8008e7c:	40011c00 	.word	0x40011c00
 8008e80:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	021b      	lsls	r3, r3, #8
 8008e88:	61bb      	str	r3, [r7, #24]
        break;
 8008e8a:	e006      	b.n	8008e9a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e90:	231e      	movs	r3, #30
 8008e92:	18fb      	adds	r3, r7, r3
 8008e94:	2201      	movs	r2, #1
 8008e96:	701a      	strb	r2, [r3, #0]
        break;
 8008e98:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01e      	beq.n	8008ede <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	085a      	lsrs	r2, r3, #1
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	18d2      	adds	r2, r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	0019      	movs	r1, r3
 8008eb0:	0010      	movs	r0, r2
 8008eb2:	f7f7 f943 	bl	800013c <__udivsi3>
 8008eb6:	0003      	movs	r3, r0
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b0f      	cmp	r3, #15
 8008ec0:	d909      	bls.n	8008ed6 <UART_SetConfig+0x3ae>
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	2380      	movs	r3, #128	; 0x80
 8008ec6:	025b      	lsls	r3, r3, #9
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d204      	bcs.n	8008ed6 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	60da      	str	r2, [r3, #12]
 8008ed4:	e003      	b.n	8008ede <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed6:	231e      	movs	r3, #30
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	2201      	movs	r2, #1
 8008edc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008eea:	231e      	movs	r3, #30
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	781b      	ldrb	r3, [r3, #0]
}
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	b008      	add	sp, #32
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2201      	movs	r2, #1
 8008f06:	4013      	ands	r3, r2
 8008f08:	d00b      	beq.n	8008f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	4a4a      	ldr	r2, [pc, #296]	; (800903c <UART_AdvFeatureConfig+0x144>)
 8008f12:	4013      	ands	r3, r2
 8008f14:	0019      	movs	r1, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2202      	movs	r2, #2
 8008f28:	4013      	ands	r3, r2
 8008f2a:	d00b      	beq.n	8008f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	4a43      	ldr	r2, [pc, #268]	; (8009040 <UART_AdvFeatureConfig+0x148>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	0019      	movs	r1, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	2204      	movs	r2, #4
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	d00b      	beq.n	8008f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	4a3b      	ldr	r2, [pc, #236]	; (8009044 <UART_AdvFeatureConfig+0x14c>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	0019      	movs	r1, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	d00b      	beq.n	8008f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	4a34      	ldr	r2, [pc, #208]	; (8009048 <UART_AdvFeatureConfig+0x150>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	0019      	movs	r1, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	2210      	movs	r2, #16
 8008f8e:	4013      	ands	r3, r2
 8008f90:	d00b      	beq.n	8008faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	4a2c      	ldr	r2, [pc, #176]	; (800904c <UART_AdvFeatureConfig+0x154>)
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	0019      	movs	r1, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	2220      	movs	r2, #32
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	d00b      	beq.n	8008fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	4a25      	ldr	r2, [pc, #148]	; (8009050 <UART_AdvFeatureConfig+0x158>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	0019      	movs	r1, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	2240      	movs	r2, #64	; 0x40
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	d01d      	beq.n	8009012 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	4a1d      	ldr	r2, [pc, #116]	; (8009054 <UART_AdvFeatureConfig+0x15c>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	0019      	movs	r1, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ff2:	2380      	movs	r3, #128	; 0x80
 8008ff4:	035b      	lsls	r3, r3, #13
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d10b      	bne.n	8009012 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	4a15      	ldr	r2, [pc, #84]	; (8009058 <UART_AdvFeatureConfig+0x160>)
 8009002:	4013      	ands	r3, r2
 8009004:	0019      	movs	r1, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	2280      	movs	r2, #128	; 0x80
 8009018:	4013      	ands	r3, r2
 800901a:	d00b      	beq.n	8009034 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4a0e      	ldr	r2, [pc, #56]	; (800905c <UART_AdvFeatureConfig+0x164>)
 8009024:	4013      	ands	r3, r2
 8009026:	0019      	movs	r1, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	605a      	str	r2, [r3, #4]
  }
}
 8009034:	46c0      	nop			; (mov r8, r8)
 8009036:	46bd      	mov	sp, r7
 8009038:	b002      	add	sp, #8
 800903a:	bd80      	pop	{r7, pc}
 800903c:	fffdffff 	.word	0xfffdffff
 8009040:	fffeffff 	.word	0xfffeffff
 8009044:	fffbffff 	.word	0xfffbffff
 8009048:	ffff7fff 	.word	0xffff7fff
 800904c:	ffffefff 	.word	0xffffefff
 8009050:	ffffdfff 	.word	0xffffdfff
 8009054:	ffefffff 	.word	0xffefffff
 8009058:	ff9fffff 	.word	0xff9fffff
 800905c:	fff7ffff 	.word	0xfff7ffff

08009060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af02      	add	r7, sp, #8
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2280      	movs	r2, #128	; 0x80
 800906c:	2100      	movs	r1, #0
 800906e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009070:	f7fa fc0e 	bl	8003890 <HAL_GetTick>
 8009074:	0003      	movs	r3, r0
 8009076:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2208      	movs	r2, #8
 8009080:	4013      	ands	r3, r2
 8009082:	2b08      	cmp	r3, #8
 8009084:	d10c      	bne.n	80090a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2280      	movs	r2, #128	; 0x80
 800908a:	0391      	lsls	r1, r2, #14
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4a17      	ldr	r2, [pc, #92]	; (80090ec <UART_CheckIdleState+0x8c>)
 8009090:	9200      	str	r2, [sp, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	f000 f82c 	bl	80090f0 <UART_WaitOnFlagUntilTimeout>
 8009098:	1e03      	subs	r3, r0, #0
 800909a:	d001      	beq.n	80090a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e021      	b.n	80090e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2204      	movs	r2, #4
 80090a8:	4013      	ands	r3, r2
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d10c      	bne.n	80090c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2280      	movs	r2, #128	; 0x80
 80090b2:	03d1      	lsls	r1, r2, #15
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4a0d      	ldr	r2, [pc, #52]	; (80090ec <UART_CheckIdleState+0x8c>)
 80090b8:	9200      	str	r2, [sp, #0]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f000 f818 	bl	80090f0 <UART_WaitOnFlagUntilTimeout>
 80090c0:	1e03      	subs	r3, r0, #0
 80090c2:	d001      	beq.n	80090c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e00d      	b.n	80090e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2220      	movs	r2, #32
 80090cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2274      	movs	r2, #116	; 0x74
 80090de:	2100      	movs	r1, #0
 80090e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	0018      	movs	r0, r3
 80090e6:	46bd      	mov	sp, r7
 80090e8:	b004      	add	sp, #16
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	01ffffff 	.word	0x01ffffff

080090f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b094      	sub	sp, #80	; 0x50
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	603b      	str	r3, [r7, #0]
 80090fc:	1dfb      	adds	r3, r7, #7
 80090fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009100:	e0a3      	b.n	800924a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009104:	3301      	adds	r3, #1
 8009106:	d100      	bne.n	800910a <UART_WaitOnFlagUntilTimeout+0x1a>
 8009108:	e09f      	b.n	800924a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800910a:	f7fa fbc1 	bl	8003890 <HAL_GetTick>
 800910e:	0002      	movs	r2, r0
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009116:	429a      	cmp	r2, r3
 8009118:	d302      	bcc.n	8009120 <UART_WaitOnFlagUntilTimeout+0x30>
 800911a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800911c:	2b00      	cmp	r3, #0
 800911e:	d13d      	bne.n	800919c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009120:	f3ef 8310 	mrs	r3, PRIMASK
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009128:	647b      	str	r3, [r7, #68]	; 0x44
 800912a:	2301      	movs	r3, #1
 800912c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	f383 8810 	msr	PRIMASK, r3
}
 8009134:	46c0      	nop			; (mov r8, r8)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	494c      	ldr	r1, [pc, #304]	; (8009274 <UART_WaitOnFlagUntilTimeout+0x184>)
 8009142:	400a      	ands	r2, r1
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009148:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	f383 8810 	msr	PRIMASK, r3
}
 8009150:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009152:	f3ef 8310 	mrs	r3, PRIMASK
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915a:	643b      	str	r3, [r7, #64]	; 0x40
 800915c:	2301      	movs	r3, #1
 800915e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	f383 8810 	msr	PRIMASK, r3
}
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2101      	movs	r1, #1
 8009174:	438a      	bics	r2, r1
 8009176:	609a      	str	r2, [r3, #8]
 8009178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800917c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917e:	f383 8810 	msr	PRIMASK, r3
}
 8009182:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2220      	movs	r2, #32
 8009188:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2220      	movs	r2, #32
 800918e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2274      	movs	r2, #116	; 0x74
 8009194:	2100      	movs	r1, #0
 8009196:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e067      	b.n	800926c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2204      	movs	r2, #4
 80091a4:	4013      	ands	r3, r2
 80091a6:	d050      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69da      	ldr	r2, [r3, #28]
 80091ae:	2380      	movs	r3, #128	; 0x80
 80091b0:	011b      	lsls	r3, r3, #4
 80091b2:	401a      	ands	r2, r3
 80091b4:	2380      	movs	r3, #128	; 0x80
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d146      	bne.n	800924a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2280      	movs	r2, #128	; 0x80
 80091c2:	0112      	lsls	r2, r2, #4
 80091c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c6:	f3ef 8310 	mrs	r3, PRIMASK
 80091ca:	613b      	str	r3, [r7, #16]
  return(result);
 80091cc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091d0:	2301      	movs	r3, #1
 80091d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f383 8810 	msr	PRIMASK, r3
}
 80091da:	46c0      	nop			; (mov r8, r8)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4923      	ldr	r1, [pc, #140]	; (8009274 <UART_WaitOnFlagUntilTimeout+0x184>)
 80091e8:	400a      	ands	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	f383 8810 	msr	PRIMASK, r3
}
 80091f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f8:	f3ef 8310 	mrs	r3, PRIMASK
 80091fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80091fe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009200:	64bb      	str	r3, [r7, #72]	; 0x48
 8009202:	2301      	movs	r3, #1
 8009204:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	f383 8810 	msr	PRIMASK, r3
}
 800920c:	46c0      	nop			; (mov r8, r8)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2101      	movs	r1, #1
 800921a:	438a      	bics	r2, r1
 800921c:	609a      	str	r2, [r3, #8]
 800921e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	f383 8810 	msr	PRIMASK, r3
}
 8009228:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2220      	movs	r2, #32
 800922e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2220      	movs	r2, #32
 8009234:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2280      	movs	r2, #128	; 0x80
 800923a:	2120      	movs	r1, #32
 800923c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2274      	movs	r2, #116	; 0x74
 8009242:	2100      	movs	r1, #0
 8009244:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e010      	b.n	800926c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	425a      	negs	r2, r3
 800925a:	4153      	adcs	r3, r2
 800925c:	b2db      	uxtb	r3, r3
 800925e:	001a      	movs	r2, r3
 8009260:	1dfb      	adds	r3, r7, #7
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	429a      	cmp	r2, r3
 8009266:	d100      	bne.n	800926a <UART_WaitOnFlagUntilTimeout+0x17a>
 8009268:	e74b      	b.n	8009102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	0018      	movs	r0, r3
 800926e:	46bd      	mov	sp, r7
 8009270:	b014      	add	sp, #80	; 0x50
 8009272:	bd80      	pop	{r7, pc}
 8009274:	fffffe5f 	.word	0xfffffe5f

08009278 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08c      	sub	sp, #48	; 0x30
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	1dbb      	adds	r3, r7, #6
 8009284:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	1dba      	adds	r2, r7, #6
 8009290:	2158      	movs	r1, #88	; 0x58
 8009292:	8812      	ldrh	r2, [r2, #0]
 8009294:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	1dba      	adds	r2, r7, #6
 800929a:	215a      	movs	r1, #90	; 0x5a
 800929c:	8812      	ldrh	r2, [r2, #0]
 800929e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	689a      	ldr	r2, [r3, #8]
 80092aa:	2380      	movs	r3, #128	; 0x80
 80092ac:	015b      	lsls	r3, r3, #5
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d10d      	bne.n	80092ce <UART_Start_Receive_IT+0x56>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d104      	bne.n	80092c4 <UART_Start_Receive_IT+0x4c>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	225c      	movs	r2, #92	; 0x5c
 80092be:	4943      	ldr	r1, [pc, #268]	; (80093cc <UART_Start_Receive_IT+0x154>)
 80092c0:	5299      	strh	r1, [r3, r2]
 80092c2:	e02e      	b.n	8009322 <UART_Start_Receive_IT+0xaa>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	225c      	movs	r2, #92	; 0x5c
 80092c8:	21ff      	movs	r1, #255	; 0xff
 80092ca:	5299      	strh	r1, [r3, r2]
 80092cc:	e029      	b.n	8009322 <UART_Start_Receive_IT+0xaa>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10d      	bne.n	80092f2 <UART_Start_Receive_IT+0x7a>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <UART_Start_Receive_IT+0x70>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	225c      	movs	r2, #92	; 0x5c
 80092e2:	21ff      	movs	r1, #255	; 0xff
 80092e4:	5299      	strh	r1, [r3, r2]
 80092e6:	e01c      	b.n	8009322 <UART_Start_Receive_IT+0xaa>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	225c      	movs	r2, #92	; 0x5c
 80092ec:	217f      	movs	r1, #127	; 0x7f
 80092ee:	5299      	strh	r1, [r3, r2]
 80092f0:	e017      	b.n	8009322 <UART_Start_Receive_IT+0xaa>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	689a      	ldr	r2, [r3, #8]
 80092f6:	2380      	movs	r3, #128	; 0x80
 80092f8:	055b      	lsls	r3, r3, #21
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d10d      	bne.n	800931a <UART_Start_Receive_IT+0xa2>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d104      	bne.n	8009310 <UART_Start_Receive_IT+0x98>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	225c      	movs	r2, #92	; 0x5c
 800930a:	217f      	movs	r1, #127	; 0x7f
 800930c:	5299      	strh	r1, [r3, r2]
 800930e:	e008      	b.n	8009322 <UART_Start_Receive_IT+0xaa>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	225c      	movs	r2, #92	; 0x5c
 8009314:	213f      	movs	r1, #63	; 0x3f
 8009316:	5299      	strh	r1, [r3, r2]
 8009318:	e003      	b.n	8009322 <UART_Start_Receive_IT+0xaa>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	225c      	movs	r2, #92	; 0x5c
 800931e:	2100      	movs	r1, #0
 8009320:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2280      	movs	r2, #128	; 0x80
 8009326:	2100      	movs	r1, #0
 8009328:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2222      	movs	r2, #34	; 0x22
 800932e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009330:	f3ef 8310 	mrs	r3, PRIMASK
 8009334:	61fb      	str	r3, [r7, #28]
  return(result);
 8009336:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800933a:	2301      	movs	r3, #1
 800933c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	f383 8810 	msr	PRIMASK, r3
}
 8009344:	46c0      	nop			; (mov r8, r8)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2101      	movs	r1, #1
 8009352:	430a      	orrs	r2, r1
 8009354:	609a      	str	r2, [r3, #8]
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	f383 8810 	msr	PRIMASK, r3
}
 8009360:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689a      	ldr	r2, [r3, #8]
 8009366:	2380      	movs	r3, #128	; 0x80
 8009368:	015b      	lsls	r3, r3, #5
 800936a:	429a      	cmp	r2, r3
 800936c:	d107      	bne.n	800937e <UART_Start_Receive_IT+0x106>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d103      	bne.n	800937e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <UART_Start_Receive_IT+0x158>)
 800937a:	665a      	str	r2, [r3, #100]	; 0x64
 800937c:	e002      	b.n	8009384 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4a14      	ldr	r2, [pc, #80]	; (80093d4 <UART_Start_Receive_IT+0x15c>)
 8009382:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2274      	movs	r2, #116	; 0x74
 8009388:	2100      	movs	r1, #0
 800938a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800938c:	f3ef 8310 	mrs	r3, PRIMASK
 8009390:	613b      	str	r3, [r7, #16]
  return(result);
 8009392:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
 8009396:	2301      	movs	r3, #1
 8009398:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f383 8810 	msr	PRIMASK, r3
}
 80093a0:	46c0      	nop			; (mov r8, r8)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2190      	movs	r1, #144	; 0x90
 80093ae:	0049      	lsls	r1, r1, #1
 80093b0:	430a      	orrs	r2, r1
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f383 8810 	msr	PRIMASK, r3
}
 80093be:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	0018      	movs	r0, r3
 80093c4:	46bd      	mov	sp, r7
 80093c6:	b00c      	add	sp, #48	; 0x30
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	000001ff 	.word	0x000001ff
 80093d0:	080097f9 	.word	0x080097f9
 80093d4:	08009691 	.word	0x08009691

080093d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08e      	sub	sp, #56	; 0x38
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093e0:	f3ef 8310 	mrs	r3, PRIMASK
 80093e4:	617b      	str	r3, [r7, #20]
  return(result);
 80093e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093e8:	637b      	str	r3, [r7, #52]	; 0x34
 80093ea:	2301      	movs	r3, #1
 80093ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	f383 8810 	msr	PRIMASK, r3
}
 80093f4:	46c0      	nop			; (mov r8, r8)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4925      	ldr	r1, [pc, #148]	; (8009498 <UART_EndRxTransfer+0xc0>)
 8009402:	400a      	ands	r2, r1
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009408:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	f383 8810 	msr	PRIMASK, r3
}
 8009410:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009412:	f3ef 8310 	mrs	r3, PRIMASK
 8009416:	623b      	str	r3, [r7, #32]
  return(result);
 8009418:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941a:	633b      	str	r3, [r7, #48]	; 0x30
 800941c:	2301      	movs	r3, #1
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	f383 8810 	msr	PRIMASK, r3
}
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2101      	movs	r1, #1
 8009434:	438a      	bics	r2, r1
 8009436:	609a      	str	r2, [r3, #8]
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	f383 8810 	msr	PRIMASK, r3
}
 8009442:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009448:	2b01      	cmp	r3, #1
 800944a:	d118      	bne.n	800947e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800944c:	f3ef 8310 	mrs	r3, PRIMASK
 8009450:	60bb      	str	r3, [r7, #8]
  return(result);
 8009452:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009456:	2301      	movs	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f383 8810 	msr	PRIMASK, r3
}
 8009460:	46c0      	nop			; (mov r8, r8)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2110      	movs	r1, #16
 800946e:	438a      	bics	r2, r1
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f383 8810 	msr	PRIMASK, r3
}
 800947c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2220      	movs	r2, #32
 8009482:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009490:	46c0      	nop			; (mov r8, r8)
 8009492:	46bd      	mov	sp, r7
 8009494:	b00e      	add	sp, #56	; 0x38
 8009496:	bd80      	pop	{r7, pc}
 8009498:	fffffedf 	.word	0xfffffedf

0800949c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	225a      	movs	r2, #90	; 0x5a
 80094ae:	2100      	movs	r1, #0
 80094b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2252      	movs	r2, #82	; 0x52
 80094b6:	2100      	movs	r1, #0
 80094b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	0018      	movs	r0, r3
 80094be:	f7ff fb1f 	bl	8008b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c2:	46c0      	nop			; (mov r8, r8)
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b004      	add	sp, #16
 80094c8:	bd80      	pop	{r7, pc}

080094ca <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b08a      	sub	sp, #40	; 0x28
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094d6:	2b21      	cmp	r3, #33	; 0x21
 80094d8:	d14d      	bne.n	8009576 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2252      	movs	r2, #82	; 0x52
 80094de:	5a9b      	ldrh	r3, [r3, r2]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d132      	bne.n	800954c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e6:	f3ef 8310 	mrs	r3, PRIMASK
 80094ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80094ec:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
 80094f0:	2301      	movs	r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f383 8810 	msr	PRIMASK, r3
}
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2180      	movs	r1, #128	; 0x80
 8009508:	438a      	bics	r2, r1
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f383 8810 	msr	PRIMASK, r3
}
 8009516:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009518:	f3ef 8310 	mrs	r3, PRIMASK
 800951c:	617b      	str	r3, [r7, #20]
  return(result);
 800951e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009520:	623b      	str	r3, [r7, #32]
 8009522:	2301      	movs	r3, #1
 8009524:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	f383 8810 	msr	PRIMASK, r3
}
 800952c:	46c0      	nop			; (mov r8, r8)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2140      	movs	r1, #64	; 0x40
 800953a:	430a      	orrs	r2, r1
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	f383 8810 	msr	PRIMASK, r3
}
 8009548:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800954a:	e014      	b.n	8009576 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009550:	781a      	ldrb	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	b292      	uxth	r2, r2
 8009558:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2252      	movs	r2, #82	; 0x52
 8009568:	5a9b      	ldrh	r3, [r3, r2]
 800956a:	b29b      	uxth	r3, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	b299      	uxth	r1, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2252      	movs	r2, #82	; 0x52
 8009574:	5299      	strh	r1, [r3, r2]
}
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	46bd      	mov	sp, r7
 800957a:	b00a      	add	sp, #40	; 0x28
 800957c:	bd80      	pop	{r7, pc}

0800957e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b08c      	sub	sp, #48	; 0x30
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800958a:	2b21      	cmp	r3, #33	; 0x21
 800958c:	d151      	bne.n	8009632 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2252      	movs	r2, #82	; 0x52
 8009592:	5a9b      	ldrh	r3, [r3, r2]
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d132      	bne.n	8009600 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800959a:	f3ef 8310 	mrs	r3, PRIMASK
 800959e:	60fb      	str	r3, [r7, #12]
  return(result);
 80095a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80095a4:	2301      	movs	r3, #1
 80095a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f383 8810 	msr	PRIMASK, r3
}
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2180      	movs	r1, #128	; 0x80
 80095bc:	438a      	bics	r2, r1
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f383 8810 	msr	PRIMASK, r3
}
 80095ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095cc:	f3ef 8310 	mrs	r3, PRIMASK
 80095d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80095d2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
 80095d6:	2301      	movs	r3, #1
 80095d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	f383 8810 	msr	PRIMASK, r3
}
 80095e0:	46c0      	nop			; (mov r8, r8)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2140      	movs	r1, #64	; 0x40
 80095ee:	430a      	orrs	r2, r1
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	f383 8810 	msr	PRIMASK, r3
}
 80095fc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80095fe:	e018      	b.n	8009632 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009604:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	881a      	ldrh	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	05d2      	lsls	r2, r2, #23
 8009610:	0dd2      	lsrs	r2, r2, #23
 8009612:	b292      	uxth	r2, r2
 8009614:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800961a:	1c9a      	adds	r2, r3, #2
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2252      	movs	r2, #82	; 0x52
 8009624:	5a9b      	ldrh	r3, [r3, r2]
 8009626:	b29b      	uxth	r3, r3
 8009628:	3b01      	subs	r3, #1
 800962a:	b299      	uxth	r1, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2252      	movs	r2, #82	; 0x52
 8009630:	5299      	strh	r1, [r3, r2]
}
 8009632:	46c0      	nop			; (mov r8, r8)
 8009634:	46bd      	mov	sp, r7
 8009636:	b00c      	add	sp, #48	; 0x30
 8009638:	bd80      	pop	{r7, pc}

0800963a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b086      	sub	sp, #24
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009642:	f3ef 8310 	mrs	r3, PRIMASK
 8009646:	60bb      	str	r3, [r7, #8]
  return(result);
 8009648:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	2301      	movs	r3, #1
 800964e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f383 8810 	msr	PRIMASK, r3
}
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2140      	movs	r1, #64	; 0x40
 8009664:	438a      	bics	r2, r1
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f383 8810 	msr	PRIMASK, r3
}
 8009672:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2220      	movs	r2, #32
 8009678:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	0018      	movs	r0, r3
 8009684:	f002 fcc0 	bl	800c008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009688:	46c0      	nop			; (mov r8, r8)
 800968a:	46bd      	mov	sp, r7
 800968c:	b006      	add	sp, #24
 800968e:	bd80      	pop	{r7, pc}

08009690 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b090      	sub	sp, #64	; 0x40
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009698:	203e      	movs	r0, #62	; 0x3e
 800969a:	183b      	adds	r3, r7, r0
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	215c      	movs	r1, #92	; 0x5c
 80096a0:	5a52      	ldrh	r2, [r2, r1]
 80096a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096a8:	2b22      	cmp	r3, #34	; 0x22
 80096aa:	d000      	beq.n	80096ae <UART_RxISR_8BIT+0x1e>
 80096ac:	e095      	b.n	80097da <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	213c      	movs	r1, #60	; 0x3c
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80096b8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	183b      	adds	r3, r7, r0
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	b2d9      	uxtb	r1, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ca:	400a      	ands	r2, r1
 80096cc:	b2d2      	uxtb	r2, r2
 80096ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	225a      	movs	r2, #90	; 0x5a
 80096de:	5a9b      	ldrh	r3, [r3, r2]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b299      	uxth	r1, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	225a      	movs	r2, #90	; 0x5a
 80096ea:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	225a      	movs	r2, #90	; 0x5a
 80096f0:	5a9b      	ldrh	r3, [r3, r2]
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d178      	bne.n	80097ea <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096f8:	f3ef 8310 	mrs	r3, PRIMASK
 80096fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80096fe:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009700:	63bb      	str	r3, [r7, #56]	; 0x38
 8009702:	2301      	movs	r3, #1
 8009704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	f383 8810 	msr	PRIMASK, r3
}
 800970c:	46c0      	nop			; (mov r8, r8)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4936      	ldr	r1, [pc, #216]	; (80097f4 <UART_RxISR_8BIT+0x164>)
 800971a:	400a      	ands	r2, r1
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	f383 8810 	msr	PRIMASK, r3
}
 8009728:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800972a:	f3ef 8310 	mrs	r3, PRIMASK
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009732:	637b      	str	r3, [r7, #52]	; 0x34
 8009734:	2301      	movs	r3, #1
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	f383 8810 	msr	PRIMASK, r3
}
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2101      	movs	r1, #1
 800974c:	438a      	bics	r2, r1
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	f383 8810 	msr	PRIMASK, r3
}
 800975a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800976c:	2b01      	cmp	r3, #1
 800976e:	d12f      	bne.n	80097d0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009776:	f3ef 8310 	mrs	r3, PRIMASK
 800977a:	60fb      	str	r3, [r7, #12]
  return(result);
 800977c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977e:	633b      	str	r3, [r7, #48]	; 0x30
 8009780:	2301      	movs	r3, #1
 8009782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f383 8810 	msr	PRIMASK, r3
}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2110      	movs	r1, #16
 8009798:	438a      	bics	r2, r1
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f383 8810 	msr	PRIMASK, r3
}
 80097a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	2210      	movs	r2, #16
 80097b0:	4013      	ands	r3, r2
 80097b2:	2b10      	cmp	r3, #16
 80097b4:	d103      	bne.n	80097be <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2210      	movs	r2, #16
 80097bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2258      	movs	r2, #88	; 0x58
 80097c2:	5a9a      	ldrh	r2, [r3, r2]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	0011      	movs	r1, r2
 80097c8:	0018      	movs	r0, r3
 80097ca:	f7ff f9a1 	bl	8008b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097ce:	e00c      	b.n	80097ea <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	0018      	movs	r0, r3
 80097d4:	f002 fc2a 	bl	800c02c <HAL_UART_RxCpltCallback>
}
 80097d8:	e007      	b.n	80097ea <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	699a      	ldr	r2, [r3, #24]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2108      	movs	r1, #8
 80097e6:	430a      	orrs	r2, r1
 80097e8:	619a      	str	r2, [r3, #24]
}
 80097ea:	46c0      	nop			; (mov r8, r8)
 80097ec:	46bd      	mov	sp, r7
 80097ee:	b010      	add	sp, #64	; 0x40
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	fffffedf 	.word	0xfffffedf

080097f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b090      	sub	sp, #64	; 0x40
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009800:	203e      	movs	r0, #62	; 0x3e
 8009802:	183b      	adds	r3, r7, r0
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	215c      	movs	r1, #92	; 0x5c
 8009808:	5a52      	ldrh	r2, [r2, r1]
 800980a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009810:	2b22      	cmp	r3, #34	; 0x22
 8009812:	d000      	beq.n	8009816 <UART_RxISR_16BIT+0x1e>
 8009814:	e095      	b.n	8009942 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	213c      	movs	r1, #60	; 0x3c
 800981c:	187b      	adds	r3, r7, r1
 800981e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8009820:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009826:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8009828:	187b      	adds	r3, r7, r1
 800982a:	183a      	adds	r2, r7, r0
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	8812      	ldrh	r2, [r2, #0]
 8009830:	4013      	ands	r3, r2
 8009832:	b29a      	uxth	r2, r3
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983c:	1c9a      	adds	r2, r3, #2
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	225a      	movs	r2, #90	; 0x5a
 8009846:	5a9b      	ldrh	r3, [r3, r2]
 8009848:	b29b      	uxth	r3, r3
 800984a:	3b01      	subs	r3, #1
 800984c:	b299      	uxth	r1, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	225a      	movs	r2, #90	; 0x5a
 8009852:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	225a      	movs	r2, #90	; 0x5a
 8009858:	5a9b      	ldrh	r3, [r3, r2]
 800985a:	b29b      	uxth	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d178      	bne.n	8009952 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009860:	f3ef 8310 	mrs	r3, PRIMASK
 8009864:	617b      	str	r3, [r7, #20]
  return(result);
 8009866:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
 800986a:	2301      	movs	r3, #1
 800986c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	f383 8810 	msr	PRIMASK, r3
}
 8009874:	46c0      	nop			; (mov r8, r8)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4936      	ldr	r1, [pc, #216]	; (800995c <UART_RxISR_16BIT+0x164>)
 8009882:	400a      	ands	r2, r1
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009888:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f383 8810 	msr	PRIMASK, r3
}
 8009890:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009892:	f3ef 8310 	mrs	r3, PRIMASK
 8009896:	623b      	str	r3, [r7, #32]
  return(result);
 8009898:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989a:	633b      	str	r3, [r7, #48]	; 0x30
 800989c:	2301      	movs	r3, #1
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	f383 8810 	msr	PRIMASK, r3
}
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689a      	ldr	r2, [r3, #8]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2101      	movs	r1, #1
 80098b4:	438a      	bics	r2, r1
 80098b6:	609a      	str	r2, [r3, #8]
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	f383 8810 	msr	PRIMASK, r3
}
 80098c2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2220      	movs	r2, #32
 80098c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d12f      	bne.n	8009938 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098de:	f3ef 8310 	mrs	r3, PRIMASK
 80098e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80098e4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098e8:	2301      	movs	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f383 8810 	msr	PRIMASK, r3
}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2110      	movs	r1, #16
 8009900:	438a      	bics	r2, r1
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f383 8810 	msr	PRIMASK, r3
}
 800990e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	2210      	movs	r2, #16
 8009918:	4013      	ands	r3, r2
 800991a:	2b10      	cmp	r3, #16
 800991c:	d103      	bne.n	8009926 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2210      	movs	r2, #16
 8009924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2258      	movs	r2, #88	; 0x58
 800992a:	5a9a      	ldrh	r2, [r3, r2]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	0011      	movs	r1, r2
 8009930:	0018      	movs	r0, r3
 8009932:	f7ff f8ed 	bl	8008b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009936:	e00c      	b.n	8009952 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	0018      	movs	r0, r3
 800993c:	f002 fb76 	bl	800c02c <HAL_UART_RxCpltCallback>
}
 8009940:	e007      	b.n	8009952 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2108      	movs	r1, #8
 800994e:	430a      	orrs	r2, r1
 8009950:	619a      	str	r2, [r3, #24]
}
 8009952:	46c0      	nop			; (mov r8, r8)
 8009954:	46bd      	mov	sp, r7
 8009956:	b010      	add	sp, #64	; 0x40
 8009958:	bd80      	pop	{r7, pc}
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	fffffedf 	.word	0xfffffedf

08009960 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009968:	46c0      	nop			; (mov r8, r8)
 800996a:	46bd      	mov	sp, r7
 800996c:	b002      	add	sp, #8
 800996e:	bd80      	pop	{r7, pc}

08009970 <PID_ResetAll>:
    return status;
}

HAL_StatusTypeDef
PID_ResetAll ( PID_t * instance )
{
 8009970:	b590      	push	{r4, r7, lr}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR;
 8009978:	240f      	movs	r4, #15
 800997a:	193b      	adds	r3, r7, r4
 800997c:	2201      	movs	r2, #1
 800997e:	701a      	strb	r2, [r3, #0]

    if ( instance != NULL )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d010      	beq.n	80099a8 <PID_ResetAll+0x38>
    {
        memset( ( void * )&instance->control , 0x00 , sizeof( instance->control ) );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3314      	adds	r3, #20
 800998a:	2210      	movs	r2, #16
 800998c:	2100      	movs	r1, #0
 800998e:	0018      	movs	r0, r3
 8009990:	f003 fb3d 	bl	800d00e <memset>

        instance->setpoint = 0;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
        instance->delay.enabled = false;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2224      	movs	r2, #36	; 0x24
 800999e:	2100      	movs	r1, #0
 80099a0:	5499      	strb	r1, [r3, r2]

        status = HAL_OK;
 80099a2:	193b      	adds	r3, r7, r4
 80099a4:	2200      	movs	r2, #0
 80099a6:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80099a8:	230f      	movs	r3, #15
 80099aa:	18fb      	adds	r3, r7, r3
 80099ac:	781b      	ldrb	r3, [r3, #0]
}
 80099ae:	0018      	movs	r0, r3
 80099b0:	46bd      	mov	sp, r7
 80099b2:	b005      	add	sp, #20
 80099b4:	bd90      	pop	{r4, r7, pc}

080099b6 <PID_SetCoefs>:
HAL_StatusTypeDef
PID_SetCoefs ( PID_t * instance ,
               float   kp       ,
               float   ki       ,
               float   kd       )
{
 80099b6:	b590      	push	{r4, r7, lr}
 80099b8:	b087      	sub	sp, #28
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
 80099c2:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = HAL_ERROR;
 80099c4:	2117      	movs	r1, #23
 80099c6:	187b      	adds	r3, r7, r1
 80099c8:	2201      	movs	r2, #1
 80099ca:	701a      	strb	r2, [r3, #0]

    if ( instance != NULL )
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00f      	beq.n	80099f2 <PID_SetCoefs+0x3c>
    {
        instance->coef.kp = kp;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	609a      	str	r2, [r3, #8]
        instance->coef.ki = ki;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	60da      	str	r2, [r3, #12]
        instance->coef.kd = kd;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	611a      	str	r2, [r3, #16]

        status = PID_ResetAll( instance );
 80099e4:	187c      	adds	r4, r7, r1
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	0018      	movs	r0, r3
 80099ea:	f7ff ffc1 	bl	8009970 <PID_ResetAll>
 80099ee:	0003      	movs	r3, r0
 80099f0:	7023      	strb	r3, [r4, #0]
    }

    return status;
 80099f2:	2317      	movs	r3, #23
 80099f4:	18fb      	adds	r3, r7, r3
 80099f6:	781b      	ldrb	r3, [r3, #0]
}
 80099f8:	0018      	movs	r0, r3
 80099fa:	46bd      	mov	sp, r7
 80099fc:	b007      	add	sp, #28
 80099fe:	bd90      	pop	{r4, r7, pc}

08009a00 <PID_Compute>:

HAL_StatusTypeDef
PID_Compute ( PID_t * instance       ,
              int32_t current_output ,
              float   elapsed_time   )
{
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b089      	sub	sp, #36	; 0x24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR;
 8009a0c:	231f      	movs	r3, #31
 8009a0e:	18fb      	adds	r3, r7, r3
 8009a10:	2201      	movs	r2, #1
 8009a12:	701a      	strb	r2, [r3, #0]

    if ( instance != NULL )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d100      	bne.n	8009a1c <PID_Compute+0x1c>
 8009a1a:	e0dc      	b.n	8009bd6 <PID_Compute+0x1d6>
    {
    	int16_t process_value =0;
 8009a1c:	2116      	movs	r1, #22
 8009a1e:	187b      	adds	r3, r7, r1
 8009a20:	2200      	movs	r2, #0
 8009a22:	801a      	strh	r2, [r3, #0]
        float  error = 0.0, result = 0.0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	613b      	str	r3, [r7, #16]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61bb      	str	r3, [r7, #24]

        ///// Process value (current output)
        process_value = current_output;
 8009a2c:	187b      	adds	r3, r7, r1
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	801a      	strh	r2, [r3, #0]

        ///// Current error
        error = (float)( instance->setpoint - process_value);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	187b      	adds	r3, r7, r1
 8009a38:	2100      	movs	r1, #0
 8009a3a:	5e5b      	ldrsh	r3, [r3, r1]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f7f7 fc10 	bl	8001264 <__aeabi_i2f>
 8009a44:	1c03      	adds	r3, r0, #0
 8009a46:	613b      	str	r3, [r7, #16]

        ///// Proportional value
        instance->control.proportional = error;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	615a      	str	r2, [r3, #20]

        ///// Integral value
        instance->control.integral += error ;//* elapsed_time;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	6939      	ldr	r1, [r7, #16]
 8009a54:	1c18      	adds	r0, r3, #0
 8009a56:	f7f6 fd95 	bl	8000584 <__aeabi_fadd>
 8009a5a:	1c03      	adds	r3, r0, #0
 8009a5c:	1c1a      	adds	r2, r3, #0
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	619a      	str	r2, [r3, #24]

        ///// Derivative value
        if( fpclassify(( error - instance->control.prev_error ) / elapsed_time) != FP_NORMAL )//Evite les NaN, Inf and co
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	1c19      	adds	r1, r3, #0
 8009a68:	6938      	ldr	r0, [r7, #16]
 8009a6a:	f7f7 fa17 	bl	8000e9c <__aeabi_fsub>
 8009a6e:	1c03      	adds	r3, r0, #0
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	1c18      	adds	r0, r3, #0
 8009a74:	f7f6 ff24 	bl	80008c0 <__aeabi_fdiv>
 8009a78:	1c03      	adds	r3, r0, #0
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	085c      	lsrs	r4, r3, #1
 8009a7e:	1c21      	adds	r1, r4, #0
 8009a80:	1c20      	adds	r0, r4, #0
 8009a82:	f7f7 fbb9 	bl	80011f8 <__aeabi_fcmpun>
 8009a86:	1e03      	subs	r3, r0, #0
 8009a88:	d118      	bne.n	8009abc <PID_Compute+0xbc>
 8009a8a:	4956      	ldr	r1, [pc, #344]	; (8009be4 <PID_Compute+0x1e4>)
 8009a8c:	1c20      	adds	r0, r4, #0
 8009a8e:	f7f7 fbb3 	bl	80011f8 <__aeabi_fcmpun>
 8009a92:	1e03      	subs	r3, r0, #0
 8009a94:	d105      	bne.n	8009aa2 <PID_Compute+0xa2>
 8009a96:	4953      	ldr	r1, [pc, #332]	; (8009be4 <PID_Compute+0x1e4>)
 8009a98:	1c20      	adds	r0, r4, #0
 8009a9a:	f7f6 fd1f 	bl	80004dc <__aeabi_fcmple>
 8009a9e:	1e03      	subs	r3, r0, #0
 8009aa0:	d00a      	beq.n	8009ab8 <PID_Compute+0xb8>
 8009aa2:	2180      	movs	r1, #128	; 0x80
 8009aa4:	0409      	lsls	r1, r1, #16
 8009aa6:	1c20      	adds	r0, r4, #0
 8009aa8:	f7f6 fd2c 	bl	8000504 <__aeabi_fcmpge>
 8009aac:	1e03      	subs	r3, r0, #0
 8009aae:	d001      	beq.n	8009ab4 <PID_Compute+0xb4>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e004      	b.n	8009abe <PID_Compute+0xbe>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e002      	b.n	8009abe <PID_Compute+0xbe>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e000      	b.n	8009abe <PID_Compute+0xbe>
 8009abc:	2301      	movs	r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <PID_Compute+0xca>
        	instance->control.derivative = 0.0;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	61da      	str	r2, [r3, #28]
 8009ac8:	e00e      	b.n	8009ae8 <PID_Compute+0xe8>
        else
        	instance->control.derivative = ( error - instance->control.prev_error ) / elapsed_time;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	1c19      	adds	r1, r3, #0
 8009ad0:	6938      	ldr	r0, [r7, #16]
 8009ad2:	f7f7 f9e3 	bl	8000e9c <__aeabi_fsub>
 8009ad6:	1c03      	adds	r3, r0, #0
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	1c18      	adds	r0, r3, #0
 8009adc:	f7f6 fef0 	bl	80008c0 <__aeabi_fdiv>
 8009ae0:	1c03      	adds	r3, r0, #0
 8009ae2:	1c1a      	adds	r2, r3, #0
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	61da      	str	r2, [r3, #28]


        instance->control.prev_error = error;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	621a      	str	r2, [r3, #32]

        ///// PID
        result = ( instance->coef.kp * instance->control.proportional ) +
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689a      	ldr	r2, [r3, #8]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	1c19      	adds	r1, r3, #0
 8009af8:	1c10      	adds	r0, r2, #0
 8009afa:	f7f7 f8a9 	bl	8000c50 <__aeabi_fmul>
 8009afe:	1c03      	adds	r3, r0, #0
 8009b00:	1c1c      	adds	r4, r3, #0
                 ( instance->coef.ki * instance->control.integral     ) +
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	1c19      	adds	r1, r3, #0
 8009b0c:	1c10      	adds	r0, r2, #0
 8009b0e:	f7f7 f89f 	bl	8000c50 <__aeabi_fmul>
 8009b12:	1c03      	adds	r3, r0, #0
        result = ( instance->coef.kp * instance->control.proportional ) +
 8009b14:	1c19      	adds	r1, r3, #0
 8009b16:	1c20      	adds	r0, r4, #0
 8009b18:	f7f6 fd34 	bl	8000584 <__aeabi_fadd>
 8009b1c:	1c03      	adds	r3, r0, #0
 8009b1e:	1c1c      	adds	r4, r3, #0
                 ( instance->coef.kd * instance->control.derivative   );
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	691a      	ldr	r2, [r3, #16]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	1c19      	adds	r1, r3, #0
 8009b2a:	1c10      	adds	r0, r2, #0
 8009b2c:	f7f7 f890 	bl	8000c50 <__aeabi_fmul>
 8009b30:	1c03      	adds	r3, r0, #0
        result = ( instance->coef.kp * instance->control.proportional ) +
 8009b32:	1c19      	adds	r1, r3, #0
 8009b34:	1c20      	adds	r0, r4, #0
 8009b36:	f7f6 fd25 	bl	8000584 <__aeabi_fadd>
 8009b3a:	1c03      	adds	r3, r0, #0
 8009b3c:	61bb      	str	r3, [r7, #24]

        status = HAL_OK;
 8009b3e:	231f      	movs	r3, #31
 8009b40:	18fb      	adds	r3, r7, r3
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]

        if((instance) == &board.control.position)
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	4b27      	ldr	r3, [pc, #156]	; (8009be8 <PID_Compute+0x1e8>)
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d12b      	bne.n	8009ba6 <PID_Compute+0x1a6>
        {

        	if(result > 97.0)
 8009b4e:	4927      	ldr	r1, [pc, #156]	; (8009bec <PID_Compute+0x1ec>)
 8009b50:	69b8      	ldr	r0, [r7, #24]
 8009b52:	f7f6 fccd 	bl	80004f0 <__aeabi_fcmpgt>
 8009b56:	1e03      	subs	r3, r0, #0
 8009b58:	d002      	beq.n	8009b60 <PID_Compute+0x160>
				result = 97.0;
 8009b5a:	4b24      	ldr	r3, [pc, #144]	; (8009bec <PID_Compute+0x1ec>)
 8009b5c:	61bb      	str	r3, [r7, #24]
 8009b5e:	e007      	b.n	8009b70 <PID_Compute+0x170>
			else if(result < -97.0)
 8009b60:	4923      	ldr	r1, [pc, #140]	; (8009bf0 <PID_Compute+0x1f0>)
 8009b62:	69b8      	ldr	r0, [r7, #24]
 8009b64:	f7f6 fcb0 	bl	80004c8 <__aeabi_fcmplt>
 8009b68:	1e03      	subs	r3, r0, #0
 8009b6a:	d001      	beq.n	8009b70 <PID_Compute+0x170>
				result = -97.0;
 8009b6c:	4b20      	ldr	r3, [pc, #128]	; (8009bf0 <PID_Compute+0x1f0>)
 8009b6e:	61bb      	str	r3, [r7, #24]

			static int i = 0;
			static int16_t last_process_value=0;


			if (i >= 10 || (process_value !=  last_process_value)) {
 8009b70:	4b20      	ldr	r3, [pc, #128]	; (8009bf4 <PID_Compute+0x1f4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	dc08      	bgt.n	8009b8a <PID_Compute+0x18a>
 8009b78:	4b1f      	ldr	r3, [pc, #124]	; (8009bf8 <PID_Compute+0x1f8>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	5e9b      	ldrsh	r3, [r3, r2]
 8009b7e:	2216      	movs	r2, #22
 8009b80:	18ba      	adds	r2, r7, r2
 8009b82:	2100      	movs	r1, #0
 8009b84:	5e52      	ldrsh	r2, [r2, r1]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d007      	beq.n	8009b9a <PID_Compute+0x19a>
				i = 0;
 8009b8a:	4b1a      	ldr	r3, [pc, #104]	; (8009bf4 <PID_Compute+0x1f4>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	601a      	str	r2, [r3, #0]

/*				CONSOLE("P%.0f %.0f %.0f %.0f"EOL, error,
							( instance->coef.kp * instance->control.proportional ),
							( instance->coef.ki * instance->control.integral ),
							( instance->coef.kd * instance->control.derivative ));*/
				last_process_value = process_value;
 8009b90:	4b19      	ldr	r3, [pc, #100]	; (8009bf8 <PID_Compute+0x1f8>)
 8009b92:	2216      	movs	r2, #22
 8009b94:	18ba      	adds	r2, r7, r2
 8009b96:	8812      	ldrh	r2, [r2, #0]
 8009b98:	801a      	strh	r2, [r3, #0]
			}

			i++;
 8009b9a:	4b16      	ldr	r3, [pc, #88]	; (8009bf4 <PID_Compute+0x1f4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	4b14      	ldr	r3, [pc, #80]	; (8009bf4 <PID_Compute+0x1f4>)
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	e014      	b.n	8009bd0 <PID_Compute+0x1d0>

			//CONSOLE("%ld ; %ld ; %f\r",instance->setpoint, process_value, result);
        }
        else if( instance == &board.control.voltage)
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4b14      	ldr	r3, [pc, #80]	; (8009bfc <PID_Compute+0x1fc>)
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d110      	bne.n	8009bd0 <PID_Compute+0x1d0>
        {
        	if(result > 100000.0)
 8009bae:	4914      	ldr	r1, [pc, #80]	; (8009c00 <PID_Compute+0x200>)
 8009bb0:	69b8      	ldr	r0, [r7, #24]
 8009bb2:	f7f6 fc9d 	bl	80004f0 <__aeabi_fcmpgt>
 8009bb6:	1e03      	subs	r3, r0, #0
 8009bb8:	d002      	beq.n	8009bc0 <PID_Compute+0x1c0>
				result = 100000.0;
 8009bba:	4b11      	ldr	r3, [pc, #68]	; (8009c00 <PID_Compute+0x200>)
 8009bbc:	61bb      	str	r3, [r7, #24]
 8009bbe:	e007      	b.n	8009bd0 <PID_Compute+0x1d0>
			else if(result < -100000.0)
 8009bc0:	4910      	ldr	r1, [pc, #64]	; (8009c04 <PID_Compute+0x204>)
 8009bc2:	69b8      	ldr	r0, [r7, #24]
 8009bc4:	f7f6 fc80 	bl	80004c8 <__aeabi_fcmplt>
 8009bc8:	1e03      	subs	r3, r0, #0
 8009bca:	d001      	beq.n	8009bd0 <PID_Compute+0x1d0>
				result = -100000.0;
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <PID_Compute+0x204>)
 8009bce:	61bb      	str	r3, [r7, #24]
        }

        ///// Apply output
        instance->output = result;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	69ba      	ldr	r2, [r7, #24]
 8009bd4:	605a      	str	r2, [r3, #4]
    }

    return status;
 8009bd6:	231f      	movs	r3, #31
 8009bd8:	18fb      	adds	r3, r7, r3
 8009bda:	781b      	ldrb	r3, [r3, #0]
}
 8009bdc:	0018      	movs	r0, r3
 8009bde:	46bd      	mov	sp, r7
 8009be0:	b009      	add	sp, #36	; 0x24
 8009be2:	bd90      	pop	{r4, r7, pc}
 8009be4:	7f7fffff 	.word	0x7f7fffff
 8009be8:	20000514 	.word	0x20000514
 8009bec:	42c20000 	.word	0x42c20000
 8009bf0:	c2c20000 	.word	0xc2c20000
 8009bf4:	20000750 	.word	0x20000750
 8009bf8:	20000754 	.word	0x20000754
 8009bfc:	200005d4 	.word	0x200005d4
 8009c00:	47c35000 	.word	0x47c35000
 8009c04:	c7c35000 	.word	0xc7c35000

08009c08 <Can_frame_mgt>:

// ====================================

HAL_StatusTypeDef
Can_frame_mgt ( Global_Struct_t * inst )
{
 8009c08:	b5b0      	push	{r4, r5, r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR;
 8009c10:	2317      	movs	r3, #23
 8009c12:	18fb      	adds	r3, r7, r3
 8009c14:	2201      	movs	r2, #1
 8009c16:	701a      	strb	r2, [r3, #0]

    if(inst != NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d100      	bne.n	8009c20 <Can_frame_mgt+0x18>
 8009c1e:	e2e8      	b.n	800a1f2 <Can_frame_mgt+0x5ea>
				int32_t  i32 ;
			}integer;
			float	 d_float;
		}d;

		uint8_t i = 0;
 8009c20:	2316      	movs	r3, #22
 8009c22:	18fb      	adds	r3, r7, r3
 8009c24:	2200      	movs	r2, #0
 8009c26:	701a      	strb	r2, [r3, #0]
		do
		{

			memcpy(&valeur_idx_Rx_trame, &msg_can.RX.bytes[i][0], 2); //On range dans notre variable "valeur_idx_Rx_trame" la valeur de l'index du message reçu
 8009c28:	2416      	movs	r4, #22
 8009c2a:	193b      	adds	r3, r7, r4
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	3303      	adds	r3, #3
 8009c30:	00da      	lsls	r2, r3, #3
 8009c32:	4be9      	ldr	r3, [pc, #932]	; (8009fd8 <Can_frame_mgt+0x3d0>)
 8009c34:	18d3      	adds	r3, r2, r3
 8009c36:	1c59      	adds	r1, r3, #1
 8009c38:	250e      	movs	r5, #14
 8009c3a:	197b      	adds	r3, r7, r5
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f003 f9dc 	bl	800cffc <memcpy>

			memcpy(&d.integer.i32, &msg_can.RX.bytes[i][4], sizeof(d.integer.i32));
 8009c44:	193b      	adds	r3, r7, r4
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	331c      	adds	r3, #28
 8009c4c:	001a      	movs	r2, r3
 8009c4e:	4be2      	ldr	r3, [pc, #904]	; (8009fd8 <Can_frame_mgt+0x3d0>)
 8009c50:	18d3      	adds	r3, r2, r3
 8009c52:	1c59      	adds	r1, r3, #1
 8009c54:	2308      	movs	r3, #8
 8009c56:	18fb      	adds	r3, r7, r3
 8009c58:	2204      	movs	r2, #4
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	f003 f9ce 	bl	800cffc <memcpy>

			float k;

			switch ( valeur_idx_Rx_trame )
 8009c60:	197b      	adds	r3, r7, r5
 8009c62:	2200      	movs	r2, #0
 8009c64:	5e9b      	ldrsh	r3, [r3, r2]
 8009c66:	22c1      	movs	r2, #193	; 0xc1
 8009c68:	0192      	lsls	r2, r2, #6
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d100      	bne.n	8009c70 <Can_frame_mgt+0x68>
 8009c6e:	e1b9      	b.n	8009fe4 <Can_frame_mgt+0x3dc>
 8009c70:	22c1      	movs	r2, #193	; 0xc1
 8009c72:	0192      	lsls	r2, r2, #6
 8009c74:	4293      	cmp	r3, r2
 8009c76:	dd00      	ble.n	8009c7a <Can_frame_mgt+0x72>
 8009c78:	e296      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
 8009c7a:	2281      	movs	r2, #129	; 0x81
 8009c7c:	0192      	lsls	r2, r2, #6
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d100      	bne.n	8009c84 <Can_frame_mgt+0x7c>
 8009c82:	e17c      	b.n	8009f7e <Can_frame_mgt+0x376>
 8009c84:	2281      	movs	r2, #129	; 0x81
 8009c86:	0192      	lsls	r2, r2, #6
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	dd00      	ble.n	8009c8e <Can_frame_mgt+0x86>
 8009c8c:	e28c      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
 8009c8e:	2282      	movs	r2, #130	; 0x82
 8009c90:	0152      	lsls	r2, r2, #5
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d100      	bne.n	8009c98 <Can_frame_mgt+0x90>
 8009c96:	e146      	b.n	8009f26 <Can_frame_mgt+0x31e>
 8009c98:	2282      	movs	r2, #130	; 0x82
 8009c9a:	0152      	lsls	r2, r2, #5
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	dd00      	ble.n	8009ca2 <Can_frame_mgt+0x9a>
 8009ca0:	e282      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
 8009ca2:	22d0      	movs	r2, #208	; 0xd0
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d100      	bne.n	8009cac <Can_frame_mgt+0xa4>
 8009caa:	e221      	b.n	800a0f0 <Can_frame_mgt+0x4e8>
 8009cac:	22d0      	movs	r2, #208	; 0xd0
 8009cae:	0092      	lsls	r2, r2, #2
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	dd00      	ble.n	8009cb6 <Can_frame_mgt+0xae>
 8009cb4:	e278      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
 8009cb6:	2290      	movs	r2, #144	; 0x90
 8009cb8:	0092      	lsls	r2, r2, #2
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d100      	bne.n	8009cc0 <Can_frame_mgt+0xb8>
 8009cbe:	e1eb      	b.n	800a098 <Can_frame_mgt+0x490>
 8009cc0:	2290      	movs	r2, #144	; 0x90
 8009cc2:	0092      	lsls	r2, r2, #2
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	dd00      	ble.n	8009cca <Can_frame_mgt+0xc2>
 8009cc8:	e26e      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
 8009cca:	22a0      	movs	r2, #160	; 0xa0
 8009ccc:	0052      	lsls	r2, r2, #1
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d100      	bne.n	8009cd4 <Can_frame_mgt+0xcc>
 8009cd2:	e1b5      	b.n	800a040 <Can_frame_mgt+0x438>
 8009cd4:	22a0      	movs	r2, #160	; 0xa0
 8009cd6:	0052      	lsls	r2, r2, #1
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	dd00      	ble.n	8009cde <Can_frame_mgt+0xd6>
 8009cdc:	e264      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
 8009cde:	2b53      	cmp	r3, #83	; 0x53
 8009ce0:	dc0b      	bgt.n	8009cfa <Can_frame_mgt+0xf2>
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	da00      	bge.n	8009ce8 <Can_frame_mgt+0xe0>
 8009ce6:	e25f      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
 8009ce8:	3b20      	subs	r3, #32
 8009cea:	2b33      	cmp	r3, #51	; 0x33
 8009cec:	d900      	bls.n	8009cf0 <Can_frame_mgt+0xe8>
 8009cee:	e25b      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
 8009cf0:	009a      	lsls	r2, r3, #2
 8009cf2:	4bba      	ldr	r3, [pc, #744]	; (8009fdc <Can_frame_mgt+0x3d4>)
 8009cf4:	18d3      	adds	r3, r2, r3
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	469f      	mov	pc, r3
 8009cfa:	2288      	movs	r2, #136	; 0x88
 8009cfc:	0052      	lsls	r2, r2, #1
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d04d      	beq.n	8009d9e <Can_frame_mgt+0x196>
 8009d02:	e251      	b.n	800a1a8 <Can_frame_mgt+0x5a0>
			{

			case IDX_CMD_SET_MOTOR_ON_OFF:
				memcpy(&valeur_sub_idx_RX_trame, &msg_can.RX.bytes[i][2], 2);
 8009d04:	2316      	movs	r3, #22
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	331a      	adds	r3, #26
 8009d0e:	001a      	movs	r2, r3
 8009d10:	4bb1      	ldr	r3, [pc, #708]	; (8009fd8 <Can_frame_mgt+0x3d0>)
 8009d12:	18d3      	adds	r3, r2, r3
 8009d14:	1c59      	adds	r1, r3, #1
 8009d16:	240c      	movs	r4, #12
 8009d18:	193b      	adds	r3, r7, r4
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	0018      	movs	r0, r3
 8009d1e:	f003 f96d 	bl	800cffc <memcpy>

				if (valeur_sub_idx_RX_trame == SUB_IDX_MOTOR_ON )
 8009d22:	193b      	adds	r3, r7, r4
 8009d24:	2200      	movs	r2, #0
 8009d26:	5e9b      	ldrsh	r3, [r3, r2]
 8009d28:	2b11      	cmp	r3, #17
 8009d2a:	d108      	bne.n	8009d3e <Can_frame_mgt+0x136>
					status = Turn_On_Motor( inst );
 8009d2c:	2317      	movs	r3, #23
 8009d2e:	18fc      	adds	r4, r7, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	0018      	movs	r0, r3
 8009d34:	f001 fd38 	bl	800b7a8 <Turn_On_Motor>
 8009d38:	0003      	movs	r3, r0
 8009d3a:	7023      	strb	r3, [r4, #0]
				else if (valeur_sub_idx_RX_trame == SUB_IDX_MOTOR_OFF)
					status = Turn_Off_Motor( inst );

				break;
 8009d3c:	e239      	b.n	800a1b2 <Can_frame_mgt+0x5aa>
				else if (valeur_sub_idx_RX_trame == SUB_IDX_MOTOR_OFF)
 8009d3e:	230c      	movs	r3, #12
 8009d40:	18fb      	adds	r3, r7, r3
 8009d42:	2200      	movs	r2, #0
 8009d44:	5e9b      	ldrsh	r3, [r3, r2]
 8009d46:	2b12      	cmp	r3, #18
 8009d48:	d000      	beq.n	8009d4c <Can_frame_mgt+0x144>
 8009d4a:	e232      	b.n	800a1b2 <Can_frame_mgt+0x5aa>
					status = Turn_Off_Motor( inst );
 8009d4c:	2317      	movs	r3, #23
 8009d4e:	18fc      	adds	r4, r7, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	0018      	movs	r0, r3
 8009d54:	f001 fd6e 	bl	800b834 <Turn_Off_Motor>
 8009d58:	0003      	movs	r3, r0
 8009d5a:	7023      	strb	r3, [r4, #0]
				break;
 8009d5c:	e229      	b.n	800a1b2 <Can_frame_mgt+0x5aa>

			case IDX_CMD_SET_SETPOINT:
				status = Set_setpoint(inst , d.integer.i32 );
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	2317      	movs	r3, #23
 8009d62:	18fc      	adds	r4, r7, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	0011      	movs	r1, r2
 8009d68:	0018      	movs	r0, r3
 8009d6a:	f001 fdcf 	bl	800b90c <Set_setpoint>
 8009d6e:	0003      	movs	r3, r0
 8009d70:	7023      	strb	r3, [r4, #0]

				break;
 8009d72:	e221      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_CMD_SET_CTRL_MODE :

				status = Set_ControlType( inst , d.integer.i32 );
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	2317      	movs	r3, #23
 8009d7a:	18fc      	adds	r4, r7, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	0011      	movs	r1, r2
 8009d80:	0018      	movs	r0, r3
 8009d82:	f001 fd96 	bl	800b8b2 <Set_ControlType>
 8009d86:	0003      	movs	r3, r0
 8009d88:	7023      	strb	r3, [r4, #0]
				break;
 8009d8a:	e215      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_CMD_START_HOMING:
				status = HOMING_PROCESS_monitoring( inst);
 8009d8c:	2317      	movs	r3, #23
 8009d8e:	18fc      	adds	r4, r7, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	0018      	movs	r0, r3
 8009d94:	f003 f8b8 	bl	800cf08 <HOMING_PROCESS_monitoring>
 8009d98:	0003      	movs	r3, r0
 8009d9a:	7023      	strb	r3, [r4, #0]

				break;
 8009d9c:	e20c      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_REP_GET_VERSION :
				status = CAN_Rep_Version();
 8009d9e:	2317      	movs	r3, #23
 8009da0:	18fc      	adds	r4, r7, r3
 8009da2:	f000 fcb9 	bl	800a718 <CAN_Rep_Version>
 8009da6:	0003      	movs	r3, r0
 8009da8:	7023      	strb	r3, [r4, #0]
				break;
 8009daa:	e205      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_CMD_SET_CALIB_ON_OFF:
				memcpy(&valeur_sub_idx_RX_trame, &msg_can.RX.bytes[i][2], 2);
 8009dac:	2316      	movs	r3, #22
 8009dae:	18fb      	adds	r3, r7, r3
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	331a      	adds	r3, #26
 8009db6:	001a      	movs	r2, r3
 8009db8:	4b87      	ldr	r3, [pc, #540]	; (8009fd8 <Can_frame_mgt+0x3d0>)
 8009dba:	18d3      	adds	r3, r2, r3
 8009dbc:	1c59      	adds	r1, r3, #1
 8009dbe:	240c      	movs	r4, #12
 8009dc0:	193b      	adds	r3, r7, r4
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	f003 f919 	bl	800cffc <memcpy>

				if (valeur_sub_idx_RX_trame == SUB_IDX_CALIB_ON){
 8009dca:	193b      	adds	r3, r7, r4
 8009dcc:	2200      	movs	r2, #0
 8009dce:	5e9b      	ldrsh	r3, [r3, r2]
 8009dd0:	2b11      	cmp	r3, #17
 8009dd2:	d10d      	bne.n	8009df0 <Can_frame_mgt+0x1e8>
					inst->flags.status_flag.single.calib_mode = 1;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	795a      	ldrb	r2, [r3, #5]
 8009dd8:	2108      	movs	r1, #8
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	715a      	strb	r2, [r3, #5]
					status = Turn_Off_Motor(inst);
 8009dde:	2317      	movs	r3, #23
 8009de0:	18fc      	adds	r4, r7, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	0018      	movs	r0, r3
 8009de6:	f001 fd25 	bl	800b834 <Turn_Off_Motor>
 8009dea:	0003      	movs	r3, r0
 8009dec:	7023      	strb	r3, [r4, #0]
				}
				else if (valeur_sub_idx_RX_trame == SUB_IDX_CALIB_OFF){
					inst->flags.status_flag.single.calib_mode = 0;
					status = Turn_On_Motor(inst);
				}
				break;
 8009dee:	e1e2      	b.n	800a1b6 <Can_frame_mgt+0x5ae>
				else if (valeur_sub_idx_RX_trame == SUB_IDX_CALIB_OFF){
 8009df0:	230c      	movs	r3, #12
 8009df2:	18fb      	adds	r3, r7, r3
 8009df4:	2200      	movs	r2, #0
 8009df6:	5e9b      	ldrsh	r3, [r3, r2]
 8009df8:	2b12      	cmp	r3, #18
 8009dfa:	d000      	beq.n	8009dfe <Can_frame_mgt+0x1f6>
 8009dfc:	e1db      	b.n	800a1b6 <Can_frame_mgt+0x5ae>
					inst->flags.status_flag.single.calib_mode = 0;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	795a      	ldrb	r2, [r3, #5]
 8009e02:	2108      	movs	r1, #8
 8009e04:	438a      	bics	r2, r1
 8009e06:	715a      	strb	r2, [r3, #5]
					status = Turn_On_Motor(inst);
 8009e08:	2317      	movs	r3, #23
 8009e0a:	18fc      	adds	r4, r7, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f001 fcca 	bl	800b7a8 <Turn_On_Motor>
 8009e14:	0003      	movs	r3, r0
 8009e16:	7023      	strb	r3, [r4, #0]
				break;
 8009e18:	e1cd      	b.n	800a1b6 <Can_frame_mgt+0x5ae>


	////////////////////////////////////////////////////////
			case IDX_CMD_SET_KP_POS :
				inst->control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	238a      	movs	r3, #138	; 0x8a
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	2100      	movs	r1, #0
 8009e22:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	0018      	movs	r0, r3
 8009e28:	f000 fb66 	bl	800a4f8 <SWAP_32BITS>
 8009e2c:	0003      	movs	r3, r0
 8009e2e:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.position, k, inst->control.position.coef.ki, inst->control.position.coef.kd);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	330c      	adds	r3, #12
 8009e38:	0018      	movs	r0, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	699a      	ldr	r2, [r3, #24]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	2117      	movs	r1, #23
 8009e44:	187c      	adds	r4, r7, r1
 8009e46:	6939      	ldr	r1, [r7, #16]
 8009e48:	f7ff fdb5 	bl	80099b6 <PID_SetCoefs>
 8009e4c:	0003      	movs	r3, r0
 8009e4e:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 8009e50:	4a63      	ldr	r2, [pc, #396]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009e52:	23a4      	movs	r3, #164	; 0xa4
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	58d2      	ldr	r2, [r2, r3]
 8009e58:	4b61      	ldr	r3, [pc, #388]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009e5a:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 8009e5c:	4a60      	ldr	r2, [pc, #384]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009e5e:	23a0      	movs	r3, #160	; 0xa0
 8009e60:	005b      	lsls	r3, r3, #1
 8009e62:	2100      	movs	r1, #0
 8009e64:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 8009e66:	4a5e      	ldr	r2, [pc, #376]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009e68:	23a8      	movs	r3, #168	; 0xa8
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	52d1      	strh	r1, [r2, r3]
				break;
 8009e70:	e1a2      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_CMD_SET_KP_SPEED :
				board.control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 8009e72:	4a5b      	ldr	r2, [pc, #364]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009e74:	238a      	movs	r3, #138	; 0x8a
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	2100      	movs	r1, #0
 8009e7a:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 fb3a 	bl	800a4f8 <SWAP_32BITS>
 8009e84:	0003      	movs	r3, r0
 8009e86:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.speed, k, inst->control.speed.coef.ki , inst->control.speed.coef.kd);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	334c      	adds	r3, #76	; 0x4c
 8009e90:	0018      	movs	r0, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9a:	2117      	movs	r1, #23
 8009e9c:	187c      	adds	r4, r7, r1
 8009e9e:	6939      	ldr	r1, [r7, #16]
 8009ea0:	f7ff fd89 	bl	80099b6 <PID_SetCoefs>
 8009ea4:	0003      	movs	r3, r0
 8009ea6:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 8009ea8:	4a4d      	ldr	r2, [pc, #308]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009eaa:	23a4      	movs	r3, #164	; 0xa4
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	58d2      	ldr	r2, [r2, r3]
 8009eb0:	4b4b      	ldr	r3, [pc, #300]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009eb2:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 8009eb4:	4a4a      	ldr	r2, [pc, #296]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009eb6:	23a0      	movs	r3, #160	; 0xa0
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	2100      	movs	r1, #0
 8009ebc:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 8009ebe:	4a48      	ldr	r2, [pc, #288]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009ec0:	23a8      	movs	r3, #168	; 0xa8
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	52d1      	strh	r1, [r2, r3]
				break;
 8009ec8:	e176      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_CMD_SET_KP_TORQUE :
				inst->control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	238a      	movs	r3, #138	; 0x8a
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f000 fb0e 	bl	800a4f8 <SWAP_32BITS>
 8009edc:	0003      	movs	r3, r0
 8009ede:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.voltage, k, inst->control.voltage.coef.ki, inst->control.voltage.coef.kd) ;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	33cc      	adds	r3, #204	; 0xcc
 8009ee8:	0018      	movs	r0, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	22d8      	movs	r2, #216	; 0xd8
 8009eee:	589a      	ldr	r2, [r3, r2]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	21dc      	movs	r1, #220	; 0xdc
 8009ef4:	585b      	ldr	r3, [r3, r1]
 8009ef6:	2117      	movs	r1, #23
 8009ef8:	187c      	adds	r4, r7, r1
 8009efa:	6939      	ldr	r1, [r7, #16]
 8009efc:	f7ff fd5b 	bl	80099b6 <PID_SetCoefs>
 8009f00:	0003      	movs	r3, r0
 8009f02:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 8009f04:	4a36      	ldr	r2, [pc, #216]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f06:	23a4      	movs	r3, #164	; 0xa4
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	58d2      	ldr	r2, [r2, r3]
 8009f0c:	4b34      	ldr	r3, [pc, #208]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f0e:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 8009f10:	4a33      	ldr	r2, [pc, #204]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f12:	23a0      	movs	r3, #160	; 0xa0
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	2100      	movs	r1, #0
 8009f18:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 8009f1a:	4a31      	ldr	r2, [pc, #196]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f1c:	23a8      	movs	r3, #168	; 0xa8
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	2100      	movs	r1, #0
 8009f22:	52d1      	strh	r1, [r2, r3]
				break;
 8009f24:	e148      	b.n	800a1b8 <Can_frame_mgt+0x5b0>


	//////////////////////////////////////////
			case IDX_CMD_SET_KI_POS :
				board.control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 8009f26:	4a2e      	ldr	r2, [pc, #184]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f28:	238a      	movs	r3, #138	; 0x8a
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	0018      	movs	r0, r3
 8009f34:	f000 fae0 	bl	800a4f8 <SWAP_32BITS>
 8009f38:	0003      	movs	r3, r0
 8009f3a:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.position, inst->control.position.coef.kp, k, inst->control.position.coef.kd);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	330c      	adds	r3, #12
 8009f44:	0018      	movs	r0, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6959      	ldr	r1, [r3, #20]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	2217      	movs	r2, #23
 8009f50:	18bc      	adds	r4, r7, r2
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	f7ff fd2f 	bl	80099b6 <PID_SetCoefs>
 8009f58:	0003      	movs	r3, r0
 8009f5a:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 8009f5c:	4a20      	ldr	r2, [pc, #128]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f5e:	23a4      	movs	r3, #164	; 0xa4
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	58d2      	ldr	r2, [r2, r3]
 8009f64:	4b1e      	ldr	r3, [pc, #120]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f66:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 8009f68:	4a1d      	ldr	r2, [pc, #116]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f6a:	23a0      	movs	r3, #160	; 0xa0
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	2100      	movs	r1, #0
 8009f70:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 8009f72:	4a1b      	ldr	r2, [pc, #108]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009f74:	23a8      	movs	r3, #168	; 0xa8
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	2100      	movs	r1, #0
 8009f7a:	52d1      	strh	r1, [r2, r3]
				break;
 8009f7c:	e11c      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_CMD_SET_KI_SPEED :
				inst->control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	238a      	movs	r3, #138	; 0x8a
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	2100      	movs	r1, #0
 8009f86:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f000 fab4 	bl	800a4f8 <SWAP_32BITS>
 8009f90:	0003      	movs	r3, r0
 8009f92:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.speed, inst->control.speed.coef.kp, k, inst->control.speed.coef.kd);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	334c      	adds	r3, #76	; 0x4c
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa6:	2217      	movs	r2, #23
 8009fa8:	18bc      	adds	r4, r7, r2
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	f7ff fd03 	bl	80099b6 <PID_SetCoefs>
 8009fb0:	0003      	movs	r3, r0
 8009fb2:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 8009fb4:	4a0a      	ldr	r2, [pc, #40]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009fb6:	23a4      	movs	r3, #164	; 0xa4
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	58d2      	ldr	r2, [r2, r3]
 8009fbc:	4b08      	ldr	r3, [pc, #32]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009fbe:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 8009fc0:	4a07      	ldr	r2, [pc, #28]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009fc2:	23a0      	movs	r3, #160	; 0xa0
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 8009fca:	4a05      	ldr	r2, [pc, #20]	; (8009fe0 <Can_frame_mgt+0x3d8>)
 8009fcc:	23a8      	movs	r3, #168	; 0xa8
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	52d1      	strh	r1, [r2, r3]
				break;
 8009fd4:	e0f0      	b.n	800a1b8 <Can_frame_mgt+0x5b0>
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	20000778 	.word	0x20000778
 8009fdc:	080101c0 	.word	0x080101c0
 8009fe0:	20000508 	.word	0x20000508

			case IDX_CMD_SET_KI_TORQUE :
				inst->control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	238a      	movs	r3, #138	; 0x8a
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	2100      	movs	r1, #0
 8009fec:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	f000 fa81 	bl	800a4f8 <SWAP_32BITS>
 8009ff6:	0003      	movs	r3, r0
 8009ff8:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.voltage, inst->control.voltage.coef.kp, k, inst->control.voltage.coef.kd) ;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	33cc      	adds	r3, #204	; 0xcc
 800a002:	0018      	movs	r0, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	22d4      	movs	r2, #212	; 0xd4
 800a008:	5899      	ldr	r1, [r3, r2]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	22dc      	movs	r2, #220	; 0xdc
 800a00e:	589b      	ldr	r3, [r3, r2]
 800a010:	2217      	movs	r2, #23
 800a012:	18bc      	adds	r4, r7, r2
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	f7ff fcce 	bl	80099b6 <PID_SetCoefs>
 800a01a:	0003      	movs	r3, r0
 800a01c:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 800a01e:	4a78      	ldr	r2, [pc, #480]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a020:	23a4      	movs	r3, #164	; 0xa4
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	58d2      	ldr	r2, [r2, r3]
 800a026:	4b76      	ldr	r3, [pc, #472]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a028:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 800a02a:	4a75      	ldr	r2, [pc, #468]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a02c:	23a0      	movs	r3, #160	; 0xa0
 800a02e:	005b      	lsls	r3, r3, #1
 800a030:	2100      	movs	r1, #0
 800a032:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 800a034:	4a72      	ldr	r2, [pc, #456]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a036:	23a8      	movs	r3, #168	; 0xa8
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	2100      	movs	r1, #0
 800a03c:	52d1      	strh	r1, [r2, r3]
				break;
 800a03e:	e0bb      	b.n	800a1b8 <Can_frame_mgt+0x5b0>


	///////////////////////////////////////
			case IDX_CMD_SET_KD_POS :
				inst->control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	238a      	movs	r3, #138	; 0x8a
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	2100      	movs	r1, #0
 800a048:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	0018      	movs	r0, r3
 800a04e:	f000 fa53 	bl	800a4f8 <SWAP_32BITS>
 800a052:	0003      	movs	r3, r0
 800a054:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.position, inst->control.position.coef.kp, inst->control.position.coef.ki, k);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	330c      	adds	r3, #12
 800a05e:	0018      	movs	r0, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6959      	ldr	r1, [r3, #20]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699a      	ldr	r2, [r3, #24]
 800a068:	2317      	movs	r3, #23
 800a06a:	18fc      	adds	r4, r7, r3
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f7ff fca2 	bl	80099b6 <PID_SetCoefs>
 800a072:	0003      	movs	r3, r0
 800a074:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 800a076:	4a62      	ldr	r2, [pc, #392]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a078:	23a4      	movs	r3, #164	; 0xa4
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	58d2      	ldr	r2, [r2, r3]
 800a07e:	4b60      	ldr	r3, [pc, #384]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a080:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 800a082:	4a5f      	ldr	r2, [pc, #380]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a084:	23a0      	movs	r3, #160	; 0xa0
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	2100      	movs	r1, #0
 800a08a:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 800a08c:	4a5c      	ldr	r2, [pc, #368]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a08e:	23a8      	movs	r3, #168	; 0xa8
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	2100      	movs	r1, #0
 800a094:	52d1      	strh	r1, [r2, r3]
				break;
 800a096:	e08f      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_CMD_SET_KD_SPEED :
				inst->control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	238a      	movs	r3, #138	; 0x8a
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	2100      	movs	r1, #0
 800a0a0:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	f000 fa27 	bl	800a4f8 <SWAP_32BITS>
 800a0aa:	0003      	movs	r3, r0
 800a0ac:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.speed, inst->control.speed.coef.kp, inst->control.speed.coef.ki ,k);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	334c      	adds	r3, #76	; 0x4c
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0c0:	2317      	movs	r3, #23
 800a0c2:	18fc      	adds	r4, r7, r3
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f7ff fc76 	bl	80099b6 <PID_SetCoefs>
 800a0ca:	0003      	movs	r3, r0
 800a0cc:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 800a0ce:	4a4c      	ldr	r2, [pc, #304]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a0d0:	23a4      	movs	r3, #164	; 0xa4
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	58d2      	ldr	r2, [r2, r3]
 800a0d6:	4b4a      	ldr	r3, [pc, #296]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a0d8:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 800a0da:	4a49      	ldr	r2, [pc, #292]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a0dc:	23a0      	movs	r3, #160	; 0xa0
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 800a0e4:	4a46      	ldr	r2, [pc, #280]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a0e6:	23a8      	movs	r3, #168	; 0xa8
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	52d1      	strh	r1, [r2, r3]
				break;
 800a0ee:	e063      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			case IDX_CMD_SET_KD_TORQUE :
				inst->control.duty_cycle = 0;//Pour que le moteur ne tourne pas
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	238a      	movs	r3, #138	; 0x8a
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	50d1      	str	r1, [r2, r3]

				d.integer.i32 = SWAP_32BITS(d.integer.i32);
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f000 f9fb 	bl	800a4f8 <SWAP_32BITS>
 800a102:	0003      	movs	r3, r0
 800a104:	60bb      	str	r3, [r7, #8]
				k = d.d_float;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	613b      	str	r3, [r7, #16]

				status = PID_SetCoefs(&inst->control.voltage, inst->control.voltage.coef.kp, inst->control.voltage.coef.ki, k) ;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	33cc      	adds	r3, #204	; 0xcc
 800a10e:	0018      	movs	r0, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	22d4      	movs	r2, #212	; 0xd4
 800a114:	5899      	ldr	r1, [r3, r2]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	22d8      	movs	r2, #216	; 0xd8
 800a11a:	589a      	ldr	r2, [r3, r2]
 800a11c:	2317      	movs	r3, #23
 800a11e:	18fc      	adds	r4, r7, r3
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f7ff fc48 	bl	80099b6 <PID_SetCoefs>
 800a126:	0003      	movs	r3, r0
 800a128:	7023      	strb	r3, [r4, #0]
				board.control.position.setpoint = board.motor.pos.position;
 800a12a:	4a35      	ldr	r2, [pc, #212]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a12c:	23a4      	movs	r3, #164	; 0xa4
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	58d2      	ldr	r2, [r2, r3]
 800a132:	4b33      	ldr	r3, [pc, #204]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a134:	60da      	str	r2, [r3, #12]
				board.motor.speed.rpm =0;
 800a136:	4a32      	ldr	r2, [pc, #200]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a138:	23a0      	movs	r3, #160	; 0xa0
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	2100      	movs	r1, #0
 800a13e:	50d1      	str	r1, [r2, r3]
				board.motor.torque = 0;
 800a140:	4a2f      	ldr	r2, [pc, #188]	; (800a200 <Can_frame_mgt+0x5f8>)
 800a142:	23a8      	movs	r3, #168	; 0xa8
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	2100      	movs	r1, #0
 800a148:	52d1      	strh	r1, [r2, r3]
				break;
 800a14a:	e035      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

	///////////////////////////////////////////

			case IDX_CMD_AUTO_CALIB :

				inst->flags.status_flag.single.auto_calib_status = In_progress;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	795a      	ldrb	r2, [r3, #5]
 800a150:	2106      	movs	r1, #6
 800a152:	438a      	bics	r2, r1
 800a154:	1c11      	adds	r1, r2, #0
 800a156:	2202      	movs	r2, #2
 800a158:	430a      	orrs	r2, r1
 800a15a:	715a      	strb	r2, [r3, #5]
				
				inst->sensor.fx.force.pente = 1.0/( (float)d.integer.msb ); 	//On inverse la pente pour multiplier au lieu de diviser
 800a15c:	2408      	movs	r4, #8
 800a15e:	193b      	adds	r3, r7, r4
 800a160:	2200      	movs	r2, #0
 800a162:	5e9b      	ldrsh	r3, [r3, r2]
 800a164:	0018      	movs	r0, r3
 800a166:	f7f7 f87d 	bl	8001264 <__aeabi_i2f>
 800a16a:	1c03      	adds	r3, r0, #0
 800a16c:	1c19      	adds	r1, r3, #0
 800a16e:	20fe      	movs	r0, #254	; 0xfe
 800a170:	0580      	lsls	r0, r0, #22
 800a172:	f7f6 fba5 	bl	80008c0 <__aeabi_fdiv>
 800a176:	1c03      	adds	r3, r0, #0
 800a178:	1c19      	adds	r1, r3, #0
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	23e4      	movs	r3, #228	; 0xe4
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	50d1      	str	r1, [r2, r3]
				inst->sensor.fz.force.pente = 1.0/( (float)d.integer.lsb );	//On gagne du temps de calcul lors de la tache ADC
 800a182:	193b      	adds	r3, r7, r4
 800a184:	2202      	movs	r2, #2
 800a186:	5e9b      	ldrsh	r3, [r3, r2]
 800a188:	0018      	movs	r0, r3
 800a18a:	f7f7 f86b 	bl	8001264 <__aeabi_i2f>
 800a18e:	1c03      	adds	r3, r0, #0
 800a190:	1c19      	adds	r1, r3, #0
 800a192:	20fe      	movs	r0, #254	; 0xfe
 800a194:	0580      	lsls	r0, r0, #22
 800a196:	f7f6 fb93 	bl	80008c0 <__aeabi_fdiv>
 800a19a:	1c03      	adds	r3, r0, #0
 800a19c:	1c19      	adds	r1, r3, #0
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	2381      	movs	r3, #129	; 0x81
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	50d1      	str	r1, [r2, r3]
			
				break;
 800a1a6:	e007      	b.n	800a1b8 <Can_frame_mgt+0x5b0>

			default:

				status = HAL_ERROR;
 800a1a8:	2317      	movs	r3, #23
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	701a      	strb	r2, [r3, #0]
				//TODO: Add case
				break;
 800a1b0:	e002      	b.n	800a1b8 <Can_frame_mgt+0x5b0>
				break;
 800a1b2:	46c0      	nop			; (mov r8, r8)
 800a1b4:	e000      	b.n	800a1b8 <Can_frame_mgt+0x5b0>
				break;
 800a1b6:	46c0      	nop			; (mov r8, r8)
			}

			//Reset du buffer
			memset(&msg_can.RX.bytes[i][0], 0, sizeof(msg_can.RX.bytes[i]));
 800a1b8:	2416      	movs	r4, #22
 800a1ba:	193b      	adds	r3, r7, r4
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	3303      	adds	r3, #3
 800a1c0:	00da      	lsls	r2, r3, #3
 800a1c2:	4b10      	ldr	r3, [pc, #64]	; (800a204 <Can_frame_mgt+0x5fc>)
 800a1c4:	18d3      	adds	r3, r2, r3
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	2208      	movs	r2, #8
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f002 ff1e 	bl	800d00e <memset>

			i++;
 800a1d2:	193b      	adds	r3, r7, r4
 800a1d4:	781a      	ldrb	r2, [r3, #0]
 800a1d6:	193b      	adds	r3, r7, r4
 800a1d8:	3201      	adds	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]

		}while( i < msg_can.RX.idx);
 800a1dc:	193b      	adds	r3, r7, r4
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	4a08      	ldr	r2, [pc, #32]	; (800a204 <Can_frame_mgt+0x5fc>)
 800a1e2:	7e12      	ldrb	r2, [r2, #24]
 800a1e4:	b252      	sxtb	r2, r2
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	da00      	bge.n	800a1ec <Can_frame_mgt+0x5e4>
 800a1ea:	e51d      	b.n	8009c28 <Can_frame_mgt+0x20>

		msg_can.RX.idx = 0;
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <Can_frame_mgt+0x5fc>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	761a      	strb	r2, [r3, #24]
    }
	return status;
 800a1f2:	2317      	movs	r3, #23
 800a1f4:	18fb      	adds	r3, r7, r3
 800a1f6:	781b      	ldrb	r3, [r3, #0]
}
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	b006      	add	sp, #24
 800a1fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a200:	20000508 	.word	0x20000508
 800a204:	20000778 	.word	0x20000778

0800a208 <Set_TxHeader>:
 * in: uint16_t can ID
 *
 */
HAL_StatusTypeDef
Set_TxHeader( CAN_TxHeaderTypeDef * inst, MSG_TYPE_t id )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	000a      	movs	r2, r1
 800a212:	1cbb      	adds	r3, r7, #2
 800a214:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 800a216:	230f      	movs	r3, #15
 800a218:	18fb      	adds	r3, r7, r3
 800a21a:	2201      	movs	r2, #1
 800a21c:	701a      	strb	r2, [r3, #0]

	if( (id == TPDO1 || id == TPDO2 || id == RESPONSE) && (inst != NULL) )
 800a21e:	1cbb      	adds	r3, r7, #2
 800a220:	881a      	ldrh	r2, [r3, #0]
 800a222:	23c0      	movs	r3, #192	; 0xc0
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	429a      	cmp	r2, r3
 800a228:	d00b      	beq.n	800a242 <Set_TxHeader+0x3a>
 800a22a:	1cbb      	adds	r3, r7, #2
 800a22c:	881a      	ldrh	r2, [r3, #0]
 800a22e:	23a0      	movs	r3, #160	; 0xa0
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	429a      	cmp	r2, r3
 800a234:	d005      	beq.n	800a242 <Set_TxHeader+0x3a>
 800a236:	1cbb      	adds	r3, r7, #2
 800a238:	881a      	ldrh	r2, [r3, #0]
 800a23a:	23c0      	movs	r3, #192	; 0xc0
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	429a      	cmp	r2, r3
 800a240:	d119      	bne.n	800a276 <Set_TxHeader+0x6e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d016      	beq.n	800a276 <Set_TxHeader+0x6e>
	{
		inst->DLC=DLC_DATA_LENGTH; // Précise le nombre d'octets de données que la trame transporte ( De 0 à 8 ). ici 8 byte
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2208      	movs	r2, #8
 800a24c:	611a      	str	r2, [r3, #16]
		inst->IDE=CAN_ID_STD; //set identifier to standard (11bits ID)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	609a      	str	r2, [r3, #8]
		inst->RTR=CAN_RTR_DATA; //set data type to remote transmission request?
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	60da      	str	r2, [r3, #12]
		inst->StdId = id + board.number;// Détermine l'adresse du périphérique au quel la trame est destiné.
 800a25a:	1cbb      	adds	r3, r7, #2
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	4909      	ldr	r1, [pc, #36]	; (800a284 <Set_TxHeader+0x7c>)
 800a260:	2288      	movs	r2, #136	; 0x88
 800a262:	0092      	lsls	r2, r2, #2
 800a264:	5c8a      	ldrb	r2, [r1, r2]
 800a266:	189b      	adds	r3, r3, r2
 800a268:	001a      	movs	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]

		status = HAL_OK;
 800a26e:	230f      	movs	r3, #15
 800a270:	18fb      	adds	r3, r7, r3
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]
	}


	return status;
 800a276:	230f      	movs	r3, #15
 800a278:	18fb      	adds	r3, r7, r3
 800a27a:	781b      	ldrb	r3, [r3, #0]
}
 800a27c:	0018      	movs	r0, r3
 800a27e:	46bd      	mov	sp, r7
 800a280:	b004      	add	sp, #16
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20000508 	.word	0x20000508

0800a288 <Set_Payload_TPDO1>:
/*
 * function that copy data into the payload
 */
HAL_StatusTypeDef
Set_Payload_TPDO1 ( Global_Struct_t * inst, uint8_t * tab )
{
 800a288:	b5b0      	push	{r4, r5, r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 800a292:	250f      	movs	r5, #15
 800a294:	197b      	adds	r3, r7, r5
 800a296:	2201      	movs	r2, #1
 800a298:	701a      	strb	r2, [r3, #0]

	if( tab != NULL && inst != NULL)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d035      	beq.n	800a30c <Set_Payload_TPDO1+0x84>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d032      	beq.n	800a30c <Set_Payload_TPDO1+0x84>
	{
		//====================Swap des données====================
		//swap de l'index
		int16_t	speed_torque = ( int16_t)inst->motor.speed.rpm;
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	23a0      	movs	r3, #160	; 0xa0
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	58d3      	ldr	r3, [r2, r3]
 800a2ae:	1c18      	adds	r0, r3, #0
 800a2b0:	f7f6 ffb8 	bl	8001224 <__aeabi_f2iz>
 800a2b4:	0003      	movs	r3, r0
 800a2b6:	b21a      	sxth	r2, r3
 800a2b8:	240c      	movs	r4, #12
 800a2ba:	193b      	adds	r3, r7, r4
 800a2bc:	801a      	strh	r2, [r3, #0]
		memcpy(tab,  &speed_torque , sizeof(speed_torque));
 800a2be:	1939      	adds	r1, r7, r4
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f002 fe99 	bl	800cffc <memcpy>
		tab+=sizeof(speed_torque);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	3302      	adds	r3, #2
 800a2ce:	603b      	str	r3, [r7, #0]

		//sub-index
		speed_torque = inst->motor.torque;
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	23a8      	movs	r3, #168	; 0xa8
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	5ed2      	ldrsh	r2, [r2, r3]
 800a2d8:	193b      	adds	r3, r7, r4
 800a2da:	801a      	strh	r2, [r3, #0]
		memcpy(tab,  &speed_torque , sizeof(speed_torque));
 800a2dc:	1939      	adds	r1, r7, r4
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f002 fe8a 	bl	800cffc <memcpy>
		tab+=sizeof(speed_torque);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	3302      	adds	r3, #2
 800a2ec:	603b      	str	r3, [r7, #0]

		//swap de la data
		int32_t pos = inst->motor.pos.position;
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	23a4      	movs	r3, #164	; 0xa4
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	58d3      	ldr	r3, [r2, r3]
 800a2f6:	60bb      	str	r3, [r7, #8]
		memcpy(tab,  &pos , sizeof(pos));
 800a2f8:	2308      	movs	r3, #8
 800a2fa:	18f9      	adds	r1, r7, r3
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2204      	movs	r2, #4
 800a300:	0018      	movs	r0, r3
 800a302:	f002 fe7b 	bl	800cffc <memcpy>

		status = HAL_OK;
 800a306:	197b      	adds	r3, r7, r5
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800a30c:	230f      	movs	r3, #15
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	781b      	ldrb	r3, [r3, #0]
}
 800a312:	0018      	movs	r0, r3
 800a314:	46bd      	mov	sp, r7
 800a316:	b004      	add	sp, #16
 800a318:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a31c <Set_Payload_TPDO2>:
/*
 * function that copy data into the payload
 */
HAL_StatusTypeDef
Set_Payload_TPDO2 ( Global_Struct_t * inst, uint8_t * tab )
{
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 800a326:	230f      	movs	r3, #15
 800a328:	18fb      	adds	r3, r7, r3
 800a32a:	2201      	movs	r2, #1
 800a32c:	701a      	strb	r2, [r3, #0]

	if( tab != NULL && inst != NULL)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d100      	bne.n	800a336 <Set_Payload_TPDO2+0x1a>
 800a334:	e0c1      	b.n	800a4ba <Set_Payload_TPDO2+0x19e>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d100      	bne.n	800a33e <Set_Payload_TPDO2+0x22>
 800a33c:	e0bd      	b.n	800a4ba <Set_Payload_TPDO2+0x19e>
	{
		int16_t dataX;
		int16_t dataZ;

		if(inst->flags.status_flag.single.calib_mode) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	795b      	ldrb	r3, [r3, #5]
 800a342:	2208      	movs	r2, #8
 800a344:	4013      	ands	r3, r2
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d036      	beq.n	800a3ba <Set_Payload_TPDO2+0x9e>
			dataX = (int16_t)inst->sensor.fx.adc.moy * 100.0;
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	23e2      	movs	r3, #226	; 0xe2
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	58d3      	ldr	r3, [r2, r3]
 800a354:	1c18      	adds	r0, r3, #0
 800a356:	f7f6 ff65 	bl	8001224 <__aeabi_f2iz>
 800a35a:	0003      	movs	r3, r0
 800a35c:	b21b      	sxth	r3, r3
 800a35e:	0018      	movs	r0, r3
 800a360:	f7f8 fda0 	bl	8002ea4 <__aeabi_i2d>
 800a364:	2200      	movs	r2, #0
 800a366:	4b58      	ldr	r3, [pc, #352]	; (800a4c8 <Set_Payload_TPDO2+0x1ac>)
 800a368:	f7f7 ff4a 	bl	8002200 <__aeabi_dmul>
 800a36c:	0002      	movs	r2, r0
 800a36e:	000b      	movs	r3, r1
 800a370:	0010      	movs	r0, r2
 800a372:	0019      	movs	r1, r3
 800a374:	f7f8 fd60 	bl	8002e38 <__aeabi_d2iz>
 800a378:	0003      	movs	r3, r0
 800a37a:	b21a      	sxth	r2, r3
 800a37c:	230c      	movs	r3, #12
 800a37e:	18fb      	adds	r3, r7, r3
 800a380:	801a      	strh	r2, [r3, #0]
			dataZ = (int16_t)inst->sensor.fz.adc.moy * 100.0;
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	58d3      	ldr	r3, [r2, r3]
 800a38a:	1c18      	adds	r0, r3, #0
 800a38c:	f7f6 ff4a 	bl	8001224 <__aeabi_f2iz>
 800a390:	0003      	movs	r3, r0
 800a392:	b21b      	sxth	r3, r3
 800a394:	0018      	movs	r0, r3
 800a396:	f7f8 fd85 	bl	8002ea4 <__aeabi_i2d>
 800a39a:	2200      	movs	r2, #0
 800a39c:	4b4a      	ldr	r3, [pc, #296]	; (800a4c8 <Set_Payload_TPDO2+0x1ac>)
 800a39e:	f7f7 ff2f 	bl	8002200 <__aeabi_dmul>
 800a3a2:	0002      	movs	r2, r0
 800a3a4:	000b      	movs	r3, r1
 800a3a6:	0010      	movs	r0, r2
 800a3a8:	0019      	movs	r1, r3
 800a3aa:	f7f8 fd45 	bl	8002e38 <__aeabi_d2iz>
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	b21a      	sxth	r2, r3
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	18fb      	adds	r3, r7, r3
 800a3b6:	801a      	strh	r2, [r3, #0]
 800a3b8:	e035      	b.n	800a426 <Set_Payload_TPDO2+0x10a>
		}else{
			dataX = (int16_t)inst->sensor.fx.force.f * 100.0;
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	23e8      	movs	r3, #232	; 0xe8
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	58d3      	ldr	r3, [r2, r3]
 800a3c2:	1c18      	adds	r0, r3, #0
 800a3c4:	f7f6 ff2e 	bl	8001224 <__aeabi_f2iz>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	b21b      	sxth	r3, r3
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f7f8 fd69 	bl	8002ea4 <__aeabi_i2d>
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	4b3c      	ldr	r3, [pc, #240]	; (800a4c8 <Set_Payload_TPDO2+0x1ac>)
 800a3d6:	f7f7 ff13 	bl	8002200 <__aeabi_dmul>
 800a3da:	0002      	movs	r2, r0
 800a3dc:	000b      	movs	r3, r1
 800a3de:	0010      	movs	r0, r2
 800a3e0:	0019      	movs	r1, r3
 800a3e2:	f7f8 fd29 	bl	8002e38 <__aeabi_d2iz>
 800a3e6:	0003      	movs	r3, r0
 800a3e8:	b21a      	sxth	r2, r3
 800a3ea:	230c      	movs	r3, #12
 800a3ec:	18fb      	adds	r3, r7, r3
 800a3ee:	801a      	strh	r2, [r3, #0]
			dataZ = (int16_t)inst->sensor.fz.force.f * 100.0;
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	2383      	movs	r3, #131	; 0x83
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	58d3      	ldr	r3, [r2, r3]
 800a3f8:	1c18      	adds	r0, r3, #0
 800a3fa:	f7f6 ff13 	bl	8001224 <__aeabi_f2iz>
 800a3fe:	0003      	movs	r3, r0
 800a400:	b21b      	sxth	r3, r3
 800a402:	0018      	movs	r0, r3
 800a404:	f7f8 fd4e 	bl	8002ea4 <__aeabi_i2d>
 800a408:	2200      	movs	r2, #0
 800a40a:	4b2f      	ldr	r3, [pc, #188]	; (800a4c8 <Set_Payload_TPDO2+0x1ac>)
 800a40c:	f7f7 fef8 	bl	8002200 <__aeabi_dmul>
 800a410:	0002      	movs	r2, r0
 800a412:	000b      	movs	r3, r1
 800a414:	0010      	movs	r0, r2
 800a416:	0019      	movs	r1, r3
 800a418:	f7f8 fd0e 	bl	8002e38 <__aeabi_d2iz>
 800a41c:	0003      	movs	r3, r0
 800a41e:	b21a      	sxth	r2, r3
 800a420:	230a      	movs	r3, #10
 800a422:	18fb      	adds	r3, r7, r3
 800a424:	801a      	strh	r2, [r3, #0]
		}

		//====================Swap des données====================
		//swap de l'index
		memcpy(tab , &dataX , sizeof(dataX));
 800a426:	230c      	movs	r3, #12
 800a428:	18f9      	adds	r1, r7, r3
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2202      	movs	r2, #2
 800a42e:	0018      	movs	r0, r3
 800a430:	f002 fde4 	bl	800cffc <memcpy>
		tab += sizeof(dataX);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	3302      	adds	r3, #2
 800a438:	603b      	str	r3, [r7, #0]

		//sub-index
		memcpy(tab , &dataZ , sizeof(dataZ));
 800a43a:	230a      	movs	r3, #10
 800a43c:	18f9      	adds	r1, r7, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2202      	movs	r2, #2
 800a442:	0018      	movs	r0, r3
 800a444:	f002 fdda 	bl	800cffc <memcpy>
		tab += sizeof(dataZ);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	3302      	adds	r3, #2
 800a44c:	603b      	str	r3, [r7, #0]

		//swap de la data
		uint8_t d8 = inst->control.ctrl_type;
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	2386      	movs	r3, #134	; 0x86
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	5cd2      	ldrb	r2, [r2, r3]
 800a456:	2409      	movs	r4, #9
 800a458:	193b      	adds	r3, r7, r4
 800a45a:	701a      	strb	r2, [r3, #0]
 800a45c:	193b      	adds	r3, r7, r4
 800a45e:	781a      	ldrb	r2, [r3, #0]
		memcpy(tab,  &d8 , sizeof(d8));
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	701a      	strb	r2, [r3, #0]

		tab++;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	3301      	adds	r3, #1
 800a468:	603b      	str	r3, [r7, #0]

		d8 = inst->temperature;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	1c18      	adds	r0, r3, #0
 800a470:	f7f6 f852 	bl	8000518 <__aeabi_f2uiz>
 800a474:	0003      	movs	r3, r0
 800a476:	b2da      	uxtb	r2, r3
 800a478:	0021      	movs	r1, r4
 800a47a:	187b      	adds	r3, r7, r1
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	187b      	adds	r3, r7, r1
 800a480:	781a      	ldrb	r2, [r3, #0]
		memcpy(tab,  &d8 , sizeof(d8));
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	701a      	strb	r2, [r3, #0]

		tab++;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	3301      	adds	r3, #1
 800a48a:	603b      	str	r3, [r7, #0]

		d8 = inst->flags.error_flag.all;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	791a      	ldrb	r2, [r3, #4]
 800a490:	187b      	adds	r3, r7, r1
 800a492:	701a      	strb	r2, [r3, #0]
 800a494:	187b      	adds	r3, r7, r1
 800a496:	781a      	ldrb	r2, [r3, #0]
		memcpy(tab,  &d8 , sizeof(d8));
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	701a      	strb	r2, [r3, #0]

		tab++;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	603b      	str	r3, [r7, #0]

		d8 = inst->flags.status_flag.all;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	795a      	ldrb	r2, [r3, #5]
 800a4a6:	187b      	adds	r3, r7, r1
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	187b      	adds	r3, r7, r1
 800a4ac:	781a      	ldrb	r2, [r3, #0]
		memcpy(tab, &d8 , sizeof(d8));
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	701a      	strb	r2, [r3, #0]

		status = HAL_OK;
 800a4b2:	230f      	movs	r3, #15
 800a4b4:	18fb      	adds	r3, r7, r3
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800a4ba:	230f      	movs	r3, #15
 800a4bc:	18fb      	adds	r3, r7, r3
 800a4be:	781b      	ldrb	r3, [r3, #0]
}
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	b005      	add	sp, #20
 800a4c6:	bd90      	pop	{r4, r7, pc}
 800a4c8:	40590000 	.word	0x40590000

0800a4cc <SWAP_16BITS>:
//     GLOBAL Functions
// ==================================================

int16_t
SWAP_16BITS( int16_t x)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	0002      	movs	r2, r0
 800a4d4:	1dbb      	adds	r3, r7, #6
 800a4d6:	801a      	strh	r2, [r3, #0]
	return  ( ( ( x << 8 ) | ( ( x >> 8 ) & 0xFF ) ) & 0xffff );
 800a4d8:	1dbb      	adds	r3, r7, #6
 800a4da:	2200      	movs	r2, #0
 800a4dc:	5e9b      	ldrsh	r3, [r3, r2]
 800a4de:	021b      	lsls	r3, r3, #8
 800a4e0:	b21a      	sxth	r2, r3
 800a4e2:	1dbb      	adds	r3, r7, #6
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	0a1b      	lsrs	r3, r3, #8
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	b21b      	sxth	r3, r3
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	b21b      	sxth	r3, r3
}
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	b002      	add	sp, #8
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <SWAP_32BITS>:

int32_t
SWAP_32BITS( int32_t x)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
	return ( ( ( ( x >> 24 ) & 0xff       ) | \
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	0e1b      	lsrs	r3, r3, #24
 800a504:	0019      	movs	r1, r3
            ( ( x <<  8 ) & 0xff0000   ) | \
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	021a      	lsls	r2, r3, #8
 800a50a:	23ff      	movs	r3, #255	; 0xff
 800a50c:	041b      	lsls	r3, r3, #16
 800a50e:	4013      	ands	r3, r2
	return ( ( ( ( x >> 24 ) & 0xff       ) | \
 800a510:	000a      	movs	r2, r1
 800a512:	431a      	orrs	r2, r3
            ( ( x >>  8 ) & 0xff00     ) | \
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	1219      	asrs	r1, r3, #8
 800a518:	23ff      	movs	r3, #255	; 0xff
 800a51a:	021b      	lsls	r3, r3, #8
 800a51c:	400b      	ands	r3, r1
            ( ( x <<  8 ) & 0xff0000   ) | \
 800a51e:	4313      	orrs	r3, r2
 800a520:	001a      	movs	r2, r3
            ( ( x << 24 ) & 0xff000000 ) ) & 0xffffffff );
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	061b      	lsls	r3, r3, #24
 800a526:	4313      	orrs	r3, r2
}
 800a528:	0018      	movs	r0, r3
 800a52a:	46bd      	mov	sp, r7
 800a52c:	b002      	add	sp, #8
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <CAN_TPDO1_MSG>:


HAL_StatusTypeDef
CAN_TPDO1_MSG( Global_Struct_t * inst )
{
 800a530:	b5b0      	push	{r4, r5, r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 800a538:	250f      	movs	r5, #15
 800a53a:	197b      	adds	r3, r7, r5
 800a53c:	2201      	movs	r2, #1
 800a53e:	701a      	strb	r2, [r3, #0]

	if(inst != NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d060      	beq.n	800a608 <CAN_TPDO1_MSG+0xd8>
	{
		//Set TPDO Header
		status = Set_TxHeader( &pTxHeader, TPDO1 );
 800a546:	197c      	adds	r4, r7, r5
 800a548:	23c0      	movs	r3, #192	; 0xc0
 800a54a:	005a      	lsls	r2, r3, #1
 800a54c:	4b32      	ldr	r3, [pc, #200]	; (800a618 <CAN_TPDO1_MSG+0xe8>)
 800a54e:	0011      	movs	r1, r2
 800a550:	0018      	movs	r0, r3
 800a552:	f7ff fe59 	bl	800a208 <Set_TxHeader>
 800a556:	0003      	movs	r3, r0
 800a558:	7023      	strb	r3, [r4, #0]

		//Set TPDO Payload
		status |= Set_Payload_TPDO1( inst, &msg_can.TX.TPDO[0][0] );
 800a55a:	4a30      	ldr	r2, [pc, #192]	; (800a61c <CAN_TPDO1_MSG+0xec>)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	0011      	movs	r1, r2
 800a560:	0018      	movs	r0, r3
 800a562:	f7ff fe91 	bl	800a288 <Set_Payload_TPDO1>
 800a566:	0003      	movs	r3, r0
 800a568:	0019      	movs	r1, r3
 800a56a:	197b      	adds	r3, r7, r5
 800a56c:	197a      	adds	r2, r7, r5
 800a56e:	7812      	ldrb	r2, [r2, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	701a      	strb	r2, [r3, #0]

		uint32_t TxMailbox=0;
 800a574:	2300      	movs	r3, #0
 800a576:	60bb      	str	r3, [r7, #8]
		do{

			if (((hcan.Instance->TSR & CAN_TSR_TME0) == 0U) &&
 800a578:	4b29      	ldr	r3, [pc, #164]	; (800a620 <CAN_TPDO1_MSG+0xf0>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	689a      	ldr	r2, [r3, #8]
 800a57e:	2380      	movs	r3, #128	; 0x80
 800a580:	04db      	lsls	r3, r3, #19
 800a582:	4013      	ands	r3, r2
 800a584:	d111      	bne.n	800a5aa <CAN_TPDO1_MSG+0x7a>
				((hcan.Instance->TSR & CAN_TSR_TME1) == 0U) &&
 800a586:	4b26      	ldr	r3, [pc, #152]	; (800a620 <CAN_TPDO1_MSG+0xf0>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	2380      	movs	r3, #128	; 0x80
 800a58e:	051b      	lsls	r3, r3, #20
 800a590:	4013      	ands	r3, r2
			if (((hcan.Instance->TSR & CAN_TSR_TME0) == 0U) &&
 800a592:	d10a      	bne.n	800a5aa <CAN_TPDO1_MSG+0x7a>
				((hcan.Instance->TSR & CAN_TSR_TME2) == 0U))
 800a594:	4b22      	ldr	r3, [pc, #136]	; (800a620 <CAN_TPDO1_MSG+0xf0>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689a      	ldr	r2, [r3, #8]
 800a59a:	2380      	movs	r3, #128	; 0x80
 800a59c:	055b      	lsls	r3, r3, #21
 800a59e:	4013      	ands	r3, r2
				((hcan.Instance->TSR & CAN_TSR_TME1) == 0U) &&
 800a5a0:	d103      	bne.n	800a5aa <CAN_TPDO1_MSG+0x7a>
			{
				(void)HAL_Delay(1);
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	f7f9 f97e 	bl	80038a4 <HAL_Delay>
 800a5a8:	e01c      	b.n	800a5e4 <CAN_TPDO1_MSG+0xb4>
			}
			else
			{
				// Check Tx Mailbox 0 status
				if ((hcan.Instance->TSR & CAN_TSR_TME0) != 0U)
 800a5aa:	4b1d      	ldr	r3, [pc, #116]	; (800a620 <CAN_TPDO1_MSG+0xf0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689a      	ldr	r2, [r3, #8]
 800a5b0:	2380      	movs	r3, #128	; 0x80
 800a5b2:	04db      	lsls	r3, r3, #19
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	d002      	beq.n	800a5be <CAN_TPDO1_MSG+0x8e>
				{
					TxMailbox = CAN_TX_MAILBOX0;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	60bb      	str	r3, [r7, #8]
 800a5bc:	e012      	b.n	800a5e4 <CAN_TPDO1_MSG+0xb4>
				}
				// Check Tx Mailbox 1 status
				else if ((hcan.Instance->TSR & CAN_TSR_TME1) != 0U)
 800a5be:	4b18      	ldr	r3, [pc, #96]	; (800a620 <CAN_TPDO1_MSG+0xf0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	2380      	movs	r3, #128	; 0x80
 800a5c6:	051b      	lsls	r3, r3, #20
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	d002      	beq.n	800a5d2 <CAN_TPDO1_MSG+0xa2>
				{
					TxMailbox = CAN_TX_MAILBOX1;
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	60bb      	str	r3, [r7, #8]
 800a5d0:	e008      	b.n	800a5e4 <CAN_TPDO1_MSG+0xb4>
				}
				// Check Tx Mailbox 2 status
				else if ((hcan.Instance->TSR & CAN_TSR_TME2) != 0U)
 800a5d2:	4b13      	ldr	r3, [pc, #76]	; (800a620 <CAN_TPDO1_MSG+0xf0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	2380      	movs	r3, #128	; 0x80
 800a5da:	055b      	lsls	r3, r3, #21
 800a5dc:	4013      	ands	r3, r2
 800a5de:	d001      	beq.n	800a5e4 <CAN_TPDO1_MSG+0xb4>
				{
					TxMailbox = CAN_TX_MAILBOX2;
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	60bb      	str	r3, [r7, #8]
				}
			}

		}while(TxMailbox == 0);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0c6      	beq.n	800a578 <CAN_TPDO1_MSG+0x48>

		//TODO: Add CAN Tx
		status |= HAL_CAN_AddTxMessage(&hcan, &pTxHeader, &msg_can.TX.TPDO[0][0], &TxMailbox);
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	18fb      	adds	r3, r7, r3
 800a5ee:	4a0b      	ldr	r2, [pc, #44]	; (800a61c <CAN_TPDO1_MSG+0xec>)
 800a5f0:	4909      	ldr	r1, [pc, #36]	; (800a618 <CAN_TPDO1_MSG+0xe8>)
 800a5f2:	480b      	ldr	r0, [pc, #44]	; (800a620 <CAN_TPDO1_MSG+0xf0>)
 800a5f4:	f7fa f840 	bl	8004678 <HAL_CAN_AddTxMessage>
 800a5f8:	0003      	movs	r3, r0
 800a5fa:	0019      	movs	r1, r3
 800a5fc:	220f      	movs	r2, #15
 800a5fe:	18bb      	adds	r3, r7, r2
 800a600:	18ba      	adds	r2, r7, r2
 800a602:	7812      	ldrb	r2, [r2, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	701a      	strb	r2, [r3, #0]
	}

	return status ;
 800a608:	230f      	movs	r3, #15
 800a60a:	18fb      	adds	r3, r7, r3
 800a60c:	781b      	ldrb	r3, [r3, #0]
}
 800a60e:	0018      	movs	r0, r3
 800a610:	46bd      	mov	sp, r7
 800a612:	b004      	add	sp, #16
 800a614:	bdb0      	pop	{r4, r5, r7, pc}
 800a616:	46c0      	nop			; (mov r8, r8)
 800a618:	20000758 	.word	0x20000758
 800a61c:	20000778 	.word	0x20000778
 800a620:	2000031c 	.word	0x2000031c

0800a624 <CAN_TPDO2_MSG>:


HAL_StatusTypeDef
CAN_TPDO2_MSG( Global_Struct_t * inst )
{
 800a624:	b5b0      	push	{r4, r5, r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 800a62c:	250f      	movs	r5, #15
 800a62e:	197b      	adds	r3, r7, r5
 800a630:	2201      	movs	r2, #1
 800a632:	701a      	strb	r2, [r3, #0]

	if(inst!= NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d060      	beq.n	800a6fc <CAN_TPDO2_MSG+0xd8>
	{
		//Set TPDO Header
		status = Set_TxHeader( &pTxHeader, TPDO2 );
 800a63a:	197c      	adds	r4, r7, r5
 800a63c:	23a0      	movs	r3, #160	; 0xa0
 800a63e:	009a      	lsls	r2, r3, #2
 800a640:	4b32      	ldr	r3, [pc, #200]	; (800a70c <CAN_TPDO2_MSG+0xe8>)
 800a642:	0011      	movs	r1, r2
 800a644:	0018      	movs	r0, r3
 800a646:	f7ff fddf 	bl	800a208 <Set_TxHeader>
 800a64a:	0003      	movs	r3, r0
 800a64c:	7023      	strb	r3, [r4, #0]

		//Set TPDO Payload
		status |= Set_Payload_TPDO2( inst, &msg_can.TX.TPDO[1][0] );
 800a64e:	4a30      	ldr	r2, [pc, #192]	; (800a710 <CAN_TPDO2_MSG+0xec>)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	0011      	movs	r1, r2
 800a654:	0018      	movs	r0, r3
 800a656:	f7ff fe61 	bl	800a31c <Set_Payload_TPDO2>
 800a65a:	0003      	movs	r3, r0
 800a65c:	0019      	movs	r1, r3
 800a65e:	197b      	adds	r3, r7, r5
 800a660:	197a      	adds	r2, r7, r5
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	701a      	strb	r2, [r3, #0]

		uint32_t TxMailbox=0;
 800a668:	2300      	movs	r3, #0
 800a66a:	60bb      	str	r3, [r7, #8]
		do{

			if (((hcan.Instance->TSR & CAN_TSR_TME0) == 0U) && ((hcan.Instance->TSR & CAN_TSR_TME1) == 0U) && ((hcan.Instance->TSR & CAN_TSR_TME2) == 0U))
 800a66c:	4b29      	ldr	r3, [pc, #164]	; (800a714 <CAN_TPDO2_MSG+0xf0>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	2380      	movs	r3, #128	; 0x80
 800a674:	04db      	lsls	r3, r3, #19
 800a676:	4013      	ands	r3, r2
 800a678:	d111      	bne.n	800a69e <CAN_TPDO2_MSG+0x7a>
 800a67a:	4b26      	ldr	r3, [pc, #152]	; (800a714 <CAN_TPDO2_MSG+0xf0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	2380      	movs	r3, #128	; 0x80
 800a682:	051b      	lsls	r3, r3, #20
 800a684:	4013      	ands	r3, r2
 800a686:	d10a      	bne.n	800a69e <CAN_TPDO2_MSG+0x7a>
 800a688:	4b22      	ldr	r3, [pc, #136]	; (800a714 <CAN_TPDO2_MSG+0xf0>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689a      	ldr	r2, [r3, #8]
 800a68e:	2380      	movs	r3, #128	; 0x80
 800a690:	055b      	lsls	r3, r3, #21
 800a692:	4013      	ands	r3, r2
 800a694:	d103      	bne.n	800a69e <CAN_TPDO2_MSG+0x7a>
			{
				HAL_Delay(1);
 800a696:	2001      	movs	r0, #1
 800a698:	f7f9 f904 	bl	80038a4 <HAL_Delay>
 800a69c:	e01c      	b.n	800a6d8 <CAN_TPDO2_MSG+0xb4>
			}
			else
			{
				// Check Tx Mailbox 0 status
				if ((hcan.Instance->TSR & CAN_TSR_TME0) != 0U)
 800a69e:	4b1d      	ldr	r3, [pc, #116]	; (800a714 <CAN_TPDO2_MSG+0xf0>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	2380      	movs	r3, #128	; 0x80
 800a6a6:	04db      	lsls	r3, r3, #19
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	d002      	beq.n	800a6b2 <CAN_TPDO2_MSG+0x8e>
				{
					TxMailbox = CAN_TX_MAILBOX0;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	60bb      	str	r3, [r7, #8]
 800a6b0:	e012      	b.n	800a6d8 <CAN_TPDO2_MSG+0xb4>
				}
				// Check Tx Mailbox 1 status
				else if ((hcan.Instance->TSR & CAN_TSR_TME1) != 0U)
 800a6b2:	4b18      	ldr	r3, [pc, #96]	; (800a714 <CAN_TPDO2_MSG+0xf0>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	2380      	movs	r3, #128	; 0x80
 800a6ba:	051b      	lsls	r3, r3, #20
 800a6bc:	4013      	ands	r3, r2
 800a6be:	d002      	beq.n	800a6c6 <CAN_TPDO2_MSG+0xa2>
				{
					TxMailbox = CAN_TX_MAILBOX1;
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	60bb      	str	r3, [r7, #8]
 800a6c4:	e008      	b.n	800a6d8 <CAN_TPDO2_MSG+0xb4>
				}
				// Check Tx Mailbox 2 status
				else if ((hcan.Instance->TSR & CAN_TSR_TME2) != 0U)
 800a6c6:	4b13      	ldr	r3, [pc, #76]	; (800a714 <CAN_TPDO2_MSG+0xf0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	2380      	movs	r3, #128	; 0x80
 800a6ce:	055b      	lsls	r3, r3, #21
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	d001      	beq.n	800a6d8 <CAN_TPDO2_MSG+0xb4>
				{
					TxMailbox = CAN_TX_MAILBOX2;
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	60bb      	str	r3, [r7, #8]
				}
			}

		}while(TxMailbox == 0);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0c6      	beq.n	800a66c <CAN_TPDO2_MSG+0x48>

		//TODO: Add CAN Tx
		status |= HAL_CAN_AddTxMessage(&hcan, &pTxHeader, &msg_can.TX.TPDO[1][0], &TxMailbox);
 800a6de:	2308      	movs	r3, #8
 800a6e0:	18fb      	adds	r3, r7, r3
 800a6e2:	4a0b      	ldr	r2, [pc, #44]	; (800a710 <CAN_TPDO2_MSG+0xec>)
 800a6e4:	4909      	ldr	r1, [pc, #36]	; (800a70c <CAN_TPDO2_MSG+0xe8>)
 800a6e6:	480b      	ldr	r0, [pc, #44]	; (800a714 <CAN_TPDO2_MSG+0xf0>)
 800a6e8:	f7f9 ffc6 	bl	8004678 <HAL_CAN_AddTxMessage>
 800a6ec:	0003      	movs	r3, r0
 800a6ee:	0019      	movs	r1, r3
 800a6f0:	220f      	movs	r2, #15
 800a6f2:	18bb      	adds	r3, r7, r2
 800a6f4:	18ba      	adds	r2, r7, r2
 800a6f6:	7812      	ldrb	r2, [r2, #0]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	701a      	strb	r2, [r3, #0]
	}

	return status ;
 800a6fc:	230f      	movs	r3, #15
 800a6fe:	18fb      	adds	r3, r7, r3
 800a700:	781b      	ldrb	r3, [r3, #0]
}
 800a702:	0018      	movs	r0, r3
 800a704:	46bd      	mov	sp, r7
 800a706:	b004      	add	sp, #16
 800a708:	bdb0      	pop	{r4, r5, r7, pc}
 800a70a:	46c0      	nop			; (mov r8, r8)
 800a70c:	20000758 	.word	0x20000758
 800a710:	20000780 	.word	0x20000780
 800a714:	2000031c 	.word	0x2000031c

0800a718 <CAN_Rep_Version>:
/*
 * Response to the version request received from the main board
 */
HAL_StatusTypeDef
CAN_Rep_Version( void )
{
 800a718:	b590      	push	{r4, r7, lr}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800a71e:	240f      	movs	r4, #15
 800a720:	193b      	adds	r3, r7, r4
 800a722:	2200      	movs	r2, #0
 800a724:	701a      	strb	r2, [r3, #0]

	//Set TPDO Header
	status |= Set_TxHeader( &pTxHeader, RESPONSE );
 800a726:	23c0      	movs	r3, #192	; 0xc0
 800a728:	00da      	lsls	r2, r3, #3
 800a72a:	4b45      	ldr	r3, [pc, #276]	; (800a840 <CAN_Rep_Version+0x128>)
 800a72c:	0011      	movs	r1, r2
 800a72e:	0018      	movs	r0, r3
 800a730:	f7ff fd6a 	bl	800a208 <Set_TxHeader>
 800a734:	0003      	movs	r3, r0
 800a736:	0019      	movs	r1, r3
 800a738:	193b      	adds	r3, r7, r4
 800a73a:	193a      	adds	r2, r7, r4
 800a73c:	7812      	ldrb	r2, [r2, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	701a      	strb	r2, [r3, #0]

	//====================Swap des données====================
	//TODO: Add index and data
	//swap de l'index
	uint16_t d = SWAP_16BITS( IDX_REP_GET_VERSION );
 800a742:	2388      	movs	r3, #136	; 0x88
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	0018      	movs	r0, r3
 800a748:	f7ff fec0 	bl	800a4cc <SWAP_16BITS>
 800a74c:	0003      	movs	r3, r0
 800a74e:	b29a      	uxth	r2, r3
 800a750:	240c      	movs	r4, #12
 800a752:	193b      	adds	r3, r7, r4
 800a754:	801a      	strh	r2, [r3, #0]
 800a756:	193b      	adds	r3, r7, r4
 800a758:	881a      	ldrh	r2, [r3, #0]
	memcpy(&msg_can.TX.response.idx , &d, sizeof(uint16_t));
 800a75a:	4b3a      	ldr	r3, [pc, #232]	; (800a844 <CAN_Rep_Version+0x12c>)
 800a75c:	821a      	strh	r2, [r3, #16]

	//sub-index
	d = SWAP_16BITS( MAJOR );
 800a75e:	2000      	movs	r0, #0
 800a760:	f7ff feb4 	bl	800a4cc <SWAP_16BITS>
 800a764:	0003      	movs	r3, r0
 800a766:	b29a      	uxth	r2, r3
 800a768:	193b      	adds	r3, r7, r4
 800a76a:	801a      	strh	r2, [r3, #0]
 800a76c:	193b      	adds	r3, r7, r4
 800a76e:	881a      	ldrh	r2, [r3, #0]
	memcpy(&msg_can.TX.response.sub_idx , &d, sizeof(uint16_t));
 800a770:	4b34      	ldr	r3, [pc, #208]	; (800a844 <CAN_Rep_Version+0x12c>)
 800a772:	825a      	strh	r2, [r3, #18]

	//swap de la data
	uint32_t d32 = (MINOR << 16) | REVISION;
 800a774:	4b34      	ldr	r3, [pc, #208]	; (800a848 <CAN_Rep_Version+0x130>)
 800a776:	60bb      	str	r3, [r7, #8]
	d32 = SWAP_32BITS( d32 );
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	0018      	movs	r0, r3
 800a77c:	f7ff febc 	bl	800a4f8 <SWAP_32BITS>
 800a780:	0003      	movs	r3, r0
 800a782:	60bb      	str	r3, [r7, #8]
 800a784:	68ba      	ldr	r2, [r7, #8]
	memcpy(&msg_can.TX.response.data[0], &d32, sizeof(d32));
 800a786:	4b2f      	ldr	r3, [pc, #188]	; (800a844 <CAN_Rep_Version+0x12c>)
 800a788:	615a      	str	r2, [r3, #20]
 800a78a:	4b2e      	ldr	r3, [pc, #184]	; (800a844 <CAN_Rep_Version+0x12c>)
 800a78c:	8a1a      	ldrh	r2, [r3, #16]


	//put everything together
	//put index first
	memcpy(&tx[0], &msg_can.TX.response.idx, sizeof( msg_can.TX.response.idx));
 800a78e:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <CAN_Rep_Version+0x134>)
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	4b2c      	ldr	r3, [pc, #176]	; (800a844 <CAN_Rep_Version+0x12c>)
 800a794:	8a5a      	ldrh	r2, [r3, #18]
	//then put
	memcpy(&tx[2], &msg_can.TX.response.sub_idx, sizeof( msg_can.TX.response.sub_idx ));
 800a796:	4b2d      	ldr	r3, [pc, #180]	; (800a84c <CAN_Rep_Version+0x134>)
 800a798:	805a      	strh	r2, [r3, #2]
 800a79a:	4b2a      	ldr	r3, [pc, #168]	; (800a844 <CAN_Rep_Version+0x12c>)
 800a79c:	7d1a      	ldrb	r2, [r3, #20]
	memcpy(&tx[4], &msg_can.TX.response.data[0], sizeof( msg_can.TX.response.data[0] ));
 800a79e:	4b2b      	ldr	r3, [pc, #172]	; (800a84c <CAN_Rep_Version+0x134>)
 800a7a0:	711a      	strb	r2, [r3, #4]


	uint32_t TxMailbox=0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	607b      	str	r3, [r7, #4]
	do{

		if (((hcan.Instance->TSR & CAN_TSR_TME0) == 0U) && ((hcan.Instance->TSR & CAN_TSR_TME1) == 0U) && ((hcan.Instance->TSR & CAN_TSR_TME2) == 0U))
 800a7a6:	4b2a      	ldr	r3, [pc, #168]	; (800a850 <CAN_Rep_Version+0x138>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	2380      	movs	r3, #128	; 0x80
 800a7ae:	04db      	lsls	r3, r3, #19
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	d111      	bne.n	800a7d8 <CAN_Rep_Version+0xc0>
 800a7b4:	4b26      	ldr	r3, [pc, #152]	; (800a850 <CAN_Rep_Version+0x138>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	2380      	movs	r3, #128	; 0x80
 800a7bc:	051b      	lsls	r3, r3, #20
 800a7be:	4013      	ands	r3, r2
 800a7c0:	d10a      	bne.n	800a7d8 <CAN_Rep_Version+0xc0>
 800a7c2:	4b23      	ldr	r3, [pc, #140]	; (800a850 <CAN_Rep_Version+0x138>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	2380      	movs	r3, #128	; 0x80
 800a7ca:	055b      	lsls	r3, r3, #21
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	d103      	bne.n	800a7d8 <CAN_Rep_Version+0xc0>
		{
			HAL_Delay(1);
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	f7f9 f867 	bl	80038a4 <HAL_Delay>
 800a7d6:	e01c      	b.n	800a812 <CAN_Rep_Version+0xfa>
		}
		else
		{
			// Check Tx Mailbox 0 status
			if ((hcan.Instance->TSR & CAN_TSR_TME0) != 0U)
 800a7d8:	4b1d      	ldr	r3, [pc, #116]	; (800a850 <CAN_Rep_Version+0x138>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	2380      	movs	r3, #128	; 0x80
 800a7e0:	04db      	lsls	r3, r3, #19
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	d002      	beq.n	800a7ec <CAN_Rep_Version+0xd4>
			{
				TxMailbox = CAN_TX_MAILBOX0;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	607b      	str	r3, [r7, #4]
 800a7ea:	e012      	b.n	800a812 <CAN_Rep_Version+0xfa>
			}
			// Check Tx Mailbox 1 status
			else if ((hcan.Instance->TSR & CAN_TSR_TME1) != 0U)
 800a7ec:	4b18      	ldr	r3, [pc, #96]	; (800a850 <CAN_Rep_Version+0x138>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	2380      	movs	r3, #128	; 0x80
 800a7f4:	051b      	lsls	r3, r3, #20
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	d002      	beq.n	800a800 <CAN_Rep_Version+0xe8>
			{
				TxMailbox = CAN_TX_MAILBOX1;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	607b      	str	r3, [r7, #4]
 800a7fe:	e008      	b.n	800a812 <CAN_Rep_Version+0xfa>
			}
			// Check Tx Mailbox 2 status
			else if ((hcan.Instance->TSR & CAN_TSR_TME2) != 0U)
 800a800:	4b13      	ldr	r3, [pc, #76]	; (800a850 <CAN_Rep_Version+0x138>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	2380      	movs	r3, #128	; 0x80
 800a808:	055b      	lsls	r3, r3, #21
 800a80a:	4013      	ands	r3, r2
 800a80c:	d001      	beq.n	800a812 <CAN_Rep_Version+0xfa>
			{
				TxMailbox = CAN_TX_MAILBOX2;
 800a80e:	2304      	movs	r3, #4
 800a810:	607b      	str	r3, [r7, #4]
			}
		}

	}while(TxMailbox == 0);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0c6      	beq.n	800a7a6 <CAN_Rep_Version+0x8e>

	//TODO: Add CAN Tx
	status |= HAL_CAN_AddTxMessage(&hcan, &pTxHeader, &tx[0], &TxMailbox);
 800a818:	1d3b      	adds	r3, r7, #4
 800a81a:	4a0c      	ldr	r2, [pc, #48]	; (800a84c <CAN_Rep_Version+0x134>)
 800a81c:	4908      	ldr	r1, [pc, #32]	; (800a840 <CAN_Rep_Version+0x128>)
 800a81e:	480c      	ldr	r0, [pc, #48]	; (800a850 <CAN_Rep_Version+0x138>)
 800a820:	f7f9 ff2a 	bl	8004678 <HAL_CAN_AddTxMessage>
 800a824:	0003      	movs	r3, r0
 800a826:	0019      	movs	r1, r3
 800a828:	200f      	movs	r0, #15
 800a82a:	183b      	adds	r3, r7, r0
 800a82c:	183a      	adds	r2, r7, r0
 800a82e:	7812      	ldrb	r2, [r2, #0]
 800a830:	430a      	orrs	r2, r1
 800a832:	701a      	strb	r2, [r3, #0]


	return status ;
 800a834:	183b      	adds	r3, r7, r0
 800a836:	781b      	ldrb	r3, [r3, #0]
}
 800a838:	0018      	movs	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b005      	add	sp, #20
 800a83e:	bd90      	pop	{r4, r7, pc}
 800a840:	20000758 	.word	0x20000758
 800a844:	20000778 	.word	0x20000778
 800a848:	00020006 	.word	0x00020006
 800a84c:	20000770 	.word	0x20000770
 800a850:	2000031c 	.word	0x2000031c

0800a854 <CIRCULAR_BUFFER_InitCircularBuffer>:
//     PUBLIC FUNCTIONS
// ==================================================

CIRCULAR_BUFFER_STATUS_t
CIRCULAR_BUFFER_InitCircularBuffer ( CIRCULAR_BUFFER_t * circular_buffer )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
    CIRCULAR_BUFFER_STATUS_t status;

    if ( ( circular_buffer != NULL ) && ( circular_buffer->buffer != NULL ) )
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d01c      	beq.n	800a89c <CIRCULAR_BUFFER_InitCircularBuffer+0x48>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d018      	beq.n	800a89c <CIRCULAR_BUFFER_InitCircularBuffer+0x48>
    {
        memset( circular_buffer->buffer , 0x00 , ( circular_buffer->item.size * circular_buffer->item.count ) );
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	4353      	muls	r3, r2
 800a878:	001a      	movs	r2, r3
 800a87a:	2100      	movs	r1, #0
 800a87c:	f002 fbc7 	bl	800d00e <memset>

        circular_buffer->head       = 0;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	611a      	str	r2, [r3, #16]
        circular_buffer->tail       = 0;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	615a      	str	r2, [r3, #20]
        circular_buffer->data_count = 0;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	619a      	str	r2, [r3, #24]
        status                      = CIRCULAR_BUFFER_STATUS_SUCCESS;
 800a892:	230f      	movs	r3, #15
 800a894:	18fb      	adds	r3, r7, r3
 800a896:	2200      	movs	r2, #0
 800a898:	701a      	strb	r2, [r3, #0]
 800a89a:	e003      	b.n	800a8a4 <CIRCULAR_BUFFER_InitCircularBuffer+0x50>
    }
    else
    {
        status = CIRCULAR_BUFFER_STATUS_NULL_POINTER;
 800a89c:	230f      	movs	r3, #15
 800a89e:	18fb      	adds	r3, r7, r3
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800a8a4:	230f      	movs	r3, #15
 800a8a6:	18fb      	adds	r3, r7, r3
 800a8a8:	781b      	ldrb	r3, [r3, #0]
}
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	b004      	add	sp, #16
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <CIRCULAR_BUFFER_Write>:
}

CIRCULAR_BUFFER_STATUS_t
CIRCULAR_BUFFER_Write ( CIRCULAR_BUFFER_t * circular_buffer ,
                        void              * data_handler    )
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	6039      	str	r1, [r7, #0]
    CIRCULAR_BUFFER_STATUS_t status = CIRCULAR_BUFFER_STATUS_FAIL;
 800a8bc:	230f      	movs	r3, #15
 800a8be:	18fb      	adds	r3, r7, r3
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	701a      	strb	r2, [r3, #0]

    if ( ( circular_buffer != NULL ) && ( circular_buffer->buffer != NULL ) && ( data_handler != NULL ) )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d054      	beq.n	800a974 <CIRCULAR_BUFFER_Write+0xc2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d050      	beq.n	800a974 <CIRCULAR_BUFFER_Write+0xc2>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d04d      	beq.n	800a974 <CIRCULAR_BUFFER_Write+0xc2>
    {
        bool write_allowed = false;
 800a8d8:	210e      	movs	r1, #14
 800a8da:	187b      	adds	r3, r7, r1
 800a8dc:	2200      	movs	r2, #0
 800a8de:	701a      	strb	r2, [r3, #0]

        if ( circular_buffer->data_count < circular_buffer->item.count )
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	699a      	ldr	r2, [r3, #24]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d208      	bcs.n	800a8fe <CIRCULAR_BUFFER_Write+0x4c>
        {
            circular_buffer->data_count++;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	619a      	str	r2, [r3, #24]
            write_allowed = true;
 800a8f6:	187b      	adds	r3, r7, r1
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	e016      	b.n	800a92c <CIRCULAR_BUFFER_Write+0x7a>
        }
        else
        {
            if ( circular_buffer->overwrite_old_data == true )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	7b1b      	ldrb	r3, [r3, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00e      	beq.n	800a924 <CIRCULAR_BUFFER_Write+0x72>
            {
                circular_buffer->tail = circular_buffer_ComputeNextIndex( circular_buffer , circular_buffer->tail );
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	695a      	ldr	r2, [r3, #20]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	0011      	movs	r1, r2
 800a90e:	0018      	movs	r0, r3
 800a910:	f000 f83d 	bl	800a98e <circular_buffer_ComputeNextIndex>
 800a914:	0002      	movs	r2, r0
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	615a      	str	r2, [r3, #20]
                write_allowed         = true;
 800a91a:	230e      	movs	r3, #14
 800a91c:	18fb      	adds	r3, r7, r3
 800a91e:	2201      	movs	r2, #1
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	e003      	b.n	800a92c <CIRCULAR_BUFFER_Write+0x7a>
            }
            else
            {
                status = CIRCULAR_BUFFER_STATUS_FULL_BUFFER;
 800a924:	230f      	movs	r3, #15
 800a926:	18fb      	adds	r3, r7, r3
 800a928:	2204      	movs	r2, #4
 800a92a:	701a      	strb	r2, [r3, #0]
            }
        }

        if ( write_allowed == true )
 800a92c:	230e      	movs	r3, #14
 800a92e:	18fb      	adds	r3, r7, r3
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d023      	beq.n	800a97e <CIRCULAR_BUFFER_Write+0xcc>
        {
            void * offset = circular_buffer_ComputeOffset( circular_buffer , circular_buffer->head );
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	691a      	ldr	r2, [r3, #16]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	0011      	movs	r1, r2
 800a93e:	0018      	movs	r0, r3
 800a940:	f000 f83b 	bl	800a9ba <circular_buffer_ComputeOffset>
 800a944:	0003      	movs	r3, r0
 800a946:	60bb      	str	r3, [r7, #8]

            memcpy( offset , data_handler , circular_buffer->item.size );
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	0018      	movs	r0, r3
 800a952:	f002 fb53 	bl	800cffc <memcpy>

            circular_buffer->head = circular_buffer_ComputeNextIndex( circular_buffer , circular_buffer->head );
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	691a      	ldr	r2, [r3, #16]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	0011      	movs	r1, r2
 800a95e:	0018      	movs	r0, r3
 800a960:	f000 f815 	bl	800a98e <circular_buffer_ComputeNextIndex>
 800a964:	0002      	movs	r2, r0
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	611a      	str	r2, [r3, #16]
            status                = CIRCULAR_BUFFER_STATUS_SUCCESS;
 800a96a:	230f      	movs	r3, #15
 800a96c:	18fb      	adds	r3, r7, r3
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]
    {
 800a972:	e004      	b.n	800a97e <CIRCULAR_BUFFER_Write+0xcc>
        }
    }
    else
    {
        status = CIRCULAR_BUFFER_STATUS_NULL_POINTER;
 800a974:	230f      	movs	r3, #15
 800a976:	18fb      	adds	r3, r7, r3
 800a978:	2202      	movs	r2, #2
 800a97a:	701a      	strb	r2, [r3, #0]
 800a97c:	e000      	b.n	800a980 <CIRCULAR_BUFFER_Write+0xce>
    {
 800a97e:	46c0      	nop			; (mov r8, r8)
    }

    return status;
 800a980:	230f      	movs	r3, #15
 800a982:	18fb      	adds	r3, r7, r3
 800a984:	781b      	ldrb	r3, [r3, #0]
}
 800a986:	0018      	movs	r0, r3
 800a988:	46bd      	mov	sp, r7
 800a98a:	b004      	add	sp, #16
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <circular_buffer_ComputeNextIndex>:
// ==================================================

uint32_t
circular_buffer_ComputeNextIndex ( CIRCULAR_BUFFER_t * circular_buffer ,
                                   uint32_t            current_index   )
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
    uint32_t next_index;

    if ( ( current_index + 1 ) >= circular_buffer->item.count )
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d302      	bcc.n	800a9aa <circular_buffer_ComputeNextIndex+0x1c>
    {
        next_index = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	e002      	b.n	800a9b0 <circular_buffer_ComputeNextIndex+0x22>
    }
    else
    {
        next_index = current_index + 1;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	60fb      	str	r3, [r7, #12]
    }

    return next_index;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
}
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	b004      	add	sp, #16
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <circular_buffer_ComputeOffset>:

void *
circular_buffer_ComputeOffset ( CIRCULAR_BUFFER_t * circular_buffer ,
                                uint32_t            item_index      )
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
    uint8_t * offset = NULL;  // 'uint8_t*' because of "pointer of type ‘void *’ used in arithmetic" warning
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60fb      	str	r3, [r7, #12]

    if ( item_index < circular_buffer->item.count )
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d207      	bcs.n	800a9e2 <circular_buffer_ComputeOffset+0x28>
    {
        offset = ( uint8_t * )circular_buffer->buffer + ( item_index * circular_buffer->item.size );
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	434b      	muls	r3, r1
 800a9de:	18d3      	adds	r3, r2, r3
 800a9e0:	60fb      	str	r3, [r7, #12]
    }

    return ( void * )offset;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
}
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	b004      	add	sp, #16
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <CONSOLE_Init>:
//     PUBLIC FUNCTIONS
// ==================================================

HAL_StatusTypeDef
CONSOLE_Init ( UART_HandleTypeDef * instance )
{
 800a9ec:	b5b0      	push	{r4, r5, r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]

    HAL_StatusTypeDef        status = HAL_ERROR;
 800a9f4:	230f      	movs	r3, #15
 800a9f6:	18fb      	adds	r3, r7, r3
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	701a      	strb	r2, [r3, #0]

    if ( instance != NULL )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d05c      	beq.n	800aabc <CONSOLE_Init+0xd0>
    {
        CIRCULAR_BUFFER_STATUS_t circular_buffer_status;
        if ( console_runtime.list != NULL )
 800aa02:	4b32      	ldr	r3, [pc, #200]	; (800aacc <CONSOLE_Init+0xe0>)
 800aa04:	4a32      	ldr	r2, [pc, #200]	; (800aad0 <CONSOLE_Init+0xe4>)
 800aa06:	589b      	ldr	r3, [r3, r2]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d005      	beq.n	800aa18 <CONSOLE_Init+0x2c>
        {
            LINKED_LIST_DestroyList( console_runtime.list );
 800aa0c:	4b2f      	ldr	r3, [pc, #188]	; (800aacc <CONSOLE_Init+0xe0>)
 800aa0e:	4a30      	ldr	r2, [pc, #192]	; (800aad0 <CONSOLE_Init+0xe4>)
 800aa10:	589b      	ldr	r3, [r3, r2]
 800aa12:	0018      	movs	r0, r3
 800aa14:	f000 f9fb 	bl	800ae0e <LINKED_LIST_DestroyList>
        }

        memset( ( void * )&console_runtime   , 0x00 , sizeof( CONSOLE_RUNTIME_t ) );
 800aa18:	4a2e      	ldr	r2, [pc, #184]	; (800aad4 <CONSOLE_Init+0xe8>)
 800aa1a:	4b2c      	ldr	r3, [pc, #176]	; (800aacc <CONSOLE_Init+0xe0>)
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	0018      	movs	r0, r3
 800aa20:	f002 faf5 	bl	800d00e <memset>
        memset( ( void * )&console_RX_buffer , 0x00 , sizeof( CIRCULAR_BUFFER_t ) );
 800aa24:	4b2c      	ldr	r3, [pc, #176]	; (800aad8 <CONSOLE_Init+0xec>)
 800aa26:	221c      	movs	r2, #28
 800aa28:	2100      	movs	r1, #0
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f002 faef 	bl	800d00e <memset>

        console_runtime.dev  = instance;
 800aa30:	4b26      	ldr	r3, [pc, #152]	; (800aacc <CONSOLE_Init+0xe0>)
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	601a      	str	r2, [r3, #0]
        console_runtime.list = LINKED_LIST_CreateEmptyList();
 800aa36:	f000 f947 	bl	800acc8 <LINKED_LIST_CreateEmptyList>
 800aa3a:	0002      	movs	r2, r0
 800aa3c:	4b23      	ldr	r3, [pc, #140]	; (800aacc <CONSOLE_Init+0xe0>)
 800aa3e:	4924      	ldr	r1, [pc, #144]	; (800aad0 <CONSOLE_Init+0xe4>)
 800aa40:	505a      	str	r2, [r3, r1]
        status               = ( console_runtime.list != NULL ) ? HAL_OK : HAL_ERROR;
 800aa42:	4b22      	ldr	r3, [pc, #136]	; (800aacc <CONSOLE_Init+0xe0>)
 800aa44:	4a22      	ldr	r2, [pc, #136]	; (800aad0 <CONSOLE_Init+0xe4>)
 800aa46:	589b      	ldr	r3, [r3, r2]
 800aa48:	425a      	negs	r2, r3
 800aa4a:	4153      	adcs	r3, r2
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	210f      	movs	r1, #15
 800aa50:	187b      	adds	r3, r7, r1
 800aa52:	701a      	strb	r2, [r3, #0]

        if ( status != HAL_OK )
 800aa54:	000a      	movs	r2, r1
 800aa56:	18bb      	adds	r3, r7, r2
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <CONSOLE_Init+0x78>
        {
            return status;
 800aa5e:	18bb      	adds	r3, r7, r2
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	e02e      	b.n	800aac2 <CONSOLE_Init+0xd6>
        }

        console_RX_buffer.buffer             = ( void * )console_runtime.rx.buffer;
 800aa64:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <CONSOLE_Init+0xec>)
 800aa66:	4a1d      	ldr	r2, [pc, #116]	; (800aadc <CONSOLE_Init+0xf0>)
 800aa68:	601a      	str	r2, [r3, #0]
        console_RX_buffer.item.size          = sizeof( console_runtime.rx.buffer[ 0 ] );
 800aa6a:	4b1b      	ldr	r3, [pc, #108]	; (800aad8 <CONSOLE_Init+0xec>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	605a      	str	r2, [r3, #4]
        console_RX_buffer.item.count         = ARRAY_SIZE( console_runtime.rx.buffer );
 800aa70:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <CONSOLE_Init+0xec>)
 800aa72:	2280      	movs	r2, #128	; 0x80
 800aa74:	00d2      	lsls	r2, r2, #3
 800aa76:	609a      	str	r2, [r3, #8]
        console_RX_buffer.overwrite_old_data = true;
 800aa78:	4b17      	ldr	r3, [pc, #92]	; (800aad8 <CONSOLE_Init+0xec>)
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	731a      	strb	r2, [r3, #12]

        circular_buffer_status = CIRCULAR_BUFFER_InitCircularBuffer( &console_RX_buffer );
 800aa7e:	250e      	movs	r5, #14
 800aa80:	197c      	adds	r4, r7, r5
 800aa82:	4b15      	ldr	r3, [pc, #84]	; (800aad8 <CONSOLE_Init+0xec>)
 800aa84:	0018      	movs	r0, r3
 800aa86:	f7ff fee5 	bl	800a854 <CIRCULAR_BUFFER_InitCircularBuffer>
 800aa8a:	0003      	movs	r3, r0
 800aa8c:	7023      	strb	r3, [r4, #0]
        status                 = ( circular_buffer_status == CIRCULAR_BUFFER_STATUS_SUCCESS ) ? HAL_OK : HAL_ERROR;
 800aa8e:	197b      	adds	r3, r7, r5
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	1e5a      	subs	r2, r3, #1
 800aa94:	4193      	sbcs	r3, r2
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	210f      	movs	r1, #15
 800aa9a:	187b      	adds	r3, r7, r1
 800aa9c:	701a      	strb	r2, [r3, #0]

        if ( status != HAL_OK )
 800aa9e:	000a      	movs	r2, r1
 800aaa0:	18bb      	adds	r3, r7, r2
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <CONSOLE_Init+0xc2>
        {
            return status;
 800aaa8:	18bb      	adds	r3, r7, r2
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	e009      	b.n	800aac2 <CONSOLE_Init+0xd6>
        }

        HAL_UART_Receive_IT( console_runtime.dev , ( uint8_t * )&console_runtime.rx.item , 1 );
 800aaae:	4b07      	ldr	r3, [pc, #28]	; (800aacc <CONSOLE_Init+0xe0>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	490b      	ldr	r1, [pc, #44]	; (800aae0 <CONSOLE_Init+0xf4>)
 800aab4:	2201      	movs	r2, #1
 800aab6:	0018      	movs	r0, r3
 800aab8:	f7fd fce8 	bl	800848c <HAL_UART_Receive_IT>
    }

    return status;
 800aabc:	230f      	movs	r3, #15
 800aabe:	18fb      	adds	r3, r7, r3
 800aac0:	781b      	ldrb	r3, [r3, #0]

}
 800aac2:	0018      	movs	r0, r3
 800aac4:	46bd      	mov	sp, r7
 800aac6:	b004      	add	sp, #16
 800aac8:	bdb0      	pop	{r4, r5, r7, pc}
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	200007c0 	.word	0x200007c0
 800aad0:	00000808 	.word	0x00000808
 800aad4:	00000814 	.word	0x00000814
 800aad8:	20000fd4 	.word	0x20000fd4
 800aadc:	20000bc4 	.word	0x20000bc4
 800aae0:	20000fc4 	.word	0x20000fc4

0800aae4 <CONSOLE>:

void
CONSOLE ( const char * fmt ,
          ...              )
{
 800aae4:	b40f      	push	{r0, r1, r2, r3}
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b082      	sub	sp, #8
 800aaea:	af00      	add	r7, sp, #0

    va_list args;

    ///// Prepare the output buffer
    va_start( args , fmt );
 800aaec:	2314      	movs	r3, #20
 800aaee:	18fb      	adds	r3, r7, r3
 800aaf0:	607b      	str	r3, [r7, #4]
    vsprintf( console_runtime.tx.buffer , fmt , args );
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	6939      	ldr	r1, [r7, #16]
 800aaf6:	4b08      	ldr	r3, [pc, #32]	; (800ab18 <CONSOLE+0x34>)
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f003 f809 	bl	800db10 <vsiprintf>
    va_end( args );

    ///// Append message to list
    console_AppendMessageToList( console_runtime.tx.buffer );
 800aafe:	4b06      	ldr	r3, [pc, #24]	; (800ab18 <CONSOLE+0x34>)
 800ab00:	0018      	movs	r0, r3
 800ab02:	f000 f85b 	bl	800abbc <console_AppendMessageToList>

    ///// Start the transmission
    console_ProcessOutput();
 800ab06:	f000 f8a7 	bl	800ac58 <console_ProcessOutput>

}
 800ab0a:	46c0      	nop			; (mov r8, r8)
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	b002      	add	sp, #8
 800ab10:	bc80      	pop	{r7}
 800ab12:	bc08      	pop	{r3}
 800ab14:	b004      	add	sp, #16
 800ab16:	4718      	bx	r3
 800ab18:	200007c4 	.word	0x200007c4

0800ab1c <CONSOLE_UART_TxCpltCallback>:

}

void
CONSOLE_UART_TxCpltCallback ( void )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0

    if ( console_runtime.list != NULL )
 800ab22:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <CONSOLE_UART_TxCpltCallback+0x64>)
 800ab24:	4a17      	ldr	r2, [pc, #92]	; (800ab84 <CONSOLE_UART_TxCpltCallback+0x68>)
 800ab26:	589b      	ldr	r3, [r3, r2]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d025      	beq.n	800ab78 <CONSOLE_UART_TxCpltCallback+0x5c>
    {
        NODE_t * node = console_runtime.list->head;
 800ab2c:	4b14      	ldr	r3, [pc, #80]	; (800ab80 <CONSOLE_UART_TxCpltCallback+0x64>)
 800ab2e:	4a15      	ldr	r2, [pc, #84]	; (800ab84 <CONSOLE_UART_TxCpltCallback+0x68>)
 800ab30:	589b      	ldr	r3, [r3, r2]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	607b      	str	r3, [r7, #4]

        if ( node != NULL )
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d017      	beq.n	800ab6c <CONSOLE_UART_TxCpltCallback+0x50>
        {
            void * data = node->data;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	603b      	str	r3, [r7, #0]

            LINKED_LIST_DeleteNode( console_runtime.list , data );
 800ab42:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <CONSOLE_UART_TxCpltCallback+0x64>)
 800ab44:	4a0f      	ldr	r2, [pc, #60]	; (800ab84 <CONSOLE_UART_TxCpltCallback+0x68>)
 800ab46:	589b      	ldr	r3, [r3, r2]
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	0011      	movs	r1, r2
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	f000 f90d 	bl	800ad6c <LINKED_LIST_DeleteNode>
            free( data );
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	0018      	movs	r0, r3
 800ab56:	f002 fa47 	bl	800cfe8 <free>

            console_runtime.list_size--;
 800ab5a:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <CONSOLE_UART_TxCpltCallback+0x64>)
 800ab5c:	2381      	movs	r3, #129	; 0x81
 800ab5e:	011b      	lsls	r3, r3, #4
 800ab60:	58d3      	ldr	r3, [r2, r3]
 800ab62:	1e59      	subs	r1, r3, #1
 800ab64:	4a06      	ldr	r2, [pc, #24]	; (800ab80 <CONSOLE_UART_TxCpltCallback+0x64>)
 800ab66:	2381      	movs	r3, #129	; 0x81
 800ab68:	011b      	lsls	r3, r3, #4
 800ab6a:	50d1      	str	r1, [r2, r3]
        }

        console_runtime.is_busy = false;
 800ab6c:	4b04      	ldr	r3, [pc, #16]	; (800ab80 <CONSOLE_UART_TxCpltCallback+0x64>)
 800ab6e:	4a06      	ldr	r2, [pc, #24]	; (800ab88 <CONSOLE_UART_TxCpltCallback+0x6c>)
 800ab70:	2100      	movs	r1, #0
 800ab72:	5499      	strb	r1, [r3, r2]

        console_ProcessOutput();
 800ab74:	f000 f870 	bl	800ac58 <console_ProcessOutput>
    }

}
 800ab78:	46c0      	nop			; (mov r8, r8)
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b002      	add	sp, #8
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	200007c0 	.word	0x200007c0
 800ab84:	00000808 	.word	0x00000808
 800ab88:	0000080c 	.word	0x0000080c

0800ab8c <CONSOLE_UART_RxCpltCallback>:

void
CONSOLE_UART_RxCpltCallback ( void )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0

    CIRCULAR_BUFFER_Write( &console_RX_buffer , ( void * )&console_runtime.rx.item );
 800ab90:	4a07      	ldr	r2, [pc, #28]	; (800abb0 <CONSOLE_UART_RxCpltCallback+0x24>)
 800ab92:	4b08      	ldr	r3, [pc, #32]	; (800abb4 <CONSOLE_UART_RxCpltCallback+0x28>)
 800ab94:	0011      	movs	r1, r2
 800ab96:	0018      	movs	r0, r3
 800ab98:	f7ff fe8b 	bl	800a8b2 <CIRCULAR_BUFFER_Write>
    HAL_UART_Receive_IT( console_runtime.dev , ( uint8_t * )&console_runtime.rx.item , 1 );
 800ab9c:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <CONSOLE_UART_RxCpltCallback+0x2c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4903      	ldr	r1, [pc, #12]	; (800abb0 <CONSOLE_UART_RxCpltCallback+0x24>)
 800aba2:	2201      	movs	r2, #1
 800aba4:	0018      	movs	r0, r3
 800aba6:	f7fd fc71 	bl	800848c <HAL_UART_Receive_IT>

}
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20000fc4 	.word	0x20000fc4
 800abb4:	20000fd4 	.word	0x20000fd4
 800abb8:	200007c0 	.word	0x200007c0

0800abbc <console_AppendMessageToList>:
// ==================================================


void
console_AppendMessageToList ( const char * msg )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
    if ( console_runtime.list != NULL )
 800abc4:	4b22      	ldr	r3, [pc, #136]	; (800ac50 <console_AppendMessageToList+0x94>)
 800abc6:	4a23      	ldr	r2, [pc, #140]	; (800ac54 <console_AppendMessageToList+0x98>)
 800abc8:	589b      	ldr	r3, [r3, r2]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d03c      	beq.n	800ac48 <console_AppendMessageToList+0x8c>
    {
        if ( console_runtime.list_size >= console_list_max_size )
 800abce:	4a20      	ldr	r2, [pc, #128]	; (800ac50 <console_AppendMessageToList+0x94>)
 800abd0:	2381      	movs	r3, #129	; 0x81
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	58d3      	ldr	r3, [r2, r3]
 800abd6:	2223      	movs	r2, #35	; 0x23
 800abd8:	4293      	cmp	r3, r2
 800abda:	d234      	bcs.n	800ac46 <console_AppendMessageToList+0x8a>
        {
            return;
        }

        char * tmp_ptr = ( char * )malloc( strlen( msg ) + 1 );
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	0018      	movs	r0, r3
 800abe0:	f7f5 fa90 	bl	8000104 <strlen>
 800abe4:	0003      	movs	r3, r0
 800abe6:	3301      	adds	r3, #1
 800abe8:	0018      	movs	r0, r3
 800abea:	f002 f9f3 	bl	800cfd4 <malloc>
 800abee:	0003      	movs	r3, r0
 800abf0:	60fb      	str	r3, [r7, #12]

        if ( tmp_ptr != NULL )
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d027      	beq.n	800ac48 <console_AppendMessageToList+0x8c>
        {
            memset( ( void * )tmp_ptr , 0x00 , strlen( msg ) + 1 );
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	0018      	movs	r0, r3
 800abfc:	f7f5 fa82 	bl	8000104 <strlen>
 800ac00:	0003      	movs	r3, r0
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2100      	movs	r1, #0
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f002 fa00 	bl	800d00e <memset>
            memcpy( ( void * )tmp_ptr , ( void * )msg , strlen( msg ) );
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	0018      	movs	r0, r3
 800ac12:	f7f5 fa77 	bl	8000104 <strlen>
 800ac16:	0002      	movs	r2, r0
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f002 f9ed 	bl	800cffc <memcpy>

            LINKED_LIST_AddNode( console_runtime.list , ( void * )tmp_ptr );
 800ac22:	4b0b      	ldr	r3, [pc, #44]	; (800ac50 <console_AppendMessageToList+0x94>)
 800ac24:	4a0b      	ldr	r2, [pc, #44]	; (800ac54 <console_AppendMessageToList+0x98>)
 800ac26:	589b      	ldr	r3, [r3, r2]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	0011      	movs	r1, r2
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	f000 f860 	bl	800acf2 <LINKED_LIST_AddNode>

            console_runtime.list_size++;
 800ac32:	4a07      	ldr	r2, [pc, #28]	; (800ac50 <console_AppendMessageToList+0x94>)
 800ac34:	2381      	movs	r3, #129	; 0x81
 800ac36:	011b      	lsls	r3, r3, #4
 800ac38:	58d3      	ldr	r3, [r2, r3]
 800ac3a:	1c59      	adds	r1, r3, #1
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <console_AppendMessageToList+0x94>)
 800ac3e:	2381      	movs	r3, #129	; 0x81
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	50d1      	str	r1, [r2, r3]
 800ac44:	e000      	b.n	800ac48 <console_AppendMessageToList+0x8c>
            return;
 800ac46:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	b004      	add	sp, #16
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	200007c0 	.word	0x200007c0
 800ac54:	00000808 	.word	0x00000808

0800ac58 <console_ProcessOutput>:

void
console_ProcessOutput ( void )
{
 800ac58:	b5b0      	push	{r4, r5, r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
    if ( console_runtime.list != NULL )
 800ac5e:	4b17      	ldr	r3, [pc, #92]	; (800acbc <console_ProcessOutput+0x64>)
 800ac60:	4a17      	ldr	r2, [pc, #92]	; (800acc0 <console_ProcessOutput+0x68>)
 800ac62:	589b      	ldr	r3, [r3, r2]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d024      	beq.n	800acb2 <console_ProcessOutput+0x5a>
    {
        if ( console_runtime.is_busy == false )
 800ac68:	4b14      	ldr	r3, [pc, #80]	; (800acbc <console_ProcessOutput+0x64>)
 800ac6a:	4a16      	ldr	r2, [pc, #88]	; (800acc4 <console_ProcessOutput+0x6c>)
 800ac6c:	5c9b      	ldrb	r3, [r3, r2]
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2201      	movs	r2, #1
 800ac72:	4053      	eors	r3, r2
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d01b      	beq.n	800acb2 <console_ProcessOutput+0x5a>
        {
            NODE_t * node = console_runtime.list->head;
 800ac7a:	4b10      	ldr	r3, [pc, #64]	; (800acbc <console_ProcessOutput+0x64>)
 800ac7c:	4a10      	ldr	r2, [pc, #64]	; (800acc0 <console_ProcessOutput+0x68>)
 800ac7e:	589b      	ldr	r3, [r3, r2]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	607b      	str	r3, [r7, #4]

            if ( node != NULL )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d013      	beq.n	800acb2 <console_ProcessOutput+0x5a>
            {
                console_runtime.is_busy = true;
 800ac8a:	4b0c      	ldr	r3, [pc, #48]	; (800acbc <console_ProcessOutput+0x64>)
 800ac8c:	4a0d      	ldr	r2, [pc, #52]	; (800acc4 <console_ProcessOutput+0x6c>)
 800ac8e:	2101      	movs	r1, #1
 800ac90:	5499      	strb	r1, [r3, r2]

                HAL_UART_Transmit_IT( console_runtime.dev , ( uint8_t * )node->data , strlen( ( char * )node->data ) );
 800ac92:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <console_ProcessOutput+0x64>)
 800ac94:	681c      	ldr	r4, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685d      	ldr	r5, [r3, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	0018      	movs	r0, r3
 800aca0:	f7f5 fa30 	bl	8000104 <strlen>
 800aca4:	0003      	movs	r3, r0
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	001a      	movs	r2, r3
 800acaa:	0029      	movs	r1, r5
 800acac:	0020      	movs	r0, r4
 800acae:	f7fd fb6d 	bl	800838c <HAL_UART_Transmit_IT>
            }
        }
    }
}
 800acb2:	46c0      	nop			; (mov r8, r8)
 800acb4:	46bd      	mov	sp, r7
 800acb6:	b002      	add	sp, #8
 800acb8:	bdb0      	pop	{r4, r5, r7, pc}
 800acba:	46c0      	nop			; (mov r8, r8)
 800acbc:	200007c0 	.word	0x200007c0
 800acc0:	00000808 	.word	0x00000808
 800acc4:	0000080c 	.word	0x0000080c

0800acc8 <LINKED_LIST_CreateEmptyList>:
//     PUBLIC FUNCTIONS
// ==================================================

LIST_t *
LINKED_LIST_CreateEmptyList ( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
    LIST_t * list = malloc( sizeof( LIST_t ) );
 800acce:	2004      	movs	r0, #4
 800acd0:	f002 f980 	bl	800cfd4 <malloc>
 800acd4:	0003      	movs	r3, r0
 800acd6:	607b      	str	r3, [r7, #4]

    if ( list == NULL )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <LINKED_LIST_CreateEmptyList+0x1a>
    {
        return NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	e003      	b.n	800acea <LINKED_LIST_CreateEmptyList+0x22>
    }

    list->head = NULL;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	601a      	str	r2, [r3, #0]

    return list;
 800ace8:	687b      	ldr	r3, [r7, #4]
}
 800acea:	0018      	movs	r0, r3
 800acec:	46bd      	mov	sp, r7
 800acee:	b002      	add	sp, #8
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <LINKED_LIST_AddNode>:

LINKED_LIST_RESULT_t
LINKED_LIST_AddNode ( LIST_t * list ,
                      void   * data )
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
    if ( ( list == NULL ) || ( data == NULL ) )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <LINKED_LIST_AddNode+0x16>
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <LINKED_LIST_AddNode+0x1a>
    {
        return LINKED_LIST_RESULT_ERROR_NULL_PARAM;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e02b      	b.n	800ad64 <LINKED_LIST_AddNode+0x72>
    }
    else
    if ( linked_list_FindNode( list , data ) != NULL )
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	0011      	movs	r1, r2
 800ad12:	0018      	movs	r0, r3
 800ad14:	f000 f8cd 	bl	800aeb2 <linked_list_FindNode>
 800ad18:	1e03      	subs	r3, r0, #0
 800ad1a:	d001      	beq.n	800ad20 <LINKED_LIST_AddNode+0x2e>
    {
        return LINKED_LIST_RESULT_ERROR_NODE_ALREADY_IN_LIST;
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e021      	b.n	800ad64 <LINKED_LIST_AddNode+0x72>
    }

    NODE_t * new_node = linked_list_CreateNode( data );
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	0018      	movs	r0, r3
 800ad24:	f000 f8ac 	bl	800ae80 <linked_list_CreateNode>
 800ad28:	0003      	movs	r3, r0
 800ad2a:	60bb      	str	r3, [r7, #8]

    if ( new_node != NULL )
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d017      	beq.n	800ad62 <LINKED_LIST_AddNode+0x70>
    {
        if ( list->head == NULL )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <LINKED_LIST_AddNode+0x50>
        {
            list->head = new_node;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	e00d      	b.n	800ad5e <LINKED_LIST_AddNode+0x6c>
        }
        else
        {
            NODE_t * last_node = list->head;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]

            while ( last_node->next != NULL )
 800ad48:	e002      	b.n	800ad50 <LINKED_LIST_AddNode+0x5e>
            {
                last_node = last_node->next;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
            while ( last_node->next != NULL )
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1f8      	bne.n	800ad4a <LINKED_LIST_AddNode+0x58>
            }

            last_node->next = new_node;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	601a      	str	r2, [r3, #0]
        }

        return LINKED_LIST_RESULT_SUCCESS;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e000      	b.n	800ad64 <LINKED_LIST_AddNode+0x72>
    }
    else
    {
        return LINKED_LIST_RESULT_ERROR_MEMORY_ALLOCATION;
 800ad62:	2304      	movs	r3, #4
    }
}
 800ad64:	0018      	movs	r0, r3
 800ad66:	46bd      	mov	sp, r7
 800ad68:	b004      	add	sp, #16
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <LINKED_LIST_DeleteNode>:

LINKED_LIST_RESULT_t
LINKED_LIST_DeleteNode ( LIST_t * list ,
                         void   * data )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
    if ( ( list == NULL ) || ( data == NULL ) )
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <LINKED_LIST_DeleteNode+0x16>
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <LINKED_LIST_DeleteNode+0x1a>
    {
        return LINKED_LIST_RESULT_ERROR_NULL_PARAM;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e02f      	b.n	800ade6 <LINKED_LIST_DeleteNode+0x7a>
    }

    if ( linked_list_FindNode( list , data ) != NULL )
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	0011      	movs	r1, r2
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f000 f890 	bl	800aeb2 <linked_list_FindNode>
 800ad92:	1e03      	subs	r3, r0, #0
 800ad94:	d026      	beq.n	800ade4 <LINKED_LIST_DeleteNode+0x78>
    {
        NODE_t * current  = list->head;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60bb      	str	r3, [r7, #8]
        NODE_t * previous = current;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	60fb      	str	r3, [r7, #12]

        while ( current != NULL )
 800ada0:	e01d      	b.n	800adde <LINKED_LIST_DeleteNode+0x72>
        {
            if ( current->data == data )
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d113      	bne.n	800add4 <LINKED_LIST_DeleteNode+0x68>
            {
                previous->next = current->next;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	601a      	str	r2, [r3, #0]

                if ( current == list->head )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d103      	bne.n	800adc6 <LINKED_LIST_DeleteNode+0x5a>
                {
                    list->head = current->next;
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
                }

                FREE( ( void ** )&current );
 800adc6:	2308      	movs	r3, #8
 800adc8:	18fb      	adds	r3, r7, r3
 800adca:	0018      	movs	r0, r3
 800adcc:	f000 f848 	bl	800ae60 <FREE>

                return LINKED_LIST_RESULT_SUCCESS;
 800add0:	2300      	movs	r3, #0
 800add2:	e008      	b.n	800ade6 <LINKED_LIST_DeleteNode+0x7a>
            }

            previous = current;
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	60fb      	str	r3, [r7, #12]
            current  = current->next;
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60bb      	str	r3, [r7, #8]
        while ( current != NULL )
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1de      	bne.n	800ada2 <LINKED_LIST_DeleteNode+0x36>
        }
    }

    return LINKED_LIST_RESULT_ERROR_NODE_NOT_IN_LIST;
 800ade4:	2303      	movs	r3, #3
}
 800ade6:	0018      	movs	r0, r3
 800ade8:	46bd      	mov	sp, r7
 800adea:	b004      	add	sp, #16
 800adec:	bd80      	pop	{r7, pc}

0800adee <LINKED_LIST_FindNode>:

NODE_t *
LINKED_LIST_FindNode ( LIST_t * list ,
                       void   * data )
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
    return linked_list_FindNode( list , data );
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	0011      	movs	r1, r2
 800adfe:	0018      	movs	r0, r3
 800ae00:	f000 f857 	bl	800aeb2 <linked_list_FindNode>
 800ae04:	0003      	movs	r3, r0
}
 800ae06:	0018      	movs	r0, r3
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	b002      	add	sp, #8
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <LINKED_LIST_DestroyList>:
    return LINKED_LIST_RESULT_SUCCESS;
}

LINKED_LIST_RESULT_t
LINKED_LIST_DestroyList ( LIST_t * list )
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
    if ( list == NULL )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <LINKED_LIST_DestroyList+0x12>
    {
        return LINKED_LIST_RESULT_ERROR_NULL_PARAM;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e01b      	b.n	800ae58 <LINKED_LIST_DestroyList+0x4a>
    }

    if ( list->head != NULL )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d012      	beq.n	800ae4e <LINKED_LIST_DestroyList+0x40>
    {
        NODE_t * current = list->head;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	60bb      	str	r3, [r7, #8]
        NODE_t * next    = current;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	60fb      	str	r3, [r7, #12]

        while ( current != NULL )
 800ae32:	e009      	b.n	800ae48 <LINKED_LIST_DestroyList+0x3a>
        {
            next = current->next;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	60fb      	str	r3, [r7, #12]

            FREE( ( void ** )&current );
 800ae3a:	2308      	movs	r3, #8
 800ae3c:	18fb      	adds	r3, r7, r3
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f000 f80e 	bl	800ae60 <FREE>

            current = next;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	60bb      	str	r3, [r7, #8]
        while ( current != NULL )
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f2      	bne.n	800ae34 <LINKED_LIST_DestroyList+0x26>
        }
    }

    FREE( ( void ** )&list );
 800ae4e:	1d3b      	adds	r3, r7, #4
 800ae50:	0018      	movs	r0, r3
 800ae52:	f000 f805 	bl	800ae60 <FREE>

    return LINKED_LIST_RESULT_SUCCESS;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	0018      	movs	r0, r3
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	b004      	add	sp, #16
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <FREE>:
//     LOCAL FUNCTIONS
// ==================================================

void
FREE ( void ** ptr )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
    free( *ptr );
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	f002 f8bb 	bl	800cfe8 <free>

    *ptr = NULL;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]
}
 800ae78:	46c0      	nop			; (mov r8, r8)
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	b002      	add	sp, #8
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <linked_list_CreateNode>:

NODE_t *
linked_list_CreateNode ( void * data )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
    NODE_t * node = malloc( sizeof( NODE_t ) );
 800ae88:	2008      	movs	r0, #8
 800ae8a:	f002 f8a3 	bl	800cfd4 <malloc>
 800ae8e:	0003      	movs	r3, r0
 800ae90:	60fb      	str	r3, [r7, #12]

    if ( node == NULL )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <linked_list_CreateNode+0x1c>
    {
        return NULL;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	e006      	b.n	800aeaa <linked_list_CreateNode+0x2a>
    }

    node->data = data;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	605a      	str	r2, [r3, #4]
    node->next = NULL;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]

    return node;
 800aea8:	68fb      	ldr	r3, [r7, #12]
}
 800aeaa:	0018      	movs	r0, r3
 800aeac:	46bd      	mov	sp, r7
 800aeae:	b004      	add	sp, #16
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <linked_list_FindNode>:

NODE_t *
linked_list_FindNode ( LIST_t * list ,
                       void   * data )
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
    NODE_t * node = list->head;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	60fb      	str	r3, [r7, #12]

    while ( node != NULL )
 800aec2:	e009      	b.n	800aed8 <linked_list_FindNode+0x26>
    {
        if ( node->data == data )
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d101      	bne.n	800aed2 <linked_list_FindNode+0x20>
        {
            return node;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	e006      	b.n	800aee0 <linked_list_FindNode+0x2e>
        }

        node = node->next;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60fb      	str	r3, [r7, #12]
    while ( node != NULL )
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1f2      	bne.n	800aec4 <linked_list_FindNode+0x12>
    }

    return NULL;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	0018      	movs	r0, r3
 800aee2:	46bd      	mov	sp, r7
 800aee4:	b004      	add	sp, #16
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <SCHEDULER_Init>:
//     PUBLIC FUNCTIONS
// ==================================================

SCHEDULER_RESULT_t
SCHEDULER_Init ( uint32_t period_us )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
    task_list = LINKED_LIST_CreateEmptyList();
 800aef0:	f7ff feea 	bl	800acc8 <LINKED_LIST_CreateEmptyList>
 800aef4:	0002      	movs	r2, r0
 800aef6:	4b08      	ldr	r3, [pc, #32]	; (800af18 <SCHEDULER_Init+0x30>)
 800aef8:	601a      	str	r2, [r3, #0]

    if ( task_list == NULL )
 800aefa:	4b07      	ldr	r3, [pc, #28]	; (800af18 <SCHEDULER_Init+0x30>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <SCHEDULER_Init+0x1e>
    {
        return SCHEDULER_RESULT_ERROR_MEMORY_ALLOCATION;
 800af02:	2306      	movs	r3, #6
 800af04:	e003      	b.n	800af0e <SCHEDULER_Init+0x26>
    }

    loop_period_us = period_us;
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <SCHEDULER_Init+0x34>)
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	601a      	str	r2, [r3, #0]

    return SCHEDULER_RESULT_SUCCESS;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	0018      	movs	r0, r3
 800af10:	46bd      	mov	sp, r7
 800af12:	b002      	add	sp, #8
 800af14:	bd80      	pop	{r7, pc}
 800af16:	46c0      	nop			; (mov r8, r8)
 800af18:	20000ff4 	.word	0x20000ff4
 800af1c:	20000ff0 	.word	0x20000ff0

0800af20 <SCHEDULER_MonitoringLoop>:
    return SCHEDULER_RESULT_SUCCESS;
}

SCHEDULER_RESULT_t
SCHEDULER_MonitoringLoop ( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
    if ( task_list == NULL )
 800af26:	4b26      	ldr	r3, [pc, #152]	; (800afc0 <SCHEDULER_MonitoringLoop+0xa0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d101      	bne.n	800af32 <SCHEDULER_MonitoringLoop+0x12>
    {
        return SCHEDULER_RESULT_ERROR_SCHEDULER_NOT_INIT;
 800af2e:	2302      	movs	r3, #2
 800af30:	e042      	b.n	800afb8 <SCHEDULER_MonitoringLoop+0x98>
    }

    NODE_t * task = task_list->head;
 800af32:	4b23      	ldr	r3, [pc, #140]	; (800afc0 <SCHEDULER_MonitoringLoop+0xa0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	607b      	str	r3, [r7, #4]

    while ( task != NULL )
 800af3a:	e039      	b.n	800afb0 <SCHEDULER_MonitoringLoop+0x90>
    {
        if ( task->data != NULL )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d032      	beq.n	800afaa <SCHEDULER_MonitoringLoop+0x8a>
        {
            SCHEDULER_TASK_t * data = ( SCHEDULER_TASK_t * )task->data;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	603b      	str	r3, [r7, #0]

            if ( data->status == SCHEDULER_TASK_STATUS_STARTED )
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	7c1b      	ldrb	r3, [r3, #16]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d12b      	bne.n	800afaa <SCHEDULER_MonitoringLoop+0x8a>
            {
                data->count += loop_period_us;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	695a      	ldr	r2, [r3, #20]
 800af56:	4b1b      	ldr	r3, [pc, #108]	; (800afc4 <SCHEDULER_MonitoringLoop+0xa4>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	18d2      	adds	r2, r2, r3
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	615a      	str	r2, [r3, #20]

                if ( data->count >= data->timeout_us )
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	695a      	ldr	r2, [r3, #20]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d31e      	bcc.n	800afaa <SCHEDULER_MonitoringLoop+0x8a>
                {
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800af6c:	2380      	movs	r3, #128	; 0x80
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	4815      	ldr	r0, [pc, #84]	; (800afc8 <SCHEDULER_MonitoringLoop+0xa8>)
 800af72:	2201      	movs	r2, #1
 800af74:	0019      	movs	r1, r3
 800af76:	f7fa fc66 	bl	8005846 <HAL_GPIO_WritePin>
                    data->callback( data->arg );
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	0018      	movs	r0, r3
 800af84:	4790      	blx	r2
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800af86:	2380      	movs	r3, #128	; 0x80
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	480f      	ldr	r0, [pc, #60]	; (800afc8 <SCHEDULER_MonitoringLoop+0xa8>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	0019      	movs	r1, r3
 800af90:	f7fa fc59 	bl	8005846 <HAL_GPIO_WritePin>

                    if ( data->type == SCHEDULER_TASK_TYPE_PERIODIC )
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	7a1b      	ldrb	r3, [r3, #8]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d103      	bne.n	800afa4 <SCHEDULER_MonitoringLoop+0x84>
                    {
                        data->count = 0;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2200      	movs	r2, #0
 800afa0:	615a      	str	r2, [r3, #20]
 800afa2:	e002      	b.n	800afaa <SCHEDULER_MonitoringLoop+0x8a>
                    }
                    else
                    {
                        data->status = SCHEDULER_TASK_STATUS_STOPPED;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2202      	movs	r2, #2
 800afa8:	741a      	strb	r2, [r3, #16]
                    }
                }
            }
        }

        task = task->next;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	607b      	str	r3, [r7, #4]
    while ( task != NULL )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1c2      	bne.n	800af3c <SCHEDULER_MonitoringLoop+0x1c>
    }

    return SCHEDULER_RESULT_SUCCESS;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	0018      	movs	r0, r3
 800afba:	46bd      	mov	sp, r7
 800afbc:	b002      	add	sp, #8
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	20000ff4 	.word	0x20000ff4
 800afc4:	20000ff0 	.word	0x20000ff0
 800afc8:	48000400 	.word	0x48000400

0800afcc <SCHEDULER_Task_Register>:

SCHEDULER_RESULT_t
SCHEDULER_Task_Register ( SCHEDULER_TASK_t * task )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
    if ( task == NULL )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <SCHEDULER_Task_Register+0x12>
    {
        return SCHEDULER_RESULT_ERROR_NULL_PARAM;
 800afda:	2303      	movs	r3, #3
 800afdc:	e00e      	b.n	800affc <SCHEDULER_Task_Register+0x30>
    }

    if ( LINKED_LIST_AddNode( task_list , ( void * )task ) == LINKED_LIST_RESULT_SUCCESS )
 800afde:	4b09      	ldr	r3, [pc, #36]	; (800b004 <SCHEDULER_Task_Register+0x38>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	0011      	movs	r1, r2
 800afe6:	0018      	movs	r0, r3
 800afe8:	f7ff fe83 	bl	800acf2 <LINKED_LIST_AddNode>
 800afec:	1e03      	subs	r3, r0, #0
 800afee:	d104      	bne.n	800affa <SCHEDULER_Task_Register+0x2e>
    {
        task->status = SCHEDULER_TASK_STATUS_STOPPED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	741a      	strb	r2, [r3, #16]
        //task->count  = 0;

        return SCHEDULER_RESULT_SUCCESS;
 800aff6:	2300      	movs	r3, #0
 800aff8:	e000      	b.n	800affc <SCHEDULER_Task_Register+0x30>
    }

    return SCHEDULER_RESULT_ERROR_TASK_ALREADY_REGISTERED;
 800affa:	2305      	movs	r3, #5
}
 800affc:	0018      	movs	r0, r3
 800affe:	46bd      	mov	sp, r7
 800b000:	b002      	add	sp, #8
 800b002:	bd80      	pop	{r7, pc}
 800b004:	20000ff4 	.word	0x20000ff4

0800b008 <SCHEDULER_Task_Unregister>:

SCHEDULER_RESULT_t
SCHEDULER_Task_Unregister ( SCHEDULER_TASK_t * task )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
    if ( task == NULL )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <SCHEDULER_Task_Unregister+0x12>
    {
        return SCHEDULER_RESULT_ERROR_NULL_PARAM;
 800b016:	2303      	movs	r3, #3
 800b018:	e00b      	b.n	800b032 <SCHEDULER_Task_Unregister+0x2a>
    }

    if ( LINKED_LIST_DeleteNode( task_list , ( void * )task ) == LINKED_LIST_RESULT_SUCCESS )
 800b01a:	4b08      	ldr	r3, [pc, #32]	; (800b03c <SCHEDULER_Task_Unregister+0x34>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	0011      	movs	r1, r2
 800b022:	0018      	movs	r0, r3
 800b024:	f7ff fea2 	bl	800ad6c <LINKED_LIST_DeleteNode>
 800b028:	1e03      	subs	r3, r0, #0
 800b02a:	d101      	bne.n	800b030 <SCHEDULER_Task_Unregister+0x28>
    {
        return SCHEDULER_RESULT_SUCCESS;
 800b02c:	2300      	movs	r3, #0
 800b02e:	e000      	b.n	800b032 <SCHEDULER_Task_Unregister+0x2a>
    }

    return SCHEDULER_RESULT_ERROR_UNREGISTERED_TASK;
 800b030:	2304      	movs	r3, #4
}
 800b032:	0018      	movs	r0, r3
 800b034:	46bd      	mov	sp, r7
 800b036:	b002      	add	sp, #8
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	20000ff4 	.word	0x20000ff4

0800b040 <SCHEDULER_Task_Start>:

SCHEDULER_RESULT_t
SCHEDULER_Task_Start ( SCHEDULER_TASK_t * task )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
    if ( task == NULL )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <SCHEDULER_Task_Start+0x12>
    {
        return SCHEDULER_RESULT_ERROR_NULL_PARAM;
 800b04e:	2303      	movs	r3, #3
 800b050:	e014      	b.n	800b07c <SCHEDULER_Task_Start+0x3c>
    }
    else
    if ( LINKED_LIST_FindNode( task_list , ( void * )task ) == NULL )
 800b052:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <SCHEDULER_Task_Start+0x44>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	0011      	movs	r1, r2
 800b05a:	0018      	movs	r0, r3
 800b05c:	f7ff fec7 	bl	800adee <LINKED_LIST_FindNode>
 800b060:	1e03      	subs	r3, r0, #0
 800b062:	d101      	bne.n	800b068 <SCHEDULER_Task_Start+0x28>
    {
        return SCHEDULER_RESULT_ERROR_UNREGISTERED_TASK;
 800b064:	2304      	movs	r3, #4
 800b066:	e009      	b.n	800b07c <SCHEDULER_Task_Start+0x3c>
    }
    else
    if ( task->status == SCHEDULER_TASK_STATUS_STARTED )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	7c1b      	ldrb	r3, [r3, #16]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d101      	bne.n	800b074 <SCHEDULER_Task_Start+0x34>
    {
        return SCHEDULER_RESULT_ERROR_TASK_ALREADY_STARTED;
 800b070:	2307      	movs	r3, #7
 800b072:	e003      	b.n	800b07c <SCHEDULER_Task_Start+0x3c>
    }

    task->status = SCHEDULER_TASK_STATUS_STARTED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	741a      	strb	r2, [r3, #16]

    return SCHEDULER_RESULT_SUCCESS;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	0018      	movs	r0, r3
 800b07e:	46bd      	mov	sp, r7
 800b080:	b002      	add	sp, #8
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20000ff4 	.word	0x20000ff4

0800b088 <SCHEDULER_Task_Stop>:

SCHEDULER_RESULT_t
SCHEDULER_Task_Stop ( SCHEDULER_TASK_t * task )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
    if ( task == NULL )
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <SCHEDULER_Task_Stop+0x12>
    {
        return SCHEDULER_RESULT_ERROR_NULL_PARAM;
 800b096:	2303      	movs	r3, #3
 800b098:	e014      	b.n	800b0c4 <SCHEDULER_Task_Stop+0x3c>
    }
    else
    if ( LINKED_LIST_FindNode( task_list , ( void * )task ) == NULL )
 800b09a:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <SCHEDULER_Task_Stop+0x44>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	0011      	movs	r1, r2
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	f7ff fea3 	bl	800adee <LINKED_LIST_FindNode>
 800b0a8:	1e03      	subs	r3, r0, #0
 800b0aa:	d101      	bne.n	800b0b0 <SCHEDULER_Task_Stop+0x28>
    {
        return SCHEDULER_RESULT_ERROR_UNREGISTERED_TASK;
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	e009      	b.n	800b0c4 <SCHEDULER_Task_Stop+0x3c>
    }
    else
    if ( task->status == SCHEDULER_TASK_STATUS_STOPPED )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	7c1b      	ldrb	r3, [r3, #16]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d101      	bne.n	800b0bc <SCHEDULER_Task_Stop+0x34>
    {
        return SCHEDULER_RESULT_ERROR_TASK_ALREADY_STOPPED;
 800b0b8:	2308      	movs	r3, #8
 800b0ba:	e003      	b.n	800b0c4 <SCHEDULER_Task_Stop+0x3c>
    }

    task->status = SCHEDULER_TASK_STATUS_STOPPED;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	741a      	strb	r2, [r3, #16]

    return SCHEDULER_RESULT_SUCCESS;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	0018      	movs	r0, r3
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	b002      	add	sp, #8
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	20000ff4 	.word	0x20000ff4

0800b0d0 <DRV_ApplyPWM>:
 * L'entrée doit etre comprise entre 0 et 600 car la periode du signal
 * PWM est égale à un comptage de 600.
 */
void
DRV_ApplyPWM(uint32_t dc)
{
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
	const uint32_t max = TIM1->ARR ; 	//1 period is 600 cnt
 800b0d8:	4b10      	ldr	r3, [pc, #64]	; (800b11c <DRV_ApplyPWM+0x4c>)
 800b0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0dc:	60fb      	str	r3, [r7, #12]



	if(dc < max)
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d213      	bcs.n	800b10e <DRV_ApplyPWM+0x3e>
		DRV_PWM_DUTY_CYCLE = dc * max/100.0;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4353      	muls	r3, r2
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	f7f7 ff09 	bl	8002f04 <__aeabi_ui2d>
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	4b0a      	ldr	r3, [pc, #40]	; (800b120 <DRV_ApplyPWM+0x50>)
 800b0f6:	f7f6 fc81 	bl	80019fc <__aeabi_ddiv>
 800b0fa:	0002      	movs	r2, r0
 800b0fc:	000b      	movs	r3, r1
 800b0fe:	4c07      	ldr	r4, [pc, #28]	; (800b11c <DRV_ApplyPWM+0x4c>)
 800b100:	0010      	movs	r0, r2
 800b102:	0019      	movs	r1, r3
 800b104:	f7f5 fa20 	bl	8000548 <__aeabi_d2uiz>
 800b108:	0003      	movs	r3, r0
 800b10a:	6363      	str	r3, [r4, #52]	; 0x34
	else
		DRV_PWM_DUTY_CYCLE = max;

}
 800b10c:	e002      	b.n	800b114 <DRV_ApplyPWM+0x44>
		DRV_PWM_DUTY_CYCLE = max;
 800b10e:	4b03      	ldr	r3, [pc, #12]	; (800b11c <DRV_ApplyPWM+0x4c>)
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b114:	46c0      	nop			; (mov r8, r8)
 800b116:	46bd      	mov	sp, r7
 800b118:	b005      	add	sp, #20
 800b11a:	bd90      	pop	{r4, r7, pc}
 800b11c:	40012c00 	.word	0x40012c00
 800b120:	40590000 	.word	0x40590000

0800b124 <DRV_SetPWM>:
/*
 * Permet de définir le rapport cyclique de la PWM envoyée au driver.
 * L’entrée doit être comprise entre -100 et 100 et correspond au rapport cyclique signé.
 */
void
DRV_SetPWM (int32_t dc){
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]

	if(dc>=0)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	db08      	blt.n	800b144 <DRV_SetPWM+0x20>
		HAL_GPIO_WritePin(DRV_DIR_GPIO_Port, DRV_DIR_Pin, GPIO_PIN_SET); 	//DIR
 800b132:	2380      	movs	r3, #128	; 0x80
 800b134:	00d9      	lsls	r1, r3, #3
 800b136:	2390      	movs	r3, #144	; 0x90
 800b138:	05db      	lsls	r3, r3, #23
 800b13a:	2201      	movs	r2, #1
 800b13c:	0018      	movs	r0, r3
 800b13e:	f7fa fb82 	bl	8005846 <HAL_GPIO_WritePin>
 800b142:	e007      	b.n	800b154 <DRV_SetPWM+0x30>
	else
		HAL_GPIO_WritePin(DRV_DIR_GPIO_Port, DRV_DIR_Pin, GPIO_PIN_RESET); 	//DIR
 800b144:	2380      	movs	r3, #128	; 0x80
 800b146:	00d9      	lsls	r1, r3, #3
 800b148:	2390      	movs	r3, #144	; 0x90
 800b14a:	05db      	lsls	r3, r3, #23
 800b14c:	2200      	movs	r2, #0
 800b14e:	0018      	movs	r0, r3
 800b150:	f7fa fb79 	bl	8005846 <HAL_GPIO_WritePin>

	DRV8353.signal.INHC = HAL_GPIO_ReadPin(DRV_DIR_GPIO_Port,DRV_DIR_Pin);	//update local struct
 800b154:	2380      	movs	r3, #128	; 0x80
 800b156:	00da      	lsls	r2, r3, #3
 800b158:	2390      	movs	r3, #144	; 0x90
 800b15a:	05db      	lsls	r3, r3, #23
 800b15c:	0011      	movs	r1, r2
 800b15e:	0018      	movs	r0, r3
 800b160:	f7fa fb54 	bl	800580c <HAL_GPIO_ReadPin>
 800b164:	0003      	movs	r3, r0
 800b166:	1e5a      	subs	r2, r3, #1
 800b168:	4193      	sbcs	r3, r2
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	4b09      	ldr	r3, [pc, #36]	; (800b194 <DRV_SetPWM+0x70>)
 800b16e:	71da      	strb	r2, [r3, #7]

	dc = abs(dc);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	17da      	asrs	r2, r3, #31
 800b174:	189b      	adds	r3, r3, r2
 800b176:	4053      	eors	r3, r2
 800b178:	607b      	str	r3, [r7, #4]

	if(dc > Max_DC) dc = Max_DC;	//Saturation
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2b61      	cmp	r3, #97	; 0x61
 800b17e:	dd01      	ble.n	800b184 <DRV_SetPWM+0x60>
 800b180:	2361      	movs	r3, #97	; 0x61
 800b182:	607b      	str	r3, [r7, #4]

	DRV_ApplyPWM(dc);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	0018      	movs	r0, r3
 800b188:	f7ff ffa2 	bl	800b0d0 <DRV_ApplyPWM>

}
 800b18c:	46c0      	nop			; (mov r8, r8)
 800b18e:	46bd      	mov	sp, r7
 800b190:	b002      	add	sp, #8
 800b192:	bd80      	pop	{r7, pc}
 800b194:	20000ff8 	.word	0x20000ff8

0800b198 <DRV_SetMode>:
 * Au changement de mode, la valeur du rapport cyclique est remise à 0.
 * En cas de sortie du mode veille (SLEEP), la fonction drv_wake()
 * est appelée pour renvoyer la configuration au DRV8353 via SPI.
 */
HAL_StatusTypeDef
DRV_SetMode(DRV8353_MODE_t mode) {
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	0002      	movs	r2, r0
 800b1a0:	1dfb      	adds	r3, r7, #7
 800b1a2:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef status = HAL_OK;
 800b1a4:	230f      	movs	r3, #15
 800b1a6:	18fb      	adds	r3, r7, r3
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	701a      	strb	r2, [r3, #0]

	if (DRV8353.mode != mode) {
 800b1ac:	4b25      	ldr	r3, [pc, #148]	; (800b244 <DRV_SetMode+0xac>)
 800b1ae:	7b1b      	ldrb	r3, [r3, #12]
 800b1b0:	1dfa      	adds	r2, r7, #7
 800b1b2:	7812      	ldrb	r2, [r2, #0]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d03e      	beq.n	800b236 <DRV_SetMode+0x9e>

		if (mode < DRV_MODE_SLEEP || mode > DRV_MODE_OPERATING)
 800b1b8:	1dfb      	adds	r3, r7, #7
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d902      	bls.n	800b1c6 <DRV_SetMode+0x2e>
			mode = DRV_MODE_SLEEP;
 800b1c0:	1dfb      	adds	r3, r7, #7
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	701a      	strb	r2, [r3, #0]

		if (mode == DRV_MODE_SLEEP)
 800b1c6:	1dfb      	adds	r3, r7, #7
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d102      	bne.n	800b1d4 <DRV_SetMode+0x3c>
			drv_sleep(); 		//Put the driver in sleep mode if needed
 800b1ce:	f000 f8af 	bl	800b330 <drv_sleep>
 800b1d2:	e00d      	b.n	800b1f0 <DRV_SetMode+0x58>

		else if (DRV8353.mode == DRV_MODE_SLEEP) //if mode change from sleep mode
 800b1d4:	4b1b      	ldr	r3, [pc, #108]	; (800b244 <DRV_SetMode+0xac>)
 800b1d6:	7b1b      	ldrb	r3, [r3, #12]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d109      	bne.n	800b1f0 <DRV_SetMode+0x58>
			status |= drv_wake(); 						//wake up and configure
 800b1dc:	f000 f8c4 	bl	800b368 <drv_wake>
 800b1e0:	0003      	movs	r3, r0
 800b1e2:	0019      	movs	r1, r3
 800b1e4:	220f      	movs	r2, #15
 800b1e6:	18bb      	adds	r3, r7, r2
 800b1e8:	18ba      	adds	r2, r7, r2
 800b1ea:	7812      	ldrb	r2, [r2, #0]
 800b1ec:	430a      	orrs	r2, r1
 800b1ee:	701a      	strb	r2, [r3, #0]

		if (status == HAL_OK)	//if no problem while wakening the driver
 800b1f0:	230f      	movs	r3, #15
 800b1f2:	18fb      	adds	r3, r7, r3
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d103      	bne.n	800b202 <DRV_SetMode+0x6a>
			DRV8353.mode = mode; //Apply the new mode
 800b1fa:	4b12      	ldr	r3, [pc, #72]	; (800b244 <DRV_SetMode+0xac>)
 800b1fc:	1dfa      	adds	r2, r7, #7
 800b1fe:	7812      	ldrb	r2, [r2, #0]
 800b200:	731a      	strb	r2, [r3, #12]

		DRV_ApplyPWM(0); //Set duty cycle to 0 because mode is still not applied and hall interrupt can happen in between
 800b202:	2000      	movs	r0, #0
 800b204:	f7ff ff64 	bl	800b0d0 <DRV_ApplyPWM>

		DRV_UpdateHalls(); //Update Outputs
 800b208:	f000 f820 	bl	800b24c <DRV_UpdateHalls>

		//Set the nBrake when mode is not BRAKE
		HAL_GPIO_WritePin(DRV_NBRAKE_GPIO_Port, DRV_NBRAKE_Pin,
 800b20c:	1dfb      	adds	r3, r7, #7
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	3b03      	subs	r3, #3
 800b212:	1e5a      	subs	r2, r3, #1
 800b214:	4193      	sbcs	r3, r2
 800b216:	b2db      	uxtb	r3, r3
 800b218:	001a      	movs	r2, r3
 800b21a:	2380      	movs	r3, #128	; 0x80
 800b21c:	015b      	lsls	r3, r3, #5
 800b21e:	480a      	ldr	r0, [pc, #40]	; (800b248 <DRV_SetMode+0xb0>)
 800b220:	0019      	movs	r1, r3
 800b222:	f7fa fb10 	bl	8005846 <HAL_GPIO_WritePin>
				(mode != DRV_MODE_BRAKE));	//nBRAKE

		//Reset DIR pin (defined later when DRV_SetPWM is called)
		HAL_GPIO_WritePin(DRV_DIR_GPIO_Port, DRV_DIR_Pin, GPIO_PIN_RESET);//DIR
 800b226:	2380      	movs	r3, #128	; 0x80
 800b228:	00d9      	lsls	r1, r3, #3
 800b22a:	2390      	movs	r3, #144	; 0x90
 800b22c:	05db      	lsls	r3, r3, #23
 800b22e:	2200      	movs	r2, #0
 800b230:	0018      	movs	r0, r3
 800b232:	f7fa fb08 	bl	8005846 <HAL_GPIO_WritePin>
	}
	return status;
 800b236:	230f      	movs	r3, #15
 800b238:	18fb      	adds	r3, r7, r3
 800b23a:	781b      	ldrb	r3, [r3, #0]
}
 800b23c:	0018      	movs	r0, r3
 800b23e:	46bd      	mov	sp, r7
 800b240:	b004      	add	sp, #16
 800b242:	bd80      	pop	{r7, pc}
 800b244:	20000ff8 	.word	0x20000ff8
 800b248:	48000800 	.word	0x48000800

0800b24c <DRV_UpdateHalls>:
 * Les sorties sont égales aux entrées uniquement en mode OPERATING.
 * En mode ALIGN elles sont forcées à l’état haut et dans tous les autres modes
 * elles sont forcées à l’état bas.
 */
void
DRV_UpdateHalls() {
 800b24c:	b590      	push	{r4, r7, lr}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV_HALL_C_GPIO_Port, DRV_HALL_C_Pin, hall_C); 	//HALL_C

	///////// FIN de TEST ////////////////
*/

	if ((DRV8353.mode) == DRV_MODE_OPERATING) {
 800b252:	4b32      	ldr	r3, [pc, #200]	; (800b31c <DRV_UpdateHalls+0xd0>)
 800b254:	7b1b      	ldrb	r3, [r3, #12]
 800b256:	2b04      	cmp	r3, #4
 800b258:	d133      	bne.n	800b2c2 <DRV_UpdateHalls+0x76>

		GPIO_PinState hall_A = HAL_GPIO_ReadPin(MTR_HALL_B_GPIO_Port, MTR_HALL_B_Pin); 	//HALL_A signal come from B connector
 800b25a:	1dfc      	adds	r4, r7, #7
 800b25c:	4b30      	ldr	r3, [pc, #192]	; (800b320 <DRV_UpdateHalls+0xd4>)
 800b25e:	2180      	movs	r1, #128	; 0x80
 800b260:	0018      	movs	r0, r3
 800b262:	f7fa fad3 	bl	800580c <HAL_GPIO_ReadPin>
 800b266:	0003      	movs	r3, r0
 800b268:	7023      	strb	r3, [r4, #0]
		GPIO_PinState hall_B = HAL_GPIO_ReadPin(MTR_HALL_A_GPIO_Port, MTR_HALL_A_Pin);	//HALL_B signal come from A connector
 800b26a:	1dbc      	adds	r4, r7, #6
 800b26c:	4b2c      	ldr	r3, [pc, #176]	; (800b320 <DRV_UpdateHalls+0xd4>)
 800b26e:	2140      	movs	r1, #64	; 0x40
 800b270:	0018      	movs	r0, r3
 800b272:	f7fa facb 	bl	800580c <HAL_GPIO_ReadPin>
 800b276:	0003      	movs	r3, r0
 800b278:	7023      	strb	r3, [r4, #0]
		GPIO_PinState hall_C = HAL_GPIO_ReadPin(MTR_HALL_C_GPIO_Port, MTR_HALL_C_Pin);	//HALL_C signal come from C connector
 800b27a:	1d7c      	adds	r4, r7, #5
 800b27c:	2380      	movs	r3, #128	; 0x80
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	4a27      	ldr	r2, [pc, #156]	; (800b320 <DRV_UpdateHalls+0xd4>)
 800b282:	0019      	movs	r1, r3
 800b284:	0010      	movs	r0, r2
 800b286:	f7fa fac1 	bl	800580c <HAL_GPIO_ReadPin>
 800b28a:	0003      	movs	r3, r0
 800b28c:	7023      	strb	r3, [r4, #0]

		HAL_GPIO_WritePin(DRV_HALL_A_GPIO_Port, DRV_HALL_A_Pin, hall_A); 	//HALL_A
 800b28e:	1dfb      	adds	r3, r7, #7
 800b290:	781a      	ldrb	r2, [r3, #0]
 800b292:	2380      	movs	r3, #128	; 0x80
 800b294:	00db      	lsls	r3, r3, #3
 800b296:	4822      	ldr	r0, [pc, #136]	; (800b320 <DRV_UpdateHalls+0xd4>)
 800b298:	0019      	movs	r1, r3
 800b29a:	f7fa fad4 	bl	8005846 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DRV_HALL_B_GPIO_Port, DRV_HALL_B_Pin, hall_B); 	//HALL_B
 800b29e:	1dbb      	adds	r3, r7, #6
 800b2a0:	781a      	ldrb	r2, [r3, #0]
 800b2a2:	2380      	movs	r3, #128	; 0x80
 800b2a4:	0099      	lsls	r1, r3, #2
 800b2a6:	2390      	movs	r3, #144	; 0x90
 800b2a8:	05db      	lsls	r3, r3, #23
 800b2aa:	0018      	movs	r0, r3
 800b2ac:	f7fa facb 	bl	8005846 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DRV_HALL_C_GPIO_Port, DRV_HALL_C_Pin, hall_C); 	//HALL_C
 800b2b0:	1d7b      	adds	r3, r7, #5
 800b2b2:	781a      	ldrb	r2, [r3, #0]
 800b2b4:	2380      	movs	r3, #128	; 0x80
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	4819      	ldr	r0, [pc, #100]	; (800b320 <DRV_UpdateHalls+0xd4>)
 800b2ba:	0019      	movs	r1, r3
 800b2bc:	f7fa fac3 	bl	8005846 <HAL_GPIO_WritePin>
/*
	DRV8353.signal.INLA = HAL_GPIO_ReadPin(DRV_HALL_A_GPIO_Port,DRV_HALL_A_Pin);	//HALL_A
	DRV8353.signal.INHB = HAL_GPIO_ReadPin(DRV_HALL_A_GPIO_Port,DRV_HALL_A_Pin);	//HALL_B
	DRV8353.signal.INLB = HAL_GPIO_ReadPin(DRV_HALL_A_GPIO_Port,DRV_HALL_A_Pin);	//HALL_C
	*/
}
 800b2c0:	e027      	b.n	800b312 <DRV_UpdateHalls+0xc6>
		HAL_GPIO_WritePin(DRV_HALL_A_GPIO_Port, DRV_HALL_A_Pin,	(DRV8353.mode == DRV_MODE_ALIGN)); 	//HALL_A
 800b2c2:	4b16      	ldr	r3, [pc, #88]	; (800b31c <DRV_UpdateHalls+0xd0>)
 800b2c4:	7b1b      	ldrb	r3, [r3, #12]
 800b2c6:	3b02      	subs	r3, #2
 800b2c8:	425a      	negs	r2, r3
 800b2ca:	4153      	adcs	r3, r2
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	001a      	movs	r2, r3
 800b2d0:	2380      	movs	r3, #128	; 0x80
 800b2d2:	00db      	lsls	r3, r3, #3
 800b2d4:	4812      	ldr	r0, [pc, #72]	; (800b320 <DRV_UpdateHalls+0xd4>)
 800b2d6:	0019      	movs	r1, r3
 800b2d8:	f7fa fab5 	bl	8005846 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DRV_HALL_B_GPIO_Port, DRV_HALL_B_Pin,	(DRV8353.mode == DRV_MODE_ALIGN)); 	//HALL_B
 800b2dc:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <DRV_UpdateHalls+0xd0>)
 800b2de:	7b1b      	ldrb	r3, [r3, #12]
 800b2e0:	3b02      	subs	r3, #2
 800b2e2:	425a      	negs	r2, r3
 800b2e4:	4153      	adcs	r3, r2
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	001a      	movs	r2, r3
 800b2ea:	2380      	movs	r3, #128	; 0x80
 800b2ec:	0099      	lsls	r1, r3, #2
 800b2ee:	2390      	movs	r3, #144	; 0x90
 800b2f0:	05db      	lsls	r3, r3, #23
 800b2f2:	0018      	movs	r0, r3
 800b2f4:	f7fa faa7 	bl	8005846 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DRV_HALL_C_GPIO_Port, DRV_HALL_C_Pin,	(DRV8353.mode == DRV_MODE_ALIGN)); 	//HALL_C
 800b2f8:	4b08      	ldr	r3, [pc, #32]	; (800b31c <DRV_UpdateHalls+0xd0>)
 800b2fa:	7b1b      	ldrb	r3, [r3, #12]
 800b2fc:	3b02      	subs	r3, #2
 800b2fe:	425a      	negs	r2, r3
 800b300:	4153      	adcs	r3, r2
 800b302:	b2db      	uxtb	r3, r3
 800b304:	001a      	movs	r2, r3
 800b306:	2380      	movs	r3, #128	; 0x80
 800b308:	011b      	lsls	r3, r3, #4
 800b30a:	4805      	ldr	r0, [pc, #20]	; (800b320 <DRV_UpdateHalls+0xd4>)
 800b30c:	0019      	movs	r1, r3
 800b30e:	f7fa fa9a 	bl	8005846 <HAL_GPIO_WritePin>
}
 800b312:	46c0      	nop			; (mov r8, r8)
 800b314:	46bd      	mov	sp, r7
 800b316:	b003      	add	sp, #12
 800b318:	bd90      	pop	{r4, r7, pc}
 800b31a:	46c0      	nop			; (mov r8, r8)
 800b31c:	20000ff8 	.word	0x20000ff8
 800b320:	48000800 	.word	0x48000800

0800b324 <DRV_FaultResolution>:

void
DRV_FaultResolution(){
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0

	// ｡･ﾟﾟ･(>д<)･ﾟﾟ･｡		(ó﹏ò｡)


}
 800b328:	46c0      	nop			; (mov r8, r8)
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
	...

0800b330 <drv_sleep>:
 * dans cet état tous les MOSFET sont éteints, le moteur est donc en roue libre.
 * Tous les registres interne sont effacés, il faudra renvoyer le configuration via
 * SPI après le réveille (déjà inclus dans la fonction drv_Wake() ).
 */
void
drv_sleep(){
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
	//DISABLE DRV
	HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 800b334:	2380      	movs	r3, #128	; 0x80
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4809      	ldr	r0, [pc, #36]	; (800b360 <drv_sleep+0x30>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	0019      	movs	r1, r3
 800b33e:	f7fa fa82 	bl	8005846 <HAL_GPIO_WritePin>
	DRV8353.signal.ENABLE = 0;
 800b342:	4b08      	ldr	r3, [pc, #32]	; (800b364 <drv_sleep+0x34>)
 800b344:	2200      	movs	r2, #0
 800b346:	725a      	strb	r2, [r3, #9]
	DRV8353.mode = DRV_MODE_SLEEP;
 800b348:	4b06      	ldr	r3, [pc, #24]	; (800b364 <drv_sleep+0x34>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	731a      	strb	r2, [r3, #12]
	drv_setAllLow();
 800b34e:	f000 f8fd 	bl	800b54c <drv_setAllLow>
	HAL_Delay(2); //Wait at least T_SLEEP = 1ms for driver to go in sleep mode
 800b352:	2002      	movs	r0, #2
 800b354:	f7f8 faa6 	bl	80038a4 <HAL_Delay>
}
 800b358:	46c0      	nop			; (mov r8, r8)
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	46c0      	nop			; (mov r8, r8)
 800b360:	48000800 	.word	0x48000800
 800b364:	20000ff8 	.word	0x20000ff8

0800b368 <drv_wake>:
 * Permet de sortir le DRV8353 du mode veille, au réveille tous les registres sont
 * effacés la configuration est donc renvoyé via SPI.
 * La valeur de la PWM est remise à 0.
 */
HAL_StatusTypeDef
drv_wake(){
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0

	drv_setAllLow(); //SET all INHx and INLx to low before switching mode
 800b36c:	f000 f8ee 	bl	800b54c <drv_setAllLow>

	//ENABLE DRV
	HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 800b370:	2380      	movs	r3, #128	; 0x80
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	480a      	ldr	r0, [pc, #40]	; (800b3a0 <drv_wake+0x38>)
 800b376:	2201      	movs	r2, #1
 800b378:	0019      	movs	r1, r3
 800b37a:	f7fa fa64 	bl	8005846 <HAL_GPIO_WritePin>
	DRV8353.signal.ENABLE = 1;
 800b37e:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <drv_wake+0x3c>)
 800b380:	2201      	movs	r2, #1
 800b382:	725a      	strb	r2, [r3, #9]

	HAL_Delay(2); //Wait at least T_WAKE = 1ms for driver to wake up
 800b384:	2002      	movs	r0, #2
 800b386:	f7f8 fa8d 	bl	80038a4 <HAL_Delay>

	if(drv_configuration() != HAL_OK) return HAL_ERROR;
 800b38a:	f000 f80d 	bl	800b3a8 <drv_configuration>
 800b38e:	1e03      	subs	r3, r0, #0
 800b390:	d001      	beq.n	800b396 <drv_wake+0x2e>
 800b392:	2301      	movs	r3, #1
 800b394:	e000      	b.n	800b398 <drv_wake+0x30>

	return HAL_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	0018      	movs	r0, r3
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	48000800 	.word	0x48000800
 800b3a4:	20000ff8 	.word	0x20000ff8

0800b3a8 <drv_configuration>:

/*
 * Permet d’envoyer la configuration au DRV8353 via SPI.
 */
HAL_StatusTypeDef
drv_configuration(){
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800b3ae:	230f      	movs	r3, #15
 800b3b0:	18fb      	adds	r3, r7, r3
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
	//APPLY SPI CONFIG
	for (int i = 2; i < 7; i++)
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	60bb      	str	r3, [r7, #8]
 800b3ba:	e011      	b.n	800b3e0 <drv_configuration+0x38>
		status |= drv_SPI_Transmit((uint8_t*) &DRV_REGISTER_CONFIG[i]);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	005a      	lsls	r2, r3, #1
 800b3c0:	4b29      	ldr	r3, [pc, #164]	; (800b468 <drv_configuration+0xc0>)
 800b3c2:	18d3      	adds	r3, r2, r3
 800b3c4:	0018      	movs	r0, r3
 800b3c6:	f000 f853 	bl	800b470 <drv_SPI_Transmit>
 800b3ca:	0003      	movs	r3, r0
 800b3cc:	0019      	movs	r1, r3
 800b3ce:	220f      	movs	r2, #15
 800b3d0:	18bb      	adds	r3, r7, r2
 800b3d2:	18ba      	adds	r2, r7, r2
 800b3d4:	7812      	ldrb	r2, [r2, #0]
 800b3d6:	430a      	orrs	r2, r1
 800b3d8:	701a      	strb	r2, [r3, #0]
	for (int i = 2; i < 7; i++)
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	60bb      	str	r3, [r7, #8]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2b06      	cmp	r3, #6
 800b3e4:	ddea      	ble.n	800b3bc <drv_configuration+0x14>

	//CHECK SPI CONFIG
	for (int16_t i = 2; i < 7; i++) {
 800b3e6:	1dbb      	adds	r3, r7, #6
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	801a      	strh	r2, [r3, #0]
 800b3ec:	e030      	b.n	800b450 <drv_configuration+0xa8>
		uint16_t DRV_REGISTER_RECEIVE;
		uint16_t DRV_REGISTER_READ = 0b1000000000000000 | (i << 11);
 800b3ee:	1dbb      	adds	r3, r7, #6
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	5e9b      	ldrsh	r3, [r3, r2]
 800b3f4:	02db      	lsls	r3, r3, #11
 800b3f6:	b21b      	sxth	r3, r3
 800b3f8:	4a1c      	ldr	r2, [pc, #112]	; (800b46c <drv_configuration+0xc4>)
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	b21b      	sxth	r3, r3
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	1cbb      	adds	r3, r7, #2
 800b402:	801a      	strh	r2, [r3, #0]

		status |= drv_SPI_TransmitReceive((uint8_t*) &DRV_REGISTER_READ, (uint8_t*) &DRV_REGISTER_RECEIVE);
 800b404:	1d3a      	adds	r2, r7, #4
 800b406:	1cbb      	adds	r3, r7, #2
 800b408:	0011      	movs	r1, r2
 800b40a:	0018      	movs	r0, r3
 800b40c:	f000 f866 	bl	800b4dc <drv_SPI_TransmitReceive>
 800b410:	0003      	movs	r3, r0
 800b412:	0019      	movs	r1, r3
 800b414:	200f      	movs	r0, #15
 800b416:	183b      	adds	r3, r7, r0
 800b418:	183a      	adds	r2, r7, r0
 800b41a:	7812      	ldrb	r2, [r2, #0]
 800b41c:	430a      	orrs	r2, r1
 800b41e:	701a      	strb	r2, [r3, #0]

		if ((DRV_REGISTER_RECEIVE & 0b0000011111111111)	!= (DRV_REGISTER_CONFIG[i] & 0b0000011111111111)) //5 MSB are dont care bits
 800b420:	1dbb      	adds	r3, r7, #6
 800b422:	2200      	movs	r2, #0
 800b424:	5e9a      	ldrsh	r2, [r3, r2]
 800b426:	4b10      	ldr	r3, [pc, #64]	; (800b468 <drv_configuration+0xc0>)
 800b428:	0052      	lsls	r2, r2, #1
 800b42a:	5ad2      	ldrh	r2, [r2, r3]
 800b42c:	1d3b      	adds	r3, r7, #4
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	4053      	eors	r3, r2
 800b432:	b29b      	uxth	r3, r3
 800b434:	055b      	lsls	r3, r3, #21
 800b436:	0d5b      	lsrs	r3, r3, #21
 800b438:	d002      	beq.n	800b440 <drv_configuration+0x98>
			status = HAL_ERROR;
 800b43a:	183b      	adds	r3, r7, r0
 800b43c:	2201      	movs	r2, #1
 800b43e:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 2; i < 7; i++) {
 800b440:	1dbb      	adds	r3, r7, #6
 800b442:	2200      	movs	r2, #0
 800b444:	5e9b      	ldrsh	r3, [r3, r2]
 800b446:	b29b      	uxth	r3, r3
 800b448:	3301      	adds	r3, #1
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	1dbb      	adds	r3, r7, #6
 800b44e:	801a      	strh	r2, [r3, #0]
 800b450:	1dbb      	adds	r3, r7, #6
 800b452:	2200      	movs	r2, #0
 800b454:	5e9b      	ldrsh	r3, [r3, r2]
 800b456:	2b06      	cmp	r3, #6
 800b458:	ddc9      	ble.n	800b3ee <drv_configuration+0x46>
	}

	return status;
 800b45a:	230f      	movs	r3, #15
 800b45c:	18fb      	adds	r3, r7, r3
 800b45e:	781b      	ldrb	r3, [r3, #0]
}
 800b460:	0018      	movs	r0, r3
 800b462:	46bd      	mov	sp, r7
 800b464:	b004      	add	sp, #16
 800b466:	bd80      	pop	{r7, pc}
 800b468:	2000000c 	.word	0x2000000c
 800b46c:	ffff8000 	.word	0xffff8000

0800b470 <drv_SPI_Transmit>:

/*
 * Permet d’envoyer la trame à l’adresse pData en SPI en incluant le contrôle du pin NSS.
 */
HAL_StatusTypeDef
drv_SPI_Transmit(uint8_t *pData){
 800b470:	b590      	push	{r4, r7, lr}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800b478:	240f      	movs	r4, #15
 800b47a:	193b      	adds	r3, r7, r4
 800b47c:	2200      	movs	r2, #0
 800b47e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_RESET);
 800b480:	2390      	movs	r3, #144	; 0x90
 800b482:	05db      	lsls	r3, r3, #23
 800b484:	2200      	movs	r2, #0
 800b486:	2110      	movs	r1, #16
 800b488:	0018      	movs	r0, r3
 800b48a:	f7fa f9dc 	bl	8005846 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800b48e:	2001      	movs	r0, #1
 800b490:	f7f8 fa08 	bl	80038a4 <HAL_Delay>
	status |= HAL_SPI_Transmit(DRV_SPI_HANDLER, pData,	1, 300);
 800b494:	2396      	movs	r3, #150	; 0x96
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	6879      	ldr	r1, [r7, #4]
 800b49a:	480f      	ldr	r0, [pc, #60]	; (800b4d8 <drv_SPI_Transmit+0x68>)
 800b49c:	2201      	movs	r2, #1
 800b49e:	f7fb f9f9 	bl	8006894 <HAL_SPI_Transmit>
 800b4a2:	0003      	movs	r3, r0
 800b4a4:	0019      	movs	r1, r3
 800b4a6:	193b      	adds	r3, r7, r4
 800b4a8:	193a      	adds	r2, r7, r4
 800b4aa:	7812      	ldrb	r2, [r2, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	f7f8 f9f7 	bl	80038a4 <HAL_Delay>
	HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_SET);
 800b4b6:	2390      	movs	r3, #144	; 0x90
 800b4b8:	05db      	lsls	r3, r3, #23
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	2110      	movs	r1, #16
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f7fa f9c1 	bl	8005846 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	f7f8 f9ed 	bl	80038a4 <HAL_Delay>

	return status;
 800b4ca:	193b      	adds	r3, r7, r4
 800b4cc:	781b      	ldrb	r3, [r3, #0]
}
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	b005      	add	sp, #20
 800b4d4:	bd90      	pop	{r4, r7, pc}
 800b4d6:	46c0      	nop			; (mov r8, r8)
 800b4d8:	20000390 	.word	0x20000390

0800b4dc <drv_SPI_TransmitReceive>:
/*
 * Permet d’envoyer la trame à l’adresse pTxData et de stocker à
 * l’adresse pTxData la trame reçue en SPI en incluant le contrôle du pin NSS.
 */
HAL_StatusTypeDef
drv_SPI_TransmitReceive(uint8_t *pTxData, uint8_t *pRxData){
 800b4dc:	b590      	push	{r4, r7, lr}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800b4e6:	240f      	movs	r4, #15
 800b4e8:	193b      	adds	r3, r7, r4
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_RESET);
 800b4ee:	2390      	movs	r3, #144	; 0x90
 800b4f0:	05db      	lsls	r3, r3, #23
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2110      	movs	r1, #16
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f7fa f9a5 	bl	8005846 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800b4fc:	2001      	movs	r0, #1
 800b4fe:	f7f8 f9d1 	bl	80038a4 <HAL_Delay>
	status |= HAL_SPI_TransmitReceive(DRV_SPI_HANDLER, pTxData, pRxData, 1, 300);
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	6879      	ldr	r1, [r7, #4]
 800b506:	4810      	ldr	r0, [pc, #64]	; (800b548 <drv_SPI_TransmitReceive+0x6c>)
 800b508:	2396      	movs	r3, #150	; 0x96
 800b50a:	005b      	lsls	r3, r3, #1
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	2301      	movs	r3, #1
 800b510:	f7fb fb18 	bl	8006b44 <HAL_SPI_TransmitReceive>
 800b514:	0003      	movs	r3, r0
 800b516:	0019      	movs	r1, r3
 800b518:	193b      	adds	r3, r7, r4
 800b51a:	193a      	adds	r2, r7, r4
 800b51c:	7812      	ldrb	r2, [r2, #0]
 800b51e:	430a      	orrs	r2, r1
 800b520:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800b522:	2001      	movs	r0, #1
 800b524:	f7f8 f9be 	bl	80038a4 <HAL_Delay>
	HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_SET);
 800b528:	2390      	movs	r3, #144	; 0x90
 800b52a:	05db      	lsls	r3, r3, #23
 800b52c:	2201      	movs	r2, #1
 800b52e:	2110      	movs	r1, #16
 800b530:	0018      	movs	r0, r3
 800b532:	f7fa f988 	bl	8005846 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800b536:	2001      	movs	r0, #1
 800b538:	f7f8 f9b4 	bl	80038a4 <HAL_Delay>

	return status;
 800b53c:	193b      	adds	r3, r7, r4
 800b53e:	781b      	ldrb	r3, [r3, #0]
}
 800b540:	0018      	movs	r0, r3
 800b542:	46bd      	mov	sp, r7
 800b544:	b005      	add	sp, #20
 800b546:	bd90      	pop	{r4, r7, pc}
 800b548:	20000390 	.word	0x20000390

0800b54c <drv_setAllLow>:

/*
 * Permet de mettre toute les entrées du driver à 0 (avant de l’activer ou de changer de mode par exemple)
 */
void
drv_setAllLow(){
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
	//SET all INHx and INLx to low before switching mode
	HAL_GPIO_WritePin(DRV_HALL_A_GPIO_Port, DRV_HALL_A_Pin, GPIO_PIN_RESET); 	//HALL_A
 800b550:	2380      	movs	r3, #128	; 0x80
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	481d      	ldr	r0, [pc, #116]	; (800b5cc <drv_setAllLow+0x80>)
 800b556:	2200      	movs	r2, #0
 800b558:	0019      	movs	r1, r3
 800b55a:	f7fa f974 	bl	8005846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HALL_B_GPIO_Port, DRV_HALL_B_Pin, GPIO_PIN_RESET); 	//HALL_B
 800b55e:	2380      	movs	r3, #128	; 0x80
 800b560:	0099      	lsls	r1, r3, #2
 800b562:	2390      	movs	r3, #144	; 0x90
 800b564:	05db      	lsls	r3, r3, #23
 800b566:	2200      	movs	r2, #0
 800b568:	0018      	movs	r0, r3
 800b56a:	f7fa f96c 	bl	8005846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HALL_C_GPIO_Port, DRV_HALL_C_Pin, GPIO_PIN_RESET); 	//HALL_C
 800b56e:	2380      	movs	r3, #128	; 0x80
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	4816      	ldr	r0, [pc, #88]	; (800b5cc <drv_setAllLow+0x80>)
 800b574:	2200      	movs	r2, #0
 800b576:	0019      	movs	r1, r3
 800b578:	f7fa f965 	bl	8005846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_DIR_GPIO_Port, DRV_DIR_Pin, GPIO_PIN_RESET);			//DIR
 800b57c:	2380      	movs	r3, #128	; 0x80
 800b57e:	00d9      	lsls	r1, r3, #3
 800b580:	2390      	movs	r3, #144	; 0x90
 800b582:	05db      	lsls	r3, r3, #23
 800b584:	2200      	movs	r2, #0
 800b586:	0018      	movs	r0, r3
 800b588:	f7fa f95d 	bl	8005846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_NBRAKE_GPIO_Port, DRV_NBRAKE_Pin, GPIO_PIN_RESET);	//BRAKE
 800b58c:	2380      	movs	r3, #128	; 0x80
 800b58e:	015b      	lsls	r3, r3, #5
 800b590:	480e      	ldr	r0, [pc, #56]	; (800b5cc <drv_setAllLow+0x80>)
 800b592:	2200      	movs	r2, #0
 800b594:	0019      	movs	r1, r3
 800b596:	f7fa f956 	bl	8005846 <HAL_GPIO_WritePin>

	DRV_ApplyPWM(0);
 800b59a:	2000      	movs	r0, #0
 800b59c:	f7ff fd98 	bl	800b0d0 <DRV_ApplyPWM>

	DRV8353.signal.INHA = 0;
 800b5a0:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <drv_setAllLow+0x84>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
	DRV8353.signal.INLA = 0;
 800b5a6:	4b0a      	ldr	r3, [pc, #40]	; (800b5d0 <drv_setAllLow+0x84>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	711a      	strb	r2, [r3, #4]
	DRV8353.signal.INHB = 0;
 800b5ac:	4b08      	ldr	r3, [pc, #32]	; (800b5d0 <drv_setAllLow+0x84>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	715a      	strb	r2, [r3, #5]
	DRV8353.signal.INLB = 0;
 800b5b2:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <drv_setAllLow+0x84>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	719a      	strb	r2, [r3, #6]
	DRV8353.signal.INHC = 0;
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <drv_setAllLow+0x84>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	71da      	strb	r2, [r3, #7]
	DRV8353.signal.INLC = 0;
 800b5be:	4b04      	ldr	r3, [pc, #16]	; (800b5d0 <drv_setAllLow+0x84>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	721a      	strb	r2, [r3, #8]
}
 800b5c4:	46c0      	nop			; (mov r8, r8)
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	48000800 	.word	0x48000800
 800b5d0:	20000ff8 	.word	0x20000ff8

0800b5d4 <Motor_UpdatePosition>:

/*
 * Update motor position
 */
void
Motor_UpdatePosition() {
 800b5d4:	b590      	push	{r4, r7, lr}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0

	//Lecture des entrées HALL
	GPIO_PinState hall_A = HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin);
 800b5da:	1dfc      	adds	r4, r7, #7
 800b5dc:	4b6b      	ldr	r3, [pc, #428]	; (800b78c <Motor_UpdatePosition+0x1b8>)
 800b5de:	2180      	movs	r1, #128	; 0x80
 800b5e0:	0018      	movs	r0, r3
 800b5e2:	f7fa f913 	bl	800580c <HAL_GPIO_ReadPin>
 800b5e6:	0003      	movs	r3, r0
 800b5e8:	7023      	strb	r3, [r4, #0]
	GPIO_PinState hall_B = HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin);
 800b5ea:	1dbc      	adds	r4, r7, #6
 800b5ec:	4b67      	ldr	r3, [pc, #412]	; (800b78c <Motor_UpdatePosition+0x1b8>)
 800b5ee:	2140      	movs	r1, #64	; 0x40
 800b5f0:	0018      	movs	r0, r3
 800b5f2:	f7fa f90b 	bl	800580c <HAL_GPIO_ReadPin>
 800b5f6:	0003      	movs	r3, r0
 800b5f8:	7023      	strb	r3, [r4, #0]
	GPIO_PinState hall_C = HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin);
 800b5fa:	1d7c      	adds	r4, r7, #5
 800b5fc:	2380      	movs	r3, #128	; 0x80
 800b5fe:	005b      	lsls	r3, r3, #1
 800b600:	4a62      	ldr	r2, [pc, #392]	; (800b78c <Motor_UpdatePosition+0x1b8>)
 800b602:	0019      	movs	r1, r3
 800b604:	0010      	movs	r0, r2
 800b606:	f7fa f901 	bl	800580c <HAL_GPIO_ReadPin>
 800b60a:	0003      	movs	r3, r0
 800b60c:	7023      	strb	r3, [r4, #0]

	uint8_t halls = (hall_A << 2) | (hall_B << 1) | hall_C;	//On récupère l'état des 3 capteurs
 800b60e:	1dfb      	adds	r3, r7, #7
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	b25a      	sxtb	r2, r3
 800b616:	1dbb      	adds	r3, r7, #6
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	b25b      	sxtb	r3, r3
 800b61e:	4313      	orrs	r3, r2
 800b620:	b25a      	sxtb	r2, r3
 800b622:	1d7b      	adds	r3, r7, #5
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	b25b      	sxtb	r3, r3
 800b628:	4313      	orrs	r3, r2
 800b62a:	b25a      	sxtb	r2, r3
 800b62c:	1d3b      	adds	r3, r7, #4
 800b62e:	701a      	strb	r2, [r3, #0]
	uint8_t position = hall_to_position[halls];	//On fait correspondre à une position
 800b630:	1d3b      	adds	r3, r7, #4
 800b632:	781a      	ldrb	r2, [r3, #0]
 800b634:	1cfb      	adds	r3, r7, #3
 800b636:	4956      	ldr	r1, [pc, #344]	; (800b790 <Motor_UpdatePosition+0x1bc>)
 800b638:	5c8a      	ldrb	r2, [r1, r2]
 800b63a:	701a      	strb	r2, [r3, #0]


	if (next_position_CCW[board.motor.hall.state] == position)//Si on tourne clockwise
 800b63c:	4a55      	ldr	r2, [pc, #340]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b63e:	232c      	movs	r3, #44	; 0x2c
 800b640:	33ff      	adds	r3, #255	; 0xff
 800b642:	5cd3      	ldrb	r3, [r2, r3]
 800b644:	001a      	movs	r2, r3
 800b646:	4b54      	ldr	r3, [pc, #336]	; (800b798 <Motor_UpdatePosition+0x1c4>)
 800b648:	5c9b      	ldrb	r3, [r3, r2]
 800b64a:	1cfa      	adds	r2, r7, #3
 800b64c:	7812      	ldrb	r2, [r2, #0]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d141      	bne.n	800b6d6 <Motor_UpdatePosition+0x102>
	{
		if (board.motor.pos.position >0 ) board.motor.pos.position--;
 800b652:	4a50      	ldr	r2, [pc, #320]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b654:	23a4      	movs	r3, #164	; 0xa4
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	58d3      	ldr	r3, [r2, r3]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	dd08      	ble.n	800b670 <Motor_UpdatePosition+0x9c>
 800b65e:	4a4d      	ldr	r2, [pc, #308]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b660:	23a4      	movs	r3, #164	; 0xa4
 800b662:	005b      	lsls	r3, r3, #1
 800b664:	58d3      	ldr	r3, [r2, r3]
 800b666:	1e59      	subs	r1, r3, #1
 800b668:	4a4a      	ldr	r2, [pc, #296]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b66a:	23a4      	movs	r3, #164	; 0xa4
 800b66c:	005b      	lsls	r3, r3, #1
 800b66e:	50d1      	str	r1, [r2, r3]
		switch ( position )
 800b670:	1cfb      	adds	r3, r7, #3
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	2b05      	cmp	r3, #5
 800b676:	d828      	bhi.n	800b6ca <Motor_UpdatePosition+0xf6>
 800b678:	009a      	lsls	r2, r3, #2
 800b67a:	4b48      	ldr	r3, [pc, #288]	; (800b79c <Motor_UpdatePosition+0x1c8>)
 800b67c:	18d3      	adds	r3, r2, r3
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	469f      	mov	pc, r3
		{
			case 0 :
				board.motor.phase_sensored = C;
 800b682:	4a44      	ldr	r2, [pc, #272]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b684:	239c      	movs	r3, #156	; 0x9c
 800b686:	005b      	lsls	r3, r3, #1
 800b688:	2102      	movs	r1, #2
 800b68a:	54d1      	strb	r1, [r2, r3]
				break;
 800b68c:	e06b      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 1 :
				board.motor.phase_sensored = C;
 800b68e:	4a41      	ldr	r2, [pc, #260]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b690:	239c      	movs	r3, #156	; 0x9c
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	2102      	movs	r1, #2
 800b696:	54d1      	strb	r1, [r2, r3]
				break;
 800b698:	e065      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 2 :
				board.motor.phase_sensored = B;
 800b69a:	4a3e      	ldr	r2, [pc, #248]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b69c:	239c      	movs	r3, #156	; 0x9c
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	54d1      	strb	r1, [r2, r3]
				break;
 800b6a4:	e05f      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 3 :
				board.motor.phase_sensored = B;
 800b6a6:	4a3b      	ldr	r2, [pc, #236]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b6a8:	239c      	movs	r3, #156	; 0x9c
 800b6aa:	005b      	lsls	r3, r3, #1
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	54d1      	strb	r1, [r2, r3]
				break;
 800b6b0:	e059      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 4 :
				board.motor.phase_sensored = A;
 800b6b2:	4a38      	ldr	r2, [pc, #224]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b6b4:	239c      	movs	r3, #156	; 0x9c
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	54d1      	strb	r1, [r2, r3]
				break;
 800b6bc:	e053      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 5 :
				board.motor.phase_sensored = A;
 800b6be:	4a35      	ldr	r2, [pc, #212]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b6c0:	239c      	movs	r3, #156	; 0x9c
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	54d1      	strb	r1, [r2, r3]
				break;
 800b6c8:	e04d      	b.n	800b766 <Motor_UpdatePosition+0x192>
			default:
				board.motor.phase_sensored = B;
 800b6ca:	4a32      	ldr	r2, [pc, #200]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b6cc:	239c      	movs	r3, #156	; 0x9c
 800b6ce:	005b      	lsls	r3, r3, #1
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	54d1      	strb	r1, [r2, r3]
				break;
 800b6d4:	e047      	b.n	800b766 <Motor_UpdatePosition+0x192>

		}
	}
	else if (next_position_CW[board.motor.hall.state] == position)
 800b6d6:	4a2f      	ldr	r2, [pc, #188]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b6d8:	232c      	movs	r3, #44	; 0x2c
 800b6da:	33ff      	adds	r3, #255	; 0xff
 800b6dc:	5cd3      	ldrb	r3, [r2, r3]
 800b6de:	001a      	movs	r2, r3
 800b6e0:	4b2f      	ldr	r3, [pc, #188]	; (800b7a0 <Motor_UpdatePosition+0x1cc>)
 800b6e2:	5c9b      	ldrb	r3, [r3, r2]
 800b6e4:	1cfa      	adds	r2, r7, #3
 800b6e6:	7812      	ldrb	r2, [r2, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d13b      	bne.n	800b764 <Motor_UpdatePosition+0x190>
	{
		board.motor.pos.position++;
 800b6ec:	4a29      	ldr	r2, [pc, #164]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b6ee:	23a4      	movs	r3, #164	; 0xa4
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	58d3      	ldr	r3, [r2, r3]
 800b6f4:	1c59      	adds	r1, r3, #1
 800b6f6:	4a27      	ldr	r2, [pc, #156]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b6f8:	23a4      	movs	r3, #164	; 0xa4
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	50d1      	str	r1, [r2, r3]
		switch ( position )
 800b6fe:	1cfb      	adds	r3, r7, #3
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	2b05      	cmp	r3, #5
 800b704:	d828      	bhi.n	800b758 <Motor_UpdatePosition+0x184>
 800b706:	009a      	lsls	r2, r3, #2
 800b708:	4b26      	ldr	r3, [pc, #152]	; (800b7a4 <Motor_UpdatePosition+0x1d0>)
 800b70a:	18d3      	adds	r3, r2, r3
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	469f      	mov	pc, r3
		{
			case 0 :
				board.motor.phase_sensored = B;
 800b710:	4a20      	ldr	r2, [pc, #128]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b712:	239c      	movs	r3, #156	; 0x9c
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	2101      	movs	r1, #1
 800b718:	54d1      	strb	r1, [r2, r3]
				break;
 800b71a:	e024      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 1 :
				board.motor.phase_sensored = A;
 800b71c:	4a1d      	ldr	r2, [pc, #116]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b71e:	239c      	movs	r3, #156	; 0x9c
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	2100      	movs	r1, #0
 800b724:	54d1      	strb	r1, [r2, r3]
				break;
 800b726:	e01e      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 2 :
				board.motor.phase_sensored = A;
 800b728:	4a1a      	ldr	r2, [pc, #104]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b72a:	239c      	movs	r3, #156	; 0x9c
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	2100      	movs	r1, #0
 800b730:	54d1      	strb	r1, [r2, r3]
				break;
 800b732:	e018      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 3 :
				board.motor.phase_sensored = C;
 800b734:	4a17      	ldr	r2, [pc, #92]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b736:	239c      	movs	r3, #156	; 0x9c
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	2102      	movs	r1, #2
 800b73c:	54d1      	strb	r1, [r2, r3]
				break;
 800b73e:	e012      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 4 :
				board.motor.phase_sensored = C;
 800b740:	4a14      	ldr	r2, [pc, #80]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b742:	239c      	movs	r3, #156	; 0x9c
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	2102      	movs	r1, #2
 800b748:	54d1      	strb	r1, [r2, r3]
				break;
 800b74a:	e00c      	b.n	800b766 <Motor_UpdatePosition+0x192>
			case 5 :
				board.motor.phase_sensored = B;
 800b74c:	4a11      	ldr	r2, [pc, #68]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b74e:	239c      	movs	r3, #156	; 0x9c
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	2101      	movs	r1, #1
 800b754:	54d1      	strb	r1, [r2, r3]
				break;
 800b756:	e006      	b.n	800b766 <Motor_UpdatePosition+0x192>
			default:
				board.motor.phase_sensored = B;
 800b758:	4a0e      	ldr	r2, [pc, #56]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b75a:	239c      	movs	r3, #156	; 0x9c
 800b75c:	005b      	lsls	r3, r3, #1
 800b75e:	2101      	movs	r1, #1
 800b760:	54d1      	strb	r1, [r2, r3]
				break;
 800b762:	e000      	b.n	800b766 <Motor_UpdatePosition+0x192>

		}
	}
 800b764:	46c0      	nop			; (mov r8, r8)

	board.motor.pos.pos_abs++;
 800b766:	4a0b      	ldr	r2, [pc, #44]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b768:	23a6      	movs	r3, #166	; 0xa6
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	58d3      	ldr	r3, [r2, r3]
 800b76e:	1c59      	adds	r1, r3, #1
 800b770:	4a08      	ldr	r2, [pc, #32]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b772:	23a6      	movs	r3, #166	; 0xa6
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	50d1      	str	r1, [r2, r3]
	board.motor.hall.state = position;
 800b778:	4a06      	ldr	r2, [pc, #24]	; (800b794 <Motor_UpdatePosition+0x1c0>)
 800b77a:	1cf9      	adds	r1, r7, #3
 800b77c:	232c      	movs	r3, #44	; 0x2c
 800b77e:	33ff      	adds	r3, #255	; 0xff
 800b780:	7809      	ldrb	r1, [r1, #0]
 800b782:	54d1      	strb	r1, [r2, r3]
}
 800b784:	46c0      	nop			; (mov r8, r8)
 800b786:	46bd      	mov	sp, r7
 800b788:	b003      	add	sp, #12
 800b78a:	bd90      	pop	{r4, r7, pc}
 800b78c:	48000800 	.word	0x48000800
 800b790:	2000001c 	.word	0x2000001c
 800b794:	20000508 	.word	0x20000508
 800b798:	2000002c 	.word	0x2000002c
 800b79c:	08010290 	.word	0x08010290
 800b7a0:	20000024 	.word	0x20000024
 800b7a4:	080102a8 	.word	0x080102a8

0800b7a8 <Turn_On_Motor>:
/*
 * Enable driver and reset control
 */
HAL_StatusTypeDef
Turn_On_Motor( Global_Struct_t * inst )
{
 800b7a8:	b5b0      	push	{r4, r5, r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = ERROR;
 800b7b0:	250f      	movs	r5, #15
 800b7b2:	197b      	adds	r3, r7, r5
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	701a      	strb	r2, [r3, #0]
	if( inst != NULL && inst->flags.status_flag.single.calib_mode == 0) //On ne demarre pas les moteurs tant que le mode calibration est activé
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d033      	beq.n	800b826 <Turn_On_Motor+0x7e>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	795b      	ldrb	r3, [r3, #5]
 800b7c2:	2208      	movs	r2, #8
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d12c      	bne.n	800b826 <Turn_On_Motor+0x7e>
	{

		status = reset_all_PID( inst );
 800b7cc:	197c      	adds	r4, r7, r5
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	f000 fa29 	bl	800bc28 <reset_all_PID>
 800b7d6:	0003      	movs	r3, r0
 800b7d8:	7023      	strb	r3, [r4, #0]
		//Start the driver but stay in free-wheel
		status |= DRV_SetMode(DRV_MODE_STOP);
 800b7da:	2001      	movs	r0, #1
 800b7dc:	f7ff fcdc 	bl	800b198 <DRV_SetMode>
 800b7e0:	0003      	movs	r3, r0
 800b7e2:	0019      	movs	r1, r3
 800b7e4:	002c      	movs	r4, r5
 800b7e6:	193b      	adds	r3, r7, r4
 800b7e8:	193a      	adds	r2, r7, r4
 800b7ea:	7812      	ldrb	r2, [r2, #0]
 800b7ec:	430a      	orrs	r2, r1
 800b7ee:	701a      	strb	r2, [r3, #0]
		inst->control.IsOn = true;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	721a      	strb	r2, [r3, #8]
		status |= Set_ControlType(inst, CTRL_FREE_WHEEL);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f000 f859 	bl	800b8b2 <Set_ControlType>
 800b800:	0003      	movs	r3, r0
 800b802:	0019      	movs	r1, r3
 800b804:	193b      	adds	r3, r7, r4
 800b806:	193a      	adds	r2, r7, r4
 800b808:	7812      	ldrb	r2, [r2, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	701a      	strb	r2, [r3, #0]
		status |= Set_setpoint( inst, 0);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2100      	movs	r1, #0
 800b812:	0018      	movs	r0, r3
 800b814:	f000 f87a 	bl	800b90c <Set_setpoint>
 800b818:	0003      	movs	r3, r0
 800b81a:	0019      	movs	r1, r3
 800b81c:	193b      	adds	r3, r7, r4
 800b81e:	193a      	adds	r2, r7, r4
 800b820:	7812      	ldrb	r2, [r2, #0]
 800b822:	430a      	orrs	r2, r1
 800b824:	701a      	strb	r2, [r3, #0]

	}
	return status;
 800b826:	230f      	movs	r3, #15
 800b828:	18fb      	adds	r3, r7, r3
 800b82a:	781b      	ldrb	r3, [r3, #0]
}
 800b82c:	0018      	movs	r0, r3
 800b82e:	46bd      	mov	sp, r7
 800b830:	b004      	add	sp, #16
 800b832:	bdb0      	pop	{r4, r5, r7, pc}

0800b834 <Turn_Off_Motor>:
/*
 * Disable driver and reset control
 */
HAL_StatusTypeDef
Turn_Off_Motor( Global_Struct_t * inst )
{
 800b834:	b5b0      	push	{r4, r5, r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = ERROR;
 800b83c:	250f      	movs	r5, #15
 800b83e:	197b      	adds	r3, r7, r5
 800b840:	2201      	movs	r2, #1
 800b842:	701a      	strb	r2, [r3, #0]
	if( inst != NULL)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d02c      	beq.n	800b8a4 <Turn_Off_Motor+0x70>
	{
		status = reset_all_PID( inst );
 800b84a:	197c      	adds	r4, r7, r5
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	0018      	movs	r0, r3
 800b850:	f000 f9ea 	bl	800bc28 <reset_all_PID>
 800b854:	0003      	movs	r3, r0
 800b856:	7023      	strb	r3, [r4, #0]
		//DISABLE DRV
		status |= DRV_SetMode(DRV_MODE_SLEEP);
 800b858:	2000      	movs	r0, #0
 800b85a:	f7ff fc9d 	bl	800b198 <DRV_SetMode>
 800b85e:	0003      	movs	r3, r0
 800b860:	0019      	movs	r1, r3
 800b862:	002c      	movs	r4, r5
 800b864:	193b      	adds	r3, r7, r4
 800b866:	193a      	adds	r2, r7, r4
 800b868:	7812      	ldrb	r2, [r2, #0]
 800b86a:	430a      	orrs	r2, r1
 800b86c:	701a      	strb	r2, [r3, #0]
		inst->control.IsOn = false;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	721a      	strb	r2, [r3, #8]
		status |= Set_ControlType( inst, CTRL_FREE_WHEEL);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2100      	movs	r1, #0
 800b878:	0018      	movs	r0, r3
 800b87a:	f000 f81a 	bl	800b8b2 <Set_ControlType>
 800b87e:	0003      	movs	r3, r0
 800b880:	0019      	movs	r1, r3
 800b882:	193b      	adds	r3, r7, r4
 800b884:	193a      	adds	r2, r7, r4
 800b886:	7812      	ldrb	r2, [r2, #0]
 800b888:	430a      	orrs	r2, r1
 800b88a:	701a      	strb	r2, [r3, #0]
		status |= Set_setpoint( inst, 0);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2100      	movs	r1, #0
 800b890:	0018      	movs	r0, r3
 800b892:	f000 f83b 	bl	800b90c <Set_setpoint>
 800b896:	0003      	movs	r3, r0
 800b898:	0019      	movs	r1, r3
 800b89a:	193b      	adds	r3, r7, r4
 800b89c:	193a      	adds	r2, r7, r4
 800b89e:	7812      	ldrb	r2, [r2, #0]
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800b8a4:	230f      	movs	r3, #15
 800b8a6:	18fb      	adds	r3, r7, r3
 800b8a8:	781b      	ldrb	r3, [r3, #0]
}
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	b004      	add	sp, #16
 800b8b0:	bdb0      	pop	{r4, r5, r7, pc}

0800b8b2 <Set_ControlType>:
 * Met à jour le type de controle du moteur
 * Un reset des PID est nécessaire.
 */
HAL_StatusTypeDef
Set_ControlType ( Global_Struct_t * inst, MOTOR_CTRL_TYPE_t type )
{
 800b8b2:	b590      	push	{r4, r7, lr}
 800b8b4:	b085      	sub	sp, #20
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	000a      	movs	r2, r1
 800b8bc:	1cfb      	adds	r3, r7, #3
 800b8be:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 800b8c0:	240f      	movs	r4, #15
 800b8c2:	193b      	adds	r3, r7, r4
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	701a      	strb	r2, [r3, #0]

	if(inst != NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d017      	beq.n	800b8fe <Set_ControlType+0x4c>
	{
		//Protection contre mauvaises valeurs
		if(type <= CTRL_ALIGN && type >= CTRL_FREE_WHEEL)
 800b8ce:	1cfb      	adds	r3, r7, #3
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b06      	cmp	r3, #6
 800b8d4:	d813      	bhi.n	800b8fe <Set_ControlType+0x4c>
		{
			if ( reset_all_PID( inst) == HAL_OK ) //Reset des PIDs à chaque changement de type de contrôle
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	0018      	movs	r0, r3
 800b8da:	f000 f9a5 	bl	800bc28 <reset_all_PID>
 800b8de:	1e03      	subs	r3, r0, #0
 800b8e0:	d10d      	bne.n	800b8fe <Set_ControlType+0x4c>
			{
				inst->control.duty_cycle = 0;
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	238a      	movs	r3, #138	; 0x8a
 800b8e6:	005b      	lsls	r3, r3, #1
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	50d1      	str	r1, [r2, r3]
				inst->control.ctrl_type = type;
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	1cf9      	adds	r1, r7, #3
 800b8f0:	2386      	movs	r3, #134	; 0x86
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	7809      	ldrb	r1, [r1, #0]
 800b8f6:	54d1      	strb	r1, [r2, r3]
				status =  HAL_OK;
 800b8f8:	193b      	adds	r3, r7, r4
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return status;
 800b8fe:	230f      	movs	r3, #15
 800b900:	18fb      	adds	r3, r7, r3
 800b902:	781b      	ldrb	r3, [r3, #0]
}
 800b904:	0018      	movs	r0, r3
 800b906:	46bd      	mov	sp, r7
 800b908:	b005      	add	sp, #20
 800b90a:	bd90      	pop	{r4, r7, pc}

0800b90c <Set_setpoint>:
 * instance = boucle de controle
 * setpoint = consigne
 */
HAL_StatusTypeDef
Set_setpoint( Global_Struct_t * inst, int32_t setpoint )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 800b916:	230f      	movs	r3, #15
 800b918:	18fb      	adds	r3, r7, r3
 800b91a:	2201      	movs	r2, #1
 800b91c:	701a      	strb	r2, [r3, #0]

	if(inst != NULL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d04b      	beq.n	800b9bc <Set_setpoint+0xb0>
	{
		switch (inst->control.ctrl_type){
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	2386      	movs	r3, #134	; 0x86
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	5cd3      	ldrb	r3, [r2, r3]
 800b92c:	2b06      	cmp	r3, #6
 800b92e:	d83b      	bhi.n	800b9a8 <Set_setpoint+0x9c>
 800b930:	009a      	lsls	r2, r3, #2
 800b932:	4b26      	ldr	r3, [pc, #152]	; (800b9cc <Set_setpoint+0xc0>)
 800b934:	18d3      	adds	r3, r2, r3
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	469f      	mov	pc, r3
		case CTRL_OPEN_LOOP:
			if(setpoint >= -98 || setpoint <= 98)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	3362      	adds	r3, #98	; 0x62
 800b93e:	da02      	bge.n	800b946 <Set_setpoint+0x3a>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b62      	cmp	r3, #98	; 0x62
 800b944:	dc05      	bgt.n	800b952 <Set_setpoint+0x46>
				inst->control.duty_cycle = setpoint;
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	238a      	movs	r3, #138	; 0x8a
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	50d1      	str	r1, [r2, r3]
			else
				inst->control.duty_cycle = 0;
			break;
 800b950:	e030      	b.n	800b9b4 <Set_setpoint+0xa8>
				inst->control.duty_cycle = 0;
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	238a      	movs	r3, #138	; 0x8a
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	2100      	movs	r1, #0
 800b95a:	50d1      	str	r1, [r2, r3]
			break;
 800b95c:	e02a      	b.n	800b9b4 <Set_setpoint+0xa8>

		case CTRL_ALIGN:
			inst->control.duty_cycle = setpoint;
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	238a      	movs	r3, #138	; 0x8a
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	50d1      	str	r1, [r2, r3]
			break;
 800b968:	e024      	b.n	800b9b4 <Set_setpoint+0xa8>

		case CTRL_TORQUE:
			inst->control.torque.setpoint = setpoint;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	218c      	movs	r1, #140	; 0x8c
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	505a      	str	r2, [r3, r1]
			break;
 800b972:	e01f      	b.n	800b9b4 <Set_setpoint+0xa8>

		case CTRL_SPEED:
			inst->control.speed.setpoint = setpoint;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	64da      	str	r2, [r3, #76]	; 0x4c
			break;
 800b97a:	e01b      	b.n	800b9b4 <Set_setpoint+0xa8>

		case CTRL_POSITION:
			if((inst->select.type_IsStander) && (setpoint >= 0 || setpoint <= 480)){
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	238c      	movs	r3, #140	; 0x8c
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	5cd3      	ldrb	r3, [r2, r3]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00b      	beq.n	800b9a0 <Set_setpoint+0x94>
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	da04      	bge.n	800b998 <Set_setpoint+0x8c>
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	23f0      	movs	r3, #240	; 0xf0
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	429a      	cmp	r2, r3
 800b996:	dc03      	bgt.n	800b9a0 <Set_setpoint+0x94>
				inst->control.position.setpoint = setpoint;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	60da      	str	r2, [r3, #12]
			}
			else
				inst->control.position.setpoint = setpoint;
			break;
 800b99e:	e009      	b.n	800b9b4 <Set_setpoint+0xa8>
				inst->control.position.setpoint = setpoint;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	60da      	str	r2, [r3, #12]
			break;
 800b9a6:	e005      	b.n	800b9b4 <Set_setpoint+0xa8>

		default:
			inst->control.duty_cycle = 0;
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	238a      	movs	r3, #138	; 0x8a
 800b9ac:	005b      	lsls	r3, r3, #1
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	50d1      	str	r1, [r2, r3]
			break;
 800b9b2:	46c0      	nop			; (mov r8, r8)
		}
		status = HAL_OK;
 800b9b4:	230f      	movs	r3, #15
 800b9b6:	18fb      	adds	r3, r7, r3
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800b9bc:	230f      	movs	r3, #15
 800b9be:	18fb      	adds	r3, r7, r3
 800b9c0:	781b      	ldrb	r3, [r3, #0]
}
 800b9c2:	0018      	movs	r0, r3
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	b004      	add	sp, #16
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	46c0      	nop			; (mov r8, r8)
 800b9cc:	080102c0 	.word	0x080102c0

0800b9d0 <Set_Target_PWM>:
/*
 * Set the duty cycle that is targetted as the setpoint duty cycle
 */
HAL_StatusTypeDef
Set_Target_PWM ( Global_Struct_t * inst, int32_t dc )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 800b9da:	230f      	movs	r3, #15
 800b9dc:	18fb      	adds	r3, r7, r3
 800b9de:	2201      	movs	r2, #1
 800b9e0:	701a      	strb	r2, [r3, #0]
	if(inst != NULL)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d014      	beq.n	800ba12 <Set_Target_PWM+0x42>
	{
		if(dc < -98) dc = -98;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	3362      	adds	r3, #98	; 0x62
 800b9ec:	da03      	bge.n	800b9f6 <Set_Target_PWM+0x26>
 800b9ee:	2362      	movs	r3, #98	; 0x62
 800b9f0:	425b      	negs	r3, r3
 800b9f2:	603b      	str	r3, [r7, #0]
 800b9f4:	e004      	b.n	800ba00 <Set_Target_PWM+0x30>
		else if (dc > 98) dc = 98;
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b62      	cmp	r3, #98	; 0x62
 800b9fa:	dd01      	ble.n	800ba00 <Set_Target_PWM+0x30>
 800b9fc:	2362      	movs	r3, #98	; 0x62
 800b9fe:	603b      	str	r3, [r7, #0]
		inst->control.target_duty_cycle = dc;
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	2388      	movs	r3, #136	; 0x88
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	50d1      	str	r1, [r2, r3]
		status = HAL_OK;
 800ba0a:	230f      	movs	r3, #15
 800ba0c:	18fb      	adds	r3, r7, r3
 800ba0e:	2200      	movs	r2, #0
 800ba10:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800ba12:	230f      	movs	r3, #15
 800ba14:	18fb      	adds	r3, r7, r3
 800ba16:	781b      	ldrb	r3, [r3, #0]
}
 800ba18:	0018      	movs	r0, r3
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	b004      	add	sp, #16
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <Motor_ctrl>:
/*
 * Fonction de controle du moteur
 * En fonction du type de contrôle on passe par la boucle adéquate
 */
HAL_StatusTypeDef
Motor_ctrl(Global_Struct_t * inst, uint32_t callback_period_us) {
 800ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef status = HAL_OK;
 800ba2a:	230f      	movs	r3, #15
 800ba2c:	18fb      	adds	r3, r7, r3
 800ba2e:	2200      	movs	r2, #0
 800ba30:	701a      	strb	r2, [r3, #0]
	static uint8_t t =0;

	switch (inst->control.ctrl_type) {
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	2386      	movs	r3, #134	; 0x86
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	5cd3      	ldrb	r3, [r2, r3]
 800ba3a:	2b06      	cmp	r3, #6
 800ba3c:	d900      	bls.n	800ba40 <Motor_ctrl+0x20>
 800ba3e:	e09d      	b.n	800bb7c <Motor_ctrl+0x15c>
 800ba40:	009a      	lsls	r2, r3, #2
 800ba42:	4b75      	ldr	r3, [pc, #468]	; (800bc18 <Motor_ctrl+0x1f8>)
 800ba44:	18d3      	adds	r3, r2, r3
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	469f      	mov	pc, r3

	case CTRL_FREE_WHEEL:
		status |= DRV_SetMode(DRV_MODE_STOP); // DRV_MODE_SLEEP OR DRV_MODE_STOP (same action on motor)
 800ba4a:	2001      	movs	r0, #1
 800ba4c:	f7ff fba4 	bl	800b198 <DRV_SetMode>
 800ba50:	0003      	movs	r3, r0
 800ba52:	0019      	movs	r1, r3
 800ba54:	220f      	movs	r2, #15
 800ba56:	18bb      	adds	r3, r7, r2
 800ba58:	18ba      	adds	r2, r7, r2
 800ba5a:	7812      	ldrb	r2, [r2, #0]
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	701a      	strb	r2, [r3, #0]
		inst->control.duty_cycle = 0;
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	238a      	movs	r3, #138	; 0x8a
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	2100      	movs	r1, #0
 800ba68:	50d1      	str	r1, [r2, r3]
		break;
 800ba6a:	e087      	b.n	800bb7c <Motor_ctrl+0x15c>

	case CTRL_OPEN_LOOP:
		status |= DRV_SetMode(DRV_MODE_OPERATING);
 800ba6c:	2004      	movs	r0, #4
 800ba6e:	f7ff fb93 	bl	800b198 <DRV_SetMode>
 800ba72:	0003      	movs	r3, r0
 800ba74:	0019      	movs	r1, r3
 800ba76:	220f      	movs	r2, #15
 800ba78:	18bb      	adds	r3, r7, r2
 800ba7a:	18ba      	adds	r2, r7, r2
 800ba7c:	7812      	ldrb	r2, [r2, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	701a      	strb	r2, [r3, #0]
		break;
 800ba82:	e07b      	b.n	800bb7c <Motor_ctrl+0x15c>

	case CTRL_TORQUE:
		//TODO: Add torque control if required
		inst->control.duty_cycle = 0;
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	238a      	movs	r3, #138	; 0x8a
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	50d1      	str	r1, [r2, r3]
		break;
 800ba8e:	e075      	b.n	800bb7c <Motor_ctrl+0x15c>
		/*
		status |= DRV_SetMode(DRV_MODE_OPERATING);
		status |= PID_Compute(&(inst->control.speed), (int32_t) inst->motor.speed.rpm, (float) callback_period_us / 1000000.0);
		inst->control.duty_cycle = (int32_t) inst->control.speed.output;
		*/
		inst->control.duty_cycle = 0;
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	238a      	movs	r3, #138	; 0x8a
 800ba94:	005b      	lsls	r3, r3, #1
 800ba96:	2100      	movs	r1, #0
 800ba98:	50d1      	str	r1, [r2, r3]
		break;
 800ba9a:	e06f      	b.n	800bb7c <Motor_ctrl+0x15c>

	case CTRL_POSITION:
		status |= DRV_SetMode(DRV_MODE_OPERATING);
 800ba9c:	2004      	movs	r0, #4
 800ba9e:	f7ff fb7b 	bl	800b198 <DRV_SetMode>
 800baa2:	0003      	movs	r3, r0
 800baa4:	0019      	movs	r1, r3
 800baa6:	260f      	movs	r6, #15
 800baa8:	19bb      	adds	r3, r7, r6
 800baaa:	19ba      	adds	r2, r7, r6
 800baac:	7812      	ldrb	r2, [r2, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	701a      	strb	r2, [r3, #0]
		status |= PID_Compute(&(inst->control.position),	(int32_t) inst->motor.pos.position,	(float) callback_period_us / 1000000.0);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	330c      	adds	r3, #12
 800bab6:	001c      	movs	r4, r3
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	23a4      	movs	r3, #164	; 0xa4
 800babc:	005b      	lsls	r3, r3, #1
 800babe:	58d5      	ldr	r5, [r2, r3]
 800bac0:	6838      	ldr	r0, [r7, #0]
 800bac2:	f7f5 fc1d 	bl	8001300 <__aeabi_ui2f>
 800bac6:	1c03      	adds	r3, r0, #0
 800bac8:	4954      	ldr	r1, [pc, #336]	; (800bc1c <Motor_ctrl+0x1fc>)
 800baca:	1c18      	adds	r0, r3, #0
 800bacc:	f7f4 fef8 	bl	80008c0 <__aeabi_fdiv>
 800bad0:	1c03      	adds	r3, r0, #0
 800bad2:	1c1a      	adds	r2, r3, #0
 800bad4:	0029      	movs	r1, r5
 800bad6:	0020      	movs	r0, r4
 800bad8:	f7fd ff92 	bl	8009a00 <PID_Compute>
 800badc:	0003      	movs	r3, r0
 800bade:	0019      	movs	r1, r3
 800bae0:	19bb      	adds	r3, r7, r6
 800bae2:	19ba      	adds	r2, r7, r6
 800bae4:	7812      	ldrb	r2, [r2, #0]
 800bae6:	430a      	orrs	r2, r1
 800bae8:	701a      	strb	r2, [r3, #0]
		if(t > 9)
 800baea:	4b4d      	ldr	r3, [pc, #308]	; (800bc20 <Motor_ctrl+0x200>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b09      	cmp	r3, #9
 800baf0:	d903      	bls.n	800bafa <Motor_ctrl+0xda>
		{

			t=0;
 800baf2:	4b4b      	ldr	r3, [pc, #300]	; (800bc20 <Motor_ctrl+0x200>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	e005      	b.n	800bb06 <Motor_ctrl+0xe6>
		}
		else
			t++;
 800bafa:	4b49      	ldr	r3, [pc, #292]	; (800bc20 <Motor_ctrl+0x200>)
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	3301      	adds	r3, #1
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	4b47      	ldr	r3, [pc, #284]	; (800bc20 <Motor_ctrl+0x200>)
 800bb04:	701a      	strb	r2, [r3, #0]

		inst->control.duty_cycle = (int32_t) inst->control.position.output;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	1c18      	adds	r0, r3, #0
 800bb0c:	f7f5 fb8a 	bl	8001224 <__aeabi_f2iz>
 800bb10:	0001      	movs	r1, r0
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	238a      	movs	r3, #138	; 0x8a
 800bb16:	005b      	lsls	r3, r3, #1
 800bb18:	50d1      	str	r1, [r2, r3]
		break;
 800bb1a:	e02f      	b.n	800bb7c <Motor_ctrl+0x15c>

	case CTRL_BRAKE:
		status |= DRV_SetMode(DRV_MODE_BRAKE);
 800bb1c:	2003      	movs	r0, #3
 800bb1e:	f7ff fb3b 	bl	800b198 <DRV_SetMode>
 800bb22:	0003      	movs	r3, r0
 800bb24:	0019      	movs	r1, r3
 800bb26:	220f      	movs	r2, #15
 800bb28:	18bb      	adds	r3, r7, r2
 800bb2a:	18ba      	adds	r2, r7, r2
 800bb2c:	7812      	ldrb	r2, [r2, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	701a      	strb	r2, [r3, #0]
		inst->control.duty_cycle = 0;
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	238a      	movs	r3, #138	; 0x8a
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	2100      	movs	r1, #0
 800bb3a:	50d1      	str	r1, [r2, r3]
		break;
 800bb3c:	e01e      	b.n	800bb7c <Motor_ctrl+0x15c>

	case CTRL_ALIGN:
		status |= DRV_SetMode(DRV_MODE_ALIGN);
 800bb3e:	2002      	movs	r0, #2
 800bb40:	f7ff fb2a 	bl	800b198 <DRV_SetMode>
 800bb44:	0003      	movs	r3, r0
 800bb46:	0019      	movs	r1, r3
 800bb48:	220f      	movs	r2, #15
 800bb4a:	18bb      	adds	r3, r7, r2
 800bb4c:	18ba      	adds	r2, r7, r2
 800bb4e:	7812      	ldrb	r2, [r2, #0]
 800bb50:	430a      	orrs	r2, r1
 800bb52:	701a      	strb	r2, [r3, #0]
		//limit dutycycle to prevent over-heating
		inst->control.duty_cycle = 	(abs(inst->control.duty_cycle) > 10) ? 10 : inst->control.duty_cycle;
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	238a      	movs	r3, #138	; 0x8a
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	58d3      	ldr	r3, [r2, r3]
 800bb5c:	17da      	asrs	r2, r3, #31
 800bb5e:	189b      	adds	r3, r3, r2
 800bb60:	4053      	eors	r3, r2
 800bb62:	2b0a      	cmp	r3, #10
 800bb64:	dc04      	bgt.n	800bb70 <Motor_ctrl+0x150>
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	238a      	movs	r3, #138	; 0x8a
 800bb6a:	005b      	lsls	r3, r3, #1
 800bb6c:	58d3      	ldr	r3, [r2, r3]
 800bb6e:	e000      	b.n	800bb72 <Motor_ctrl+0x152>
 800bb70:	230a      	movs	r3, #10
 800bb72:	6879      	ldr	r1, [r7, #4]
 800bb74:	228a      	movs	r2, #138	; 0x8a
 800bb76:	0052      	lsls	r2, r2, #1
 800bb78:	508b      	str	r3, [r1, r2]
		break;
 800bb7a:	46c0      	nop			; (mov r8, r8)
	}

	if(board.select.type_IsStander)
 800bb7c:	4a29      	ldr	r2, [pc, #164]	; (800bc24 <Motor_ctrl+0x204>)
 800bb7e:	238c      	movs	r3, #140	; 0x8c
 800bb80:	005b      	lsls	r3, r3, #1
 800bb82:	5cd3      	ldrb	r3, [r2, r3]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d023      	beq.n	800bbd0 <Motor_ctrl+0x1b0>
	{
		if((inst->sensor.eos == true) && inst->control.duty_cycle < 0) //limite basse
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	2387      	movs	r3, #135	; 0x87
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	5cd3      	ldrb	r3, [r2, r3]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00a      	beq.n	800bbaa <Motor_ctrl+0x18a>
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	238a      	movs	r3, #138	; 0x8a
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	58d3      	ldr	r3, [r2, r3]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da04      	bge.n	800bbaa <Motor_ctrl+0x18a>
			inst->control.duty_cycle = 0;
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	238a      	movs	r3, #138	; 0x8a
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	2100      	movs	r1, #0
 800bba8:	50d1      	str	r1, [r2, r3]

		if((board.motor.pos.position >= 475) && inst->control.duty_cycle > 0) //limite haute
 800bbaa:	4a1e      	ldr	r2, [pc, #120]	; (800bc24 <Motor_ctrl+0x204>)
 800bbac:	23a4      	movs	r3, #164	; 0xa4
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	58d2      	ldr	r2, [r2, r3]
 800bbb2:	23ed      	movs	r3, #237	; 0xed
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	dd0a      	ble.n	800bbd0 <Motor_ctrl+0x1b0>
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	238a      	movs	r3, #138	; 0x8a
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	58d3      	ldr	r3, [r2, r3]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	dd04      	ble.n	800bbd0 <Motor_ctrl+0x1b0>
			inst->control.duty_cycle = 0;
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	238a      	movs	r3, #138	; 0x8a
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	2100      	movs	r1, #0
 800bbce:	50d1      	str	r1, [r2, r3]
	}

	if(board.flags.status_flag.single.calib_mode == 1) //en mode calibration on desactive les moteurs
 800bbd0:	4b14      	ldr	r3, [pc, #80]	; (800bc24 <Motor_ctrl+0x204>)
 800bbd2:	795b      	ldrb	r3, [r3, #5]
 800bbd4:	2208      	movs	r2, #8
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d004      	beq.n	800bbe8 <Motor_ctrl+0x1c8>
		inst->control.duty_cycle = 0;
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	238a      	movs	r3, #138	; 0x8a
 800bbe2:	005b      	lsls	r3, r3, #1
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	50d1      	str	r1, [r2, r3]

	status |= Set_Target_PWM( inst, board.control.duty_cycle);
 800bbe8:	4a0e      	ldr	r2, [pc, #56]	; (800bc24 <Motor_ctrl+0x204>)
 800bbea:	238a      	movs	r3, #138	; 0x8a
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	58d2      	ldr	r2, [r2, r3]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	0011      	movs	r1, r2
 800bbf4:	0018      	movs	r0, r3
 800bbf6:	f7ff feeb 	bl	800b9d0 <Set_Target_PWM>
 800bbfa:	0003      	movs	r3, r0
 800bbfc:	0019      	movs	r1, r3
 800bbfe:	200f      	movs	r0, #15
 800bc00:	183b      	adds	r3, r7, r0
 800bc02:	183a      	adds	r2, r7, r0
 800bc04:	7812      	ldrb	r2, [r2, #0]
 800bc06:	430a      	orrs	r2, r1
 800bc08:	701a      	strb	r2, [r3, #0]

	return status;
 800bc0a:	183b      	adds	r3, r7, r0
 800bc0c:	781b      	ldrb	r3, [r3, #0]
}
 800bc0e:	0018      	movs	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	b005      	add	sp, #20
 800bc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc16:	46c0      	nop			; (mov r8, r8)
 800bc18:	080102dc 	.word	0x080102dc
 800bc1c:	49742400 	.word	0x49742400
 800bc20:	20001008 	.word	0x20001008
 800bc24:	20000508 	.word	0x20000508

0800bc28 <reset_all_PID>:

/*
 * 	PRIVATE FUNCTIONS
 */
HAL_StatusTypeDef
reset_all_PID( Global_Struct_t * inst) {
 800bc28:	b590      	push	{r4, r7, lr}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 800bc30:	240f      	movs	r4, #15
 800bc32:	193b      	adds	r3, r7, r4
 800bc34:	2200      	movs	r2, #0
 800bc36:	701a      	strb	r2, [r3, #0]

	status |= PID_ResetAll(&(inst->control.position));
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	330c      	adds	r3, #12
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	f7fd fe97 	bl	8009970 <PID_ResetAll>
 800bc42:	0003      	movs	r3, r0
 800bc44:	0019      	movs	r1, r3
 800bc46:	193b      	adds	r3, r7, r4
 800bc48:	193a      	adds	r2, r7, r4
 800bc4a:	7812      	ldrb	r2, [r2, #0]
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	701a      	strb	r2, [r3, #0]
	status |= PID_ResetAll(&(inst->control.speed));
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	334c      	adds	r3, #76	; 0x4c
 800bc54:	0018      	movs	r0, r3
 800bc56:	f7fd fe8b 	bl	8009970 <PID_ResetAll>
 800bc5a:	0003      	movs	r3, r0
 800bc5c:	0019      	movs	r1, r3
 800bc5e:	193b      	adds	r3, r7, r4
 800bc60:	193a      	adds	r2, r7, r4
 800bc62:	7812      	ldrb	r2, [r2, #0]
 800bc64:	430a      	orrs	r2, r1
 800bc66:	701a      	strb	r2, [r3, #0]
	status |= PID_ResetAll(&(inst->control.torque));
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	338c      	adds	r3, #140	; 0x8c
 800bc6c:	0018      	movs	r0, r3
 800bc6e:	f7fd fe7f 	bl	8009970 <PID_ResetAll>
 800bc72:	0003      	movs	r3, r0
 800bc74:	0019      	movs	r1, r3
 800bc76:	193b      	adds	r3, r7, r4
 800bc78:	193a      	adds	r2, r7, r4
 800bc7a:	7812      	ldrb	r2, [r2, #0]
 800bc7c:	430a      	orrs	r2, r1
 800bc7e:	701a      	strb	r2, [r3, #0]
	inst->control.position.setpoint = inst->motor.pos.position;
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	23a4      	movs	r3, #164	; 0xa4
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	58d2      	ldr	r2, [r2, r3]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	60da      	str	r2, [r3, #12]
	inst->motor.speed.rpm =0;
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	23a0      	movs	r3, #160	; 0xa0
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	2100      	movs	r1, #0
 800bc94:	50d1      	str	r1, [r2, r3]
	inst->motor.torque = 0;
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	23a8      	movs	r3, #168	; 0xa8
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	52d1      	strh	r1, [r2, r3]

	status |= PID_ResetAll(&(inst->control.voltage));
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	33cc      	adds	r3, #204	; 0xcc
 800bca4:	0018      	movs	r0, r3
 800bca6:	f7fd fe63 	bl	8009970 <PID_ResetAll>
 800bcaa:	0003      	movs	r3, r0
 800bcac:	0019      	movs	r1, r3
 800bcae:	193b      	adds	r3, r7, r4
 800bcb0:	193a      	adds	r2, r7, r4
 800bcb2:	7812      	ldrb	r2, [r2, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	701a      	strb	r2, [r3, #0]
	inst->motor.actualDC = 0;
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	23aa      	movs	r3, #170	; 0xaa
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	50d1      	str	r1, [r2, r3]

	return status;
 800bcc2:	193b      	adds	r3, r7, r4
 800bcc4:	781b      	ldrb	r3, [r3, #0]
}
 800bcc6:	0018      	movs	r0, r3
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	b005      	add	sp, #20
 800bccc:	bd90      	pop	{r4, r7, pc}
	...

0800bcd0 <SUB_MAIN>:
//     PUBLIC FUNCTIONS
// ==================================================

void
SUB_MAIN ( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK;
 800bcd6:	1dfb      	adds	r3, r7, #7
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]

    ///// Services initialization
    status |= sub_main_InitServices();
 800bcdc:	f000 f896 	bl	800be0c <sub_main_InitServices>
 800bce0:	0003      	movs	r3, r0
 800bce2:	0019      	movs	r1, r3
 800bce4:	1dfb      	adds	r3, r7, #7
 800bce6:	1dfa      	adds	r2, r7, #7
 800bce8:	7812      	ldrb	r2, [r2, #0]
 800bcea:	430a      	orrs	r2, r1
 800bcec:	701a      	strb	r2, [r3, #0]

    if ( status != HAL_OK )
 800bcee:	1dfb      	adds	r3, r7, #7
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <SUB_MAIN+0x2c>
    {
        sub_main_ErrorHandler();
 800bcf6:	f000 f877 	bl	800bde8 <sub_main_ErrorHandler>
//        error = Init_error;
        return;
 800bcfa:	e063      	b.n	800bdc4 <SUB_MAIN+0xf4>
    }

	switch (board.number)
 800bcfc:	4a33      	ldr	r2, [pc, #204]	; (800bdcc <SUB_MAIN+0xfc>)
 800bcfe:	2388      	movs	r3, #136	; 0x88
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	5cd3      	ldrb	r3, [r2, r3]
 800bd04:	2b04      	cmp	r3, #4
 800bd06:	d017      	beq.n	800bd38 <SUB_MAIN+0x68>
 800bd08:	dc1b      	bgt.n	800bd42 <SUB_MAIN+0x72>
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d00a      	beq.n	800bd24 <SUB_MAIN+0x54>
 800bd0e:	dc18      	bgt.n	800bd42 <SUB_MAIN+0x72>
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d002      	beq.n	800bd1a <SUB_MAIN+0x4a>
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d00a      	beq.n	800bd2e <SUB_MAIN+0x5e>
 800bd18:	e013      	b.n	800bd42 <SUB_MAIN+0x72>
	{
	case TYPE_STANDER_RIGHT :
		CONSOLE("Right stander board "EOL );
 800bd1a:	4b2d      	ldr	r3, [pc, #180]	; (800bdd0 <SUB_MAIN+0x100>)
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	f7fe fee1 	bl	800aae4 <CONSOLE>
		break;
 800bd22:	e00e      	b.n	800bd42 <SUB_MAIN+0x72>

	case TYPE_WHEEL_RIGHT :
		CONSOLE("Right wheel board "EOL );
 800bd24:	4b2b      	ldr	r3, [pc, #172]	; (800bdd4 <SUB_MAIN+0x104>)
 800bd26:	0018      	movs	r0, r3
 800bd28:	f7fe fedc 	bl	800aae4 <CONSOLE>
		break;
 800bd2c:	e009      	b.n	800bd42 <SUB_MAIN+0x72>

	case TYPE_STANDER_LEFT :
		CONSOLE("Left stander board "EOL );
 800bd2e:	4b2a      	ldr	r3, [pc, #168]	; (800bdd8 <SUB_MAIN+0x108>)
 800bd30:	0018      	movs	r0, r3
 800bd32:	f7fe fed7 	bl	800aae4 <CONSOLE>
		break;
 800bd36:	e004      	b.n	800bd42 <SUB_MAIN+0x72>

	case TYPE_WHEEL_LEFT :
		CONSOLE("Left wheel board"EOL );
 800bd38:	4b28      	ldr	r3, [pc, #160]	; (800bddc <SUB_MAIN+0x10c>)
 800bd3a:	0018      	movs	r0, r3
 800bd3c:	f7fe fed2 	bl	800aae4 <CONSOLE>
		break;
 800bd40:	46c0      	nop			; (mov r8, r8)
	}

    ///// Tasks initialization
    status |= sub_main_InitTasks();
 800bd42:	f000 f8cf 	bl	800bee4 <sub_main_InitTasks>
 800bd46:	0003      	movs	r3, r0
 800bd48:	0019      	movs	r1, r3
 800bd4a:	1dfb      	adds	r3, r7, #7
 800bd4c:	1dfa      	adds	r2, r7, #7
 800bd4e:	7812      	ldrb	r2, [r2, #0]
 800bd50:	430a      	orrs	r2, r1
 800bd52:	701a      	strb	r2, [r3, #0]

    if ( status != HAL_OK )
 800bd54:	1dfb      	adds	r3, r7, #7
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <SUB_MAIN+0x92>
    {
        sub_main_ErrorHandler();
 800bd5c:	f000 f844 	bl	800bde8 <sub_main_ErrorHandler>
//        error = Init_error;
        return;
 800bd60:	e030      	b.n	800bdc4 <SUB_MAIN+0xf4>
    }

    for(;;)
    {
    	if(board.flags.status_flag.single.auto_calib_status == In_progress )
 800bd62:	4b1a      	ldr	r3, [pc, #104]	; (800bdcc <SUB_MAIN+0xfc>)
 800bd64:	795b      	ldrb	r3, [r3, #5]
 800bd66:	2206      	movs	r2, #6
 800bd68:	4013      	ands	r3, r2
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d112      	bne.n	800bd96 <SUB_MAIN+0xc6>
    	{
    		if(!start_auto_calib)
 800bd70:	4b1b      	ldr	r3, [pc, #108]	; (800bde0 <SUB_MAIN+0x110>)
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2201      	movs	r2, #1
 800bd76:	4053      	eors	r3, r2
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0f1      	beq.n	800bd62 <SUB_MAIN+0x92>
    		{
    			start_auto_calib = true;
 800bd7e:	4b18      	ldr	r3, [pc, #96]	; (800bde0 <SUB_MAIN+0x110>)
 800bd80:	2201      	movs	r2, #1
 800bd82:	701a      	strb	r2, [r3, #0]
    			SCHEDULER_Task_Register( &task_AutoCalibration );
 800bd84:	4b17      	ldr	r3, [pc, #92]	; (800bde4 <SUB_MAIN+0x114>)
 800bd86:	0018      	movs	r0, r3
 800bd88:	f7ff f920 	bl	800afcc <SCHEDULER_Task_Register>
    			SCHEDULER_Task_Start   ( &task_AutoCalibration );
 800bd8c:	4b15      	ldr	r3, [pc, #84]	; (800bde4 <SUB_MAIN+0x114>)
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f7ff f956 	bl	800b040 <SCHEDULER_Task_Start>
 800bd94:	e7e5      	b.n	800bd62 <SUB_MAIN+0x92>
    		}
    	}
    	else if( board.flags.status_flag.single.auto_calib_status ==  Done)
 800bd96:	4b0d      	ldr	r3, [pc, #52]	; (800bdcc <SUB_MAIN+0xfc>)
 800bd98:	795b      	ldrb	r3, [r3, #5]
 800bd9a:	2206      	movs	r2, #6
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b04      	cmp	r3, #4
 800bda2:	d1de      	bne.n	800bd62 <SUB_MAIN+0x92>
    	{
    		if(start_auto_calib)
 800bda4:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <SUB_MAIN+0x110>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d0da      	beq.n	800bd62 <SUB_MAIN+0x92>
    		{
    			//Reset pour relancer une prochaine auto-calibration si besoin
				start_auto_calib = false;
 800bdac:	4b0c      	ldr	r3, [pc, #48]	; (800bde0 <SUB_MAIN+0x110>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	701a      	strb	r2, [r3, #0]
				//On arrete la tache d'auto-calibration
				SCHEDULER_Task_Stop   ( &task_AutoCalibration );
 800bdb2:	4b0c      	ldr	r3, [pc, #48]	; (800bde4 <SUB_MAIN+0x114>)
 800bdb4:	0018      	movs	r0, r3
 800bdb6:	f7ff f967 	bl	800b088 <SCHEDULER_Task_Stop>
				SCHEDULER_Task_Unregister( &task_AutoCalibration );
 800bdba:	4b0a      	ldr	r3, [pc, #40]	; (800bde4 <SUB_MAIN+0x114>)
 800bdbc:	0018      	movs	r0, r3
 800bdbe:	f7ff f923 	bl	800b008 <SCHEDULER_Task_Unregister>
    	if(board.flags.status_flag.single.auto_calib_status == In_progress )
 800bdc2:	e7ce      	b.n	800bd62 <SUB_MAIN+0x92>
    		}
    	}
    }
}
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	b002      	add	sp, #8
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	46c0      	nop			; (mov r8, r8)
 800bdcc:	20000508 	.word	0x20000508
 800bdd0:	0800ff68 	.word	0x0800ff68
 800bdd4:	0800ff80 	.word	0x0800ff80
 800bdd8:	0800ff98 	.word	0x0800ff98
 800bddc:	0800ffb0 	.word	0x0800ffb0
 800bde0:	20001016 	.word	0x20001016
 800bde4:	20000094 	.word	0x20000094

0800bde8 <sub_main_ErrorHandler>:
//     LOCAL FUNCTIONS
// ==================================================

void
sub_main_ErrorHandler ( void )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	af00      	add	r7, sp, #0
    CONSOLE( EOL );
 800bdec:	4b05      	ldr	r3, [pc, #20]	; (800be04 <sub_main_ErrorHandler+0x1c>)
 800bdee:	0018      	movs	r0, r3
 800bdf0:	f7fe fe78 	bl	800aae4 <CONSOLE>
    CONSOLE( "ERROR in initialisation" );
 800bdf4:	4b04      	ldr	r3, [pc, #16]	; (800be08 <sub_main_ErrorHandler+0x20>)
 800bdf6:	0018      	movs	r0, r3
 800bdf8:	f7fe fe74 	bl	800aae4 <CONSOLE>
}
 800bdfc:	46c0      	nop			; (mov r8, r8)
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	46c0      	nop			; (mov r8, r8)
 800be04:	0800ffc4 	.word	0x0800ffc4
 800be08:	0800ffc8 	.word	0x0800ffc8

0800be0c <sub_main_InitServices>:

HAL_StatusTypeDef
sub_main_InitServices ( void )
{
 800be0c:	b590      	push	{r4, r7, lr}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK , dev_status;
 800be12:	1dfb      	adds	r3, r7, #7
 800be14:	2200      	movs	r2, #0
 800be16:	701a      	strb	r2, [r3, #0]

    memset( ( void * )&devs , 0x00 , sizeof( DEVS_t ) );
 800be18:	4b2d      	ldr	r3, [pc, #180]	; (800bed0 <sub_main_InitServices+0xc4>)
 800be1a:	2209      	movs	r2, #9
 800be1c:	2100      	movs	r1, #0
 800be1e:	0018      	movs	r0, r3
 800be20:	f001 f8f5 	bl	800d00e <memset>

   ///// Initialize the console
   dev_status    = CONSOLE_Init( &huart1 );
 800be24:	1dbc      	adds	r4, r7, #6
 800be26:	4b2b      	ldr	r3, [pc, #172]	; (800bed4 <sub_main_InitServices+0xc8>)
 800be28:	0018      	movs	r0, r3
 800be2a:	f7fe fddf 	bl	800a9ec <CONSOLE_Init>
 800be2e:	0003      	movs	r3, r0
 800be30:	7023      	strb	r3, [r4, #0]
   devs.console  = ( dev_status == HAL_OK ) ? DEV_STATUS_ENABLED : DEV_STATUS_DISABLED;
 800be32:	1dbb      	adds	r3, r7, #6
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <sub_main_InitServices+0x32>
 800be3a:	2202      	movs	r2, #2
 800be3c:	e000      	b.n	800be40 <sub_main_InitServices+0x34>
 800be3e:	2201      	movs	r2, #1
 800be40:	4b23      	ldr	r3, [pc, #140]	; (800bed0 <sub_main_InitServices+0xc4>)
 800be42:	701a      	strb	r2, [r3, #0]
   status       |= dev_status;
 800be44:	1dfb      	adds	r3, r7, #7
 800be46:	1df9      	adds	r1, r7, #7
 800be48:	1dba      	adds	r2, r7, #6
 800be4a:	7809      	ldrb	r1, [r1, #0]
 800be4c:	7812      	ldrb	r2, [r2, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	701a      	strb	r2, [r3, #0]

   // TODO: Initialize any other peripheral
   if ( devs.console == DEV_STATUS_ENABLED )
 800be52:	4b1f      	ldr	r3, [pc, #124]	; (800bed0 <sub_main_InitServices+0xc4>)
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b02      	cmp	r3, #2
 800be58:	d105      	bne.n	800be66 <sub_main_InitServices+0x5a>
   {
	   CONSOLE(
 800be5a:	481f      	ldr	r0, [pc, #124]	; (800bed8 <sub_main_InitServices+0xcc>)
 800be5c:	2306      	movs	r3, #6
 800be5e:	2202      	movs	r2, #2
 800be60:	2100      	movs	r1, #0
 800be62:	f7fe fe3f 	bl	800aae4 <CONSOLE>
   }

    ///// Scheduler
    SCHEDULER_RESULT_t scheduler_result;

    scheduler_result  = SCHEDULER_Init( 100 );
 800be66:	1d7c      	adds	r4, r7, #5
 800be68:	2064      	movs	r0, #100	; 0x64
 800be6a:	f7ff f83d 	bl	800aee8 <SCHEDULER_Init>
 800be6e:	0003      	movs	r3, r0
 800be70:	7023      	strb	r3, [r4, #0]
    dev_status        = ( scheduler_result == SCHEDULER_RESULT_SUCCESS ) ? HAL_OK : HAL_ERROR;
 800be72:	1d7b      	adds	r3, r7, #5
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	1e5a      	subs	r2, r3, #1
 800be78:	4193      	sbcs	r3, r2
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	1dbb      	adds	r3, r7, #6
 800be7e:	701a      	strb	r2, [r3, #0]
    devs.scheduler    = ( dev_status == HAL_OK ) ? DEV_STATUS_ENABLED : DEV_STATUS_DISABLED;
 800be80:	1dbb      	adds	r3, r7, #6
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <sub_main_InitServices+0x80>
 800be88:	2202      	movs	r2, #2
 800be8a:	e000      	b.n	800be8e <sub_main_InitServices+0x82>
 800be8c:	2201      	movs	r2, #1
 800be8e:	4b10      	ldr	r3, [pc, #64]	; (800bed0 <sub_main_InitServices+0xc4>)
 800be90:	70da      	strb	r2, [r3, #3]
    status           |= dev_status;
 800be92:	1dfb      	adds	r3, r7, #7
 800be94:	1df9      	adds	r1, r7, #7
 800be96:	1dba      	adds	r2, r7, #6
 800be98:	7809      	ldrb	r1, [r1, #0]
 800be9a:	7812      	ldrb	r2, [r2, #0]
 800be9c:	430a      	orrs	r2, r1
 800be9e:	701a      	strb	r2, [r3, #0]
    if ( devs.console == DEV_STATUS_ENABLED )
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <sub_main_InitServices+0xc4>)
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d10c      	bne.n	800bec2 <sub_main_InitServices+0xb6>
    {
    	status == HAL_OK ?
    	    CONSOLE( "Scheduler               : OK" EOL ) :
 800bea8:	1dfb      	adds	r3, r7, #7
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d104      	bne.n	800beba <sub_main_InitServices+0xae>
 800beb0:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <sub_main_InitServices+0xd0>)
 800beb2:	0018      	movs	r0, r3
 800beb4:	f7fe fe16 	bl	800aae4 <CONSOLE>
 800beb8:	e003      	b.n	800bec2 <sub_main_InitServices+0xb6>
		    CONSOLE( "Scheduler               : KO" EOL );
 800beba:	4b09      	ldr	r3, [pc, #36]	; (800bee0 <sub_main_InitServices+0xd4>)
 800bebc:	0018      	movs	r0, r3
 800bebe:	f7fe fe11 	bl	800aae4 <CONSOLE>
    }

    return status;
 800bec2:	1dfb      	adds	r3, r7, #7
 800bec4:	781b      	ldrb	r3, [r3, #0]
}
 800bec6:	0018      	movs	r0, r3
 800bec8:	46bd      	mov	sp, r7
 800beca:	b003      	add	sp, #12
 800becc:	bd90      	pop	{r4, r7, pc}
 800bece:	46c0      	nop			; (mov r8, r8)
 800bed0:	2000100c 	.word	0x2000100c
 800bed4:	20000484 	.word	0x20000484
 800bed8:	0800ffe0 	.word	0x0800ffe0
 800bedc:	08010008 	.word	0x08010008
 800bee0:	08010028 	.word	0x08010028

0800bee4 <sub_main_InitTasks>:

HAL_StatusTypeDef
sub_main_InitTasks ( void )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK ;
 800beea:	1dfb      	adds	r3, r7, #7
 800beec:	2200      	movs	r2, #0
 800beee:	701a      	strb	r2, [r3, #0]

    ///// Task: Motor control
	status     |= SCHEDULER_Task_Register( &task_MotorCtrl );
 800bef0:	4b36      	ldr	r3, [pc, #216]	; (800bfcc <sub_main_InitTasks+0xe8>)
 800bef2:	0018      	movs	r0, r3
 800bef4:	f7ff f86a 	bl	800afcc <SCHEDULER_Task_Register>
 800bef8:	0003      	movs	r3, r0
 800befa:	0019      	movs	r1, r3
 800befc:	1dfb      	adds	r3, r7, #7
 800befe:	1dfa      	adds	r2, r7, #7
 800bf00:	7812      	ldrb	r2, [r2, #0]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	701a      	strb	r2, [r3, #0]
	status     |= SCHEDULER_Task_Start   ( &task_MotorCtrl );
 800bf06:	4b31      	ldr	r3, [pc, #196]	; (800bfcc <sub_main_InitTasks+0xe8>)
 800bf08:	0018      	movs	r0, r3
 800bf0a:	f7ff f899 	bl	800b040 <SCHEDULER_Task_Start>
 800bf0e:	0003      	movs	r3, r0
 800bf10:	0019      	movs	r1, r3
 800bf12:	1dfb      	adds	r3, r7, #7
 800bf14:	1dfa      	adds	r2, r7, #7
 800bf16:	7812      	ldrb	r2, [r2, #0]
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	701a      	strb	r2, [r3, #0]

	///// Task: Calcul courant
	status     |= SCHEDULER_Task_Register( &task_CurrentCalculation );
 800bf1c:	4b2c      	ldr	r3, [pc, #176]	; (800bfd0 <sub_main_InitTasks+0xec>)
 800bf1e:	0018      	movs	r0, r3
 800bf20:	f7ff f854 	bl	800afcc <SCHEDULER_Task_Register>
 800bf24:	0003      	movs	r3, r0
 800bf26:	0019      	movs	r1, r3
 800bf28:	1dfb      	adds	r3, r7, #7
 800bf2a:	1dfa      	adds	r2, r7, #7
 800bf2c:	7812      	ldrb	r2, [r2, #0]
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	701a      	strb	r2, [r3, #0]
	status     |= SCHEDULER_Task_Start   ( &task_CurrentCalculation );
 800bf32:	4b27      	ldr	r3, [pc, #156]	; (800bfd0 <sub_main_InitTasks+0xec>)
 800bf34:	0018      	movs	r0, r3
 800bf36:	f7ff f883 	bl	800b040 <SCHEDULER_Task_Start>
 800bf3a:	0003      	movs	r3, r0
 800bf3c:	0019      	movs	r1, r3
 800bf3e:	1dfb      	adds	r3, r7, #7
 800bf40:	1dfa      	adds	r2, r7, #7
 800bf42:	7812      	ldrb	r2, [r2, #0]
 800bf44:	430a      	orrs	r2, r1
 800bf46:	701a      	strb	r2, [r3, #0]

    ///// Task: Communication management
	status     |= SCHEDULER_Task_Register( &task_Com_mgt );
 800bf48:	4b22      	ldr	r3, [pc, #136]	; (800bfd4 <sub_main_InitTasks+0xf0>)
 800bf4a:	0018      	movs	r0, r3
 800bf4c:	f7ff f83e 	bl	800afcc <SCHEDULER_Task_Register>
 800bf50:	0003      	movs	r3, r0
 800bf52:	0019      	movs	r1, r3
 800bf54:	1dfb      	adds	r3, r7, #7
 800bf56:	1dfa      	adds	r2, r7, #7
 800bf58:	7812      	ldrb	r2, [r2, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	701a      	strb	r2, [r3, #0]
	status     |= SCHEDULER_Task_Start   ( &task_Com_mgt );
 800bf5e:	4b1d      	ldr	r3, [pc, #116]	; (800bfd4 <sub_main_InitTasks+0xf0>)
 800bf60:	0018      	movs	r0, r3
 800bf62:	f7ff f86d 	bl	800b040 <SCHEDULER_Task_Start>
 800bf66:	0003      	movs	r3, r0
 800bf68:	0019      	movs	r1, r3
 800bf6a:	1dfb      	adds	r3, r7, #7
 800bf6c:	1dfa      	adds	r2, r7, #7
 800bf6e:	7812      	ldrb	r2, [r2, #0]
 800bf70:	430a      	orrs	r2, r1
 800bf72:	701a      	strb	r2, [r3, #0]

	if( board.select.type_IsStander )
 800bf74:	4a18      	ldr	r2, [pc, #96]	; (800bfd8 <sub_main_InitTasks+0xf4>)
 800bf76:	238c      	movs	r3, #140	; 0x8c
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	5cd3      	ldrb	r3, [r2, r3]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d015      	beq.n	800bfac <sub_main_InitTasks+0xc8>
	{
		///// Task: ADC Fx
		status     |= SCHEDULER_Task_Register( &task_ADC );
 800bf80:	4b16      	ldr	r3, [pc, #88]	; (800bfdc <sub_main_InitTasks+0xf8>)
 800bf82:	0018      	movs	r0, r3
 800bf84:	f7ff f822 	bl	800afcc <SCHEDULER_Task_Register>
 800bf88:	0003      	movs	r3, r0
 800bf8a:	0019      	movs	r1, r3
 800bf8c:	1dfb      	adds	r3, r7, #7
 800bf8e:	1dfa      	adds	r2, r7, #7
 800bf90:	7812      	ldrb	r2, [r2, #0]
 800bf92:	430a      	orrs	r2, r1
 800bf94:	701a      	strb	r2, [r3, #0]
		status     |= SCHEDULER_Task_Start   ( &task_ADC );
 800bf96:	4b11      	ldr	r3, [pc, #68]	; (800bfdc <sub_main_InitTasks+0xf8>)
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f7ff f851 	bl	800b040 <SCHEDULER_Task_Start>
 800bf9e:	0003      	movs	r3, r0
 800bfa0:	0019      	movs	r1, r3
 800bfa2:	1dfb      	adds	r3, r7, #7
 800bfa4:	1dfa      	adds	r2, r7, #7
 800bfa6:	7812      	ldrb	r2, [r2, #0]
 800bfa8:	430a      	orrs	r2, r1
 800bfaa:	701a      	strb	r2, [r3, #0]

	}

	//on ne demarre le timer qu'apres avoir préparé les taches afin d'etre sur qu'elle sont toutes prete dès la premiere interruption
    if ( HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 800bfac:	4b0c      	ldr	r3, [pc, #48]	; (800bfe0 <sub_main_InitTasks+0xfc>)
 800bfae:	0018      	movs	r0, r3
 800bfb0:	f7fb f960 	bl	8007274 <HAL_TIM_Base_Start_IT>
 800bfb4:	1e03      	subs	r3, r0, #0
 800bfb6:	d002      	beq.n	800bfbe <sub_main_InitTasks+0xda>
	{
    	status = HAL_ERROR;
 800bfb8:	1dfb      	adds	r3, r7, #7
 800bfba:	2201      	movs	r2, #1
 800bfbc:	701a      	strb	r2, [r3, #0]
	}

    return status;
 800bfbe:	1dfb      	adds	r3, r7, #7
 800bfc0:	781b      	ldrb	r3, [r3, #0]
}
 800bfc2:	0018      	movs	r0, r3
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	b002      	add	sp, #8
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	46c0      	nop			; (mov r8, r8)
 800bfcc:	20000034 	.word	0x20000034
 800bfd0:	2000004c 	.word	0x2000004c
 800bfd4:	20000064 	.word	0x20000064
 800bfd8:	20000508 	.word	0x20000508
 800bfdc:	2000007c 	.word	0x2000007c
 800bfe0:	2000043c 	.word	0x2000043c

0800bfe4 <HAL_TIM_PeriodElapsedCallback>:


void
HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]

    if ( htim->Instance == htim7.Instance )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	4b04      	ldr	r3, [pc, #16]	; (800c004 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d101      	bne.n	800bffc <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        SCHEDULER_MonitoringLoop();
 800bff8:	f7fe ff92 	bl	800af20 <SCHEDULER_MonitoringLoop>
    }
}
 800bffc:	46c0      	nop			; (mov r8, r8)
 800bffe:	46bd      	mov	sp, r7
 800c000:	b002      	add	sp, #8
 800c002:	bd80      	pop	{r7, pc}
 800c004:	2000043c 	.word	0x2000043c

0800c008 <HAL_UART_TxCpltCallback>:


void
HAL_UART_TxCpltCallback ( UART_HandleTypeDef * huart )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
    if ( huart->Instance == huart1.Instance )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	4b04      	ldr	r3, [pc, #16]	; (800c028 <HAL_UART_TxCpltCallback+0x20>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d101      	bne.n	800c020 <HAL_UART_TxCpltCallback+0x18>
    {
        CONSOLE_UART_TxCpltCallback();
 800c01c:	f7fe fd7e 	bl	800ab1c <CONSOLE_UART_TxCpltCallback>
    }
}
 800c020:	46c0      	nop			; (mov r8, r8)
 800c022:	46bd      	mov	sp, r7
 800c024:	b002      	add	sp, #8
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20000484 	.word	0x20000484

0800c02c <HAL_UART_RxCpltCallback>:


void
HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]

    if ( huart->Instance == huart1.Instance )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	4b04      	ldr	r3, [pc, #16]	; (800c04c <HAL_UART_RxCpltCallback+0x20>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d101      	bne.n	800c044 <HAL_UART_RxCpltCallback+0x18>
    {
        CONSOLE_UART_RxCpltCallback();
 800c040:	f7fe fda4 	bl	800ab8c <CONSOLE_UART_RxCpltCallback>
    }
}
 800c044:	46c0      	nop			; (mov r8, r8)
 800c046:	46bd      	mov	sp, r7
 800c048:	b002      	add	sp, #8
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	20000484 	.word	0x20000484

0800c050 <HAL_ADC_ConvCpltCallback>:


void
HAL_ADC_ConvCpltCallback ( ADC_HandleTypeDef * _hadc )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]

}
 800c058:	46c0      	nop			; (mov r8, r8)
 800c05a:	46bd      	mov	sp, r7
 800c05c:	b002      	add	sp, #8
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <Compute_Average_Force>:
 * Conversion en tension et mise à jour de la moyenne glissante
 */

void
Compute_Average_Force ( _FORCE_t *f, SENSOR_ADC_CHANNEL_t channel)
{
 800c060:	b590      	push	{r4, r7, lr}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	000a      	movs	r2, r1
 800c06a:	1cfb      	adds	r3, r7, #3
 800c06c:	701a      	strb	r2, [r3, #0]
#define SIZE_TAB 5 // TODO : remplacer par une constante liée à la vraie taille du tableau

	const float adcToVolt = 3.3/4096.0/(float)SIZE_TAB; // NE PAS METTRE EN DEFINE sinon temps de calcul plus long
 800c06e:	4b24      	ldr	r3, [pc, #144]	; (800c100 <Compute_Average_Force+0xa0>)
 800c070:	60fb      	str	r3, [r7, #12]

	//On soustrait la valeur la plus ancienne
	f->adc.moy -= f->adc.tab_ADC[f->adc.idx];
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	18d3      	adds	r3, r2, r3
 800c080:	3304      	adds	r3, #4
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	1c19      	adds	r1, r3, #0
 800c086:	f7f4 ff09 	bl	8000e9c <__aeabi_fsub>
 800c08a:	1c03      	adds	r3, r0, #0
 800c08c:	1c1a      	adds	r2, r3, #0
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	62da      	str	r2, [r3, #44]	; 0x2c

	//On remplace l'ancienne valeur par la nouvelle
	f->adc.tab_ADC[f->adc.idx] = (float)(board.sensor.rx_dma[ channel ]) * adcToVolt; // TODO:replace 3.3 by vcc adc channel
 800c092:	1cfb      	adds	r3, r7, #3
 800c094:	781a      	ldrb	r2, [r3, #0]
 800c096:	4b1b      	ldr	r3, [pc, #108]	; (800c104 <Compute_Average_Force+0xa4>)
 800c098:	325e      	adds	r2, #94	; 0x5e
 800c09a:	0092      	lsls	r2, r2, #2
 800c09c:	58d3      	ldr	r3, [r2, r3]
 800c09e:	0018      	movs	r0, r3
 800c0a0:	f7f5 f92e 	bl	8001300 <__aeabi_ui2f>
 800c0a4:	1c02      	adds	r2, r0, #0
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	001c      	movs	r4, r3
 800c0ac:	68f9      	ldr	r1, [r7, #12]
 800c0ae:	1c10      	adds	r0, r2, #0
 800c0b0:	f7f4 fdce 	bl	8000c50 <__aeabi_fmul>
 800c0b4:	1c03      	adds	r3, r0, #0
 800c0b6:	1c19      	adds	r1, r3, #0
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	00a3      	lsls	r3, r4, #2
 800c0bc:	18d3      	adds	r3, r2, r3
 800c0be:	3304      	adds	r3, #4
 800c0c0:	6019      	str	r1, [r3, #0]

	//On ajoute la nouvelle valeur à la moyenne
	f->adc.moy += f->adc.tab_ADC[f->adc.idx];
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	18d3      	adds	r3, r2, r3
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	1c19      	adds	r1, r3, #0
 800c0d6:	f7f4 fa55 	bl	8000584 <__aeabi_fadd>
 800c0da:	1c03      	adds	r3, r0, #0
 800c0dc:	1c1a      	adds	r2, r3, #0
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	62da      	str	r2, [r3, #44]	; 0x2c

	//On passe à l'indice suivant pour le prochain tour
	f->adc.idx = (f->adc.idx + 1) % SIZE_TAB ;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	2105      	movs	r1, #5
 800c0ea:	0018      	movs	r0, r3
 800c0ec:	f7f4 f996 	bl	800041c <__aeabi_idivmod>
 800c0f0:	000b      	movs	r3, r1
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	701a      	strb	r2, [r3, #0]
}
 800c0f8:	46c0      	nop			; (mov r8, r8)
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	b005      	add	sp, #20
 800c0fe:	bd90      	pop	{r4, r7, pc}
 800c100:	3928f5c3 	.word	0x3928f5c3
 800c104:	20000508 	.word	0x20000508

0800c108 <Compute_Force>:
/*
 * Retourne la valeur de la force calculée
 */
void
Compute_Force ( _FORCE_t *f)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
		f->force.f = ( f->force.offset - f->adc.moy ) * f->force.pente; //pente en N/v
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c118:	1c19      	adds	r1, r3, #0
 800c11a:	1c10      	adds	r0, r2, #0
 800c11c:	f7f4 febe 	bl	8000e9c <__aeabi_fsub>
 800c120:	1c03      	adds	r3, r0, #0
 800c122:	1c1a      	adds	r2, r3, #0
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	1c19      	adds	r1, r3, #0
 800c12a:	1c10      	adds	r0, r2, #0
 800c12c:	f7f4 fd90 	bl	8000c50 <__aeabi_fmul>
 800c130:	1c03      	adds	r3, r0, #0
 800c132:	1c1a      	adds	r2, r3, #0
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c138:	46c0      	nop			; (mov r8, r8)
 800c13a:	46bd      	mov	sp, r7
 800c13c:	b002      	add	sp, #8
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <TaskCallback_MotorCtrl>:
//     TASK
// ==================================================

void
TaskCallback_MotorCtrl ( void * arg )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]

	if(board.control.IsOn)
 800c148:	4b11      	ldr	r3, [pc, #68]	; (800c190 <TaskCallback_MotorCtrl+0x50>)
 800c14a:	7a1b      	ldrb	r3, [r3, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01b      	beq.n	800c188 <TaskCallback_MotorCtrl+0x48>
	{
		if(board.select.type_IsStander)
 800c150:	4a0f      	ldr	r2, [pc, #60]	; (800c190 <TaskCallback_MotorCtrl+0x50>)
 800c152:	238c      	movs	r3, #140	; 0x8c
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	5cd3      	ldrb	r3, [r2, r3]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00e      	beq.n	800c17a <TaskCallback_MotorCtrl+0x3a>
		{
			stander_Update_Eos( &board ); //Lecture capteur fin de course
 800c15c:	4b0c      	ldr	r3, [pc, #48]	; (800c190 <TaskCallback_MotorCtrl+0x50>)
 800c15e:	0018      	movs	r0, r3
 800c160:	f000 fe4c 	bl	800cdfc <stander_Update_Eos>

			if( board.flags.status_flag.single.homing_status == In_progress )
 800c164:	4b0a      	ldr	r3, [pc, #40]	; (800c190 <TaskCallback_MotorCtrl+0x50>)
 800c166:	795b      	ldrb	r3, [r3, #5]
 800c168:	223f      	movs	r2, #63	; 0x3f
 800c16a:	4393      	bics	r3, r2
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b40      	cmp	r3, #64	; 0x40
 800c170:	d103      	bne.n	800c17a <TaskCallback_MotorCtrl+0x3a>
				Callback_HomingProcess( &board );
 800c172:	4b07      	ldr	r3, [pc, #28]	; (800c190 <TaskCallback_MotorCtrl+0x50>)
 800c174:	0018      	movs	r0, r3
 800c176:	f000 fe65 	bl	800ce44 <Callback_HomingProcess>
		}

		Motor_ctrl( &board , task_MotorCtrl.timeout_us );
 800c17a:	4b06      	ldr	r3, [pc, #24]	; (800c194 <TaskCallback_MotorCtrl+0x54>)
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	4b04      	ldr	r3, [pc, #16]	; (800c190 <TaskCallback_MotorCtrl+0x50>)
 800c180:	0011      	movs	r1, r2
 800c182:	0018      	movs	r0, r3
 800c184:	f7ff fc4c 	bl	800ba20 <Motor_ctrl>
	}

}
 800c188:	46c0      	nop			; (mov r8, r8)
 800c18a:	46bd      	mov	sp, r7
 800c18c:	b002      	add	sp, #8
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	20000508 	.word	0x20000508
 800c194:	20000034 	.word	0x20000034

0800c198 <TaskCallback_Current>:
 * 	Iréel = I * gain
 * 		gain = 0.715 calculé ampériquement
 */
void
TaskCallback_Current ( void * arg)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]

	if(board.control.IsOn)
 800c1a0:	4b39      	ldr	r3, [pc, #228]	; (800c288 <TaskCallback_Current+0xf0>)
 800c1a2:	7a1b      	ldrb	r3, [r3, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d05e      	beq.n	800c266 <TaskCallback_Current+0xce>
		float pwm = 0.0, error = 0.0;
		const float Kadc = 0.0, Kcorr = 0.0, Tech = 200.0, tau = 2000.0;

		error =  (float)Get_Target_PWM() - current;
*/
		board.control.voltage.setpoint = board.control.target_duty_cycle * 1000.0;
 800c1a8:	4a37      	ldr	r2, [pc, #220]	; (800c288 <TaskCallback_Current+0xf0>)
 800c1aa:	2388      	movs	r3, #136	; 0x88
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	58d3      	ldr	r3, [r2, r3]
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	f7f6 fe77 	bl	8002ea4 <__aeabi_i2d>
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	4b34      	ldr	r3, [pc, #208]	; (800c28c <TaskCallback_Current+0xf4>)
 800c1ba:	f7f6 f821 	bl	8002200 <__aeabi_dmul>
 800c1be:	0002      	movs	r2, r0
 800c1c0:	000b      	movs	r3, r1
 800c1c2:	0010      	movs	r0, r2
 800c1c4:	0019      	movs	r1, r3
 800c1c6:	f7f6 fe37 	bl	8002e38 <__aeabi_d2iz>
 800c1ca:	0002      	movs	r2, r0
 800c1cc:	4b2e      	ldr	r3, [pc, #184]	; (800c288 <TaskCallback_Current+0xf0>)
 800c1ce:	21cc      	movs	r1, #204	; 0xcc
 800c1d0:	505a      	str	r2, [r3, r1]

		PID_Compute(&(board.control.voltage),	(int32_t) board.motor.actualDC,	 200.0 / 1000000.0);
 800c1d2:	4a2d      	ldr	r2, [pc, #180]	; (800c288 <TaskCallback_Current+0xf0>)
 800c1d4:	23aa      	movs	r3, #170	; 0xaa
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	58d3      	ldr	r3, [r2, r3]
 800c1da:	1c18      	adds	r0, r3, #0
 800c1dc:	f7f5 f822 	bl	8001224 <__aeabi_f2iz>
 800c1e0:	0001      	movs	r1, r0
 800c1e2:	4a2b      	ldr	r2, [pc, #172]	; (800c290 <TaskCallback_Current+0xf8>)
 800c1e4:	4b2b      	ldr	r3, [pc, #172]	; (800c294 <TaskCallback_Current+0xfc>)
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	f7fd fc0a 	bl	8009a00 <PID_Compute>

		DRV_SetPWM( (int32_t)(board.control.voltage.output / 1000.0) ); //board.control.target_duty_cycle
 800c1ec:	4b26      	ldr	r3, [pc, #152]	; (800c288 <TaskCallback_Current+0xf0>)
 800c1ee:	22d0      	movs	r2, #208	; 0xd0
 800c1f0:	589b      	ldr	r3, [r3, r2]
 800c1f2:	1c18      	adds	r0, r3, #0
 800c1f4:	f7f6 feac 	bl	8002f50 <__aeabi_f2d>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4b24      	ldr	r3, [pc, #144]	; (800c28c <TaskCallback_Current+0xf4>)
 800c1fc:	f7f5 fbfe 	bl	80019fc <__aeabi_ddiv>
 800c200:	0002      	movs	r2, r0
 800c202:	000b      	movs	r3, r1
 800c204:	0010      	movs	r0, r2
 800c206:	0019      	movs	r1, r3
 800c208:	f7f6 fe16 	bl	8002e38 <__aeabi_d2iz>
 800c20c:	0003      	movs	r3, r0
 800c20e:	0018      	movs	r0, r3
 800c210:	f7fe ff88 	bl	800b124 <DRV_SetPWM>

		static int i = 0;
		static float last_output = 0;

		if (i >= 10000 || ((board.control.voltage.output != last_output) && i >= 50)) {
 800c214:	4b20      	ldr	r3, [pc, #128]	; (800c298 <TaskCallback_Current+0x100>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a20      	ldr	r2, [pc, #128]	; (800c29c <TaskCallback_Current+0x104>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	dc0e      	bgt.n	800c23c <TaskCallback_Current+0xa4>
 800c21e:	4b1a      	ldr	r3, [pc, #104]	; (800c288 <TaskCallback_Current+0xf0>)
 800c220:	22d0      	movs	r2, #208	; 0xd0
 800c222:	589a      	ldr	r2, [r3, r2]
 800c224:	4b1e      	ldr	r3, [pc, #120]	; (800c2a0 <TaskCallback_Current+0x108>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	1c19      	adds	r1, r3, #0
 800c22a:	1c10      	adds	r0, r2, #0
 800c22c:	f7f4 f946 	bl	80004bc <__aeabi_fcmpeq>
 800c230:	1e03      	subs	r3, r0, #0
 800c232:	d10b      	bne.n	800c24c <TaskCallback_Current+0xb4>
 800c234:	4b18      	ldr	r3, [pc, #96]	; (800c298 <TaskCallback_Current+0x100>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b31      	cmp	r3, #49	; 0x31
 800c23a:	dd07      	ble.n	800c24c <TaskCallback_Current+0xb4>
			i = 0;
 800c23c:	4b16      	ldr	r3, [pc, #88]	; (800c298 <TaskCallback_Current+0x100>)
 800c23e:	2200      	movs	r2, #0
 800c240:	601a      	str	r2, [r3, #0]
//			CONSOLE(EOL"%ld;%.0f;%ld"EOL, board.control.position.setpoint, board.control.position.output, board.control.duty_cycle);
//			CONSOLE("%ld;%ld;%ld"EOL, board.control.voltage.setpoint,(int32_t) (board.motor.actualDC ),	 (int32_t)(board.control.voltage.output ));
			last_output = board.control.voltage.output;
 800c242:	4b11      	ldr	r3, [pc, #68]	; (800c288 <TaskCallback_Current+0xf0>)
 800c244:	22d0      	movs	r2, #208	; 0xd0
 800c246:	589a      	ldr	r2, [r3, r2]
 800c248:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <TaskCallback_Current+0x108>)
 800c24a:	601a      	str	r2, [r3, #0]
		}

		i++;
 800c24c:	4b12      	ldr	r3, [pc, #72]	; (800c298 <TaskCallback_Current+0x100>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	4b11      	ldr	r3, [pc, #68]	; (800c298 <TaskCallback_Current+0x100>)
 800c254:	601a      	str	r2, [r3, #0]

		board.motor.actualDC = board.control.voltage.output;
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <TaskCallback_Current+0xf0>)
 800c258:	22d0      	movs	r2, #208	; 0xd0
 800c25a:	5899      	ldr	r1, [r3, r2]
 800c25c:	4a0a      	ldr	r2, [pc, #40]	; (800c288 <TaskCallback_Current+0xf0>)
 800c25e:	23aa      	movs	r3, #170	; 0xaa
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	50d1      	str	r1, [r2, r3]
		board.motor.actualDC = 0;
		board.control.voltage.setpoint = 0;
	}


}
 800c264:	e00b      	b.n	800c27e <TaskCallback_Current+0xe6>
		DRV_SetPWM( 0 );
 800c266:	2000      	movs	r0, #0
 800c268:	f7fe ff5c 	bl	800b124 <DRV_SetPWM>
		board.motor.actualDC = 0;
 800c26c:	4a06      	ldr	r2, [pc, #24]	; (800c288 <TaskCallback_Current+0xf0>)
 800c26e:	23aa      	movs	r3, #170	; 0xaa
 800c270:	005b      	lsls	r3, r3, #1
 800c272:	2100      	movs	r1, #0
 800c274:	50d1      	str	r1, [r2, r3]
		board.control.voltage.setpoint = 0;
 800c276:	4b04      	ldr	r3, [pc, #16]	; (800c288 <TaskCallback_Current+0xf0>)
 800c278:	22cc      	movs	r2, #204	; 0xcc
 800c27a:	2100      	movs	r1, #0
 800c27c:	5099      	str	r1, [r3, r2]
}
 800c27e:	46c0      	nop			; (mov r8, r8)
 800c280:	46bd      	mov	sp, r7
 800c282:	b002      	add	sp, #8
 800c284:	bd80      	pop	{r7, pc}
 800c286:	46c0      	nop			; (mov r8, r8)
 800c288:	20000508 	.word	0x20000508
 800c28c:	408f4000 	.word	0x408f4000
 800c290:	3951b717 	.word	0x3951b717
 800c294:	200005d4 	.word	0x200005d4
 800c298:	20001018 	.word	0x20001018
 800c29c:	0000270f 	.word	0x0000270f
 800c2a0:	2000101c 	.word	0x2000101c

0800c2a4 <TaskCallback_Com_Mgt>:

void
TaskCallback_Com_Mgt ( void * arg)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]

	if(msg_can.RX.idx > 0) //Si au moins 1 message CAN a été reçu
 800c2ac:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <TaskCallback_Com_Mgt+0x34>)
 800c2ae:	7e1b      	ldrb	r3, [r3, #24]
 800c2b0:	b25b      	sxtb	r3, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	dd03      	ble.n	800c2be <TaskCallback_Com_Mgt+0x1a>
/*		uint8_t i=msg_can.RX.idx;
		CONSOLE("B%d %d\r",
						msg_can.RX.bytes[i-1][5],
						msg_can.RX.bytes[i-1][4]);*/
		//On appelle la fonction de tri des msg can reçus
		Can_frame_mgt( &board );
 800c2b6:	4b09      	ldr	r3, [pc, #36]	; (800c2dc <TaskCallback_Com_Mgt+0x38>)
 800c2b8:	0018      	movs	r0, r3
 800c2ba:	f7fd fca5 	bl	8009c08 <Can_frame_mgt>
	}

	//On envoie msg TPDO1 et 2
	CAN_TPDO1_MSG( &board );
 800c2be:	4b07      	ldr	r3, [pc, #28]	; (800c2dc <TaskCallback_Com_Mgt+0x38>)
 800c2c0:	0018      	movs	r0, r3
 800c2c2:	f7fe f935 	bl	800a530 <CAN_TPDO1_MSG>
	CAN_TPDO2_MSG( &board );
 800c2c6:	4b05      	ldr	r3, [pc, #20]	; (800c2dc <TaskCallback_Com_Mgt+0x38>)
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f7fe f9ab 	bl	800a624 <CAN_TPDO2_MSG>
}
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	b002      	add	sp, #8
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	46c0      	nop			; (mov r8, r8)
 800c2d8:	20000778 	.word	0x20000778
 800c2dc:	20000508 	.word	0x20000508

0800c2e0 <TaskCallback_ADC>:
 * brutes ADC et les convertit en V
 *
 */
void
TaskCallback_ADC ( void * arg )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
	//Calcule des tensions moyennes
	Compute_Average_Force(&board.sensor.fx, HANDLER_FX);
 800c2e8:	4b11      	ldr	r3, [pc, #68]	; (800c330 <TaskCallback_ADC+0x50>)
 800c2ea:	2103      	movs	r1, #3
 800c2ec:	0018      	movs	r0, r3
 800c2ee:	f7ff feb7 	bl	800c060 <Compute_Average_Force>
	Compute_Average_Force(&board.sensor.fz, HANDLER_FZ);
 800c2f2:	4b10      	ldr	r3, [pc, #64]	; (800c334 <TaskCallback_ADC+0x54>)
 800c2f4:	2104      	movs	r1, #4
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	f7ff feb2 	bl	800c060 <Compute_Average_Force>

	//Calcule des forces
	Compute_Force( &board.sensor.fx );
 800c2fc:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <TaskCallback_ADC+0x50>)
 800c2fe:	0018      	movs	r0, r3
 800c300:	f7ff ff02 	bl	800c108 <Compute_Force>
	Compute_Force( &board.sensor.fz );
 800c304:	4b0b      	ldr	r3, [pc, #44]	; (800c334 <TaskCallback_ADC+0x54>)
 800c306:	0018      	movs	r0, r3
 800c308:	f7ff fefe 	bl	800c108 <Compute_Force>

	//On détecte que la poignée a buté sur quelque chose
	if( board.sensor.fz.force.f < 0.0)
 800c30c:	4a0a      	ldr	r2, [pc, #40]	; (800c338 <TaskCallback_ADC+0x58>)
 800c30e:	2383      	movs	r3, #131	; 0x83
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	58d3      	ldr	r3, [r2, r3]
 800c314:	2100      	movs	r1, #0
 800c316:	1c18      	adds	r0, r3, #0
 800c318:	f7f4 f8d6 	bl	80004c8 <__aeabi_fcmplt>
 800c31c:	1e03      	subs	r3, r0, #0
 800c31e:	d100      	bne.n	800c322 <TaskCallback_ADC+0x42>
		flag_stop_homing = true;
}
 800c320:	e002      	b.n	800c328 <TaskCallback_ADC+0x48>
		flag_stop_homing = true;
 800c322:	4b06      	ldr	r3, [pc, #24]	; (800c33c <TaskCallback_ADC+0x5c>)
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
}
 800c328:	46c0      	nop			; (mov r8, r8)
 800c32a:	46bd      	mov	sp, r7
 800c32c:	b002      	add	sp, #8
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	200006a0 	.word	0x200006a0
 800c334:	200006dc 	.word	0x200006dc
 800c338:	20000508 	.word	0x20000508
 800c33c:	20001015 	.word	0x20001015

0800c340 <TaskCallback_Calib>:
 * plusieurs dizaines de secondes
 *
 */
void
TaskCallback_Calib( void* arg )
{
 800c340:	b590      	push	{r4, r7, lr}
 800c342:	b087      	sub	sp, #28
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
#define size 5
	static float   t_offset_x[size] = {0.0}, t_offset_z[size] = {0.0};
	static uint8_t idx = 0;

	t_offset_x[idx] = board.sensor.fx.adc.moy ;
 800c348:	4b35      	ldr	r3, [pc, #212]	; (800c420 <TaskCallback_Calib+0xe0>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	0018      	movs	r0, r3
 800c34e:	4a35      	ldr	r2, [pc, #212]	; (800c424 <TaskCallback_Calib+0xe4>)
 800c350:	23e2      	movs	r3, #226	; 0xe2
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	58d1      	ldr	r1, [r2, r3]
 800c356:	4b34      	ldr	r3, [pc, #208]	; (800c428 <TaskCallback_Calib+0xe8>)
 800c358:	0082      	lsls	r2, r0, #2
 800c35a:	50d1      	str	r1, [r2, r3]
	t_offset_z[idx] = board.sensor.fz.adc.moy ;
 800c35c:	4b30      	ldr	r3, [pc, #192]	; (800c420 <TaskCallback_Calib+0xe0>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	0018      	movs	r0, r3
 800c362:	4a30      	ldr	r2, [pc, #192]	; (800c424 <TaskCallback_Calib+0xe4>)
 800c364:	2380      	movs	r3, #128	; 0x80
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	58d1      	ldr	r1, [r2, r3]
 800c36a:	4b30      	ldr	r3, [pc, #192]	; (800c42c <TaskCallback_Calib+0xec>)
 800c36c:	0082      	lsls	r2, r0, #2
 800c36e:	50d1      	str	r1, [r2, r3]

	if( idx == (size-1) )
 800c370:	4b2b      	ldr	r3, [pc, #172]	; (800c420 <TaskCallback_Calib+0xe0>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	2b04      	cmp	r3, #4
 800c376:	d149      	bne.n	800c40c <TaskCallback_Calib+0xcc>
	{
		//Calcul moyenne et stockage des offset
		float somme_x = 0.0, somme_z = 0.0;
 800c378:	2300      	movs	r3, #0
 800c37a:	617b      	str	r3, [r7, #20]
 800c37c:	2300      	movs	r3, #0
 800c37e:	613b      	str	r3, [r7, #16]
		for(uint8_t i =0; i < size; i++)
 800c380:	230f      	movs	r3, #15
 800c382:	18fb      	adds	r3, r7, r3
 800c384:	2200      	movs	r2, #0
 800c386:	701a      	strb	r2, [r3, #0]
 800c388:	e01b      	b.n	800c3c2 <TaskCallback_Calib+0x82>
		{
			somme_x += t_offset_x[i];
 800c38a:	240f      	movs	r4, #15
 800c38c:	193b      	adds	r3, r7, r4
 800c38e:	781a      	ldrb	r2, [r3, #0]
 800c390:	4b25      	ldr	r3, [pc, #148]	; (800c428 <TaskCallback_Calib+0xe8>)
 800c392:	0092      	lsls	r2, r2, #2
 800c394:	58d3      	ldr	r3, [r2, r3]
 800c396:	1c19      	adds	r1, r3, #0
 800c398:	6978      	ldr	r0, [r7, #20]
 800c39a:	f7f4 f8f3 	bl	8000584 <__aeabi_fadd>
 800c39e:	1c03      	adds	r3, r0, #0
 800c3a0:	617b      	str	r3, [r7, #20]
			somme_z += t_offset_z[i];
 800c3a2:	193b      	adds	r3, r7, r4
 800c3a4:	781a      	ldrb	r2, [r3, #0]
 800c3a6:	4b21      	ldr	r3, [pc, #132]	; (800c42c <TaskCallback_Calib+0xec>)
 800c3a8:	0092      	lsls	r2, r2, #2
 800c3aa:	58d3      	ldr	r3, [r2, r3]
 800c3ac:	1c19      	adds	r1, r3, #0
 800c3ae:	6938      	ldr	r0, [r7, #16]
 800c3b0:	f7f4 f8e8 	bl	8000584 <__aeabi_fadd>
 800c3b4:	1c03      	adds	r3, r0, #0
 800c3b6:	613b      	str	r3, [r7, #16]
		for(uint8_t i =0; i < size; i++)
 800c3b8:	193b      	adds	r3, r7, r4
 800c3ba:	781a      	ldrb	r2, [r3, #0]
 800c3bc:	193b      	adds	r3, r7, r4
 800c3be:	3201      	adds	r2, #1
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	230f      	movs	r3, #15
 800c3c4:	18fb      	adds	r3, r7, r3
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	2b04      	cmp	r3, #4
 800c3ca:	d9de      	bls.n	800c38a <TaskCallback_Calib+0x4a>
		}

		board.sensor.fx.force.offset = somme_x / size;
 800c3cc:	4918      	ldr	r1, [pc, #96]	; (800c430 <TaskCallback_Calib+0xf0>)
 800c3ce:	6978      	ldr	r0, [r7, #20]
 800c3d0:	f7f4 fa76 	bl	80008c0 <__aeabi_fdiv>
 800c3d4:	1c03      	adds	r3, r0, #0
 800c3d6:	1c19      	adds	r1, r3, #0
 800c3d8:	4a12      	ldr	r2, [pc, #72]	; (800c424 <TaskCallback_Calib+0xe4>)
 800c3da:	23e6      	movs	r3, #230	; 0xe6
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	50d1      	str	r1, [r2, r3]
		board.sensor.fz.force.offset = somme_z / size;
 800c3e0:	4913      	ldr	r1, [pc, #76]	; (800c430 <TaskCallback_Calib+0xf0>)
 800c3e2:	6938      	ldr	r0, [r7, #16]
 800c3e4:	f7f4 fa6c 	bl	80008c0 <__aeabi_fdiv>
 800c3e8:	1c03      	adds	r3, r0, #0
 800c3ea:	1c19      	adds	r1, r3, #0
 800c3ec:	4a0d      	ldr	r2, [pc, #52]	; (800c424 <TaskCallback_Calib+0xe4>)
 800c3ee:	2382      	movs	r3, #130	; 0x82
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	50d1      	str	r1, [r2, r3]

		//Reset pour une potentielle prochaine calibration
		idx = 0;
 800c3f4:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <TaskCallback_Calib+0xe0>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	701a      	strb	r2, [r3, #0]

		//MAJ du flag d'auto-calibration
		board.flags.status_flag.single.auto_calib_status = Done;
 800c3fa:	4b0a      	ldr	r3, [pc, #40]	; (800c424 <TaskCallback_Calib+0xe4>)
 800c3fc:	795a      	ldrb	r2, [r3, #5]
 800c3fe:	2106      	movs	r1, #6
 800c400:	438a      	bics	r2, r1
 800c402:	1c11      	adds	r1, r2, #0
 800c404:	2204      	movs	r2, #4
 800c406:	430a      	orrs	r2, r1
 800c408:	715a      	strb	r2, [r3, #5]

	}
	else
		idx++;
}
 800c40a:	e005      	b.n	800c418 <TaskCallback_Calib+0xd8>
		idx++;
 800c40c:	4b04      	ldr	r3, [pc, #16]	; (800c420 <TaskCallback_Calib+0xe0>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	3301      	adds	r3, #1
 800c412:	b2da      	uxtb	r2, r3
 800c414:	4b02      	ldr	r3, [pc, #8]	; (800c420 <TaskCallback_Calib+0xe0>)
 800c416:	701a      	strb	r2, [r3, #0]
}
 800c418:	46c0      	nop			; (mov r8, r8)
 800c41a:	46bd      	mov	sp, r7
 800c41c:	b007      	add	sp, #28
 800c41e:	bd90      	pop	{r4, r7, pc}
 800c420:	20001020 	.word	0x20001020
 800c424:	20000508 	.word	0x20000508
 800c428:	20001024 	.word	0x20001024
 800c42c:	20001038 	.word	0x20001038
 800c430:	40a00000 	.word	0x40a00000

0800c434 <MCU_SETUP>:
static void MX_TIM7_Init(void);
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

CAN_FilterTypeDef  sFilterConfig;

void MCU_SETUP(){
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800c438:	f7f7 f9d0 	bl	80037dc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800c43c:	f000 f840 	bl	800c4c0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800c440:	f000 fba6 	bl	800cb90 <MX_GPIO_Init>

	//Lecture numero de carte
	//board.select.type_IsStander = false;//true; //TODO : ajouter lecture du switch
	board.number = TYPE_WHEEL_RIGHT;	//TODO : ajouter lecture de l'etat des capteurs
 800c444:	4a19      	ldr	r2, [pc, #100]	; (800c4ac <MCU_SETUP+0x78>)
 800c446:	2388      	movs	r3, #136	; 0x88
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	2103      	movs	r1, #3
 800c44c:	54d1      	strb	r1, [r2, r3]
	board.select.side_IsRight = true;	//TODO : ajouter lecture du switch
 800c44e:	4a17      	ldr	r2, [pc, #92]	; (800c4ac <MCU_SETUP+0x78>)
 800c450:	231a      	movs	r3, #26
 800c452:	33ff      	adds	r3, #255	; 0xff
 800c454:	2101      	movs	r1, #1
 800c456:	54d1      	strb	r1, [r2, r3]

	board.select.type_IsStander = true;
 800c458:	4a14      	ldr	r2, [pc, #80]	; (800c4ac <MCU_SETUP+0x78>)
 800c45a:	238c      	movs	r3, #140	; 0x8c
 800c45c:	005b      	lsls	r3, r3, #1
 800c45e:	2101      	movs	r1, #1
 800c460:	54d1      	strb	r1, [r2, r3]
			board.number = TYPE_WHEEL_LEFT;
	}

	*/

	MX_DMA_Init();
 800c462:	f000 fb77 	bl	800cb54 <MX_DMA_Init>
	MX_ADC_Init();
 800c466:	f000 f88f 	bl	800c588 <MX_ADC_Init>
	if (HAL_ADC_Start_DMA(&hadc,&board.sensor.rx_dma[0], ADC_MAX_CHANNELS) != HAL_OK)
 800c46a:	4911      	ldr	r1, [pc, #68]	; (800c4b0 <MCU_SETUP+0x7c>)
 800c46c:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <MCU_SETUP+0x80>)
 800c46e:	2208      	movs	r2, #8
 800c470:	0018      	movs	r0, r3
 800c472:	f7f7 fb7b 	bl	8003b6c <HAL_ADC_Start_DMA>
 800c476:	1e03      	subs	r3, r0, #0
 800c478:	d001      	beq.n	800c47e <MCU_SETUP+0x4a>
	{
		Error_Handler();
 800c47a:	f7f6 fe03 	bl	8003084 <Error_Handler>
	}

	MX_CAN_Init();
 800c47e:	f000 f941 	bl	800c704 <MX_CAN_Init>
	MX_I2C1_Init();
 800c482:	f000 f9cb 	bl	800c81c <MX_I2C1_Init>
	MX_SPI1_Init();
 800c486:	f000 fa09 	bl	800c89c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800c48a:	f000 fb33 	bl	800caf4 <MX_USART1_UART_Init>


	MX_TIM1_Init();
 800c48e:	f000 fa43 	bl	800c918 <MX_TIM1_Init>
	TIM1->CCR1 = 0;	//set PWM 0
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <MCU_SETUP+0x84>)
 800c494:	2200      	movs	r2, #0
 800c496:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //start PWM
 800c498:	4b08      	ldr	r3, [pc, #32]	; (800c4bc <MCU_SETUP+0x88>)
 800c49a:	2100      	movs	r1, #0
 800c49c:	0018      	movs	r0, r3
 800c49e:	f7fa ff93 	bl	80073c8 <HAL_TIM_PWM_Start>

	MX_TIM7_Init();
 800c4a2:	f000 faed 	bl	800ca80 <MX_TIM7_Init>

}
 800c4a6:	46c0      	nop			; (mov r8, r8)
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	20000508 	.word	0x20000508
 800c4b0:	20000680 	.word	0x20000680
 800c4b4:	20000298 	.word	0x20000298
 800c4b8:	40012c00 	.word	0x40012c00
 800c4bc:	200003f4 	.word	0x200003f4

0800c4c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800c4c0:	b590      	push	{r4, r7, lr}
 800c4c2:	b099      	sub	sp, #100	; 0x64
 800c4c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c4c6:	242c      	movs	r4, #44	; 0x2c
 800c4c8:	193b      	adds	r3, r7, r4
 800c4ca:	0018      	movs	r0, r3
 800c4cc:	2334      	movs	r3, #52	; 0x34
 800c4ce:	001a      	movs	r2, r3
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	f000 fd9c 	bl	800d00e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c4d6:	231c      	movs	r3, #28
 800c4d8:	18fb      	adds	r3, r7, r3
 800c4da:	0018      	movs	r0, r3
 800c4dc:	2310      	movs	r3, #16
 800c4de:	001a      	movs	r2, r3
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	f000 fd94 	bl	800d00e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c4e6:	003b      	movs	r3, r7
 800c4e8:	0018      	movs	r0, r3
 800c4ea:	231c      	movs	r3, #28
 800c4ec:	001a      	movs	r2, r3
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	f000 fd8d 	bl	800d00e <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48
 800c4f4:	0021      	movs	r1, r4
 800c4f6:	187b      	adds	r3, r7, r1
 800c4f8:	2238      	movs	r2, #56	; 0x38
 800c4fa:	601a      	str	r2, [r3, #0]
			|RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c4fc:	187b      	adds	r3, r7, r1
 800c4fe:	2201      	movs	r2, #1
 800c500:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800c502:	187b      	adds	r3, r7, r1
 800c504:	2201      	movs	r2, #1
 800c506:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800c508:	187b      	adds	r3, r7, r1
 800c50a:	2210      	movs	r2, #16
 800c50c:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800c50e:	187b      	adds	r3, r7, r1
 800c510:	2201      	movs	r2, #1
 800c512:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c514:	187b      	adds	r3, r7, r1
 800c516:	2200      	movs	r2, #0
 800c518:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c51a:	187b      	adds	r3, r7, r1
 800c51c:	0018      	movs	r0, r3
 800c51e:	f7f9 fb01 	bl	8005b24 <HAL_RCC_OscConfig>
 800c522:	1e03      	subs	r3, r0, #0
 800c524:	d001      	beq.n	800c52a <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800c526:	f7f6 fdad 	bl	8003084 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c52a:	211c      	movs	r1, #28
 800c52c:	187b      	adds	r3, r7, r1
 800c52e:	2207      	movs	r2, #7
 800c530:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800c532:	187b      	adds	r3, r7, r1
 800c534:	2203      	movs	r2, #3
 800c536:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c538:	187b      	adds	r3, r7, r1
 800c53a:	2200      	movs	r2, #0
 800c53c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c53e:	187b      	adds	r3, r7, r1
 800c540:	2200      	movs	r2, #0
 800c542:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800c544:	187b      	adds	r3, r7, r1
 800c546:	2101      	movs	r1, #1
 800c548:	0018      	movs	r0, r3
 800c54a:	f7f9 fe71 	bl	8006230 <HAL_RCC_ClockConfig>
 800c54e:	1e03      	subs	r3, r0, #0
 800c550:	d001      	beq.n	800c556 <SystemClock_Config+0x96>
	{
		Error_Handler();
 800c552:	f7f6 fd97 	bl	8003084 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 800c556:	003b      	movs	r3, r7
 800c558:	4a0a      	ldr	r2, [pc, #40]	; (800c584 <SystemClock_Config+0xc4>)
 800c55a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800c55c:	003b      	movs	r3, r7
 800c55e:	2200      	movs	r2, #0
 800c560:	609a      	str	r2, [r3, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800c562:	003b      	movs	r3, r7
 800c564:	2280      	movs	r2, #128	; 0x80
 800c566:	0092      	lsls	r2, r2, #2
 800c568:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c56a:	003b      	movs	r3, r7
 800c56c:	0018      	movs	r0, r3
 800c56e:	f7f9 ffd9 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 800c572:	1e03      	subs	r3, r0, #0
 800c574:	d001      	beq.n	800c57a <SystemClock_Config+0xba>
	{
		Error_Handler();
 800c576:	f7f6 fd85 	bl	8003084 <Error_Handler>
	}
}
 800c57a:	46c0      	nop			; (mov r8, r8)
 800c57c:	46bd      	mov	sp, r7
 800c57e:	b019      	add	sp, #100	; 0x64
 800c580:	bd90      	pop	{r4, r7, pc}
 800c582:	46c0      	nop			; (mov r8, r8)
 800c584:	00010001 	.word	0x00010001

0800c588 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC_Init(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c58e:	1d3b      	adds	r3, r7, #4
 800c590:	0018      	movs	r0, r3
 800c592:	230c      	movs	r3, #12
 800c594:	001a      	movs	r2, r3
 800c596:	2100      	movs	r1, #0
 800c598:	f000 fd39 	bl	800d00e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800c59c:	4b57      	ldr	r3, [pc, #348]	; (800c6fc <MX_ADC_Init+0x174>)
 800c59e:	4a58      	ldr	r2, [pc, #352]	; (800c700 <MX_ADC_Init+0x178>)
 800c5a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800c5a2:	4b56      	ldr	r3, [pc, #344]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c5a8:	4b54      	ldr	r3, [pc, #336]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c5ae:	4b53      	ldr	r3, [pc, #332]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c5b4:	4b51      	ldr	r3, [pc, #324]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c5ba:	4b50      	ldr	r3, [pc, #320]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5bc:	2204      	movs	r2, #4
 800c5be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800c5c0:	4b4e      	ldr	r3, [pc, #312]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c5c6:	4b4d      	ldr	r3, [pc, #308]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800c5cc:	4b4b      	ldr	r3, [pc, #300]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800c5d2:	4b4a      	ldr	r3, [pc, #296]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c5d8:	4b48      	ldr	r3, [pc, #288]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5da:	22c2      	movs	r2, #194	; 0xc2
 800c5dc:	32ff      	adds	r2, #255	; 0xff
 800c5de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c5e0:	4b46      	ldr	r3, [pc, #280]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800c5e6:	4b45      	ldr	r3, [pc, #276]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5e8:	2224      	movs	r2, #36	; 0x24
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800c5ee:	4b43      	ldr	r3, [pc, #268]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800c5f4:	4b41      	ldr	r3, [pc, #260]	; (800c6fc <MX_ADC_Init+0x174>)
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	f7f7 f978 	bl	80038ec <HAL_ADC_Init>
 800c5fc:	1e03      	subs	r3, r0, #0
 800c5fe:	d001      	beq.n	800c604 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800c600:	f7f6 fd40 	bl	8003084 <Error_Handler>
  }

  /* ### - 2 - Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800c604:	4b3d      	ldr	r3, [pc, #244]	; (800c6fc <MX_ADC_Init+0x174>)
 800c606:	0018      	movs	r0, r3
 800c608:	f7f7 fd58 	bl	80040bc <HAL_ADCEx_Calibration_Start>
 800c60c:	1e03      	subs	r3, r0, #0
 800c60e:	d001      	beq.n	800c614 <MX_ADC_Init+0x8c>
    {
      Error_Handler();
 800c610:	f7f6 fd38 	bl	8003084 <Error_Handler>
    }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800c614:	1d3b      	adds	r3, r7, #4
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c61a:	1d3b      	adds	r3, r7, #4
 800c61c:	2280      	movs	r2, #128	; 0x80
 800c61e:	0152      	lsls	r2, r2, #5
 800c620:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800c622:	1d3b      	adds	r3, r7, #4
 800c624:	2207      	movs	r2, #7
 800c626:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c628:	1d3a      	adds	r2, r7, #4
 800c62a:	4b34      	ldr	r3, [pc, #208]	; (800c6fc <MX_ADC_Init+0x174>)
 800c62c:	0011      	movs	r1, r2
 800c62e:	0018      	movs	r0, r3
 800c630:	f7f7 fb2e 	bl	8003c90 <HAL_ADC_ConfigChannel>
 800c634:	1e03      	subs	r3, r0, #0
 800c636:	d001      	beq.n	800c63c <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 800c638:	f7f6 fd24 	bl	8003084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800c63c:	1d3b      	adds	r3, r7, #4
 800c63e:	2201      	movs	r2, #1
 800c640:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c642:	1d3a      	adds	r2, r7, #4
 800c644:	4b2d      	ldr	r3, [pc, #180]	; (800c6fc <MX_ADC_Init+0x174>)
 800c646:	0011      	movs	r1, r2
 800c648:	0018      	movs	r0, r3
 800c64a:	f7f7 fb21 	bl	8003c90 <HAL_ADC_ConfigChannel>
 800c64e:	1e03      	subs	r3, r0, #0
 800c650:	d001      	beq.n	800c656 <MX_ADC_Init+0xce>
  {
    Error_Handler();
 800c652:	f7f6 fd17 	bl	8003084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800c656:	1d3b      	adds	r3, r7, #4
 800c658:	2202      	movs	r2, #2
 800c65a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c65c:	1d3a      	adds	r2, r7, #4
 800c65e:	4b27      	ldr	r3, [pc, #156]	; (800c6fc <MX_ADC_Init+0x174>)
 800c660:	0011      	movs	r1, r2
 800c662:	0018      	movs	r0, r3
 800c664:	f7f7 fb14 	bl	8003c90 <HAL_ADC_ConfigChannel>
 800c668:	1e03      	subs	r3, r0, #0
 800c66a:	d001      	beq.n	800c670 <MX_ADC_Init+0xe8>
  {
    Error_Handler();
 800c66c:	f7f6 fd0a 	bl	8003084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800c670:	1d3b      	adds	r3, r7, #4
 800c672:	2208      	movs	r2, #8
 800c674:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c676:	1d3a      	adds	r2, r7, #4
 800c678:	4b20      	ldr	r3, [pc, #128]	; (800c6fc <MX_ADC_Init+0x174>)
 800c67a:	0011      	movs	r1, r2
 800c67c:	0018      	movs	r0, r3
 800c67e:	f7f7 fb07 	bl	8003c90 <HAL_ADC_ConfigChannel>
 800c682:	1e03      	subs	r3, r0, #0
 800c684:	d001      	beq.n	800c68a <MX_ADC_Init+0x102>
  {
    Error_Handler();
 800c686:	f7f6 fcfd 	bl	8003084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800c68a:	1d3b      	adds	r3, r7, #4
 800c68c:	2209      	movs	r2, #9
 800c68e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c690:	1d3a      	adds	r2, r7, #4
 800c692:	4b1a      	ldr	r3, [pc, #104]	; (800c6fc <MX_ADC_Init+0x174>)
 800c694:	0011      	movs	r1, r2
 800c696:	0018      	movs	r0, r3
 800c698:	f7f7 fafa 	bl	8003c90 <HAL_ADC_ConfigChannel>
 800c69c:	1e03      	subs	r3, r0, #0
 800c69e:	d001      	beq.n	800c6a4 <MX_ADC_Init+0x11c>
  {
    Error_Handler();
 800c6a0:	f7f6 fcf0 	bl	8003084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c6a4:	1d3b      	adds	r3, r7, #4
 800c6a6:	2210      	movs	r2, #16
 800c6a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c6aa:	1d3a      	adds	r2, r7, #4
 800c6ac:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <MX_ADC_Init+0x174>)
 800c6ae:	0011      	movs	r1, r2
 800c6b0:	0018      	movs	r0, r3
 800c6b2:	f7f7 faed 	bl	8003c90 <HAL_ADC_ConfigChannel>
 800c6b6:	1e03      	subs	r3, r0, #0
 800c6b8:	d001      	beq.n	800c6be <MX_ADC_Init+0x136>
  {
    Error_Handler();
 800c6ba:	f7f6 fce3 	bl	8003084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c6be:	1d3b      	adds	r3, r7, #4
 800c6c0:	2211      	movs	r2, #17
 800c6c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c6c4:	1d3a      	adds	r2, r7, #4
 800c6c6:	4b0d      	ldr	r3, [pc, #52]	; (800c6fc <MX_ADC_Init+0x174>)
 800c6c8:	0011      	movs	r1, r2
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	f7f7 fae0 	bl	8003c90 <HAL_ADC_ConfigChannel>
 800c6d0:	1e03      	subs	r3, r0, #0
 800c6d2:	d001      	beq.n	800c6d8 <MX_ADC_Init+0x150>
  {
    Error_Handler();
 800c6d4:	f7f6 fcd6 	bl	8003084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800c6d8:	1d3b      	adds	r3, r7, #4
 800c6da:	2212      	movs	r2, #18
 800c6dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c6de:	1d3a      	adds	r2, r7, #4
 800c6e0:	4b06      	ldr	r3, [pc, #24]	; (800c6fc <MX_ADC_Init+0x174>)
 800c6e2:	0011      	movs	r1, r2
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	f7f7 fad3 	bl	8003c90 <HAL_ADC_ConfigChannel>
 800c6ea:	1e03      	subs	r3, r0, #0
 800c6ec:	d001      	beq.n	800c6f2 <MX_ADC_Init+0x16a>
  {
	 Error_Handler();
 800c6ee:	f7f6 fcc9 	bl	8003084 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 800c6f2:	46c0      	nop			; (mov r8, r8)
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	b004      	add	sp, #16
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	46c0      	nop			; (mov r8, r8)
 800c6fc:	20000298 	.word	0x20000298
 800c700:	40012400 	.word	0x40012400

0800c704 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0

	  hcan.Instance = CAN;
 800c708:	4b40      	ldr	r3, [pc, #256]	; (800c80c <MX_CAN_Init+0x108>)
 800c70a:	4a41      	ldr	r2, [pc, #260]	; (800c810 <MX_CAN_Init+0x10c>)
 800c70c:	601a      	str	r2, [r3, #0]
	  hcan.Init.Prescaler = 6;//6
 800c70e:	4b3f      	ldr	r3, [pc, #252]	; (800c80c <MX_CAN_Init+0x108>)
 800c710:	2206      	movs	r2, #6
 800c712:	605a      	str	r2, [r3, #4]
	  hcan.Init.Mode = CAN_MODE_NORMAL;
 800c714:	4b3d      	ldr	r3, [pc, #244]	; (800c80c <MX_CAN_Init+0x108>)
 800c716:	2200      	movs	r2, #0
 800c718:	609a      	str	r2, [r3, #8]
	  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;//1
 800c71a:	4b3c      	ldr	r3, [pc, #240]	; (800c80c <MX_CAN_Init+0x108>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	60da      	str	r2, [r3, #12]
	  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;//2
 800c720:	4b3a      	ldr	r3, [pc, #232]	; (800c80c <MX_CAN_Init+0x108>)
 800c722:	2280      	movs	r2, #128	; 0x80
 800c724:	0252      	lsls	r2, r2, #9
 800c726:	611a      	str	r2, [r3, #16]
	  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;//5
 800c728:	4b38      	ldr	r3, [pc, #224]	; (800c80c <MX_CAN_Init+0x108>)
 800c72a:	2280      	movs	r2, #128	; 0x80
 800c72c:	03d2      	lsls	r2, r2, #15
 800c72e:	615a      	str	r2, [r3, #20]
	  hcan.Init.TimeTriggeredMode = DISABLE;
 800c730:	4b36      	ldr	r3, [pc, #216]	; (800c80c <MX_CAN_Init+0x108>)
 800c732:	2200      	movs	r2, #0
 800c734:	761a      	strb	r2, [r3, #24]
	  hcan.Init.AutoBusOff = DISABLE;
 800c736:	4b35      	ldr	r3, [pc, #212]	; (800c80c <MX_CAN_Init+0x108>)
 800c738:	2200      	movs	r2, #0
 800c73a:	765a      	strb	r2, [r3, #25]
	  hcan.Init.AutoWakeUp = DISABLE;
 800c73c:	4b33      	ldr	r3, [pc, #204]	; (800c80c <MX_CAN_Init+0x108>)
 800c73e:	2200      	movs	r2, #0
 800c740:	769a      	strb	r2, [r3, #26]
	  hcan.Init.AutoRetransmission = DISABLE;
 800c742:	4b32      	ldr	r3, [pc, #200]	; (800c80c <MX_CAN_Init+0x108>)
 800c744:	2200      	movs	r2, #0
 800c746:	76da      	strb	r2, [r3, #27]
	  hcan.Init.ReceiveFifoLocked = DISABLE;
 800c748:	4b30      	ldr	r3, [pc, #192]	; (800c80c <MX_CAN_Init+0x108>)
 800c74a:	2200      	movs	r2, #0
 800c74c:	771a      	strb	r2, [r3, #28]
	  hcan.Init.TransmitFifoPriority = DISABLE;
 800c74e:	4b2f      	ldr	r3, [pc, #188]	; (800c80c <MX_CAN_Init+0x108>)
 800c750:	2200      	movs	r2, #0
 800c752:	775a      	strb	r2, [r3, #29]
	  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800c754:	4b2d      	ldr	r3, [pc, #180]	; (800c80c <MX_CAN_Init+0x108>)
 800c756:	0018      	movs	r0, r3
 800c758:	f7f7 fd58 	bl	800420c <HAL_CAN_Init>
 800c75c:	1e03      	subs	r3, r0, #0
 800c75e:	d001      	beq.n	800c764 <MX_CAN_Init+0x60>
	  {
	    Error_Handler();
 800c760:	f7f6 fc90 	bl	8003084 <Error_Handler>
	  }

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0,0 );
 800c764:	2200      	movs	r2, #0
 800c766:	2100      	movs	r1, #0
 800c768:	201e      	movs	r0, #30
 800c76a:	f7f8 fc71 	bl	8005050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800c76e:	201e      	movs	r0, #30
 800c770:	f7f8 fc83 	bl	800507a <HAL_NVIC_EnableIRQ>

    /*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800c774:	4b27      	ldr	r3, [pc, #156]	; (800c814 <MX_CAN_Init+0x110>)
 800c776:	2200      	movs	r2, #0
 800c778:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0; //set fifo assignment
 800c77a:	4b26      	ldr	r3, [pc, #152]	; (800c814 <MX_CAN_Init+0x110>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh= (1536 + board.number )<<5; //the filter looks for all frames with 0x60N where N : [1;3]
 800c780:	4a25      	ldr	r2, [pc, #148]	; (800c818 <MX_CAN_Init+0x114>)
 800c782:	2388      	movs	r3, #136	; 0x88
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	5cd3      	ldrb	r3, [r2, r3]
 800c788:	22c0      	movs	r2, #192	; 0xc0
 800c78a:	00d2      	lsls	r2, r2, #3
 800c78c:	4694      	mov	ip, r2
 800c78e:	4463      	add	r3, ip
 800c790:	015b      	lsls	r3, r3, #5
 800c792:	001a      	movs	r2, r3
 800c794:	4b1f      	ldr	r3, [pc, #124]	; (800c814 <MX_CAN_Init+0x110>)
 800c796:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow=0;
 800c798:	4b1e      	ldr	r3, [pc, #120]	; (800c814 <MX_CAN_Init+0x110>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh= (1536 + board.number )<<5;
 800c79e:	4a1e      	ldr	r2, [pc, #120]	; (800c818 <MX_CAN_Init+0x114>)
 800c7a0:	2388      	movs	r3, #136	; 0x88
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	5cd3      	ldrb	r3, [r2, r3]
 800c7a6:	22c0      	movs	r2, #192	; 0xc0
 800c7a8:	00d2      	lsls	r2, r2, #3
 800c7aa:	4694      	mov	ip, r2
 800c7ac:	4463      	add	r3, ip
 800c7ae:	015b      	lsls	r3, r3, #5
 800c7b0:	001a      	movs	r2, r3
 800c7b2:	4b18      	ldr	r3, [pc, #96]	; (800c814 <MX_CAN_Init+0x110>)
 800c7b4:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0;
 800c7b6:	4b17      	ldr	r3, [pc, #92]	; (800c814 <MX_CAN_Init+0x110>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 800c7bc:	4b15      	ldr	r3, [pc, #84]	; (800c814 <MX_CAN_Init+0x110>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation=ENABLE;
 800c7c2:	4b14      	ldr	r3, [pc, #80]	; (800c814 <MX_CAN_Init+0x110>)
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800c7c8:	4b12      	ldr	r3, [pc, #72]	; (800c814 <MX_CAN_Init+0x110>)
 800c7ca:	220e      	movs	r2, #14
 800c7cc:	625a      	str	r2, [r3, #36]	; 0x24

      if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800c7ce:	4a11      	ldr	r2, [pc, #68]	; (800c814 <MX_CAN_Init+0x110>)
 800c7d0:	4b0e      	ldr	r3, [pc, #56]	; (800c80c <MX_CAN_Init+0x108>)
 800c7d2:	0011      	movs	r1, r2
 800c7d4:	0018      	movs	r0, r3
 800c7d6:	f7f7 fe17 	bl	8004408 <HAL_CAN_ConfigFilter>
 800c7da:	1e03      	subs	r3, r0, #0
 800c7dc:	d001      	beq.n	800c7e2 <MX_CAN_Init+0xde>
      {
        /* Filter configuration Error */
        Error_Handler();
 800c7de:	f7f6 fc51 	bl	8003084 <Error_Handler>
      }

      /*##-3- Start the CAN peripheral ###########################################*/
      if (HAL_CAN_Start(&hcan) != HAL_OK)
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <MX_CAN_Init+0x108>)
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	f7f7 ff01 	bl	80045ec <HAL_CAN_Start>
 800c7ea:	1e03      	subs	r3, r0, #0
 800c7ec:	d001      	beq.n	800c7f2 <MX_CAN_Init+0xee>
      {
        /* Start Error */
        Error_Handler();
 800c7ee:	f7f6 fc49 	bl	8003084 <Error_Handler>
      }

      /*##-4- Activate CAN RX notification #######################################*/
      if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800c7f2:	4b06      	ldr	r3, [pc, #24]	; (800c80c <MX_CAN_Init+0x108>)
 800c7f4:	2102      	movs	r1, #2
 800c7f6:	0018      	movs	r0, r3
 800c7f8:	f7f8 f938 	bl	8004a6c <HAL_CAN_ActivateNotification>
 800c7fc:	1e03      	subs	r3, r0, #0
 800c7fe:	d001      	beq.n	800c804 <MX_CAN_Init+0x100>
      {
        /* Notification Error */
        Error_Handler();
 800c800:	f7f6 fc40 	bl	8003084 <Error_Handler>
      }
}
 800c804:	46c0      	nop			; (mov r8, r8)
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	46c0      	nop			; (mov r8, r8)
 800c80c:	2000031c 	.word	0x2000031c
 800c810:	40006400 	.word	0x40006400
 800c814:	2000104c 	.word	0x2000104c
 800c818:	20000508 	.word	0x20000508

0800c81c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800c820:	4b1b      	ldr	r3, [pc, #108]	; (800c890 <MX_I2C1_Init+0x74>)
 800c822:	4a1c      	ldr	r2, [pc, #112]	; (800c894 <MX_I2C1_Init+0x78>)
 800c824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800c826:	4b1a      	ldr	r3, [pc, #104]	; (800c890 <MX_I2C1_Init+0x74>)
 800c828:	4a1b      	ldr	r2, [pc, #108]	; (800c898 <MX_I2C1_Init+0x7c>)
 800c82a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c82c:	4b18      	ldr	r3, [pc, #96]	; (800c890 <MX_I2C1_Init+0x74>)
 800c82e:	2200      	movs	r2, #0
 800c830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c832:	4b17      	ldr	r3, [pc, #92]	; (800c890 <MX_I2C1_Init+0x74>)
 800c834:	2201      	movs	r2, #1
 800c836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c838:	4b15      	ldr	r3, [pc, #84]	; (800c890 <MX_I2C1_Init+0x74>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c83e:	4b14      	ldr	r3, [pc, #80]	; (800c890 <MX_I2C1_Init+0x74>)
 800c840:	2200      	movs	r2, #0
 800c842:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c844:	4b12      	ldr	r3, [pc, #72]	; (800c890 <MX_I2C1_Init+0x74>)
 800c846:	2200      	movs	r2, #0
 800c848:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c84a:	4b11      	ldr	r3, [pc, #68]	; (800c890 <MX_I2C1_Init+0x74>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c850:	4b0f      	ldr	r3, [pc, #60]	; (800c890 <MX_I2C1_Init+0x74>)
 800c852:	2200      	movs	r2, #0
 800c854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c856:	4b0e      	ldr	r3, [pc, #56]	; (800c890 <MX_I2C1_Init+0x74>)
 800c858:	0018      	movs	r0, r3
 800c85a:	f7f9 f82d 	bl	80058b8 <HAL_I2C_Init>
 800c85e:	1e03      	subs	r3, r0, #0
 800c860:	d001      	beq.n	800c866 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c862:	f7f6 fc0f 	bl	8003084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c866:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <MX_I2C1_Init+0x74>)
 800c868:	2100      	movs	r1, #0
 800c86a:	0018      	movs	r0, r3
 800c86c:	f7f9 f8c2 	bl	80059f4 <HAL_I2CEx_ConfigAnalogFilter>
 800c870:	1e03      	subs	r3, r0, #0
 800c872:	d001      	beq.n	800c878 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c874:	f7f6 fc06 	bl	8003084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c878:	4b05      	ldr	r3, [pc, #20]	; (800c890 <MX_I2C1_Init+0x74>)
 800c87a:	2100      	movs	r1, #0
 800c87c:	0018      	movs	r0, r3
 800c87e:	f7f9 f905 	bl	8005a8c <HAL_I2CEx_ConfigDigitalFilter>
 800c882:	1e03      	subs	r3, r0, #0
 800c884:	d001      	beq.n	800c88a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c886:	f7f6 fbfd 	bl	8003084 <Error_Handler>
  }

}
 800c88a:	46c0      	nop			; (mov r8, r8)
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20000344 	.word	0x20000344
 800c894:	40005400 	.word	0x40005400
 800c898:	2000090e 	.word	0x2000090e

0800c89c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800c8a0:	4b1b      	ldr	r3, [pc, #108]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8a2:	4a1c      	ldr	r2, [pc, #112]	; (800c914 <MX_SPI1_Init+0x78>)
 800c8a4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800c8a6:	4b1a      	ldr	r3, [pc, #104]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8a8:	2282      	movs	r2, #130	; 0x82
 800c8aa:	0052      	lsls	r2, r2, #1
 800c8ac:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c8ae:	4b18      	ldr	r3, [pc, #96]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800c8b4:	4b16      	ldr	r3, [pc, #88]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8b6:	22f0      	movs	r2, #240	; 0xf0
 800c8b8:	0112      	lsls	r2, r2, #4
 800c8ba:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c8bc:	4b14      	ldr	r3, [pc, #80]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800c8c8:	4b11      	ldr	r3, [pc, #68]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8ca:	2280      	movs	r2, #128	; 0x80
 800c8cc:	0092      	lsls	r2, r2, #2
 800c8ce:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c8d0:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8d2:	2228      	movs	r2, #40	; 0x28
 800c8d4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c8d6:	4b0e      	ldr	r3, [pc, #56]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c8dc:	4b0c      	ldr	r3, [pc, #48]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8e2:	4b0b      	ldr	r3, [pc, #44]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800c8e8:	4b09      	ldr	r3, [pc, #36]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8ea:	2207      	movs	r2, #7
 800c8ec:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c8ee:	4b08      	ldr	r3, [pc, #32]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c8f4:	4b06      	ldr	r3, [pc, #24]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c8fa:	4b05      	ldr	r3, [pc, #20]	; (800c910 <MX_SPI1_Init+0x74>)
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	f7f9 ff11 	bl	8006724 <HAL_SPI_Init>
 800c902:	1e03      	subs	r3, r0, #0
 800c904:	d001      	beq.n	800c90a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 800c906:	f7f6 fbbd 	bl	8003084 <Error_Handler>
	}
}
 800c90a:	46c0      	nop			; (mov r8, r8)
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20000390 	.word	0x20000390
 800c914:	40013000 	.word	0x40013000

0800c918 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b096      	sub	sp, #88	; 0x58
 800c91c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c91e:	2348      	movs	r3, #72	; 0x48
 800c920:	18fb      	adds	r3, r7, r3
 800c922:	0018      	movs	r0, r3
 800c924:	2310      	movs	r3, #16
 800c926:	001a      	movs	r2, r3
 800c928:	2100      	movs	r1, #0
 800c92a:	f000 fb70 	bl	800d00e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c92e:	2340      	movs	r3, #64	; 0x40
 800c930:	18fb      	adds	r3, r7, r3
 800c932:	0018      	movs	r0, r3
 800c934:	2308      	movs	r3, #8
 800c936:	001a      	movs	r2, r3
 800c938:	2100      	movs	r1, #0
 800c93a:	f000 fb68 	bl	800d00e <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 800c93e:	2324      	movs	r3, #36	; 0x24
 800c940:	18fb      	adds	r3, r7, r3
 800c942:	0018      	movs	r0, r3
 800c944:	231c      	movs	r3, #28
 800c946:	001a      	movs	r2, r3
 800c948:	2100      	movs	r1, #0
 800c94a:	f000 fb60 	bl	800d00e <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c94e:	1d3b      	adds	r3, r7, #4
 800c950:	0018      	movs	r0, r3
 800c952:	2320      	movs	r3, #32
 800c954:	001a      	movs	r2, r3
 800c956:	2100      	movs	r1, #0
 800c958:	f000 fb59 	bl	800d00e <memset>

	htim1.Instance = TIM1;
 800c95c:	4b46      	ldr	r3, [pc, #280]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c95e:	4a47      	ldr	r2, [pc, #284]	; (800ca7c <MX_TIM1_Init+0x164>)
 800c960:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800c962:	4b45      	ldr	r3, [pc, #276]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c964:	2200      	movs	r2, #0
 800c966:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800c968:	4b43      	ldr	r3, [pc, #268]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c96a:	2220      	movs	r2, #32
 800c96c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 500;
 800c96e:	4b42      	ldr	r3, [pc, #264]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c970:	22fa      	movs	r2, #250	; 0xfa
 800c972:	0052      	lsls	r2, r2, #1
 800c974:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c976:	4b40      	ldr	r3, [pc, #256]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c978:	2200      	movs	r2, #0
 800c97a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800c97c:	4b3e      	ldr	r3, [pc, #248]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c97e:	2200      	movs	r2, #0
 800c980:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; //TIM_AUTORELOAD_PRELOAD_DISABLE
 800c982:	4b3d      	ldr	r3, [pc, #244]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c984:	2280      	movs	r2, #128	; 0x80
 800c986:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c988:	4b3b      	ldr	r3, [pc, #236]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c98a:	0018      	movs	r0, r3
 800c98c:	f7fa fc22 	bl	80071d4 <HAL_TIM_Base_Init>
 800c990:	1e03      	subs	r3, r0, #0
 800c992:	d001      	beq.n	800c998 <MX_TIM1_Init+0x80>
	{
		Error_Handler();
 800c994:	f7f6 fb76 	bl	8003084 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c998:	2148      	movs	r1, #72	; 0x48
 800c99a:	187b      	adds	r3, r7, r1
 800c99c:	2280      	movs	r2, #128	; 0x80
 800c99e:	0152      	lsls	r2, r2, #5
 800c9a0:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c9a2:	187a      	adds	r2, r7, r1
 800c9a4:	4b34      	ldr	r3, [pc, #208]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c9a6:	0011      	movs	r1, r2
 800c9a8:	0018      	movs	r0, r3
 800c9aa:	f7fa ffa1 	bl	80078f0 <HAL_TIM_ConfigClockSource>
 800c9ae:	1e03      	subs	r3, r0, #0
 800c9b0:	d001      	beq.n	800c9b6 <MX_TIM1_Init+0x9e>
	{
		Error_Handler();
 800c9b2:	f7f6 fb67 	bl	8003084 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800c9b6:	4b30      	ldr	r3, [pc, #192]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	f7fa fcad 	bl	8007318 <HAL_TIM_PWM_Init>
 800c9be:	1e03      	subs	r3, r0, #0
 800c9c0:	d001      	beq.n	800c9c6 <MX_TIM1_Init+0xae>
	{
		Error_Handler();
 800c9c2:	f7f6 fb5f 	bl	8003084 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c9c6:	2140      	movs	r1, #64	; 0x40
 800c9c8:	187b      	adds	r3, r7, r1
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c9ce:	187b      	adds	r3, r7, r1
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c9d4:	187a      	adds	r2, r7, r1
 800c9d6:	4b28      	ldr	r3, [pc, #160]	; (800ca78 <MX_TIM1_Init+0x160>)
 800c9d8:	0011      	movs	r1, r2
 800c9da:	0018      	movs	r0, r3
 800c9dc:	f7fb fbb6 	bl	800814c <HAL_TIMEx_MasterConfigSynchronization>
 800c9e0:	1e03      	subs	r3, r0, #0
 800c9e2:	d001      	beq.n	800c9e8 <MX_TIM1_Init+0xd0>
	{
		Error_Handler();
 800c9e4:	f7f6 fb4e 	bl	8003084 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c9e8:	2124      	movs	r1, #36	; 0x24
 800c9ea:	187b      	adds	r3, r7, r1
 800c9ec:	2260      	movs	r2, #96	; 0x60
 800c9ee:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800c9f0:	187b      	adds	r3, r7, r1
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c9f6:	187b      	adds	r3, r7, r1
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c9fc:	187b      	adds	r3, r7, r1
 800c9fe:	2200      	movs	r2, #0
 800ca00:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca02:	187b      	adds	r3, r7, r1
 800ca04:	2200      	movs	r2, #0
 800ca06:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ca08:	187b      	adds	r3, r7, r1
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ca0e:	187b      	adds	r3, r7, r1
 800ca10:	2200      	movs	r2, #0
 800ca12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ca14:	1879      	adds	r1, r7, r1
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <MX_TIM1_Init+0x160>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	0018      	movs	r0, r3
 800ca1c:	f7fa fea2 	bl	8007764 <HAL_TIM_PWM_ConfigChannel>
 800ca20:	1e03      	subs	r3, r0, #0
 800ca22:	d001      	beq.n	800ca28 <MX_TIM1_Init+0x110>
	{
		Error_Handler();
 800ca24:	f7f6 fb2e 	bl	8003084 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ca28:	1d3b      	adds	r3, r7, #4
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ca2e:	1d3b      	adds	r3, r7, #4
 800ca30:	2200      	movs	r2, #0
 800ca32:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ca34:	1d3b      	adds	r3, r7, #4
 800ca36:	2200      	movs	r2, #0
 800ca38:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800ca3a:	1d3b      	adds	r3, r7, #4
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ca40:	1d3b      	adds	r3, r7, #4
 800ca42:	2200      	movs	r2, #0
 800ca44:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca46:	1d3b      	adds	r3, r7, #4
 800ca48:	2280      	movs	r2, #128	; 0x80
 800ca4a:	0192      	lsls	r2, r2, #6
 800ca4c:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ca4e:	1d3b      	adds	r3, r7, #4
 800ca50:	2200      	movs	r2, #0
 800ca52:	61da      	str	r2, [r3, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800ca54:	1d3a      	adds	r2, r7, #4
 800ca56:	4b08      	ldr	r3, [pc, #32]	; (800ca78 <MX_TIM1_Init+0x160>)
 800ca58:	0011      	movs	r1, r2
 800ca5a:	0018      	movs	r0, r3
 800ca5c:	f7fb fbd4 	bl	8008208 <HAL_TIMEx_ConfigBreakDeadTime>
 800ca60:	1e03      	subs	r3, r0, #0
 800ca62:	d001      	beq.n	800ca68 <MX_TIM1_Init+0x150>
	{
		Error_Handler();
 800ca64:	f7f6 fb0e 	bl	8003084 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim1);
 800ca68:	4b03      	ldr	r3, [pc, #12]	; (800ca78 <MX_TIM1_Init+0x160>)
 800ca6a:	0018      	movs	r0, r3
 800ca6c:	f7f6 fcac 	bl	80033c8 <HAL_TIM_MspPostInit>
}
 800ca70:	46c0      	nop			; (mov r8, r8)
 800ca72:	46bd      	mov	sp, r7
 800ca74:	b016      	add	sp, #88	; 0x58
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	200003f4 	.word	0x200003f4
 800ca7c:	40012c00 	.word	0x40012c00

0800ca80 <MX_TIM7_Init>:


/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ca86:	003b      	movs	r3, r7
 800ca88:	0018      	movs	r0, r3
 800ca8a:	2308      	movs	r3, #8
 800ca8c:	001a      	movs	r2, r3
 800ca8e:	2100      	movs	r1, #0
 800ca90:	f000 fabd 	bl	800d00e <memset>

  htim7.Instance = TIM7;
 800ca94:	4b15      	ldr	r3, [pc, #84]	; (800caec <MX_TIM7_Init+0x6c>)
 800ca96:	4a16      	ldr	r2, [pc, #88]	; (800caf0 <MX_TIM7_Init+0x70>)
 800ca98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48;
 800ca9a:	4b14      	ldr	r3, [pc, #80]	; (800caec <MX_TIM7_Init+0x6c>)
 800ca9c:	2230      	movs	r2, #48	; 0x30
 800ca9e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800caa0:	4b12      	ldr	r3, [pc, #72]	; (800caec <MX_TIM7_Init+0x6c>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 800caa6:	4b11      	ldr	r3, [pc, #68]	; (800caec <MX_TIM7_Init+0x6c>)
 800caa8:	2264      	movs	r2, #100	; 0x64
 800caaa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800caac:	4b0f      	ldr	r3, [pc, #60]	; (800caec <MX_TIM7_Init+0x6c>)
 800caae:	2280      	movs	r2, #128	; 0x80
 800cab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800cab2:	4b0e      	ldr	r3, [pc, #56]	; (800caec <MX_TIM7_Init+0x6c>)
 800cab4:	0018      	movs	r0, r3
 800cab6:	f7fa fb8d 	bl	80071d4 <HAL_TIM_Base_Init>
 800caba:	1e03      	subs	r3, r0, #0
 800cabc:	d001      	beq.n	800cac2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800cabe:	f7f6 fae1 	bl	8003084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cac2:	003b      	movs	r3, r7
 800cac4:	2200      	movs	r2, #0
 800cac6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cac8:	003b      	movs	r3, r7
 800caca:	2200      	movs	r2, #0
 800cacc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800cace:	003a      	movs	r2, r7
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <MX_TIM7_Init+0x6c>)
 800cad2:	0011      	movs	r1, r2
 800cad4:	0018      	movs	r0, r3
 800cad6:	f7fb fb39 	bl	800814c <HAL_TIMEx_MasterConfigSynchronization>
 800cada:	1e03      	subs	r3, r0, #0
 800cadc:	d001      	beq.n	800cae2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800cade:	f7f6 fad1 	bl	8003084 <Error_Handler>
  }

}
 800cae2:	46c0      	nop			; (mov r8, r8)
 800cae4:	46bd      	mov	sp, r7
 800cae6:	b002      	add	sp, #8
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	46c0      	nop			; (mov r8, r8)
 800caec:	2000043c 	.word	0x2000043c
 800caf0:	40001400 	.word	0x40001400

0800caf4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800caf8:	4b14      	ldr	r3, [pc, #80]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cafa:	4a15      	ldr	r2, [pc, #84]	; (800cb50 <MX_USART1_UART_Init+0x5c>)
 800cafc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 230400;
 800cafe:	4b13      	ldr	r3, [pc, #76]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb00:	22e1      	movs	r2, #225	; 0xe1
 800cb02:	0292      	lsls	r2, r2, #10
 800cb04:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cb06:	4b11      	ldr	r3, [pc, #68]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800cb0c:	4b0f      	ldr	r3, [pc, #60]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800cb12:	4b0e      	ldr	r3, [pc, #56]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800cb18:	4b0c      	ldr	r3, [pc, #48]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb1a:	220c      	movs	r2, #12
 800cb1c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb1e:	4b0b      	ldr	r3, [pc, #44]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb24:	4b09      	ldr	r3, [pc, #36]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cb2a:	4b08      	ldr	r3, [pc, #32]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb30:	4b06      	ldr	r3, [pc, #24]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800cb36:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <MX_USART1_UART_Init+0x58>)
 800cb38:	0018      	movs	r0, r3
 800cb3a:	f7fb fbd3 	bl	80082e4 <HAL_UART_Init>
 800cb3e:	1e03      	subs	r3, r0, #0
 800cb40:	d001      	beq.n	800cb46 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800cb42:	f7f6 fa9f 	bl	8003084 <Error_Handler>
	}
}
 800cb46:	46c0      	nop			; (mov r8, r8)
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	20000484 	.word	0x20000484
 800cb50:	40013800 	.word	0x40013800

0800cb54 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800cb5a:	4b0c      	ldr	r3, [pc, #48]	; (800cb8c <MX_DMA_Init+0x38>)
 800cb5c:	695a      	ldr	r2, [r3, #20]
 800cb5e:	4b0b      	ldr	r3, [pc, #44]	; (800cb8c <MX_DMA_Init+0x38>)
 800cb60:	2101      	movs	r1, #1
 800cb62:	430a      	orrs	r2, r1
 800cb64:	615a      	str	r2, [r3, #20]
 800cb66:	4b09      	ldr	r3, [pc, #36]	; (800cb8c <MX_DMA_Init+0x38>)
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	607b      	str	r3, [r7, #4]
 800cb70:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Ch1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 1, 0);
 800cb72:	2200      	movs	r2, #0
 800cb74:	2101      	movs	r1, #1
 800cb76:	2009      	movs	r0, #9
 800cb78:	f7f8 fa6a 	bl	8005050 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 800cb7c:	2009      	movs	r0, #9
 800cb7e:	f7f8 fa7c 	bl	800507a <HAL_NVIC_EnableIRQ>

}
 800cb82:	46c0      	nop			; (mov r8, r8)
 800cb84:	46bd      	mov	sp, r7
 800cb86:	b002      	add	sp, #8
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	46c0      	nop			; (mov r8, r8)
 800cb8c:	40021000 	.word	0x40021000

0800cb90 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800cb90:	b590      	push	{r4, r7, lr}
 800cb92:	b089      	sub	sp, #36	; 0x24
 800cb94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb96:	240c      	movs	r4, #12
 800cb98:	193b      	adds	r3, r7, r4
 800cb9a:	0018      	movs	r0, r3
 800cb9c:	2314      	movs	r3, #20
 800cb9e:	001a      	movs	r2, r3
 800cba0:	2100      	movs	r1, #0
 800cba2:	f000 fa34 	bl	800d00e <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800cba6:	4b91      	ldr	r3, [pc, #580]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cba8:	695a      	ldr	r2, [r3, #20]
 800cbaa:	4b90      	ldr	r3, [pc, #576]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cbac:	2180      	movs	r1, #128	; 0x80
 800cbae:	0289      	lsls	r1, r1, #10
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	615a      	str	r2, [r3, #20]
 800cbb4:	4b8d      	ldr	r3, [pc, #564]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cbb6:	695a      	ldr	r2, [r3, #20]
 800cbb8:	2380      	movs	r3, #128	; 0x80
 800cbba:	029b      	lsls	r3, r3, #10
 800cbbc:	4013      	ands	r3, r2
 800cbbe:	60bb      	str	r3, [r7, #8]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800cbc2:	4b8a      	ldr	r3, [pc, #552]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cbc4:	695a      	ldr	r2, [r3, #20]
 800cbc6:	4b89      	ldr	r3, [pc, #548]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cbc8:	2180      	movs	r1, #128	; 0x80
 800cbca:	02c9      	lsls	r1, r1, #11
 800cbcc:	430a      	orrs	r2, r1
 800cbce:	615a      	str	r2, [r3, #20]
 800cbd0:	4b86      	ldr	r3, [pc, #536]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cbd2:	695a      	ldr	r2, [r3, #20]
 800cbd4:	2380      	movs	r3, #128	; 0x80
 800cbd6:	02db      	lsls	r3, r3, #11
 800cbd8:	4013      	ands	r3, r2
 800cbda:	607b      	str	r3, [r7, #4]
 800cbdc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800cbde:	4b83      	ldr	r3, [pc, #524]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cbe0:	695a      	ldr	r2, [r3, #20]
 800cbe2:	4b82      	ldr	r3, [pc, #520]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cbe4:	2180      	movs	r1, #128	; 0x80
 800cbe6:	0309      	lsls	r1, r1, #12
 800cbe8:	430a      	orrs	r2, r1
 800cbea:	615a      	str	r2, [r3, #20]
 800cbec:	4b7f      	ldr	r3, [pc, #508]	; (800cdec <MX_GPIO_Init+0x25c>)
 800cbee:	695a      	ldr	r2, [r3, #20]
 800cbf0:	2380      	movs	r3, #128	; 0x80
 800cbf2:	031b      	lsls	r3, r3, #12
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	603b      	str	r3, [r7, #0]
 800cbf8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|DRV_INHB_Pin|DRV_INHC_Pin, GPIO_PIN_RESET);
 800cbfa:	23c2      	movs	r3, #194	; 0xc2
 800cbfc:	00d9      	lsls	r1, r3, #3
 800cbfe:	2390      	movs	r3, #144	; 0x90
 800cc00:	05db      	lsls	r3, r3, #23
 800cc02:	2200      	movs	r2, #0
 800cc04:	0018      	movs	r0, r3
 800cc06:	f7f8 fe1e 	bl	8005846 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, DRV_ENABLE_Pin|DRV_INLA_Pin|DRV_INLB_Pin|DRV_INLC_Pin, GPIO_PIN_RESET);
 800cc0a:	23f0      	movs	r3, #240	; 0xf0
 800cc0c:	015b      	lsls	r3, r3, #5
 800cc0e:	4878      	ldr	r0, [pc, #480]	; (800cdf0 <MX_GPIO_Init+0x260>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	0019      	movs	r1, r3
 800cc14:	f7f8 fe17 	bl	8005846 <HAL_GPIO_WritePin>


	/*Configure GPIO pins : SPI1_NSS_Pin DRV_INHB_Pin DRV_INHC_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin|DRV_INHB_Pin|DRV_INHC_Pin;
 800cc18:	193b      	adds	r3, r7, r4
 800cc1a:	22c2      	movs	r2, #194	; 0xc2
 800cc1c:	00d2      	lsls	r2, r2, #3
 800cc1e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc20:	193b      	adds	r3, r7, r4
 800cc22:	2201      	movs	r2, #1
 800cc24:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc26:	193b      	adds	r3, r7, r4
 800cc28:	2200      	movs	r2, #0
 800cc2a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc2c:	193b      	adds	r3, r7, r4
 800cc2e:	2200      	movs	r2, #0
 800cc30:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc32:	193a      	adds	r2, r7, r4
 800cc34:	2390      	movs	r3, #144	; 0x90
 800cc36:	05db      	lsls	r3, r3, #23
 800cc38:	0011      	movs	r1, r2
 800cc3a:	0018      	movs	r0, r3
 800cc3c:	f7f8 fc6e 	bl	800551c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800cc40:	193b      	adds	r3, r7, r4
 800cc42:	22c0      	movs	r2, #192	; 0xc0
 800cc44:	0112      	lsls	r2, r2, #4
 800cc46:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc48:	193b      	adds	r3, r7, r4
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800cc4e:	193b      	adds	r3, r7, r4
 800cc50:	2202      	movs	r2, #2
 800cc52:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc54:	193b      	adds	r3, r7, r4
 800cc56:	4a67      	ldr	r2, [pc, #412]	; (800cdf4 <MX_GPIO_Init+0x264>)
 800cc58:	0019      	movs	r1, r3
 800cc5a:	0010      	movs	r0, r2
 800cc5c:	f7f8 fc5e 	bl	800551c <HAL_GPIO_Init>

	//Lecture des entrées
	//Si state = état résistance (1 si PU et 0 si PD) alors les encodeurs ne sont pas implémentés.
	if( HAL_GPIO_ReadPin(GPIOB, ENC_A_Pin) == GPIO_PIN_RESET )
 800cc60:	2380      	movs	r3, #128	; 0x80
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	4a63      	ldr	r2, [pc, #396]	; (800cdf4 <MX_GPIO_Init+0x264>)
 800cc66:	0019      	movs	r1, r3
 800cc68:	0010      	movs	r0, r2
 800cc6a:	f7f8 fdcf 	bl	800580c <HAL_GPIO_ReadPin>
 800cc6e:	1e03      	subs	r3, r0, #0
 800cc70:	d125      	bne.n	800ccbe <MX_GPIO_Init+0x12e>
	{
		GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800cc72:	193b      	adds	r3, r7, r4
 800cc74:	22c0      	movs	r2, #192	; 0xc0
 800cc76:	0112      	lsls	r2, r2, #4
 800cc78:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc7a:	193b      	adds	r3, r7, r4
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc80:	193b      	adds	r3, r7, r4
 800cc82:	2201      	movs	r2, #1
 800cc84:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc86:	193b      	adds	r3, r7, r4
 800cc88:	4a5a      	ldr	r2, [pc, #360]	; (800cdf4 <MX_GPIO_Init+0x264>)
 800cc8a:	0019      	movs	r1, r3
 800cc8c:	0010      	movs	r0, r2
 800cc8e:	f7f8 fc45 	bl	800551c <HAL_GPIO_Init>

		if( HAL_GPIO_ReadPin(GPIOB, ENC_A_Pin) == GPIO_PIN_SET )
 800cc92:	2380      	movs	r3, #128	; 0x80
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	4a57      	ldr	r2, [pc, #348]	; (800cdf4 <MX_GPIO_Init+0x264>)
 800cc98:	0019      	movs	r1, r3
 800cc9a:	0010      	movs	r0, r2
 800cc9c:	f7f8 fdb6 	bl	800580c <HAL_GPIO_ReadPin>
 800cca0:	0003      	movs	r3, r0
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d105      	bne.n	800ccb2 <MX_GPIO_Init+0x122>
			board.select.type_IsStander = true;
 800cca6:	4a54      	ldr	r2, [pc, #336]	; (800cdf8 <MX_GPIO_Init+0x268>)
 800cca8:	238c      	movs	r3, #140	; 0x8c
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	2101      	movs	r1, #1
 800ccae:	54d1      	strb	r1, [r2, r3]
 800ccb0:	e00a      	b.n	800ccc8 <MX_GPIO_Init+0x138>
		else
			board.select.type_IsStander = false;
 800ccb2:	4a51      	ldr	r2, [pc, #324]	; (800cdf8 <MX_GPIO_Init+0x268>)
 800ccb4:	238c      	movs	r3, #140	; 0x8c
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	2100      	movs	r1, #0
 800ccba:	54d1      	strb	r1, [r2, r3]
 800ccbc:	e004      	b.n	800ccc8 <MX_GPIO_Init+0x138>
	}
	else
		board.select.type_IsStander = false;
 800ccbe:	4a4e      	ldr	r2, [pc, #312]	; (800cdf8 <MX_GPIO_Init+0x268>)
 800ccc0:	238c      	movs	r3, #140	; 0x8c
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	54d1      	strb	r1, [r2, r3]

//A RETIRER, POUR TEST UNIQUEMENT
	GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800ccc8:	210c      	movs	r1, #12
 800ccca:	187b      	adds	r3, r7, r1
 800cccc:	22c0      	movs	r2, #192	; 0xc0
 800ccce:	0112      	lsls	r2, r2, #4
 800ccd0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ccd2:	000c      	movs	r4, r1
 800ccd4:	193b      	adds	r3, r7, r4
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccda:	193b      	adds	r3, r7, r4
 800ccdc:	2200      	movs	r2, #0
 800ccde:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cce0:	193b      	adds	r3, r7, r4
 800cce2:	4a44      	ldr	r2, [pc, #272]	; (800cdf4 <MX_GPIO_Init+0x264>)
 800cce4:	0019      	movs	r1, r3
 800cce6:	0010      	movs	r0, r2
 800cce8:	f7f8 fc18 	bl	800551c <HAL_GPIO_Init>

	/*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
	GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 800ccec:	0021      	movs	r1, r4
 800ccee:	187b      	adds	r3, r7, r1
 800ccf0:	22e0      	movs	r2, #224	; 0xe0
 800ccf2:	0052      	lsls	r2, r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800ccf6:	187b      	adds	r3, r7, r1
 800ccf8:	22c4      	movs	r2, #196	; 0xc4
 800ccfa:	0392      	lsls	r2, r2, #14
 800ccfc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccfe:	000c      	movs	r4, r1
 800cd00:	193b      	adds	r3, r7, r4
 800cd02:	2200      	movs	r2, #0
 800cd04:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd06:	193b      	adds	r3, r7, r4
 800cd08:	4a39      	ldr	r2, [pc, #228]	; (800cdf0 <MX_GPIO_Init+0x260>)
 800cd0a:	0019      	movs	r1, r3
 800cd0c:	0010      	movs	r0, r2
 800cd0e:	f7f8 fc05 	bl	800551c <HAL_GPIO_Init>

	/*Configure GPIO pins : EOS_Pin */
	GPIO_InitStruct.Pin = EOS_Pin;
 800cd12:	193b      	adds	r3, r7, r4
 800cd14:	2208      	movs	r2, #8
 800cd16:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cd18:	193b      	adds	r3, r7, r4
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd1e:	193b      	adds	r3, r7, r4
 800cd20:	2200      	movs	r2, #0
 800cd22:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(EOS_GPIO_Port, &GPIO_InitStruct);
 800cd24:	193b      	adds	r3, r7, r4
 800cd26:	4a33      	ldr	r2, [pc, #204]	; (800cdf4 <MX_GPIO_Init+0x264>)
 800cd28:	0019      	movs	r1, r3
 800cd2a:	0010      	movs	r0, r2
 800cd2c:	f7f8 fbf6 	bl	800551c <HAL_GPIO_Init>

	/*Configure GPIO pin : DRV_NFAULT_Pin */
	GPIO_InitStruct.Pin = DRV_NFAULT_Pin;
 800cd30:	193b      	adds	r3, r7, r4
 800cd32:	2208      	movs	r2, #8
 800cd34:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 800cd36:	193b      	adds	r3, r7, r4
 800cd38:	2284      	movs	r2, #132	; 0x84
 800cd3a:	0392      	lsls	r2, r2, #14
 800cd3c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd3e:	193b      	adds	r3, r7, r4
 800cd40:	2200      	movs	r2, #0
 800cd42:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DRV_NFAULT_GPIO_Port, &GPIO_InitStruct);
 800cd44:	193a      	adds	r2, r7, r4
 800cd46:	2390      	movs	r3, #144	; 0x90
 800cd48:	05db      	lsls	r3, r3, #23
 800cd4a:	0011      	movs	r1, r2
 800cd4c:	0018      	movs	r0, r3
 800cd4e:	f7f8 fbe5 	bl	800551c <HAL_GPIO_Init>

	/*Configure GPIO pins : DRV_ENABLE_Pin DRV_INLA_Pin DRV_INLB_Pin DRV_INLC_Pin */
	GPIO_InitStruct.Pin = DRV_ENABLE_Pin|DRV_INLA_Pin|DRV_INLB_Pin|DRV_INLC_Pin;
 800cd52:	0021      	movs	r1, r4
 800cd54:	187b      	adds	r3, r7, r1
 800cd56:	22f0      	movs	r2, #240	; 0xf0
 800cd58:	0152      	lsls	r2, r2, #5
 800cd5a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd5c:	000c      	movs	r4, r1
 800cd5e:	193b      	adds	r3, r7, r4
 800cd60:	2201      	movs	r2, #1
 800cd62:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd64:	193b      	adds	r3, r7, r4
 800cd66:	2200      	movs	r2, #0
 800cd68:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd6a:	193b      	adds	r3, r7, r4
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd70:	193b      	adds	r3, r7, r4
 800cd72:	4a1f      	ldr	r2, [pc, #124]	; (800cdf0 <MX_GPIO_Init+0x260>)
 800cd74:	0019      	movs	r1, r3
 800cd76:	0010      	movs	r0, r2
 800cd78:	f7f8 fbd0 	bl	800551c <HAL_GPIO_Init>

	/*Configure GPIO pin : SELECT_Pin */
	GPIO_InitStruct.Pin = SELECT_Pin;
 800cd7c:	0021      	movs	r1, r4
 800cd7e:	187b      	adds	r3, r7, r1
 800cd80:	2220      	movs	r2, #32
 800cd82:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cd84:	187b      	adds	r3, r7, r1
 800cd86:	2200      	movs	r2, #0
 800cd88:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd8a:	187b      	adds	r3, r7, r1
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(SELECT_GPIO_Port, &GPIO_InitStruct);
 800cd90:	187b      	adds	r3, r7, r1
 800cd92:	4a18      	ldr	r2, [pc, #96]	; (800cdf4 <MX_GPIO_Init+0x264>)
 800cd94:	0019      	movs	r1, r3
 800cd96:	0010      	movs	r0, r2
 800cd98:	f7f8 fbc0 	bl	800551c <HAL_GPIO_Init>

	if( HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin) == GPIO_PIN_SET )
 800cd9c:	4b15      	ldr	r3, [pc, #84]	; (800cdf4 <MX_GPIO_Init+0x264>)
 800cd9e:	2120      	movs	r1, #32
 800cda0:	0018      	movs	r0, r3
 800cda2:	f7f8 fd33 	bl	800580c <HAL_GPIO_ReadPin>
 800cda6:	0003      	movs	r3, r0
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d105      	bne.n	800cdb8 <MX_GPIO_Init+0x228>
		board.select.side_IsRight = false;
 800cdac:	4a12      	ldr	r2, [pc, #72]	; (800cdf8 <MX_GPIO_Init+0x268>)
 800cdae:	231a      	movs	r3, #26
 800cdb0:	33ff      	adds	r3, #255	; 0xff
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	54d1      	strb	r1, [r2, r3]
 800cdb6:	e004      	b.n	800cdc2 <MX_GPIO_Init+0x232>
	else
		board.select.side_IsRight = true;
 800cdb8:	4a0f      	ldr	r2, [pc, #60]	; (800cdf8 <MX_GPIO_Init+0x268>)
 800cdba:	231a      	movs	r3, #26
 800cdbc:	33ff      	adds	r3, #255	; 0xff
 800cdbe:	2101      	movs	r1, #1
 800cdc0:	54d1      	strb	r1, [r2, r3]

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	2006      	movs	r0, #6
 800cdc8:	f7f8 f942 	bl	8005050 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800cdcc:	2006      	movs	r0, #6
 800cdce:	f7f8 f954 	bl	800507a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	2007      	movs	r0, #7
 800cdd8:	f7f8 f93a 	bl	8005050 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800cddc:	2007      	movs	r0, #7
 800cdde:	f7f8 f94c 	bl	800507a <HAL_NVIC_EnableIRQ>

}
 800cde2:	46c0      	nop			; (mov r8, r8)
 800cde4:	46bd      	mov	sp, r7
 800cde6:	b009      	add	sp, #36	; 0x24
 800cde8:	bd90      	pop	{r4, r7, pc}
 800cdea:	46c0      	nop			; (mov r8, r8)
 800cdec:	40021000 	.word	0x40021000
 800cdf0:	48000800 	.word	0x48000800
 800cdf4:	48000400 	.word	0x48000400
 800cdf8:	20000508 	.word	0x20000508

0800cdfc <stander_Update_Eos>:

/*
 * Renvoie la valeur de l'input du EOS
 */
HAL_StatusTypeDef
stander_Update_Eos( Global_Struct_t * inst){
 800cdfc:	b590      	push	{r4, r7, lr}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 800ce04:	240f      	movs	r4, #15
 800ce06:	193b      	adds	r3, r7, r4
 800ce08:	2201      	movs	r2, #1
 800ce0a:	701a      	strb	r2, [r3, #0]

	if(inst != NULL)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00f      	beq.n	800ce32 <stander_Update_Eos+0x36>
	{
		inst->sensor.eos = HAL_GPIO_ReadPin(EOS_GPIO_Port, EOS_Pin);
 800ce12:	4b0b      	ldr	r3, [pc, #44]	; (800ce40 <stander_Update_Eos+0x44>)
 800ce14:	2108      	movs	r1, #8
 800ce16:	0018      	movs	r0, r3
 800ce18:	f7f8 fcf8 	bl	800580c <HAL_GPIO_ReadPin>
 800ce1c:	0003      	movs	r3, r0
 800ce1e:	1e5a      	subs	r2, r3, #1
 800ce20:	4193      	sbcs	r3, r2
 800ce22:	b2d9      	uxtb	r1, r3
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	2387      	movs	r3, #135	; 0x87
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	54d1      	strb	r1, [r2, r3]
		status = HAL_OK;
 800ce2c:	193b      	adds	r3, r7, r4
 800ce2e:	2200      	movs	r2, #0
 800ce30:	701a      	strb	r2, [r3, #0]
	}
	return status ;
 800ce32:	230f      	movs	r3, #15
 800ce34:	18fb      	adds	r3, r7, r3
 800ce36:	781b      	ldrb	r3, [r3, #0]
}
 800ce38:	0018      	movs	r0, r3
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	b005      	add	sp, #20
 800ce3e:	bd90      	pop	{r4, r7, pc}
 800ce40:	48000400 	.word	0x48000400

0800ce44 <Callback_HomingProcess>:
}


HAL_StatusTypeDef
Callback_HomingProcess ( Global_Struct_t * inst )
{
 800ce44:	b5b0      	push	{r4, r5, r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 800ce4c:	240f      	movs	r4, #15
 800ce4e:	193b      	adds	r3, r7, r4
 800ce50:	2201      	movs	r2, #1
 800ce52:	701a      	strb	r2, [r3, #0]

	if(inst != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d047      	beq.n	800ceea <Callback_HomingProcess+0xa6>
	{
		//Tant que l'obturateur n'est pas détecté
		// ou que le timeout n'est pas atteint
		if( ( ( HAL_GetTick() - t_init ) >= HOMING_TIMEOUT ) )
 800ce5a:	f7f6 fd19 	bl	8003890 <HAL_GetTick>
 800ce5e:	0002      	movs	r2, r0
 800ce60:	4b25      	ldr	r3, [pc, #148]	; (800cef8 <Callback_HomingProcess+0xb4>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	4a25      	ldr	r2, [pc, #148]	; (800cefc <Callback_HomingProcess+0xb8>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d911      	bls.n	800ce90 <Callback_HomingProcess+0x4c>
		{
			inst->flags.status_flag.single.homing_status = Failed;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	795a      	ldrb	r2, [r3, #5]
 800ce70:	2140      	movs	r1, #64	; 0x40
 800ce72:	4249      	negs	r1, r1
 800ce74:	430a      	orrs	r2, r1
 800ce76:	715a      	strb	r2, [r3, #5]
	//        error = Homing_error;
			status = Turn_Off_Motor( inst );
 800ce78:	193c      	adds	r4, r7, r4
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	0018      	movs	r0, r3
 800ce7e:	f7fe fcd9 	bl	800b834 <Turn_Off_Motor>
 800ce82:	0003      	movs	r3, r0
 800ce84:	7023      	strb	r3, [r4, #0]

			CONSOLE("Homing failed\r");
 800ce86:	4b1e      	ldr	r3, [pc, #120]	; (800cf00 <Callback_HomingProcess+0xbc>)
 800ce88:	0018      	movs	r0, r3
 800ce8a:	f7fd fe2b 	bl	800aae4 <CONSOLE>
 800ce8e:	e02c      	b.n	800ceea <Callback_HomingProcess+0xa6>
		}

		else if ( inst->sensor.eos )
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	2387      	movs	r3, #135	; 0x87
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	5cd3      	ldrb	r3, [r2, r3]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d026      	beq.n	800ceea <Callback_HomingProcess+0xa6>
		{
			inst->motor.pos.position = 0;
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	23a4      	movs	r3, #164	; 0xa4
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	2100      	movs	r1, #0
 800cea4:	50d1      	str	r1, [r2, r3]

			inst->flags.status_flag.single.homing_status = Done;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	795a      	ldrb	r2, [r3, #5]
 800ceaa:	213f      	movs	r1, #63	; 0x3f
 800ceac:	400a      	ands	r2, r1
 800ceae:	1c11      	adds	r1, r2, #0
 800ceb0:	2280      	movs	r2, #128	; 0x80
 800ceb2:	4252      	negs	r2, r2
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	715a      	strb	r2, [r3, #5]


			status = Set_ControlType( inst , CTRL_POSITION );
 800ceb8:	250f      	movs	r5, #15
 800ceba:	197c      	adds	r4, r7, r5
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2104      	movs	r1, #4
 800cec0:	0018      	movs	r0, r3
 800cec2:	f7fe fcf6 	bl	800b8b2 <Set_ControlType>
 800cec6:	0003      	movs	r3, r0
 800cec8:	7023      	strb	r3, [r4, #0]
			status |= Set_setpoint(inst , 0);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2100      	movs	r1, #0
 800cece:	0018      	movs	r0, r3
 800ced0:	f7fe fd1c 	bl	800b90c <Set_setpoint>
 800ced4:	0003      	movs	r3, r0
 800ced6:	0019      	movs	r1, r3
 800ced8:	197b      	adds	r3, r7, r5
 800ceda:	197a      	adds	r2, r7, r5
 800cedc:	7812      	ldrb	r2, [r2, #0]
 800cede:	430a      	orrs	r2, r1
 800cee0:	701a      	strb	r2, [r3, #0]


			CONSOLE("Homing done\r");
 800cee2:	4b08      	ldr	r3, [pc, #32]	; (800cf04 <Callback_HomingProcess+0xc0>)
 800cee4:	0018      	movs	r0, r3
 800cee6:	f7fd fdfd 	bl	800aae4 <CONSOLE>
		}
	//    else
		//    	CONSOLE("In progress\r");
	}

	return status;
 800ceea:	230f      	movs	r3, #15
 800ceec:	18fb      	adds	r3, r7, r3
 800ceee:	781b      	ldrb	r3, [r3, #0]
}
 800cef0:	0018      	movs	r0, r3
 800cef2:	46bd      	mov	sp, r7
 800cef4:	b004      	add	sp, #16
 800cef6:	bdb0      	pop	{r4, r5, r7, pc}
 800cef8:	20001074 	.word	0x20001074
 800cefc:	0000270f 	.word	0x0000270f
 800cf00:	08010048 	.word	0x08010048
 800cf04:	08010058 	.word	0x08010058

0800cf08 <HOMING_PROCESS_monitoring>:
/*
 * Lance la procédure de Homing
 */
HAL_StatusTypeDef
HOMING_PROCESS_monitoring(  Global_Struct_t * inst )
{
 800cf08:	b5b0      	push	{r4, r5, r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 800cf10:	250f      	movs	r5, #15
 800cf12:	197b      	adds	r3, r7, r5
 800cf14:	2201      	movs	r2, #1
 800cf16:	701a      	strb	r2, [r3, #0]
if(inst != NULL){
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d026      	beq.n	800cf6c <HOMING_PROCESS_monitoring+0x64>
	//On active le controle moteur s'il n'est pas encore activé 	!! Dangereux en mode calibration
/*	
	if( !inst->control.IsOn )
		status = Turn_On_Motor(inst );
*/
	if (inst->control.IsOn) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	7a1b      	ldrb	r3, [r3, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d022      	beq.n	800cf6c <HOMING_PROCESS_monitoring+0x64>
		//On configure le type de contrôle en Open Loop
		status = Set_ControlType( inst  , CTRL_OPEN_LOOP );
 800cf26:	197c      	adds	r4, r7, r5
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	0018      	movs	r0, r3
 800cf2e:	f7fe fcc0 	bl	800b8b2 <Set_ControlType>
 800cf32:	0003      	movs	r3, r0
 800cf34:	7023      	strb	r3, [r4, #0]
		status |= Set_setpoint( inst , HOMING_Duty_Cycle );
 800cf36:	230c      	movs	r3, #12
 800cf38:	425a      	negs	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	0011      	movs	r1, r2
 800cf3e:	0018      	movs	r0, r3
 800cf40:	f7fe fce4 	bl	800b90c <Set_setpoint>
 800cf44:	0003      	movs	r3, r0
 800cf46:	0019      	movs	r1, r3
 800cf48:	197b      	adds	r3, r7, r5
 800cf4a:	197a      	adds	r2, r7, r5
 800cf4c:	7812      	ldrb	r2, [r2, #0]
 800cf4e:	430a      	orrs	r2, r1
 800cf50:	701a      	strb	r2, [r3, #0]

		//On signale que la procedure est en cours
		inst->flags.status_flag.single.homing_status = In_progress;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	795a      	ldrb	r2, [r3, #5]
 800cf56:	213f      	movs	r1, #63	; 0x3f
 800cf58:	400a      	ands	r2, r1
 800cf5a:	1c11      	adds	r1, r2, #0
 800cf5c:	2240      	movs	r2, #64	; 0x40
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	715a      	strb	r2, [r3, #5]
		//CONSOLE("Homing start \r");

		t_init = HAL_GetTick();
 800cf62:	f7f6 fc95 	bl	8003890 <HAL_GetTick>
 800cf66:	0002      	movs	r2, r0
 800cf68:	4b04      	ldr	r3, [pc, #16]	; (800cf7c <HOMING_PROCESS_monitoring+0x74>)
 800cf6a:	601a      	str	r2, [r3, #0]
	}
}
return status;
 800cf6c:	230f      	movs	r3, #15
 800cf6e:	18fb      	adds	r3, r7, r3
 800cf70:	781b      	ldrb	r3, [r3, #0]
}
 800cf72:	0018      	movs	r0, r3
 800cf74:	46bd      	mov	sp, r7
 800cf76:	b004      	add	sp, #16
 800cf78:	bdb0      	pop	{r4, r5, r7, pc}
 800cf7a:	46c0      	nop			; (mov r8, r8)
 800cf7c:	20001074 	.word	0x20001074

0800cf80 <__errno>:
 800cf80:	4b01      	ldr	r3, [pc, #4]	; (800cf88 <__errno+0x8>)
 800cf82:	6818      	ldr	r0, [r3, #0]
 800cf84:	4770      	bx	lr
 800cf86:	46c0      	nop			; (mov r8, r8)
 800cf88:	200000ac 	.word	0x200000ac

0800cf8c <__libc_init_array>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	2600      	movs	r6, #0
 800cf90:	4d0c      	ldr	r5, [pc, #48]	; (800cfc4 <__libc_init_array+0x38>)
 800cf92:	4c0d      	ldr	r4, [pc, #52]	; (800cfc8 <__libc_init_array+0x3c>)
 800cf94:	1b64      	subs	r4, r4, r5
 800cf96:	10a4      	asrs	r4, r4, #2
 800cf98:	42a6      	cmp	r6, r4
 800cf9a:	d109      	bne.n	800cfb0 <__libc_init_array+0x24>
 800cf9c:	2600      	movs	r6, #0
 800cf9e:	f002 ffc7 	bl	800ff30 <_init>
 800cfa2:	4d0a      	ldr	r5, [pc, #40]	; (800cfcc <__libc_init_array+0x40>)
 800cfa4:	4c0a      	ldr	r4, [pc, #40]	; (800cfd0 <__libc_init_array+0x44>)
 800cfa6:	1b64      	subs	r4, r4, r5
 800cfa8:	10a4      	asrs	r4, r4, #2
 800cfaa:	42a6      	cmp	r6, r4
 800cfac:	d105      	bne.n	800cfba <__libc_init_array+0x2e>
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	00b3      	lsls	r3, r6, #2
 800cfb2:	58eb      	ldr	r3, [r5, r3]
 800cfb4:	4798      	blx	r3
 800cfb6:	3601      	adds	r6, #1
 800cfb8:	e7ee      	b.n	800cf98 <__libc_init_array+0xc>
 800cfba:	00b3      	lsls	r3, r6, #2
 800cfbc:	58eb      	ldr	r3, [r5, r3]
 800cfbe:	4798      	blx	r3
 800cfc0:	3601      	adds	r6, #1
 800cfc2:	e7f2      	b.n	800cfaa <__libc_init_array+0x1e>
 800cfc4:	080106d4 	.word	0x080106d4
 800cfc8:	080106d4 	.word	0x080106d4
 800cfcc:	080106d4 	.word	0x080106d4
 800cfd0:	080106d8 	.word	0x080106d8

0800cfd4 <malloc>:
 800cfd4:	b510      	push	{r4, lr}
 800cfd6:	4b03      	ldr	r3, [pc, #12]	; (800cfe4 <malloc+0x10>)
 800cfd8:	0001      	movs	r1, r0
 800cfda:	6818      	ldr	r0, [r3, #0]
 800cfdc:	f000 f88c 	bl	800d0f8 <_malloc_r>
 800cfe0:	bd10      	pop	{r4, pc}
 800cfe2:	46c0      	nop			; (mov r8, r8)
 800cfe4:	200000ac 	.word	0x200000ac

0800cfe8 <free>:
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	4b03      	ldr	r3, [pc, #12]	; (800cff8 <free+0x10>)
 800cfec:	0001      	movs	r1, r0
 800cfee:	6818      	ldr	r0, [r3, #0]
 800cff0:	f000 f816 	bl	800d020 <_free_r>
 800cff4:	bd10      	pop	{r4, pc}
 800cff6:	46c0      	nop			; (mov r8, r8)
 800cff8:	200000ac 	.word	0x200000ac

0800cffc <memcpy>:
 800cffc:	2300      	movs	r3, #0
 800cffe:	b510      	push	{r4, lr}
 800d000:	429a      	cmp	r2, r3
 800d002:	d100      	bne.n	800d006 <memcpy+0xa>
 800d004:	bd10      	pop	{r4, pc}
 800d006:	5ccc      	ldrb	r4, [r1, r3]
 800d008:	54c4      	strb	r4, [r0, r3]
 800d00a:	3301      	adds	r3, #1
 800d00c:	e7f8      	b.n	800d000 <memcpy+0x4>

0800d00e <memset>:
 800d00e:	0003      	movs	r3, r0
 800d010:	1882      	adds	r2, r0, r2
 800d012:	4293      	cmp	r3, r2
 800d014:	d100      	bne.n	800d018 <memset+0xa>
 800d016:	4770      	bx	lr
 800d018:	7019      	strb	r1, [r3, #0]
 800d01a:	3301      	adds	r3, #1
 800d01c:	e7f9      	b.n	800d012 <memset+0x4>
	...

0800d020 <_free_r>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	0005      	movs	r5, r0
 800d024:	2900      	cmp	r1, #0
 800d026:	d010      	beq.n	800d04a <_free_r+0x2a>
 800d028:	1f0c      	subs	r4, r1, #4
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	da00      	bge.n	800d032 <_free_r+0x12>
 800d030:	18e4      	adds	r4, r4, r3
 800d032:	0028      	movs	r0, r5
 800d034:	f001 fc2e 	bl	800e894 <__malloc_lock>
 800d038:	4a1d      	ldr	r2, [pc, #116]	; (800d0b0 <_free_r+0x90>)
 800d03a:	6813      	ldr	r3, [r2, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d105      	bne.n	800d04c <_free_r+0x2c>
 800d040:	6063      	str	r3, [r4, #4]
 800d042:	6014      	str	r4, [r2, #0]
 800d044:	0028      	movs	r0, r5
 800d046:	f001 fc2d 	bl	800e8a4 <__malloc_unlock>
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	42a3      	cmp	r3, r4
 800d04e:	d908      	bls.n	800d062 <_free_r+0x42>
 800d050:	6821      	ldr	r1, [r4, #0]
 800d052:	1860      	adds	r0, r4, r1
 800d054:	4283      	cmp	r3, r0
 800d056:	d1f3      	bne.n	800d040 <_free_r+0x20>
 800d058:	6818      	ldr	r0, [r3, #0]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	1841      	adds	r1, r0, r1
 800d05e:	6021      	str	r1, [r4, #0]
 800d060:	e7ee      	b.n	800d040 <_free_r+0x20>
 800d062:	001a      	movs	r2, r3
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <_free_r+0x4e>
 800d06a:	42a3      	cmp	r3, r4
 800d06c:	d9f9      	bls.n	800d062 <_free_r+0x42>
 800d06e:	6811      	ldr	r1, [r2, #0]
 800d070:	1850      	adds	r0, r2, r1
 800d072:	42a0      	cmp	r0, r4
 800d074:	d10b      	bne.n	800d08e <_free_r+0x6e>
 800d076:	6820      	ldr	r0, [r4, #0]
 800d078:	1809      	adds	r1, r1, r0
 800d07a:	1850      	adds	r0, r2, r1
 800d07c:	6011      	str	r1, [r2, #0]
 800d07e:	4283      	cmp	r3, r0
 800d080:	d1e0      	bne.n	800d044 <_free_r+0x24>
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	1841      	adds	r1, r0, r1
 800d088:	6011      	str	r1, [r2, #0]
 800d08a:	6053      	str	r3, [r2, #4]
 800d08c:	e7da      	b.n	800d044 <_free_r+0x24>
 800d08e:	42a0      	cmp	r0, r4
 800d090:	d902      	bls.n	800d098 <_free_r+0x78>
 800d092:	230c      	movs	r3, #12
 800d094:	602b      	str	r3, [r5, #0]
 800d096:	e7d5      	b.n	800d044 <_free_r+0x24>
 800d098:	6821      	ldr	r1, [r4, #0]
 800d09a:	1860      	adds	r0, r4, r1
 800d09c:	4283      	cmp	r3, r0
 800d09e:	d103      	bne.n	800d0a8 <_free_r+0x88>
 800d0a0:	6818      	ldr	r0, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	1841      	adds	r1, r0, r1
 800d0a6:	6021      	str	r1, [r4, #0]
 800d0a8:	6063      	str	r3, [r4, #4]
 800d0aa:	6054      	str	r4, [r2, #4]
 800d0ac:	e7ca      	b.n	800d044 <_free_r+0x24>
 800d0ae:	46c0      	nop			; (mov r8, r8)
 800d0b0:	20001078 	.word	0x20001078

0800d0b4 <sbrk_aligned>:
 800d0b4:	b570      	push	{r4, r5, r6, lr}
 800d0b6:	4e0f      	ldr	r6, [pc, #60]	; (800d0f4 <sbrk_aligned+0x40>)
 800d0b8:	000d      	movs	r5, r1
 800d0ba:	6831      	ldr	r1, [r6, #0]
 800d0bc:	0004      	movs	r4, r0
 800d0be:	2900      	cmp	r1, #0
 800d0c0:	d102      	bne.n	800d0c8 <sbrk_aligned+0x14>
 800d0c2:	f000 fcfd 	bl	800dac0 <_sbrk_r>
 800d0c6:	6030      	str	r0, [r6, #0]
 800d0c8:	0029      	movs	r1, r5
 800d0ca:	0020      	movs	r0, r4
 800d0cc:	f000 fcf8 	bl	800dac0 <_sbrk_r>
 800d0d0:	1c43      	adds	r3, r0, #1
 800d0d2:	d00a      	beq.n	800d0ea <sbrk_aligned+0x36>
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	1cc5      	adds	r5, r0, #3
 800d0d8:	439d      	bics	r5, r3
 800d0da:	42a8      	cmp	r0, r5
 800d0dc:	d007      	beq.n	800d0ee <sbrk_aligned+0x3a>
 800d0de:	1a29      	subs	r1, r5, r0
 800d0e0:	0020      	movs	r0, r4
 800d0e2:	f000 fced 	bl	800dac0 <_sbrk_r>
 800d0e6:	1c43      	adds	r3, r0, #1
 800d0e8:	d101      	bne.n	800d0ee <sbrk_aligned+0x3a>
 800d0ea:	2501      	movs	r5, #1
 800d0ec:	426d      	negs	r5, r5
 800d0ee:	0028      	movs	r0, r5
 800d0f0:	bd70      	pop	{r4, r5, r6, pc}
 800d0f2:	46c0      	nop			; (mov r8, r8)
 800d0f4:	2000107c 	.word	0x2000107c

0800d0f8 <_malloc_r>:
 800d0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0fa:	2203      	movs	r2, #3
 800d0fc:	1ccb      	adds	r3, r1, #3
 800d0fe:	4393      	bics	r3, r2
 800d100:	3308      	adds	r3, #8
 800d102:	0006      	movs	r6, r0
 800d104:	001f      	movs	r7, r3
 800d106:	2b0c      	cmp	r3, #12
 800d108:	d232      	bcs.n	800d170 <_malloc_r+0x78>
 800d10a:	270c      	movs	r7, #12
 800d10c:	42b9      	cmp	r1, r7
 800d10e:	d831      	bhi.n	800d174 <_malloc_r+0x7c>
 800d110:	0030      	movs	r0, r6
 800d112:	f001 fbbf 	bl	800e894 <__malloc_lock>
 800d116:	4d32      	ldr	r5, [pc, #200]	; (800d1e0 <_malloc_r+0xe8>)
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	001c      	movs	r4, r3
 800d11c:	2c00      	cmp	r4, #0
 800d11e:	d12e      	bne.n	800d17e <_malloc_r+0x86>
 800d120:	0039      	movs	r1, r7
 800d122:	0030      	movs	r0, r6
 800d124:	f7ff ffc6 	bl	800d0b4 <sbrk_aligned>
 800d128:	0004      	movs	r4, r0
 800d12a:	1c43      	adds	r3, r0, #1
 800d12c:	d11e      	bne.n	800d16c <_malloc_r+0x74>
 800d12e:	682c      	ldr	r4, [r5, #0]
 800d130:	0025      	movs	r5, r4
 800d132:	2d00      	cmp	r5, #0
 800d134:	d14a      	bne.n	800d1cc <_malloc_r+0xd4>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	0029      	movs	r1, r5
 800d13a:	18e3      	adds	r3, r4, r3
 800d13c:	0030      	movs	r0, r6
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	f000 fcbe 	bl	800dac0 <_sbrk_r>
 800d144:	9b01      	ldr	r3, [sp, #4]
 800d146:	4283      	cmp	r3, r0
 800d148:	d143      	bne.n	800d1d2 <_malloc_r+0xda>
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	3703      	adds	r7, #3
 800d14e:	1aff      	subs	r7, r7, r3
 800d150:	2303      	movs	r3, #3
 800d152:	439f      	bics	r7, r3
 800d154:	3708      	adds	r7, #8
 800d156:	2f0c      	cmp	r7, #12
 800d158:	d200      	bcs.n	800d15c <_malloc_r+0x64>
 800d15a:	270c      	movs	r7, #12
 800d15c:	0039      	movs	r1, r7
 800d15e:	0030      	movs	r0, r6
 800d160:	f7ff ffa8 	bl	800d0b4 <sbrk_aligned>
 800d164:	1c43      	adds	r3, r0, #1
 800d166:	d034      	beq.n	800d1d2 <_malloc_r+0xda>
 800d168:	6823      	ldr	r3, [r4, #0]
 800d16a:	19df      	adds	r7, r3, r7
 800d16c:	6027      	str	r7, [r4, #0]
 800d16e:	e013      	b.n	800d198 <_malloc_r+0xa0>
 800d170:	2b00      	cmp	r3, #0
 800d172:	dacb      	bge.n	800d10c <_malloc_r+0x14>
 800d174:	230c      	movs	r3, #12
 800d176:	2500      	movs	r5, #0
 800d178:	6033      	str	r3, [r6, #0]
 800d17a:	0028      	movs	r0, r5
 800d17c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d17e:	6822      	ldr	r2, [r4, #0]
 800d180:	1bd1      	subs	r1, r2, r7
 800d182:	d420      	bmi.n	800d1c6 <_malloc_r+0xce>
 800d184:	290b      	cmp	r1, #11
 800d186:	d917      	bls.n	800d1b8 <_malloc_r+0xc0>
 800d188:	19e2      	adds	r2, r4, r7
 800d18a:	6027      	str	r7, [r4, #0]
 800d18c:	42a3      	cmp	r3, r4
 800d18e:	d111      	bne.n	800d1b4 <_malloc_r+0xbc>
 800d190:	602a      	str	r2, [r5, #0]
 800d192:	6863      	ldr	r3, [r4, #4]
 800d194:	6011      	str	r1, [r2, #0]
 800d196:	6053      	str	r3, [r2, #4]
 800d198:	0030      	movs	r0, r6
 800d19a:	0025      	movs	r5, r4
 800d19c:	f001 fb82 	bl	800e8a4 <__malloc_unlock>
 800d1a0:	2207      	movs	r2, #7
 800d1a2:	350b      	adds	r5, #11
 800d1a4:	1d23      	adds	r3, r4, #4
 800d1a6:	4395      	bics	r5, r2
 800d1a8:	1aea      	subs	r2, r5, r3
 800d1aa:	429d      	cmp	r5, r3
 800d1ac:	d0e5      	beq.n	800d17a <_malloc_r+0x82>
 800d1ae:	1b5b      	subs	r3, r3, r5
 800d1b0:	50a3      	str	r3, [r4, r2]
 800d1b2:	e7e2      	b.n	800d17a <_malloc_r+0x82>
 800d1b4:	605a      	str	r2, [r3, #4]
 800d1b6:	e7ec      	b.n	800d192 <_malloc_r+0x9a>
 800d1b8:	6862      	ldr	r2, [r4, #4]
 800d1ba:	42a3      	cmp	r3, r4
 800d1bc:	d101      	bne.n	800d1c2 <_malloc_r+0xca>
 800d1be:	602a      	str	r2, [r5, #0]
 800d1c0:	e7ea      	b.n	800d198 <_malloc_r+0xa0>
 800d1c2:	605a      	str	r2, [r3, #4]
 800d1c4:	e7e8      	b.n	800d198 <_malloc_r+0xa0>
 800d1c6:	0023      	movs	r3, r4
 800d1c8:	6864      	ldr	r4, [r4, #4]
 800d1ca:	e7a7      	b.n	800d11c <_malloc_r+0x24>
 800d1cc:	002c      	movs	r4, r5
 800d1ce:	686d      	ldr	r5, [r5, #4]
 800d1d0:	e7af      	b.n	800d132 <_malloc_r+0x3a>
 800d1d2:	230c      	movs	r3, #12
 800d1d4:	0030      	movs	r0, r6
 800d1d6:	6033      	str	r3, [r6, #0]
 800d1d8:	f001 fb64 	bl	800e8a4 <__malloc_unlock>
 800d1dc:	e7cd      	b.n	800d17a <_malloc_r+0x82>
 800d1de:	46c0      	nop			; (mov r8, r8)
 800d1e0:	20001078 	.word	0x20001078

0800d1e4 <__cvt>:
 800d1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e6:	001e      	movs	r6, r3
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	0014      	movs	r4, r2
 800d1ec:	b08b      	sub	sp, #44	; 0x2c
 800d1ee:	429e      	cmp	r6, r3
 800d1f0:	da04      	bge.n	800d1fc <__cvt+0x18>
 800d1f2:	2180      	movs	r1, #128	; 0x80
 800d1f4:	0609      	lsls	r1, r1, #24
 800d1f6:	1873      	adds	r3, r6, r1
 800d1f8:	001e      	movs	r6, r3
 800d1fa:	232d      	movs	r3, #45	; 0x2d
 800d1fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d1fe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d200:	7013      	strb	r3, [r2, #0]
 800d202:	2320      	movs	r3, #32
 800d204:	2203      	movs	r2, #3
 800d206:	439f      	bics	r7, r3
 800d208:	2f46      	cmp	r7, #70	; 0x46
 800d20a:	d007      	beq.n	800d21c <__cvt+0x38>
 800d20c:	003b      	movs	r3, r7
 800d20e:	3b45      	subs	r3, #69	; 0x45
 800d210:	4259      	negs	r1, r3
 800d212:	414b      	adcs	r3, r1
 800d214:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d216:	3a01      	subs	r2, #1
 800d218:	18cb      	adds	r3, r1, r3
 800d21a:	9310      	str	r3, [sp, #64]	; 0x40
 800d21c:	ab09      	add	r3, sp, #36	; 0x24
 800d21e:	9304      	str	r3, [sp, #16]
 800d220:	ab08      	add	r3, sp, #32
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d226:	9200      	str	r2, [sp, #0]
 800d228:	9302      	str	r3, [sp, #8]
 800d22a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d22c:	0022      	movs	r2, r4
 800d22e:	9301      	str	r3, [sp, #4]
 800d230:	0033      	movs	r3, r6
 800d232:	f000 fd05 	bl	800dc40 <_dtoa_r>
 800d236:	0005      	movs	r5, r0
 800d238:	2f47      	cmp	r7, #71	; 0x47
 800d23a:	d102      	bne.n	800d242 <__cvt+0x5e>
 800d23c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d23e:	07db      	lsls	r3, r3, #31
 800d240:	d528      	bpl.n	800d294 <__cvt+0xb0>
 800d242:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d244:	18eb      	adds	r3, r5, r3
 800d246:	9307      	str	r3, [sp, #28]
 800d248:	2f46      	cmp	r7, #70	; 0x46
 800d24a:	d114      	bne.n	800d276 <__cvt+0x92>
 800d24c:	782b      	ldrb	r3, [r5, #0]
 800d24e:	2b30      	cmp	r3, #48	; 0x30
 800d250:	d10c      	bne.n	800d26c <__cvt+0x88>
 800d252:	2200      	movs	r2, #0
 800d254:	2300      	movs	r3, #0
 800d256:	0020      	movs	r0, r4
 800d258:	0031      	movs	r1, r6
 800d25a:	f7f3 f8f5 	bl	8000448 <__aeabi_dcmpeq>
 800d25e:	2800      	cmp	r0, #0
 800d260:	d104      	bne.n	800d26c <__cvt+0x88>
 800d262:	2301      	movs	r3, #1
 800d264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d266:	1a9b      	subs	r3, r3, r2
 800d268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d26a:	6013      	str	r3, [r2, #0]
 800d26c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d26e:	9a07      	ldr	r2, [sp, #28]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	18d3      	adds	r3, r2, r3
 800d274:	9307      	str	r3, [sp, #28]
 800d276:	2200      	movs	r2, #0
 800d278:	2300      	movs	r3, #0
 800d27a:	0020      	movs	r0, r4
 800d27c:	0031      	movs	r1, r6
 800d27e:	f7f3 f8e3 	bl	8000448 <__aeabi_dcmpeq>
 800d282:	2800      	cmp	r0, #0
 800d284:	d001      	beq.n	800d28a <__cvt+0xa6>
 800d286:	9b07      	ldr	r3, [sp, #28]
 800d288:	9309      	str	r3, [sp, #36]	; 0x24
 800d28a:	2230      	movs	r2, #48	; 0x30
 800d28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d28e:	9907      	ldr	r1, [sp, #28]
 800d290:	428b      	cmp	r3, r1
 800d292:	d306      	bcc.n	800d2a2 <__cvt+0xbe>
 800d294:	0028      	movs	r0, r5
 800d296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d298:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d29a:	1b5b      	subs	r3, r3, r5
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	b00b      	add	sp, #44	; 0x2c
 800d2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a2:	1c59      	adds	r1, r3, #1
 800d2a4:	9109      	str	r1, [sp, #36]	; 0x24
 800d2a6:	701a      	strb	r2, [r3, #0]
 800d2a8:	e7f0      	b.n	800d28c <__cvt+0xa8>

0800d2aa <__exponent>:
 800d2aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ac:	1c83      	adds	r3, r0, #2
 800d2ae:	b087      	sub	sp, #28
 800d2b0:	9303      	str	r3, [sp, #12]
 800d2b2:	0005      	movs	r5, r0
 800d2b4:	000c      	movs	r4, r1
 800d2b6:	232b      	movs	r3, #43	; 0x2b
 800d2b8:	7002      	strb	r2, [r0, #0]
 800d2ba:	2900      	cmp	r1, #0
 800d2bc:	da01      	bge.n	800d2c2 <__exponent+0x18>
 800d2be:	424c      	negs	r4, r1
 800d2c0:	3302      	adds	r3, #2
 800d2c2:	706b      	strb	r3, [r5, #1]
 800d2c4:	2c09      	cmp	r4, #9
 800d2c6:	dd31      	ble.n	800d32c <__exponent+0x82>
 800d2c8:	270a      	movs	r7, #10
 800d2ca:	ab04      	add	r3, sp, #16
 800d2cc:	1dde      	adds	r6, r3, #7
 800d2ce:	0020      	movs	r0, r4
 800d2d0:	0039      	movs	r1, r7
 800d2d2:	9601      	str	r6, [sp, #4]
 800d2d4:	f7f3 f8a2 	bl	800041c <__aeabi_idivmod>
 800d2d8:	3e01      	subs	r6, #1
 800d2da:	3130      	adds	r1, #48	; 0x30
 800d2dc:	0020      	movs	r0, r4
 800d2de:	7031      	strb	r1, [r6, #0]
 800d2e0:	0039      	movs	r1, r7
 800d2e2:	9402      	str	r4, [sp, #8]
 800d2e4:	f7f2 ffb4 	bl	8000250 <__divsi3>
 800d2e8:	9b02      	ldr	r3, [sp, #8]
 800d2ea:	0004      	movs	r4, r0
 800d2ec:	2b63      	cmp	r3, #99	; 0x63
 800d2ee:	dcee      	bgt.n	800d2ce <__exponent+0x24>
 800d2f0:	9b01      	ldr	r3, [sp, #4]
 800d2f2:	3430      	adds	r4, #48	; 0x30
 800d2f4:	1e9a      	subs	r2, r3, #2
 800d2f6:	0013      	movs	r3, r2
 800d2f8:	9903      	ldr	r1, [sp, #12]
 800d2fa:	7014      	strb	r4, [r2, #0]
 800d2fc:	a804      	add	r0, sp, #16
 800d2fe:	3007      	adds	r0, #7
 800d300:	4298      	cmp	r0, r3
 800d302:	d80e      	bhi.n	800d322 <__exponent+0x78>
 800d304:	ab04      	add	r3, sp, #16
 800d306:	3307      	adds	r3, #7
 800d308:	2000      	movs	r0, #0
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d804      	bhi.n	800d318 <__exponent+0x6e>
 800d30e:	ab04      	add	r3, sp, #16
 800d310:	3009      	adds	r0, #9
 800d312:	18c0      	adds	r0, r0, r3
 800d314:	9b01      	ldr	r3, [sp, #4]
 800d316:	1ac0      	subs	r0, r0, r3
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	1818      	adds	r0, r3, r0
 800d31c:	1b40      	subs	r0, r0, r5
 800d31e:	b007      	add	sp, #28
 800d320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d322:	7818      	ldrb	r0, [r3, #0]
 800d324:	3301      	adds	r3, #1
 800d326:	7008      	strb	r0, [r1, #0]
 800d328:	3101      	adds	r1, #1
 800d32a:	e7e7      	b.n	800d2fc <__exponent+0x52>
 800d32c:	2330      	movs	r3, #48	; 0x30
 800d32e:	18e4      	adds	r4, r4, r3
 800d330:	70ab      	strb	r3, [r5, #2]
 800d332:	1d28      	adds	r0, r5, #4
 800d334:	70ec      	strb	r4, [r5, #3]
 800d336:	e7f1      	b.n	800d31c <__exponent+0x72>

0800d338 <_printf_float>:
 800d338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d33a:	b095      	sub	sp, #84	; 0x54
 800d33c:	000c      	movs	r4, r1
 800d33e:	9209      	str	r2, [sp, #36]	; 0x24
 800d340:	001e      	movs	r6, r3
 800d342:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d344:	0007      	movs	r7, r0
 800d346:	f001 fa95 	bl	800e874 <_localeconv_r>
 800d34a:	6803      	ldr	r3, [r0, #0]
 800d34c:	0018      	movs	r0, r3
 800d34e:	930c      	str	r3, [sp, #48]	; 0x30
 800d350:	f7f2 fed8 	bl	8000104 <strlen>
 800d354:	2300      	movs	r3, #0
 800d356:	9312      	str	r3, [sp, #72]	; 0x48
 800d358:	7e23      	ldrb	r3, [r4, #24]
 800d35a:	2207      	movs	r2, #7
 800d35c:	930a      	str	r3, [sp, #40]	; 0x28
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	900e      	str	r0, [sp, #56]	; 0x38
 800d362:	930d      	str	r3, [sp, #52]	; 0x34
 800d364:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d366:	682b      	ldr	r3, [r5, #0]
 800d368:	05c9      	lsls	r1, r1, #23
 800d36a:	d547      	bpl.n	800d3fc <_printf_float+0xc4>
 800d36c:	189b      	adds	r3, r3, r2
 800d36e:	4393      	bics	r3, r2
 800d370:	001a      	movs	r2, r3
 800d372:	3208      	adds	r2, #8
 800d374:	602a      	str	r2, [r5, #0]
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	64a2      	str	r2, [r4, #72]	; 0x48
 800d37c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d37e:	2201      	movs	r2, #1
 800d380:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d382:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d384:	930b      	str	r3, [sp, #44]	; 0x2c
 800d386:	006b      	lsls	r3, r5, #1
 800d388:	085b      	lsrs	r3, r3, #1
 800d38a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d38c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d38e:	4ba7      	ldr	r3, [pc, #668]	; (800d62c <_printf_float+0x2f4>)
 800d390:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d392:	4252      	negs	r2, r2
 800d394:	f7f5 fd32 	bl	8002dfc <__aeabi_dcmpun>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d131      	bne.n	800d400 <_printf_float+0xc8>
 800d39c:	2201      	movs	r2, #1
 800d39e:	4ba3      	ldr	r3, [pc, #652]	; (800d62c <_printf_float+0x2f4>)
 800d3a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d3a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d3a4:	4252      	negs	r2, r2
 800d3a6:	f7f3 f85f 	bl	8000468 <__aeabi_dcmple>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d128      	bne.n	800d400 <_printf_float+0xc8>
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	0029      	movs	r1, r5
 800d3b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d3b6:	f7f3 f84d 	bl	8000454 <__aeabi_dcmplt>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d003      	beq.n	800d3c6 <_printf_float+0x8e>
 800d3be:	0023      	movs	r3, r4
 800d3c0:	222d      	movs	r2, #45	; 0x2d
 800d3c2:	3343      	adds	r3, #67	; 0x43
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c8:	4d99      	ldr	r5, [pc, #612]	; (800d630 <_printf_float+0x2f8>)
 800d3ca:	2b47      	cmp	r3, #71	; 0x47
 800d3cc:	d900      	bls.n	800d3d0 <_printf_float+0x98>
 800d3ce:	4d99      	ldr	r5, [pc, #612]	; (800d634 <_printf_float+0x2fc>)
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3d4:	6123      	str	r3, [r4, #16]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	439a      	bics	r2, r3
 800d3da:	2300      	movs	r3, #0
 800d3dc:	6022      	str	r2, [r4, #0]
 800d3de:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e2:	0021      	movs	r1, r4
 800d3e4:	0038      	movs	r0, r7
 800d3e6:	9600      	str	r6, [sp, #0]
 800d3e8:	aa13      	add	r2, sp, #76	; 0x4c
 800d3ea:	f000 f9e7 	bl	800d7bc <_printf_common>
 800d3ee:	1c43      	adds	r3, r0, #1
 800d3f0:	d000      	beq.n	800d3f4 <_printf_float+0xbc>
 800d3f2:	e0a2      	b.n	800d53a <_printf_float+0x202>
 800d3f4:	2001      	movs	r0, #1
 800d3f6:	4240      	negs	r0, r0
 800d3f8:	b015      	add	sp, #84	; 0x54
 800d3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3fc:	3307      	adds	r3, #7
 800d3fe:	e7b6      	b.n	800d36e <_printf_float+0x36>
 800d400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d402:	002b      	movs	r3, r5
 800d404:	0010      	movs	r0, r2
 800d406:	0029      	movs	r1, r5
 800d408:	f7f5 fcf8 	bl	8002dfc <__aeabi_dcmpun>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d00b      	beq.n	800d428 <_printf_float+0xf0>
 800d410:	2d00      	cmp	r5, #0
 800d412:	da03      	bge.n	800d41c <_printf_float+0xe4>
 800d414:	0023      	movs	r3, r4
 800d416:	222d      	movs	r2, #45	; 0x2d
 800d418:	3343      	adds	r3, #67	; 0x43
 800d41a:	701a      	strb	r2, [r3, #0]
 800d41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d41e:	4d86      	ldr	r5, [pc, #536]	; (800d638 <_printf_float+0x300>)
 800d420:	2b47      	cmp	r3, #71	; 0x47
 800d422:	d9d5      	bls.n	800d3d0 <_printf_float+0x98>
 800d424:	4d85      	ldr	r5, [pc, #532]	; (800d63c <_printf_float+0x304>)
 800d426:	e7d3      	b.n	800d3d0 <_printf_float+0x98>
 800d428:	2220      	movs	r2, #32
 800d42a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d42c:	6863      	ldr	r3, [r4, #4]
 800d42e:	4391      	bics	r1, r2
 800d430:	910f      	str	r1, [sp, #60]	; 0x3c
 800d432:	1c5a      	adds	r2, r3, #1
 800d434:	d149      	bne.n	800d4ca <_printf_float+0x192>
 800d436:	3307      	adds	r3, #7
 800d438:	6063      	str	r3, [r4, #4]
 800d43a:	2380      	movs	r3, #128	; 0x80
 800d43c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	4313      	orrs	r3, r2
 800d442:	2200      	movs	r2, #0
 800d444:	9206      	str	r2, [sp, #24]
 800d446:	aa12      	add	r2, sp, #72	; 0x48
 800d448:	9205      	str	r2, [sp, #20]
 800d44a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d44c:	a908      	add	r1, sp, #32
 800d44e:	9204      	str	r2, [sp, #16]
 800d450:	aa11      	add	r2, sp, #68	; 0x44
 800d452:	9203      	str	r2, [sp, #12]
 800d454:	2223      	movs	r2, #35	; 0x23
 800d456:	6023      	str	r3, [r4, #0]
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	6863      	ldr	r3, [r4, #4]
 800d45c:	1852      	adds	r2, r2, r1
 800d45e:	9202      	str	r2, [sp, #8]
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	0038      	movs	r0, r7
 800d464:	002b      	movs	r3, r5
 800d466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d468:	f7ff febc 	bl	800d1e4 <__cvt>
 800d46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d46e:	0005      	movs	r5, r0
 800d470:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d472:	2b47      	cmp	r3, #71	; 0x47
 800d474:	d108      	bne.n	800d488 <_printf_float+0x150>
 800d476:	1ccb      	adds	r3, r1, #3
 800d478:	db02      	blt.n	800d480 <_printf_float+0x148>
 800d47a:	6863      	ldr	r3, [r4, #4]
 800d47c:	4299      	cmp	r1, r3
 800d47e:	dd48      	ble.n	800d512 <_printf_float+0x1da>
 800d480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d482:	3b02      	subs	r3, #2
 800d484:	b2db      	uxtb	r3, r3
 800d486:	930a      	str	r3, [sp, #40]	; 0x28
 800d488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d48a:	2b65      	cmp	r3, #101	; 0x65
 800d48c:	d824      	bhi.n	800d4d8 <_printf_float+0x1a0>
 800d48e:	0020      	movs	r0, r4
 800d490:	001a      	movs	r2, r3
 800d492:	3901      	subs	r1, #1
 800d494:	3050      	adds	r0, #80	; 0x50
 800d496:	9111      	str	r1, [sp, #68]	; 0x44
 800d498:	f7ff ff07 	bl	800d2aa <__exponent>
 800d49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d49e:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4a0:	1813      	adds	r3, r2, r0
 800d4a2:	6123      	str	r3, [r4, #16]
 800d4a4:	2a01      	cmp	r2, #1
 800d4a6:	dc02      	bgt.n	800d4ae <_printf_float+0x176>
 800d4a8:	6822      	ldr	r2, [r4, #0]
 800d4aa:	07d2      	lsls	r2, r2, #31
 800d4ac:	d501      	bpl.n	800d4b2 <_printf_float+0x17a>
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	6123      	str	r3, [r4, #16]
 800d4b2:	2323      	movs	r3, #35	; 0x23
 800d4b4:	aa08      	add	r2, sp, #32
 800d4b6:	189b      	adds	r3, r3, r2
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d100      	bne.n	800d4c0 <_printf_float+0x188>
 800d4be:	e78f      	b.n	800d3e0 <_printf_float+0xa8>
 800d4c0:	0023      	movs	r3, r4
 800d4c2:	222d      	movs	r2, #45	; 0x2d
 800d4c4:	3343      	adds	r3, #67	; 0x43
 800d4c6:	701a      	strb	r2, [r3, #0]
 800d4c8:	e78a      	b.n	800d3e0 <_printf_float+0xa8>
 800d4ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d4cc:	2a47      	cmp	r2, #71	; 0x47
 800d4ce:	d1b4      	bne.n	800d43a <_printf_float+0x102>
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1b2      	bne.n	800d43a <_printf_float+0x102>
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	e7af      	b.n	800d438 <_printf_float+0x100>
 800d4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4da:	2b66      	cmp	r3, #102	; 0x66
 800d4dc:	d11b      	bne.n	800d516 <_printf_float+0x1de>
 800d4de:	6863      	ldr	r3, [r4, #4]
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	dd0d      	ble.n	800d500 <_printf_float+0x1c8>
 800d4e4:	6121      	str	r1, [r4, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d102      	bne.n	800d4f0 <_printf_float+0x1b8>
 800d4ea:	6822      	ldr	r2, [r4, #0]
 800d4ec:	07d2      	lsls	r2, r2, #31
 800d4ee:	d502      	bpl.n	800d4f6 <_printf_float+0x1be>
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	1859      	adds	r1, r3, r1
 800d4f4:	6121      	str	r1, [r4, #16]
 800d4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4f8:	65a3      	str	r3, [r4, #88]	; 0x58
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4fe:	e7d8      	b.n	800d4b2 <_printf_float+0x17a>
 800d500:	2b00      	cmp	r3, #0
 800d502:	d103      	bne.n	800d50c <_printf_float+0x1d4>
 800d504:	2201      	movs	r2, #1
 800d506:	6821      	ldr	r1, [r4, #0]
 800d508:	4211      	tst	r1, r2
 800d50a:	d000      	beq.n	800d50e <_printf_float+0x1d6>
 800d50c:	1c9a      	adds	r2, r3, #2
 800d50e:	6122      	str	r2, [r4, #16]
 800d510:	e7f1      	b.n	800d4f6 <_printf_float+0x1be>
 800d512:	2367      	movs	r3, #103	; 0x67
 800d514:	930a      	str	r3, [sp, #40]	; 0x28
 800d516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d518:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d51a:	4293      	cmp	r3, r2
 800d51c:	db06      	blt.n	800d52c <_printf_float+0x1f4>
 800d51e:	6822      	ldr	r2, [r4, #0]
 800d520:	6123      	str	r3, [r4, #16]
 800d522:	07d2      	lsls	r2, r2, #31
 800d524:	d5e7      	bpl.n	800d4f6 <_printf_float+0x1be>
 800d526:	3301      	adds	r3, #1
 800d528:	6123      	str	r3, [r4, #16]
 800d52a:	e7e4      	b.n	800d4f6 <_printf_float+0x1be>
 800d52c:	2101      	movs	r1, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	dc01      	bgt.n	800d536 <_printf_float+0x1fe>
 800d532:	1849      	adds	r1, r1, r1
 800d534:	1ac9      	subs	r1, r1, r3
 800d536:	1852      	adds	r2, r2, r1
 800d538:	e7e9      	b.n	800d50e <_printf_float+0x1d6>
 800d53a:	6822      	ldr	r2, [r4, #0]
 800d53c:	0553      	lsls	r3, r2, #21
 800d53e:	d407      	bmi.n	800d550 <_printf_float+0x218>
 800d540:	6923      	ldr	r3, [r4, #16]
 800d542:	002a      	movs	r2, r5
 800d544:	0038      	movs	r0, r7
 800d546:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d548:	47b0      	blx	r6
 800d54a:	1c43      	adds	r3, r0, #1
 800d54c:	d128      	bne.n	800d5a0 <_printf_float+0x268>
 800d54e:	e751      	b.n	800d3f4 <_printf_float+0xbc>
 800d550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d552:	2b65      	cmp	r3, #101	; 0x65
 800d554:	d800      	bhi.n	800d558 <_printf_float+0x220>
 800d556:	e0e1      	b.n	800d71c <_printf_float+0x3e4>
 800d558:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d55a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d55c:	2200      	movs	r2, #0
 800d55e:	2300      	movs	r3, #0
 800d560:	f7f2 ff72 	bl	8000448 <__aeabi_dcmpeq>
 800d564:	2800      	cmp	r0, #0
 800d566:	d031      	beq.n	800d5cc <_printf_float+0x294>
 800d568:	2301      	movs	r3, #1
 800d56a:	0038      	movs	r0, r7
 800d56c:	4a34      	ldr	r2, [pc, #208]	; (800d640 <_printf_float+0x308>)
 800d56e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d570:	47b0      	blx	r6
 800d572:	1c43      	adds	r3, r0, #1
 800d574:	d100      	bne.n	800d578 <_printf_float+0x240>
 800d576:	e73d      	b.n	800d3f4 <_printf_float+0xbc>
 800d578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d57a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d57c:	4293      	cmp	r3, r2
 800d57e:	db02      	blt.n	800d586 <_printf_float+0x24e>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	07db      	lsls	r3, r3, #31
 800d584:	d50c      	bpl.n	800d5a0 <_printf_float+0x268>
 800d586:	0038      	movs	r0, r7
 800d588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d58a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d58c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d58e:	47b0      	blx	r6
 800d590:	2500      	movs	r5, #0
 800d592:	1c43      	adds	r3, r0, #1
 800d594:	d100      	bne.n	800d598 <_printf_float+0x260>
 800d596:	e72d      	b.n	800d3f4 <_printf_float+0xbc>
 800d598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d59a:	3b01      	subs	r3, #1
 800d59c:	42ab      	cmp	r3, r5
 800d59e:	dc0a      	bgt.n	800d5b6 <_printf_float+0x27e>
 800d5a0:	6823      	ldr	r3, [r4, #0]
 800d5a2:	079b      	lsls	r3, r3, #30
 800d5a4:	d500      	bpl.n	800d5a8 <_printf_float+0x270>
 800d5a6:	e106      	b.n	800d7b6 <_printf_float+0x47e>
 800d5a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d5aa:	68e0      	ldr	r0, [r4, #12]
 800d5ac:	4298      	cmp	r0, r3
 800d5ae:	db00      	blt.n	800d5b2 <_printf_float+0x27a>
 800d5b0:	e722      	b.n	800d3f8 <_printf_float+0xc0>
 800d5b2:	0018      	movs	r0, r3
 800d5b4:	e720      	b.n	800d3f8 <_printf_float+0xc0>
 800d5b6:	0022      	movs	r2, r4
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	0038      	movs	r0, r7
 800d5bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5be:	321a      	adds	r2, #26
 800d5c0:	47b0      	blx	r6
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	d100      	bne.n	800d5c8 <_printf_float+0x290>
 800d5c6:	e715      	b.n	800d3f4 <_printf_float+0xbc>
 800d5c8:	3501      	adds	r5, #1
 800d5ca:	e7e5      	b.n	800d598 <_printf_float+0x260>
 800d5cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dc38      	bgt.n	800d644 <_printf_float+0x30c>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	0038      	movs	r0, r7
 800d5d6:	4a1a      	ldr	r2, [pc, #104]	; (800d640 <_printf_float+0x308>)
 800d5d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5da:	47b0      	blx	r6
 800d5dc:	1c43      	adds	r3, r0, #1
 800d5de:	d100      	bne.n	800d5e2 <_printf_float+0x2aa>
 800d5e0:	e708      	b.n	800d3f4 <_printf_float+0xbc>
 800d5e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	d102      	bne.n	800d5f0 <_printf_float+0x2b8>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	07db      	lsls	r3, r3, #31
 800d5ee:	d5d7      	bpl.n	800d5a0 <_printf_float+0x268>
 800d5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5f2:	0038      	movs	r0, r7
 800d5f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5f8:	47b0      	blx	r6
 800d5fa:	1c43      	adds	r3, r0, #1
 800d5fc:	d100      	bne.n	800d600 <_printf_float+0x2c8>
 800d5fe:	e6f9      	b.n	800d3f4 <_printf_float+0xbc>
 800d600:	2300      	movs	r3, #0
 800d602:	930a      	str	r3, [sp, #40]	; 0x28
 800d604:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d608:	425b      	negs	r3, r3
 800d60a:	4293      	cmp	r3, r2
 800d60c:	dc01      	bgt.n	800d612 <_printf_float+0x2da>
 800d60e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d610:	e797      	b.n	800d542 <_printf_float+0x20a>
 800d612:	0022      	movs	r2, r4
 800d614:	2301      	movs	r3, #1
 800d616:	0038      	movs	r0, r7
 800d618:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d61a:	321a      	adds	r2, #26
 800d61c:	47b0      	blx	r6
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d100      	bne.n	800d624 <_printf_float+0x2ec>
 800d622:	e6e7      	b.n	800d3f4 <_printf_float+0xbc>
 800d624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d626:	3301      	adds	r3, #1
 800d628:	e7eb      	b.n	800d602 <_printf_float+0x2ca>
 800d62a:	46c0      	nop			; (mov r8, r8)
 800d62c:	7fefffff 	.word	0x7fefffff
 800d630:	080102fc 	.word	0x080102fc
 800d634:	08010300 	.word	0x08010300
 800d638:	08010304 	.word	0x08010304
 800d63c:	08010308 	.word	0x08010308
 800d640:	0801030c 	.word	0x0801030c
 800d644:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d648:	920a      	str	r2, [sp, #40]	; 0x28
 800d64a:	429a      	cmp	r2, r3
 800d64c:	dd00      	ble.n	800d650 <_printf_float+0x318>
 800d64e:	930a      	str	r3, [sp, #40]	; 0x28
 800d650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d652:	2b00      	cmp	r3, #0
 800d654:	dc3c      	bgt.n	800d6d0 <_printf_float+0x398>
 800d656:	2300      	movs	r3, #0
 800d658:	930d      	str	r3, [sp, #52]	; 0x34
 800d65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d65c:	43db      	mvns	r3, r3
 800d65e:	17db      	asrs	r3, r3, #31
 800d660:	930f      	str	r3, [sp, #60]	; 0x3c
 800d662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d666:	930b      	str	r3, [sp, #44]	; 0x2c
 800d668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d66a:	4013      	ands	r3, r2
 800d66c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d672:	4293      	cmp	r3, r2
 800d674:	dc34      	bgt.n	800d6e0 <_printf_float+0x3a8>
 800d676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d678:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d67a:	4293      	cmp	r3, r2
 800d67c:	db3d      	blt.n	800d6fa <_printf_float+0x3c2>
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	07db      	lsls	r3, r3, #31
 800d682:	d43a      	bmi.n	800d6fa <_printf_float+0x3c2>
 800d684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d688:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	1a52      	subs	r2, r2, r1
 800d68e:	920a      	str	r2, [sp, #40]	; 0x28
 800d690:	429a      	cmp	r2, r3
 800d692:	dd00      	ble.n	800d696 <_printf_float+0x35e>
 800d694:	930a      	str	r3, [sp, #40]	; 0x28
 800d696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d698:	2b00      	cmp	r3, #0
 800d69a:	dc36      	bgt.n	800d70a <_printf_float+0x3d2>
 800d69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d69e:	2500      	movs	r5, #0
 800d6a0:	43db      	mvns	r3, r3
 800d6a2:	17db      	asrs	r3, r3, #31
 800d6a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6ac:	1a9b      	subs	r3, r3, r2
 800d6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6b0:	400a      	ands	r2, r1
 800d6b2:	1a9b      	subs	r3, r3, r2
 800d6b4:	42ab      	cmp	r3, r5
 800d6b6:	dc00      	bgt.n	800d6ba <_printf_float+0x382>
 800d6b8:	e772      	b.n	800d5a0 <_printf_float+0x268>
 800d6ba:	0022      	movs	r2, r4
 800d6bc:	2301      	movs	r3, #1
 800d6be:	0038      	movs	r0, r7
 800d6c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6c2:	321a      	adds	r2, #26
 800d6c4:	47b0      	blx	r6
 800d6c6:	1c43      	adds	r3, r0, #1
 800d6c8:	d100      	bne.n	800d6cc <_printf_float+0x394>
 800d6ca:	e693      	b.n	800d3f4 <_printf_float+0xbc>
 800d6cc:	3501      	adds	r5, #1
 800d6ce:	e7ea      	b.n	800d6a6 <_printf_float+0x36e>
 800d6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6d2:	002a      	movs	r2, r5
 800d6d4:	0038      	movs	r0, r7
 800d6d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6d8:	47b0      	blx	r6
 800d6da:	1c43      	adds	r3, r0, #1
 800d6dc:	d1bb      	bne.n	800d656 <_printf_float+0x31e>
 800d6de:	e689      	b.n	800d3f4 <_printf_float+0xbc>
 800d6e0:	0022      	movs	r2, r4
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	0038      	movs	r0, r7
 800d6e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6e8:	321a      	adds	r2, #26
 800d6ea:	47b0      	blx	r6
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	d100      	bne.n	800d6f2 <_printf_float+0x3ba>
 800d6f0:	e680      	b.n	800d3f4 <_printf_float+0xbc>
 800d6f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	930d      	str	r3, [sp, #52]	; 0x34
 800d6f8:	e7b3      	b.n	800d662 <_printf_float+0x32a>
 800d6fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6fc:	0038      	movs	r0, r7
 800d6fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d700:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d702:	47b0      	blx	r6
 800d704:	1c43      	adds	r3, r0, #1
 800d706:	d1bd      	bne.n	800d684 <_printf_float+0x34c>
 800d708:	e674      	b.n	800d3f4 <_printf_float+0xbc>
 800d70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d70c:	0038      	movs	r0, r7
 800d70e:	18ea      	adds	r2, r5, r3
 800d710:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d714:	47b0      	blx	r6
 800d716:	1c43      	adds	r3, r0, #1
 800d718:	d1c0      	bne.n	800d69c <_printf_float+0x364>
 800d71a:	e66b      	b.n	800d3f4 <_printf_float+0xbc>
 800d71c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d71e:	2b01      	cmp	r3, #1
 800d720:	dc02      	bgt.n	800d728 <_printf_float+0x3f0>
 800d722:	2301      	movs	r3, #1
 800d724:	421a      	tst	r2, r3
 800d726:	d034      	beq.n	800d792 <_printf_float+0x45a>
 800d728:	2301      	movs	r3, #1
 800d72a:	002a      	movs	r2, r5
 800d72c:	0038      	movs	r0, r7
 800d72e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d730:	47b0      	blx	r6
 800d732:	1c43      	adds	r3, r0, #1
 800d734:	d100      	bne.n	800d738 <_printf_float+0x400>
 800d736:	e65d      	b.n	800d3f4 <_printf_float+0xbc>
 800d738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d73a:	0038      	movs	r0, r7
 800d73c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d73e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d740:	47b0      	blx	r6
 800d742:	1c43      	adds	r3, r0, #1
 800d744:	d100      	bne.n	800d748 <_printf_float+0x410>
 800d746:	e655      	b.n	800d3f4 <_printf_float+0xbc>
 800d748:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d74a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d74c:	2200      	movs	r2, #0
 800d74e:	2300      	movs	r3, #0
 800d750:	f7f2 fe7a 	bl	8000448 <__aeabi_dcmpeq>
 800d754:	2800      	cmp	r0, #0
 800d756:	d11a      	bne.n	800d78e <_printf_float+0x456>
 800d758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d75a:	1c6a      	adds	r2, r5, #1
 800d75c:	3b01      	subs	r3, #1
 800d75e:	0038      	movs	r0, r7
 800d760:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d762:	47b0      	blx	r6
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d10e      	bne.n	800d786 <_printf_float+0x44e>
 800d768:	e644      	b.n	800d3f4 <_printf_float+0xbc>
 800d76a:	0022      	movs	r2, r4
 800d76c:	2301      	movs	r3, #1
 800d76e:	0038      	movs	r0, r7
 800d770:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d772:	321a      	adds	r2, #26
 800d774:	47b0      	blx	r6
 800d776:	1c43      	adds	r3, r0, #1
 800d778:	d100      	bne.n	800d77c <_printf_float+0x444>
 800d77a:	e63b      	b.n	800d3f4 <_printf_float+0xbc>
 800d77c:	3501      	adds	r5, #1
 800d77e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d780:	3b01      	subs	r3, #1
 800d782:	42ab      	cmp	r3, r5
 800d784:	dcf1      	bgt.n	800d76a <_printf_float+0x432>
 800d786:	0022      	movs	r2, r4
 800d788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d78a:	3250      	adds	r2, #80	; 0x50
 800d78c:	e6da      	b.n	800d544 <_printf_float+0x20c>
 800d78e:	2500      	movs	r5, #0
 800d790:	e7f5      	b.n	800d77e <_printf_float+0x446>
 800d792:	002a      	movs	r2, r5
 800d794:	e7e3      	b.n	800d75e <_printf_float+0x426>
 800d796:	0022      	movs	r2, r4
 800d798:	2301      	movs	r3, #1
 800d79a:	0038      	movs	r0, r7
 800d79c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d79e:	3219      	adds	r2, #25
 800d7a0:	47b0      	blx	r6
 800d7a2:	1c43      	adds	r3, r0, #1
 800d7a4:	d100      	bne.n	800d7a8 <_printf_float+0x470>
 800d7a6:	e625      	b.n	800d3f4 <_printf_float+0xbc>
 800d7a8:	3501      	adds	r5, #1
 800d7aa:	68e3      	ldr	r3, [r4, #12]
 800d7ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d7ae:	1a9b      	subs	r3, r3, r2
 800d7b0:	42ab      	cmp	r3, r5
 800d7b2:	dcf0      	bgt.n	800d796 <_printf_float+0x45e>
 800d7b4:	e6f8      	b.n	800d5a8 <_printf_float+0x270>
 800d7b6:	2500      	movs	r5, #0
 800d7b8:	e7f7      	b.n	800d7aa <_printf_float+0x472>
 800d7ba:	46c0      	nop			; (mov r8, r8)

0800d7bc <_printf_common>:
 800d7bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7be:	0015      	movs	r5, r2
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	688a      	ldr	r2, [r1, #8]
 800d7c4:	690b      	ldr	r3, [r1, #16]
 800d7c6:	000c      	movs	r4, r1
 800d7c8:	9000      	str	r0, [sp, #0]
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	da00      	bge.n	800d7d0 <_printf_common+0x14>
 800d7ce:	0013      	movs	r3, r2
 800d7d0:	0022      	movs	r2, r4
 800d7d2:	602b      	str	r3, [r5, #0]
 800d7d4:	3243      	adds	r2, #67	; 0x43
 800d7d6:	7812      	ldrb	r2, [r2, #0]
 800d7d8:	2a00      	cmp	r2, #0
 800d7da:	d001      	beq.n	800d7e0 <_printf_common+0x24>
 800d7dc:	3301      	adds	r3, #1
 800d7de:	602b      	str	r3, [r5, #0]
 800d7e0:	6823      	ldr	r3, [r4, #0]
 800d7e2:	069b      	lsls	r3, r3, #26
 800d7e4:	d502      	bpl.n	800d7ec <_printf_common+0x30>
 800d7e6:	682b      	ldr	r3, [r5, #0]
 800d7e8:	3302      	adds	r3, #2
 800d7ea:	602b      	str	r3, [r5, #0]
 800d7ec:	6822      	ldr	r2, [r4, #0]
 800d7ee:	2306      	movs	r3, #6
 800d7f0:	0017      	movs	r7, r2
 800d7f2:	401f      	ands	r7, r3
 800d7f4:	421a      	tst	r2, r3
 800d7f6:	d027      	beq.n	800d848 <_printf_common+0x8c>
 800d7f8:	0023      	movs	r3, r4
 800d7fa:	3343      	adds	r3, #67	; 0x43
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	1e5a      	subs	r2, r3, #1
 800d800:	4193      	sbcs	r3, r2
 800d802:	6822      	ldr	r2, [r4, #0]
 800d804:	0692      	lsls	r2, r2, #26
 800d806:	d430      	bmi.n	800d86a <_printf_common+0xae>
 800d808:	0022      	movs	r2, r4
 800d80a:	9901      	ldr	r1, [sp, #4]
 800d80c:	9800      	ldr	r0, [sp, #0]
 800d80e:	9e08      	ldr	r6, [sp, #32]
 800d810:	3243      	adds	r2, #67	; 0x43
 800d812:	47b0      	blx	r6
 800d814:	1c43      	adds	r3, r0, #1
 800d816:	d025      	beq.n	800d864 <_printf_common+0xa8>
 800d818:	2306      	movs	r3, #6
 800d81a:	6820      	ldr	r0, [r4, #0]
 800d81c:	682a      	ldr	r2, [r5, #0]
 800d81e:	68e1      	ldr	r1, [r4, #12]
 800d820:	2500      	movs	r5, #0
 800d822:	4003      	ands	r3, r0
 800d824:	2b04      	cmp	r3, #4
 800d826:	d103      	bne.n	800d830 <_printf_common+0x74>
 800d828:	1a8d      	subs	r5, r1, r2
 800d82a:	43eb      	mvns	r3, r5
 800d82c:	17db      	asrs	r3, r3, #31
 800d82e:	401d      	ands	r5, r3
 800d830:	68a3      	ldr	r3, [r4, #8]
 800d832:	6922      	ldr	r2, [r4, #16]
 800d834:	4293      	cmp	r3, r2
 800d836:	dd01      	ble.n	800d83c <_printf_common+0x80>
 800d838:	1a9b      	subs	r3, r3, r2
 800d83a:	18ed      	adds	r5, r5, r3
 800d83c:	2700      	movs	r7, #0
 800d83e:	42bd      	cmp	r5, r7
 800d840:	d120      	bne.n	800d884 <_printf_common+0xc8>
 800d842:	2000      	movs	r0, #0
 800d844:	e010      	b.n	800d868 <_printf_common+0xac>
 800d846:	3701      	adds	r7, #1
 800d848:	68e3      	ldr	r3, [r4, #12]
 800d84a:	682a      	ldr	r2, [r5, #0]
 800d84c:	1a9b      	subs	r3, r3, r2
 800d84e:	42bb      	cmp	r3, r7
 800d850:	ddd2      	ble.n	800d7f8 <_printf_common+0x3c>
 800d852:	0022      	movs	r2, r4
 800d854:	2301      	movs	r3, #1
 800d856:	9901      	ldr	r1, [sp, #4]
 800d858:	9800      	ldr	r0, [sp, #0]
 800d85a:	9e08      	ldr	r6, [sp, #32]
 800d85c:	3219      	adds	r2, #25
 800d85e:	47b0      	blx	r6
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d1f0      	bne.n	800d846 <_printf_common+0x8a>
 800d864:	2001      	movs	r0, #1
 800d866:	4240      	negs	r0, r0
 800d868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d86a:	2030      	movs	r0, #48	; 0x30
 800d86c:	18e1      	adds	r1, r4, r3
 800d86e:	3143      	adds	r1, #67	; 0x43
 800d870:	7008      	strb	r0, [r1, #0]
 800d872:	0021      	movs	r1, r4
 800d874:	1c5a      	adds	r2, r3, #1
 800d876:	3145      	adds	r1, #69	; 0x45
 800d878:	7809      	ldrb	r1, [r1, #0]
 800d87a:	18a2      	adds	r2, r4, r2
 800d87c:	3243      	adds	r2, #67	; 0x43
 800d87e:	3302      	adds	r3, #2
 800d880:	7011      	strb	r1, [r2, #0]
 800d882:	e7c1      	b.n	800d808 <_printf_common+0x4c>
 800d884:	0022      	movs	r2, r4
 800d886:	2301      	movs	r3, #1
 800d888:	9901      	ldr	r1, [sp, #4]
 800d88a:	9800      	ldr	r0, [sp, #0]
 800d88c:	9e08      	ldr	r6, [sp, #32]
 800d88e:	321a      	adds	r2, #26
 800d890:	47b0      	blx	r6
 800d892:	1c43      	adds	r3, r0, #1
 800d894:	d0e6      	beq.n	800d864 <_printf_common+0xa8>
 800d896:	3701      	adds	r7, #1
 800d898:	e7d1      	b.n	800d83e <_printf_common+0x82>
	...

0800d89c <_printf_i>:
 800d89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d89e:	b08b      	sub	sp, #44	; 0x2c
 800d8a0:	9206      	str	r2, [sp, #24]
 800d8a2:	000a      	movs	r2, r1
 800d8a4:	3243      	adds	r2, #67	; 0x43
 800d8a6:	9307      	str	r3, [sp, #28]
 800d8a8:	9005      	str	r0, [sp, #20]
 800d8aa:	9204      	str	r2, [sp, #16]
 800d8ac:	7e0a      	ldrb	r2, [r1, #24]
 800d8ae:	000c      	movs	r4, r1
 800d8b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8b2:	2a78      	cmp	r2, #120	; 0x78
 800d8b4:	d807      	bhi.n	800d8c6 <_printf_i+0x2a>
 800d8b6:	2a62      	cmp	r2, #98	; 0x62
 800d8b8:	d809      	bhi.n	800d8ce <_printf_i+0x32>
 800d8ba:	2a00      	cmp	r2, #0
 800d8bc:	d100      	bne.n	800d8c0 <_printf_i+0x24>
 800d8be:	e0c1      	b.n	800da44 <_printf_i+0x1a8>
 800d8c0:	2a58      	cmp	r2, #88	; 0x58
 800d8c2:	d100      	bne.n	800d8c6 <_printf_i+0x2a>
 800d8c4:	e08c      	b.n	800d9e0 <_printf_i+0x144>
 800d8c6:	0026      	movs	r6, r4
 800d8c8:	3642      	adds	r6, #66	; 0x42
 800d8ca:	7032      	strb	r2, [r6, #0]
 800d8cc:	e022      	b.n	800d914 <_printf_i+0x78>
 800d8ce:	0010      	movs	r0, r2
 800d8d0:	3863      	subs	r0, #99	; 0x63
 800d8d2:	2815      	cmp	r0, #21
 800d8d4:	d8f7      	bhi.n	800d8c6 <_printf_i+0x2a>
 800d8d6:	f7f2 fc27 	bl	8000128 <__gnu_thumb1_case_shi>
 800d8da:	0016      	.short	0x0016
 800d8dc:	fff6001f 	.word	0xfff6001f
 800d8e0:	fff6fff6 	.word	0xfff6fff6
 800d8e4:	001ffff6 	.word	0x001ffff6
 800d8e8:	fff6fff6 	.word	0xfff6fff6
 800d8ec:	fff6fff6 	.word	0xfff6fff6
 800d8f0:	003600a8 	.word	0x003600a8
 800d8f4:	fff6009a 	.word	0xfff6009a
 800d8f8:	00b9fff6 	.word	0x00b9fff6
 800d8fc:	0036fff6 	.word	0x0036fff6
 800d900:	fff6fff6 	.word	0xfff6fff6
 800d904:	009e      	.short	0x009e
 800d906:	0026      	movs	r6, r4
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	3642      	adds	r6, #66	; 0x42
 800d90c:	1d11      	adds	r1, r2, #4
 800d90e:	6019      	str	r1, [r3, #0]
 800d910:	6813      	ldr	r3, [r2, #0]
 800d912:	7033      	strb	r3, [r6, #0]
 800d914:	2301      	movs	r3, #1
 800d916:	e0a7      	b.n	800da68 <_printf_i+0x1cc>
 800d918:	6808      	ldr	r0, [r1, #0]
 800d91a:	6819      	ldr	r1, [r3, #0]
 800d91c:	1d0a      	adds	r2, r1, #4
 800d91e:	0605      	lsls	r5, r0, #24
 800d920:	d50b      	bpl.n	800d93a <_printf_i+0x9e>
 800d922:	680d      	ldr	r5, [r1, #0]
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	2d00      	cmp	r5, #0
 800d928:	da03      	bge.n	800d932 <_printf_i+0x96>
 800d92a:	232d      	movs	r3, #45	; 0x2d
 800d92c:	9a04      	ldr	r2, [sp, #16]
 800d92e:	426d      	negs	r5, r5
 800d930:	7013      	strb	r3, [r2, #0]
 800d932:	4b61      	ldr	r3, [pc, #388]	; (800dab8 <_printf_i+0x21c>)
 800d934:	270a      	movs	r7, #10
 800d936:	9303      	str	r3, [sp, #12]
 800d938:	e01b      	b.n	800d972 <_printf_i+0xd6>
 800d93a:	680d      	ldr	r5, [r1, #0]
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	0641      	lsls	r1, r0, #25
 800d940:	d5f1      	bpl.n	800d926 <_printf_i+0x8a>
 800d942:	b22d      	sxth	r5, r5
 800d944:	e7ef      	b.n	800d926 <_printf_i+0x8a>
 800d946:	680d      	ldr	r5, [r1, #0]
 800d948:	6819      	ldr	r1, [r3, #0]
 800d94a:	1d08      	adds	r0, r1, #4
 800d94c:	6018      	str	r0, [r3, #0]
 800d94e:	062e      	lsls	r6, r5, #24
 800d950:	d501      	bpl.n	800d956 <_printf_i+0xba>
 800d952:	680d      	ldr	r5, [r1, #0]
 800d954:	e003      	b.n	800d95e <_printf_i+0xc2>
 800d956:	066d      	lsls	r5, r5, #25
 800d958:	d5fb      	bpl.n	800d952 <_printf_i+0xb6>
 800d95a:	680d      	ldr	r5, [r1, #0]
 800d95c:	b2ad      	uxth	r5, r5
 800d95e:	4b56      	ldr	r3, [pc, #344]	; (800dab8 <_printf_i+0x21c>)
 800d960:	2708      	movs	r7, #8
 800d962:	9303      	str	r3, [sp, #12]
 800d964:	2a6f      	cmp	r2, #111	; 0x6f
 800d966:	d000      	beq.n	800d96a <_printf_i+0xce>
 800d968:	3702      	adds	r7, #2
 800d96a:	0023      	movs	r3, r4
 800d96c:	2200      	movs	r2, #0
 800d96e:	3343      	adds	r3, #67	; 0x43
 800d970:	701a      	strb	r2, [r3, #0]
 800d972:	6863      	ldr	r3, [r4, #4]
 800d974:	60a3      	str	r3, [r4, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	db03      	blt.n	800d982 <_printf_i+0xe6>
 800d97a:	2204      	movs	r2, #4
 800d97c:	6821      	ldr	r1, [r4, #0]
 800d97e:	4391      	bics	r1, r2
 800d980:	6021      	str	r1, [r4, #0]
 800d982:	2d00      	cmp	r5, #0
 800d984:	d102      	bne.n	800d98c <_printf_i+0xf0>
 800d986:	9e04      	ldr	r6, [sp, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00c      	beq.n	800d9a6 <_printf_i+0x10a>
 800d98c:	9e04      	ldr	r6, [sp, #16]
 800d98e:	0028      	movs	r0, r5
 800d990:	0039      	movs	r1, r7
 800d992:	f7f2 fc59 	bl	8000248 <__aeabi_uidivmod>
 800d996:	9b03      	ldr	r3, [sp, #12]
 800d998:	3e01      	subs	r6, #1
 800d99a:	5c5b      	ldrb	r3, [r3, r1]
 800d99c:	7033      	strb	r3, [r6, #0]
 800d99e:	002b      	movs	r3, r5
 800d9a0:	0005      	movs	r5, r0
 800d9a2:	429f      	cmp	r7, r3
 800d9a4:	d9f3      	bls.n	800d98e <_printf_i+0xf2>
 800d9a6:	2f08      	cmp	r7, #8
 800d9a8:	d109      	bne.n	800d9be <_printf_i+0x122>
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	07db      	lsls	r3, r3, #31
 800d9ae:	d506      	bpl.n	800d9be <_printf_i+0x122>
 800d9b0:	6863      	ldr	r3, [r4, #4]
 800d9b2:	6922      	ldr	r2, [r4, #16]
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	dc02      	bgt.n	800d9be <_printf_i+0x122>
 800d9b8:	2330      	movs	r3, #48	; 0x30
 800d9ba:	3e01      	subs	r6, #1
 800d9bc:	7033      	strb	r3, [r6, #0]
 800d9be:	9b04      	ldr	r3, [sp, #16]
 800d9c0:	1b9b      	subs	r3, r3, r6
 800d9c2:	6123      	str	r3, [r4, #16]
 800d9c4:	9b07      	ldr	r3, [sp, #28]
 800d9c6:	0021      	movs	r1, r4
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	9805      	ldr	r0, [sp, #20]
 800d9cc:	9b06      	ldr	r3, [sp, #24]
 800d9ce:	aa09      	add	r2, sp, #36	; 0x24
 800d9d0:	f7ff fef4 	bl	800d7bc <_printf_common>
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	d14c      	bne.n	800da72 <_printf_i+0x1d6>
 800d9d8:	2001      	movs	r0, #1
 800d9da:	4240      	negs	r0, r0
 800d9dc:	b00b      	add	sp, #44	; 0x2c
 800d9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e0:	3145      	adds	r1, #69	; 0x45
 800d9e2:	700a      	strb	r2, [r1, #0]
 800d9e4:	4a34      	ldr	r2, [pc, #208]	; (800dab8 <_printf_i+0x21c>)
 800d9e6:	9203      	str	r2, [sp, #12]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	6821      	ldr	r1, [r4, #0]
 800d9ec:	ca20      	ldmia	r2!, {r5}
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	0608      	lsls	r0, r1, #24
 800d9f2:	d516      	bpl.n	800da22 <_printf_i+0x186>
 800d9f4:	07cb      	lsls	r3, r1, #31
 800d9f6:	d502      	bpl.n	800d9fe <_printf_i+0x162>
 800d9f8:	2320      	movs	r3, #32
 800d9fa:	4319      	orrs	r1, r3
 800d9fc:	6021      	str	r1, [r4, #0]
 800d9fe:	2710      	movs	r7, #16
 800da00:	2d00      	cmp	r5, #0
 800da02:	d1b2      	bne.n	800d96a <_printf_i+0xce>
 800da04:	2320      	movs	r3, #32
 800da06:	6822      	ldr	r2, [r4, #0]
 800da08:	439a      	bics	r2, r3
 800da0a:	6022      	str	r2, [r4, #0]
 800da0c:	e7ad      	b.n	800d96a <_printf_i+0xce>
 800da0e:	2220      	movs	r2, #32
 800da10:	6809      	ldr	r1, [r1, #0]
 800da12:	430a      	orrs	r2, r1
 800da14:	6022      	str	r2, [r4, #0]
 800da16:	0022      	movs	r2, r4
 800da18:	2178      	movs	r1, #120	; 0x78
 800da1a:	3245      	adds	r2, #69	; 0x45
 800da1c:	7011      	strb	r1, [r2, #0]
 800da1e:	4a27      	ldr	r2, [pc, #156]	; (800dabc <_printf_i+0x220>)
 800da20:	e7e1      	b.n	800d9e6 <_printf_i+0x14a>
 800da22:	0648      	lsls	r0, r1, #25
 800da24:	d5e6      	bpl.n	800d9f4 <_printf_i+0x158>
 800da26:	b2ad      	uxth	r5, r5
 800da28:	e7e4      	b.n	800d9f4 <_printf_i+0x158>
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	680d      	ldr	r5, [r1, #0]
 800da2e:	1d10      	adds	r0, r2, #4
 800da30:	6949      	ldr	r1, [r1, #20]
 800da32:	6018      	str	r0, [r3, #0]
 800da34:	6813      	ldr	r3, [r2, #0]
 800da36:	062e      	lsls	r6, r5, #24
 800da38:	d501      	bpl.n	800da3e <_printf_i+0x1a2>
 800da3a:	6019      	str	r1, [r3, #0]
 800da3c:	e002      	b.n	800da44 <_printf_i+0x1a8>
 800da3e:	066d      	lsls	r5, r5, #25
 800da40:	d5fb      	bpl.n	800da3a <_printf_i+0x19e>
 800da42:	8019      	strh	r1, [r3, #0]
 800da44:	2300      	movs	r3, #0
 800da46:	9e04      	ldr	r6, [sp, #16]
 800da48:	6123      	str	r3, [r4, #16]
 800da4a:	e7bb      	b.n	800d9c4 <_printf_i+0x128>
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	1d11      	adds	r1, r2, #4
 800da50:	6019      	str	r1, [r3, #0]
 800da52:	6816      	ldr	r6, [r2, #0]
 800da54:	2100      	movs	r1, #0
 800da56:	0030      	movs	r0, r6
 800da58:	6862      	ldr	r2, [r4, #4]
 800da5a:	f000 ff0f 	bl	800e87c <memchr>
 800da5e:	2800      	cmp	r0, #0
 800da60:	d001      	beq.n	800da66 <_printf_i+0x1ca>
 800da62:	1b80      	subs	r0, r0, r6
 800da64:	6060      	str	r0, [r4, #4]
 800da66:	6863      	ldr	r3, [r4, #4]
 800da68:	6123      	str	r3, [r4, #16]
 800da6a:	2300      	movs	r3, #0
 800da6c:	9a04      	ldr	r2, [sp, #16]
 800da6e:	7013      	strb	r3, [r2, #0]
 800da70:	e7a8      	b.n	800d9c4 <_printf_i+0x128>
 800da72:	6923      	ldr	r3, [r4, #16]
 800da74:	0032      	movs	r2, r6
 800da76:	9906      	ldr	r1, [sp, #24]
 800da78:	9805      	ldr	r0, [sp, #20]
 800da7a:	9d07      	ldr	r5, [sp, #28]
 800da7c:	47a8      	blx	r5
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	d0aa      	beq.n	800d9d8 <_printf_i+0x13c>
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	079b      	lsls	r3, r3, #30
 800da86:	d415      	bmi.n	800dab4 <_printf_i+0x218>
 800da88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da8a:	68e0      	ldr	r0, [r4, #12]
 800da8c:	4298      	cmp	r0, r3
 800da8e:	daa5      	bge.n	800d9dc <_printf_i+0x140>
 800da90:	0018      	movs	r0, r3
 800da92:	e7a3      	b.n	800d9dc <_printf_i+0x140>
 800da94:	0022      	movs	r2, r4
 800da96:	2301      	movs	r3, #1
 800da98:	9906      	ldr	r1, [sp, #24]
 800da9a:	9805      	ldr	r0, [sp, #20]
 800da9c:	9e07      	ldr	r6, [sp, #28]
 800da9e:	3219      	adds	r2, #25
 800daa0:	47b0      	blx	r6
 800daa2:	1c43      	adds	r3, r0, #1
 800daa4:	d098      	beq.n	800d9d8 <_printf_i+0x13c>
 800daa6:	3501      	adds	r5, #1
 800daa8:	68e3      	ldr	r3, [r4, #12]
 800daaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	42ab      	cmp	r3, r5
 800dab0:	dcf0      	bgt.n	800da94 <_printf_i+0x1f8>
 800dab2:	e7e9      	b.n	800da88 <_printf_i+0x1ec>
 800dab4:	2500      	movs	r5, #0
 800dab6:	e7f7      	b.n	800daa8 <_printf_i+0x20c>
 800dab8:	0801030e 	.word	0x0801030e
 800dabc:	0801031f 	.word	0x0801031f

0800dac0 <_sbrk_r>:
 800dac0:	2300      	movs	r3, #0
 800dac2:	b570      	push	{r4, r5, r6, lr}
 800dac4:	4d06      	ldr	r5, [pc, #24]	; (800dae0 <_sbrk_r+0x20>)
 800dac6:	0004      	movs	r4, r0
 800dac8:	0008      	movs	r0, r1
 800daca:	602b      	str	r3, [r5, #0]
 800dacc:	f7f5 fe20 	bl	8003710 <_sbrk>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d103      	bne.n	800dadc <_sbrk_r+0x1c>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d000      	beq.n	800dadc <_sbrk_r+0x1c>
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	bd70      	pop	{r4, r5, r6, pc}
 800dade:	46c0      	nop			; (mov r8, r8)
 800dae0:	20001080 	.word	0x20001080

0800dae4 <_vsiprintf_r>:
 800dae4:	b500      	push	{lr}
 800dae6:	b09b      	sub	sp, #108	; 0x6c
 800dae8:	9100      	str	r1, [sp, #0]
 800daea:	9104      	str	r1, [sp, #16]
 800daec:	4906      	ldr	r1, [pc, #24]	; (800db08 <_vsiprintf_r+0x24>)
 800daee:	9105      	str	r1, [sp, #20]
 800daf0:	9102      	str	r1, [sp, #8]
 800daf2:	4906      	ldr	r1, [pc, #24]	; (800db0c <_vsiprintf_r+0x28>)
 800daf4:	9103      	str	r1, [sp, #12]
 800daf6:	4669      	mov	r1, sp
 800daf8:	f001 fb06 	bl	800f108 <_svfiprintf_r>
 800dafc:	2300      	movs	r3, #0
 800dafe:	9a00      	ldr	r2, [sp, #0]
 800db00:	7013      	strb	r3, [r2, #0]
 800db02:	b01b      	add	sp, #108	; 0x6c
 800db04:	bd00      	pop	{pc}
 800db06:	46c0      	nop			; (mov r8, r8)
 800db08:	7fffffff 	.word	0x7fffffff
 800db0c:	ffff0208 	.word	0xffff0208

0800db10 <vsiprintf>:
 800db10:	b510      	push	{r4, lr}
 800db12:	0013      	movs	r3, r2
 800db14:	000a      	movs	r2, r1
 800db16:	0001      	movs	r1, r0
 800db18:	4802      	ldr	r0, [pc, #8]	; (800db24 <vsiprintf+0x14>)
 800db1a:	6800      	ldr	r0, [r0, #0]
 800db1c:	f7ff ffe2 	bl	800dae4 <_vsiprintf_r>
 800db20:	bd10      	pop	{r4, pc}
 800db22:	46c0      	nop			; (mov r8, r8)
 800db24:	200000ac 	.word	0x200000ac

0800db28 <quorem>:
 800db28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2a:	0006      	movs	r6, r0
 800db2c:	690b      	ldr	r3, [r1, #16]
 800db2e:	6932      	ldr	r2, [r6, #16]
 800db30:	b087      	sub	sp, #28
 800db32:	2000      	movs	r0, #0
 800db34:	9103      	str	r1, [sp, #12]
 800db36:	429a      	cmp	r2, r3
 800db38:	db65      	blt.n	800dc06 <quorem+0xde>
 800db3a:	3b01      	subs	r3, #1
 800db3c:	009c      	lsls	r4, r3, #2
 800db3e:	9300      	str	r3, [sp, #0]
 800db40:	000b      	movs	r3, r1
 800db42:	3314      	adds	r3, #20
 800db44:	9305      	str	r3, [sp, #20]
 800db46:	191b      	adds	r3, r3, r4
 800db48:	9304      	str	r3, [sp, #16]
 800db4a:	0033      	movs	r3, r6
 800db4c:	3314      	adds	r3, #20
 800db4e:	9302      	str	r3, [sp, #8]
 800db50:	191c      	adds	r4, r3, r4
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	6827      	ldr	r7, [r4, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	0038      	movs	r0, r7
 800db5a:	1c5d      	adds	r5, r3, #1
 800db5c:	0029      	movs	r1, r5
 800db5e:	9301      	str	r3, [sp, #4]
 800db60:	f7f2 faec 	bl	800013c <__udivsi3>
 800db64:	9001      	str	r0, [sp, #4]
 800db66:	42af      	cmp	r7, r5
 800db68:	d324      	bcc.n	800dbb4 <quorem+0x8c>
 800db6a:	2500      	movs	r5, #0
 800db6c:	46ac      	mov	ip, r5
 800db6e:	9802      	ldr	r0, [sp, #8]
 800db70:	9f05      	ldr	r7, [sp, #20]
 800db72:	cf08      	ldmia	r7!, {r3}
 800db74:	9a01      	ldr	r2, [sp, #4]
 800db76:	b299      	uxth	r1, r3
 800db78:	4351      	muls	r1, r2
 800db7a:	0c1b      	lsrs	r3, r3, #16
 800db7c:	4353      	muls	r3, r2
 800db7e:	1949      	adds	r1, r1, r5
 800db80:	0c0a      	lsrs	r2, r1, #16
 800db82:	189b      	adds	r3, r3, r2
 800db84:	6802      	ldr	r2, [r0, #0]
 800db86:	b289      	uxth	r1, r1
 800db88:	b292      	uxth	r2, r2
 800db8a:	4462      	add	r2, ip
 800db8c:	1a52      	subs	r2, r2, r1
 800db8e:	6801      	ldr	r1, [r0, #0]
 800db90:	0c1d      	lsrs	r5, r3, #16
 800db92:	0c09      	lsrs	r1, r1, #16
 800db94:	b29b      	uxth	r3, r3
 800db96:	1acb      	subs	r3, r1, r3
 800db98:	1411      	asrs	r1, r2, #16
 800db9a:	185b      	adds	r3, r3, r1
 800db9c:	1419      	asrs	r1, r3, #16
 800db9e:	b292      	uxth	r2, r2
 800dba0:	041b      	lsls	r3, r3, #16
 800dba2:	431a      	orrs	r2, r3
 800dba4:	9b04      	ldr	r3, [sp, #16]
 800dba6:	468c      	mov	ip, r1
 800dba8:	c004      	stmia	r0!, {r2}
 800dbaa:	42bb      	cmp	r3, r7
 800dbac:	d2e1      	bcs.n	800db72 <quorem+0x4a>
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d030      	beq.n	800dc16 <quorem+0xee>
 800dbb4:	0030      	movs	r0, r6
 800dbb6:	9903      	ldr	r1, [sp, #12]
 800dbb8:	f001 f900 	bl	800edbc <__mcmp>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	db21      	blt.n	800dc04 <quorem+0xdc>
 800dbc0:	0030      	movs	r0, r6
 800dbc2:	2400      	movs	r4, #0
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	9903      	ldr	r1, [sp, #12]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	3014      	adds	r0, #20
 800dbce:	3114      	adds	r1, #20
 800dbd0:	6803      	ldr	r3, [r0, #0]
 800dbd2:	c920      	ldmia	r1!, {r5}
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	1914      	adds	r4, r2, r4
 800dbd8:	b2aa      	uxth	r2, r5
 800dbda:	1aa2      	subs	r2, r4, r2
 800dbdc:	0c1b      	lsrs	r3, r3, #16
 800dbde:	0c2d      	lsrs	r5, r5, #16
 800dbe0:	1414      	asrs	r4, r2, #16
 800dbe2:	1b5b      	subs	r3, r3, r5
 800dbe4:	191b      	adds	r3, r3, r4
 800dbe6:	141c      	asrs	r4, r3, #16
 800dbe8:	b292      	uxth	r2, r2
 800dbea:	041b      	lsls	r3, r3, #16
 800dbec:	4313      	orrs	r3, r2
 800dbee:	c008      	stmia	r0!, {r3}
 800dbf0:	9b04      	ldr	r3, [sp, #16]
 800dbf2:	428b      	cmp	r3, r1
 800dbf4:	d2ec      	bcs.n	800dbd0 <quorem+0xa8>
 800dbf6:	9b00      	ldr	r3, [sp, #0]
 800dbf8:	9a02      	ldr	r2, [sp, #8]
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	18d3      	adds	r3, r2, r3
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	2a00      	cmp	r2, #0
 800dc02:	d015      	beq.n	800dc30 <quorem+0x108>
 800dc04:	9801      	ldr	r0, [sp, #4]
 800dc06:	b007      	add	sp, #28
 800dc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d106      	bne.n	800dc1e <quorem+0xf6>
 800dc10:	9b00      	ldr	r3, [sp, #0]
 800dc12:	3b01      	subs	r3, #1
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	9b02      	ldr	r3, [sp, #8]
 800dc18:	3c04      	subs	r4, #4
 800dc1a:	42a3      	cmp	r3, r4
 800dc1c:	d3f5      	bcc.n	800dc0a <quorem+0xe2>
 800dc1e:	9b00      	ldr	r3, [sp, #0]
 800dc20:	6133      	str	r3, [r6, #16]
 800dc22:	e7c7      	b.n	800dbb4 <quorem+0x8c>
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	2a00      	cmp	r2, #0
 800dc28:	d106      	bne.n	800dc38 <quorem+0x110>
 800dc2a:	9a00      	ldr	r2, [sp, #0]
 800dc2c:	3a01      	subs	r2, #1
 800dc2e:	9200      	str	r2, [sp, #0]
 800dc30:	9a02      	ldr	r2, [sp, #8]
 800dc32:	3b04      	subs	r3, #4
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d3f5      	bcc.n	800dc24 <quorem+0xfc>
 800dc38:	9b00      	ldr	r3, [sp, #0]
 800dc3a:	6133      	str	r3, [r6, #16]
 800dc3c:	e7e2      	b.n	800dc04 <quorem+0xdc>
	...

0800dc40 <_dtoa_r>:
 800dc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc42:	b09d      	sub	sp, #116	; 0x74
 800dc44:	9202      	str	r2, [sp, #8]
 800dc46:	9303      	str	r3, [sp, #12]
 800dc48:	9b02      	ldr	r3, [sp, #8]
 800dc4a:	9c03      	ldr	r4, [sp, #12]
 800dc4c:	9308      	str	r3, [sp, #32]
 800dc4e:	9409      	str	r4, [sp, #36]	; 0x24
 800dc50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dc52:	0007      	movs	r7, r0
 800dc54:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800dc56:	2c00      	cmp	r4, #0
 800dc58:	d10e      	bne.n	800dc78 <_dtoa_r+0x38>
 800dc5a:	2010      	movs	r0, #16
 800dc5c:	f7ff f9ba 	bl	800cfd4 <malloc>
 800dc60:	1e02      	subs	r2, r0, #0
 800dc62:	6278      	str	r0, [r7, #36]	; 0x24
 800dc64:	d104      	bne.n	800dc70 <_dtoa_r+0x30>
 800dc66:	21ea      	movs	r1, #234	; 0xea
 800dc68:	4bc7      	ldr	r3, [pc, #796]	; (800df88 <_dtoa_r+0x348>)
 800dc6a:	48c8      	ldr	r0, [pc, #800]	; (800df8c <_dtoa_r+0x34c>)
 800dc6c:	f001 fb4c 	bl	800f308 <__assert_func>
 800dc70:	6044      	str	r4, [r0, #4]
 800dc72:	6084      	str	r4, [r0, #8]
 800dc74:	6004      	str	r4, [r0, #0]
 800dc76:	60c4      	str	r4, [r0, #12]
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	6819      	ldr	r1, [r3, #0]
 800dc7c:	2900      	cmp	r1, #0
 800dc7e:	d00a      	beq.n	800dc96 <_dtoa_r+0x56>
 800dc80:	685a      	ldr	r2, [r3, #4]
 800dc82:	2301      	movs	r3, #1
 800dc84:	4093      	lsls	r3, r2
 800dc86:	604a      	str	r2, [r1, #4]
 800dc88:	608b      	str	r3, [r1, #8]
 800dc8a:	0038      	movs	r0, r7
 800dc8c:	f000 fe56 	bl	800e93c <_Bfree>
 800dc90:	2200      	movs	r2, #0
 800dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc94:	601a      	str	r2, [r3, #0]
 800dc96:	9b03      	ldr	r3, [sp, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	da20      	bge.n	800dcde <_dtoa_r+0x9e>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	602b      	str	r3, [r5, #0]
 800dca0:	9b03      	ldr	r3, [sp, #12]
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	085b      	lsrs	r3, r3, #1
 800dca6:	9309      	str	r3, [sp, #36]	; 0x24
 800dca8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dcaa:	4bb9      	ldr	r3, [pc, #740]	; (800df90 <_dtoa_r+0x350>)
 800dcac:	4ab8      	ldr	r2, [pc, #736]	; (800df90 <_dtoa_r+0x350>)
 800dcae:	402b      	ands	r3, r5
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d117      	bne.n	800dce4 <_dtoa_r+0xa4>
 800dcb4:	4bb7      	ldr	r3, [pc, #732]	; (800df94 <_dtoa_r+0x354>)
 800dcb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dcb8:	0328      	lsls	r0, r5, #12
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	9b02      	ldr	r3, [sp, #8]
 800dcbe:	0b00      	lsrs	r0, r0, #12
 800dcc0:	4318      	orrs	r0, r3
 800dcc2:	d101      	bne.n	800dcc8 <_dtoa_r+0x88>
 800dcc4:	f000 fdbf 	bl	800e846 <_dtoa_r+0xc06>
 800dcc8:	48b3      	ldr	r0, [pc, #716]	; (800df98 <_dtoa_r+0x358>)
 800dcca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dccc:	9006      	str	r0, [sp, #24]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d002      	beq.n	800dcd8 <_dtoa_r+0x98>
 800dcd2:	4bb2      	ldr	r3, [pc, #712]	; (800df9c <_dtoa_r+0x35c>)
 800dcd4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800dcd6:	6013      	str	r3, [r2, #0]
 800dcd8:	9806      	ldr	r0, [sp, #24]
 800dcda:	b01d      	add	sp, #116	; 0x74
 800dcdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcde:	2300      	movs	r3, #0
 800dce0:	602b      	str	r3, [r5, #0]
 800dce2:	e7e1      	b.n	800dca8 <_dtoa_r+0x68>
 800dce4:	9b08      	ldr	r3, [sp, #32]
 800dce6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dce8:	9312      	str	r3, [sp, #72]	; 0x48
 800dcea:	9413      	str	r4, [sp, #76]	; 0x4c
 800dcec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dcee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	f7f2 fba8 	bl	8000448 <__aeabi_dcmpeq>
 800dcf8:	1e04      	subs	r4, r0, #0
 800dcfa:	d009      	beq.n	800dd10 <_dtoa_r+0xd0>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	4ba7      	ldr	r3, [pc, #668]	; (800dfa0 <_dtoa_r+0x360>)
 800dd04:	9306      	str	r3, [sp, #24]
 800dd06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d0e5      	beq.n	800dcd8 <_dtoa_r+0x98>
 800dd0c:	4ba5      	ldr	r3, [pc, #660]	; (800dfa4 <_dtoa_r+0x364>)
 800dd0e:	e7e1      	b.n	800dcd4 <_dtoa_r+0x94>
 800dd10:	ab1a      	add	r3, sp, #104	; 0x68
 800dd12:	9301      	str	r3, [sp, #4]
 800dd14:	ab1b      	add	r3, sp, #108	; 0x6c
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	0038      	movs	r0, r7
 800dd1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd1e:	f001 f901 	bl	800ef24 <__d2b>
 800dd22:	006e      	lsls	r6, r5, #1
 800dd24:	9005      	str	r0, [sp, #20]
 800dd26:	0d76      	lsrs	r6, r6, #21
 800dd28:	d100      	bne.n	800dd2c <_dtoa_r+0xec>
 800dd2a:	e07c      	b.n	800de26 <_dtoa_r+0x1e6>
 800dd2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dd2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dd30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd32:	4a9d      	ldr	r2, [pc, #628]	; (800dfa8 <_dtoa_r+0x368>)
 800dd34:	031b      	lsls	r3, r3, #12
 800dd36:	0b1b      	lsrs	r3, r3, #12
 800dd38:	431a      	orrs	r2, r3
 800dd3a:	0011      	movs	r1, r2
 800dd3c:	4b9b      	ldr	r3, [pc, #620]	; (800dfac <_dtoa_r+0x36c>)
 800dd3e:	9418      	str	r4, [sp, #96]	; 0x60
 800dd40:	18f6      	adds	r6, r6, r3
 800dd42:	2200      	movs	r2, #0
 800dd44:	4b9a      	ldr	r3, [pc, #616]	; (800dfb0 <_dtoa_r+0x370>)
 800dd46:	f7f4 fcc7 	bl	80026d8 <__aeabi_dsub>
 800dd4a:	4a9a      	ldr	r2, [pc, #616]	; (800dfb4 <_dtoa_r+0x374>)
 800dd4c:	4b9a      	ldr	r3, [pc, #616]	; (800dfb8 <_dtoa_r+0x378>)
 800dd4e:	f7f4 fa57 	bl	8002200 <__aeabi_dmul>
 800dd52:	4a9a      	ldr	r2, [pc, #616]	; (800dfbc <_dtoa_r+0x37c>)
 800dd54:	4b9a      	ldr	r3, [pc, #616]	; (800dfc0 <_dtoa_r+0x380>)
 800dd56:	f7f3 fb15 	bl	8001384 <__aeabi_dadd>
 800dd5a:	0004      	movs	r4, r0
 800dd5c:	0030      	movs	r0, r6
 800dd5e:	000d      	movs	r5, r1
 800dd60:	f7f5 f8a0 	bl	8002ea4 <__aeabi_i2d>
 800dd64:	4a97      	ldr	r2, [pc, #604]	; (800dfc4 <_dtoa_r+0x384>)
 800dd66:	4b98      	ldr	r3, [pc, #608]	; (800dfc8 <_dtoa_r+0x388>)
 800dd68:	f7f4 fa4a 	bl	8002200 <__aeabi_dmul>
 800dd6c:	0002      	movs	r2, r0
 800dd6e:	000b      	movs	r3, r1
 800dd70:	0020      	movs	r0, r4
 800dd72:	0029      	movs	r1, r5
 800dd74:	f7f3 fb06 	bl	8001384 <__aeabi_dadd>
 800dd78:	0004      	movs	r4, r0
 800dd7a:	000d      	movs	r5, r1
 800dd7c:	f7f5 f85c 	bl	8002e38 <__aeabi_d2iz>
 800dd80:	2200      	movs	r2, #0
 800dd82:	9002      	str	r0, [sp, #8]
 800dd84:	2300      	movs	r3, #0
 800dd86:	0020      	movs	r0, r4
 800dd88:	0029      	movs	r1, r5
 800dd8a:	f7f2 fb63 	bl	8000454 <__aeabi_dcmplt>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d00b      	beq.n	800ddaa <_dtoa_r+0x16a>
 800dd92:	9802      	ldr	r0, [sp, #8]
 800dd94:	f7f5 f886 	bl	8002ea4 <__aeabi_i2d>
 800dd98:	002b      	movs	r3, r5
 800dd9a:	0022      	movs	r2, r4
 800dd9c:	f7f2 fb54 	bl	8000448 <__aeabi_dcmpeq>
 800dda0:	4243      	negs	r3, r0
 800dda2:	4158      	adcs	r0, r3
 800dda4:	9b02      	ldr	r3, [sp, #8]
 800dda6:	1a1b      	subs	r3, r3, r0
 800dda8:	9302      	str	r3, [sp, #8]
 800ddaa:	2301      	movs	r3, #1
 800ddac:	9316      	str	r3, [sp, #88]	; 0x58
 800ddae:	9b02      	ldr	r3, [sp, #8]
 800ddb0:	2b16      	cmp	r3, #22
 800ddb2:	d80f      	bhi.n	800ddd4 <_dtoa_r+0x194>
 800ddb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ddb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ddb8:	00da      	lsls	r2, r3, #3
 800ddba:	4b84      	ldr	r3, [pc, #528]	; (800dfcc <_dtoa_r+0x38c>)
 800ddbc:	189b      	adds	r3, r3, r2
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	f7f2 fb47 	bl	8000454 <__aeabi_dcmplt>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d049      	beq.n	800de5e <_dtoa_r+0x21e>
 800ddca:	9b02      	ldr	r3, [sp, #8]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	9302      	str	r3, [sp, #8]
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9316      	str	r3, [sp, #88]	; 0x58
 800ddd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ddd6:	1b9e      	subs	r6, r3, r6
 800ddd8:	2300      	movs	r3, #0
 800ddda:	930a      	str	r3, [sp, #40]	; 0x28
 800dddc:	0033      	movs	r3, r6
 800ddde:	3b01      	subs	r3, #1
 800dde0:	930d      	str	r3, [sp, #52]	; 0x34
 800dde2:	d504      	bpl.n	800ddee <_dtoa_r+0x1ae>
 800dde4:	2301      	movs	r3, #1
 800dde6:	1b9b      	subs	r3, r3, r6
 800dde8:	930a      	str	r3, [sp, #40]	; 0x28
 800ddea:	2300      	movs	r3, #0
 800ddec:	930d      	str	r3, [sp, #52]	; 0x34
 800ddee:	9b02      	ldr	r3, [sp, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	db36      	blt.n	800de62 <_dtoa_r+0x222>
 800ddf4:	9a02      	ldr	r2, [sp, #8]
 800ddf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddf8:	4694      	mov	ip, r2
 800ddfa:	4463      	add	r3, ip
 800ddfc:	930d      	str	r3, [sp, #52]	; 0x34
 800ddfe:	2300      	movs	r3, #0
 800de00:	9215      	str	r2, [sp, #84]	; 0x54
 800de02:	930e      	str	r3, [sp, #56]	; 0x38
 800de04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de06:	2401      	movs	r4, #1
 800de08:	2b09      	cmp	r3, #9
 800de0a:	d864      	bhi.n	800ded6 <_dtoa_r+0x296>
 800de0c:	2b05      	cmp	r3, #5
 800de0e:	dd02      	ble.n	800de16 <_dtoa_r+0x1d6>
 800de10:	2400      	movs	r4, #0
 800de12:	3b04      	subs	r3, #4
 800de14:	9322      	str	r3, [sp, #136]	; 0x88
 800de16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de18:	1e98      	subs	r0, r3, #2
 800de1a:	2803      	cmp	r0, #3
 800de1c:	d864      	bhi.n	800dee8 <_dtoa_r+0x2a8>
 800de1e:	f7f2 f979 	bl	8000114 <__gnu_thumb1_case_uqi>
 800de22:	3829      	.short	0x3829
 800de24:	5836      	.short	0x5836
 800de26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800de28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800de2a:	189e      	adds	r6, r3, r2
 800de2c:	4b68      	ldr	r3, [pc, #416]	; (800dfd0 <_dtoa_r+0x390>)
 800de2e:	18f2      	adds	r2, r6, r3
 800de30:	2a20      	cmp	r2, #32
 800de32:	dd0f      	ble.n	800de54 <_dtoa_r+0x214>
 800de34:	2340      	movs	r3, #64	; 0x40
 800de36:	1a9b      	subs	r3, r3, r2
 800de38:	409d      	lsls	r5, r3
 800de3a:	4b66      	ldr	r3, [pc, #408]	; (800dfd4 <_dtoa_r+0x394>)
 800de3c:	9802      	ldr	r0, [sp, #8]
 800de3e:	18f3      	adds	r3, r6, r3
 800de40:	40d8      	lsrs	r0, r3
 800de42:	4328      	orrs	r0, r5
 800de44:	f7f5 f85e 	bl	8002f04 <__aeabi_ui2d>
 800de48:	2301      	movs	r3, #1
 800de4a:	4c63      	ldr	r4, [pc, #396]	; (800dfd8 <_dtoa_r+0x398>)
 800de4c:	3e01      	subs	r6, #1
 800de4e:	1909      	adds	r1, r1, r4
 800de50:	9318      	str	r3, [sp, #96]	; 0x60
 800de52:	e776      	b.n	800dd42 <_dtoa_r+0x102>
 800de54:	2320      	movs	r3, #32
 800de56:	9802      	ldr	r0, [sp, #8]
 800de58:	1a9b      	subs	r3, r3, r2
 800de5a:	4098      	lsls	r0, r3
 800de5c:	e7f2      	b.n	800de44 <_dtoa_r+0x204>
 800de5e:	9016      	str	r0, [sp, #88]	; 0x58
 800de60:	e7b8      	b.n	800ddd4 <_dtoa_r+0x194>
 800de62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de64:	9a02      	ldr	r2, [sp, #8]
 800de66:	1a9b      	subs	r3, r3, r2
 800de68:	930a      	str	r3, [sp, #40]	; 0x28
 800de6a:	4253      	negs	r3, r2
 800de6c:	930e      	str	r3, [sp, #56]	; 0x38
 800de6e:	2300      	movs	r3, #0
 800de70:	9315      	str	r3, [sp, #84]	; 0x54
 800de72:	e7c7      	b.n	800de04 <_dtoa_r+0x1c4>
 800de74:	2300      	movs	r3, #0
 800de76:	930f      	str	r3, [sp, #60]	; 0x3c
 800de78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800de7a:	930c      	str	r3, [sp, #48]	; 0x30
 800de7c:	9307      	str	r3, [sp, #28]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	dc13      	bgt.n	800deaa <_dtoa_r+0x26a>
 800de82:	2301      	movs	r3, #1
 800de84:	001a      	movs	r2, r3
 800de86:	930c      	str	r3, [sp, #48]	; 0x30
 800de88:	9307      	str	r3, [sp, #28]
 800de8a:	9223      	str	r2, [sp, #140]	; 0x8c
 800de8c:	e00d      	b.n	800deaa <_dtoa_r+0x26a>
 800de8e:	2301      	movs	r3, #1
 800de90:	e7f1      	b.n	800de76 <_dtoa_r+0x236>
 800de92:	2300      	movs	r3, #0
 800de94:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800de96:	930f      	str	r3, [sp, #60]	; 0x3c
 800de98:	4694      	mov	ip, r2
 800de9a:	9b02      	ldr	r3, [sp, #8]
 800de9c:	4463      	add	r3, ip
 800de9e:	930c      	str	r3, [sp, #48]	; 0x30
 800dea0:	3301      	adds	r3, #1
 800dea2:	9307      	str	r3, [sp, #28]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	dc00      	bgt.n	800deaa <_dtoa_r+0x26a>
 800dea8:	2301      	movs	r3, #1
 800deaa:	2200      	movs	r2, #0
 800deac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deae:	6042      	str	r2, [r0, #4]
 800deb0:	3204      	adds	r2, #4
 800deb2:	0015      	movs	r5, r2
 800deb4:	3514      	adds	r5, #20
 800deb6:	6841      	ldr	r1, [r0, #4]
 800deb8:	429d      	cmp	r5, r3
 800deba:	d919      	bls.n	800def0 <_dtoa_r+0x2b0>
 800debc:	0038      	movs	r0, r7
 800debe:	f000 fcf9 	bl	800e8b4 <_Balloc>
 800dec2:	9006      	str	r0, [sp, #24]
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d117      	bne.n	800def8 <_dtoa_r+0x2b8>
 800dec8:	21d5      	movs	r1, #213	; 0xd5
 800deca:	0002      	movs	r2, r0
 800decc:	4b43      	ldr	r3, [pc, #268]	; (800dfdc <_dtoa_r+0x39c>)
 800dece:	0049      	lsls	r1, r1, #1
 800ded0:	e6cb      	b.n	800dc6a <_dtoa_r+0x2a>
 800ded2:	2301      	movs	r3, #1
 800ded4:	e7de      	b.n	800de94 <_dtoa_r+0x254>
 800ded6:	2300      	movs	r3, #0
 800ded8:	940f      	str	r4, [sp, #60]	; 0x3c
 800deda:	9322      	str	r3, [sp, #136]	; 0x88
 800dedc:	3b01      	subs	r3, #1
 800dede:	930c      	str	r3, [sp, #48]	; 0x30
 800dee0:	9307      	str	r3, [sp, #28]
 800dee2:	2200      	movs	r2, #0
 800dee4:	3313      	adds	r3, #19
 800dee6:	e7d0      	b.n	800de8a <_dtoa_r+0x24a>
 800dee8:	2301      	movs	r3, #1
 800deea:	930f      	str	r3, [sp, #60]	; 0x3c
 800deec:	3b02      	subs	r3, #2
 800deee:	e7f6      	b.n	800dede <_dtoa_r+0x29e>
 800def0:	3101      	adds	r1, #1
 800def2:	6041      	str	r1, [r0, #4]
 800def4:	0052      	lsls	r2, r2, #1
 800def6:	e7dc      	b.n	800deb2 <_dtoa_r+0x272>
 800def8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defa:	9a06      	ldr	r2, [sp, #24]
 800defc:	601a      	str	r2, [r3, #0]
 800defe:	9b07      	ldr	r3, [sp, #28]
 800df00:	2b0e      	cmp	r3, #14
 800df02:	d900      	bls.n	800df06 <_dtoa_r+0x2c6>
 800df04:	e0eb      	b.n	800e0de <_dtoa_r+0x49e>
 800df06:	2c00      	cmp	r4, #0
 800df08:	d100      	bne.n	800df0c <_dtoa_r+0x2cc>
 800df0a:	e0e8      	b.n	800e0de <_dtoa_r+0x49e>
 800df0c:	9b02      	ldr	r3, [sp, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	dd68      	ble.n	800dfe4 <_dtoa_r+0x3a4>
 800df12:	001a      	movs	r2, r3
 800df14:	210f      	movs	r1, #15
 800df16:	4b2d      	ldr	r3, [pc, #180]	; (800dfcc <_dtoa_r+0x38c>)
 800df18:	400a      	ands	r2, r1
 800df1a:	00d2      	lsls	r2, r2, #3
 800df1c:	189b      	adds	r3, r3, r2
 800df1e:	681d      	ldr	r5, [r3, #0]
 800df20:	685e      	ldr	r6, [r3, #4]
 800df22:	9b02      	ldr	r3, [sp, #8]
 800df24:	111c      	asrs	r4, r3, #4
 800df26:	2302      	movs	r3, #2
 800df28:	9310      	str	r3, [sp, #64]	; 0x40
 800df2a:	9b02      	ldr	r3, [sp, #8]
 800df2c:	05db      	lsls	r3, r3, #23
 800df2e:	d50b      	bpl.n	800df48 <_dtoa_r+0x308>
 800df30:	4b2b      	ldr	r3, [pc, #172]	; (800dfe0 <_dtoa_r+0x3a0>)
 800df32:	400c      	ands	r4, r1
 800df34:	6a1a      	ldr	r2, [r3, #32]
 800df36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df38:	9812      	ldr	r0, [sp, #72]	; 0x48
 800df3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800df3c:	f7f3 fd5e 	bl	80019fc <__aeabi_ddiv>
 800df40:	2303      	movs	r3, #3
 800df42:	9008      	str	r0, [sp, #32]
 800df44:	9109      	str	r1, [sp, #36]	; 0x24
 800df46:	9310      	str	r3, [sp, #64]	; 0x40
 800df48:	4b25      	ldr	r3, [pc, #148]	; (800dfe0 <_dtoa_r+0x3a0>)
 800df4a:	9314      	str	r3, [sp, #80]	; 0x50
 800df4c:	2c00      	cmp	r4, #0
 800df4e:	d108      	bne.n	800df62 <_dtoa_r+0x322>
 800df50:	9808      	ldr	r0, [sp, #32]
 800df52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df54:	002a      	movs	r2, r5
 800df56:	0033      	movs	r3, r6
 800df58:	f7f3 fd50 	bl	80019fc <__aeabi_ddiv>
 800df5c:	9008      	str	r0, [sp, #32]
 800df5e:	9109      	str	r1, [sp, #36]	; 0x24
 800df60:	e05c      	b.n	800e01c <_dtoa_r+0x3dc>
 800df62:	2301      	movs	r3, #1
 800df64:	421c      	tst	r4, r3
 800df66:	d00b      	beq.n	800df80 <_dtoa_r+0x340>
 800df68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df6a:	0028      	movs	r0, r5
 800df6c:	3301      	adds	r3, #1
 800df6e:	9310      	str	r3, [sp, #64]	; 0x40
 800df70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df72:	0031      	movs	r1, r6
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	f7f4 f942 	bl	8002200 <__aeabi_dmul>
 800df7c:	0005      	movs	r5, r0
 800df7e:	000e      	movs	r6, r1
 800df80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df82:	1064      	asrs	r4, r4, #1
 800df84:	3308      	adds	r3, #8
 800df86:	e7e0      	b.n	800df4a <_dtoa_r+0x30a>
 800df88:	0801033d 	.word	0x0801033d
 800df8c:	08010354 	.word	0x08010354
 800df90:	7ff00000 	.word	0x7ff00000
 800df94:	0000270f 	.word	0x0000270f
 800df98:	08010339 	.word	0x08010339
 800df9c:	0801033c 	.word	0x0801033c
 800dfa0:	0801030c 	.word	0x0801030c
 800dfa4:	0801030d 	.word	0x0801030d
 800dfa8:	3ff00000 	.word	0x3ff00000
 800dfac:	fffffc01 	.word	0xfffffc01
 800dfb0:	3ff80000 	.word	0x3ff80000
 800dfb4:	636f4361 	.word	0x636f4361
 800dfb8:	3fd287a7 	.word	0x3fd287a7
 800dfbc:	8b60c8b3 	.word	0x8b60c8b3
 800dfc0:	3fc68a28 	.word	0x3fc68a28
 800dfc4:	509f79fb 	.word	0x509f79fb
 800dfc8:	3fd34413 	.word	0x3fd34413
 800dfcc:	08010448 	.word	0x08010448
 800dfd0:	00000432 	.word	0x00000432
 800dfd4:	00000412 	.word	0x00000412
 800dfd8:	fe100000 	.word	0xfe100000
 800dfdc:	080103af 	.word	0x080103af
 800dfe0:	08010420 	.word	0x08010420
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	9310      	str	r3, [sp, #64]	; 0x40
 800dfe8:	9b02      	ldr	r3, [sp, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d016      	beq.n	800e01c <_dtoa_r+0x3dc>
 800dfee:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dff0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dff2:	425c      	negs	r4, r3
 800dff4:	230f      	movs	r3, #15
 800dff6:	4ab6      	ldr	r2, [pc, #728]	; (800e2d0 <_dtoa_r+0x690>)
 800dff8:	4023      	ands	r3, r4
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	18d3      	adds	r3, r2, r3
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	f7f4 f8fd 	bl	8002200 <__aeabi_dmul>
 800e006:	2601      	movs	r6, #1
 800e008:	2300      	movs	r3, #0
 800e00a:	9008      	str	r0, [sp, #32]
 800e00c:	9109      	str	r1, [sp, #36]	; 0x24
 800e00e:	4db1      	ldr	r5, [pc, #708]	; (800e2d4 <_dtoa_r+0x694>)
 800e010:	1124      	asrs	r4, r4, #4
 800e012:	2c00      	cmp	r4, #0
 800e014:	d000      	beq.n	800e018 <_dtoa_r+0x3d8>
 800e016:	e094      	b.n	800e142 <_dtoa_r+0x502>
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d19f      	bne.n	800df5c <_dtoa_r+0x31c>
 800e01c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d100      	bne.n	800e024 <_dtoa_r+0x3e4>
 800e022:	e09b      	b.n	800e15c <_dtoa_r+0x51c>
 800e024:	9c08      	ldr	r4, [sp, #32]
 800e026:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e028:	2200      	movs	r2, #0
 800e02a:	0020      	movs	r0, r4
 800e02c:	0029      	movs	r1, r5
 800e02e:	4baa      	ldr	r3, [pc, #680]	; (800e2d8 <_dtoa_r+0x698>)
 800e030:	f7f2 fa10 	bl	8000454 <__aeabi_dcmplt>
 800e034:	2800      	cmp	r0, #0
 800e036:	d100      	bne.n	800e03a <_dtoa_r+0x3fa>
 800e038:	e090      	b.n	800e15c <_dtoa_r+0x51c>
 800e03a:	9b07      	ldr	r3, [sp, #28]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d100      	bne.n	800e042 <_dtoa_r+0x402>
 800e040:	e08c      	b.n	800e15c <_dtoa_r+0x51c>
 800e042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e044:	2b00      	cmp	r3, #0
 800e046:	dd46      	ble.n	800e0d6 <_dtoa_r+0x496>
 800e048:	9b02      	ldr	r3, [sp, #8]
 800e04a:	2200      	movs	r2, #0
 800e04c:	0020      	movs	r0, r4
 800e04e:	0029      	movs	r1, r5
 800e050:	1e5e      	subs	r6, r3, #1
 800e052:	4ba2      	ldr	r3, [pc, #648]	; (800e2dc <_dtoa_r+0x69c>)
 800e054:	f7f4 f8d4 	bl	8002200 <__aeabi_dmul>
 800e058:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e05a:	9008      	str	r0, [sp, #32]
 800e05c:	9109      	str	r1, [sp, #36]	; 0x24
 800e05e:	3301      	adds	r3, #1
 800e060:	9310      	str	r3, [sp, #64]	; 0x40
 800e062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e064:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e066:	9c08      	ldr	r4, [sp, #32]
 800e068:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e06a:	9314      	str	r3, [sp, #80]	; 0x50
 800e06c:	f7f4 ff1a 	bl	8002ea4 <__aeabi_i2d>
 800e070:	0022      	movs	r2, r4
 800e072:	002b      	movs	r3, r5
 800e074:	f7f4 f8c4 	bl	8002200 <__aeabi_dmul>
 800e078:	2200      	movs	r2, #0
 800e07a:	4b99      	ldr	r3, [pc, #612]	; (800e2e0 <_dtoa_r+0x6a0>)
 800e07c:	f7f3 f982 	bl	8001384 <__aeabi_dadd>
 800e080:	9010      	str	r0, [sp, #64]	; 0x40
 800e082:	9111      	str	r1, [sp, #68]	; 0x44
 800e084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e088:	9208      	str	r2, [sp, #32]
 800e08a:	9309      	str	r3, [sp, #36]	; 0x24
 800e08c:	4a95      	ldr	r2, [pc, #596]	; (800e2e4 <_dtoa_r+0x6a4>)
 800e08e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e090:	4694      	mov	ip, r2
 800e092:	4463      	add	r3, ip
 800e094:	9317      	str	r3, [sp, #92]	; 0x5c
 800e096:	9309      	str	r3, [sp, #36]	; 0x24
 800e098:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d161      	bne.n	800e162 <_dtoa_r+0x522>
 800e09e:	2200      	movs	r2, #0
 800e0a0:	0020      	movs	r0, r4
 800e0a2:	0029      	movs	r1, r5
 800e0a4:	4b90      	ldr	r3, [pc, #576]	; (800e2e8 <_dtoa_r+0x6a8>)
 800e0a6:	f7f4 fb17 	bl	80026d8 <__aeabi_dsub>
 800e0aa:	9a08      	ldr	r2, [sp, #32]
 800e0ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0ae:	0004      	movs	r4, r0
 800e0b0:	000d      	movs	r5, r1
 800e0b2:	f7f2 f9e3 	bl	800047c <__aeabi_dcmpgt>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d000      	beq.n	800e0bc <_dtoa_r+0x47c>
 800e0ba:	e2af      	b.n	800e61c <_dtoa_r+0x9dc>
 800e0bc:	488b      	ldr	r0, [pc, #556]	; (800e2ec <_dtoa_r+0x6ac>)
 800e0be:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e0c0:	4684      	mov	ip, r0
 800e0c2:	4461      	add	r1, ip
 800e0c4:	000b      	movs	r3, r1
 800e0c6:	0020      	movs	r0, r4
 800e0c8:	0029      	movs	r1, r5
 800e0ca:	9a08      	ldr	r2, [sp, #32]
 800e0cc:	f7f2 f9c2 	bl	8000454 <__aeabi_dcmplt>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d000      	beq.n	800e0d6 <_dtoa_r+0x496>
 800e0d4:	e29f      	b.n	800e616 <_dtoa_r+0x9d6>
 800e0d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e0d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e0da:	9308      	str	r3, [sp, #32]
 800e0dc:	9409      	str	r4, [sp, #36]	; 0x24
 800e0de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	da00      	bge.n	800e0e6 <_dtoa_r+0x4a6>
 800e0e4:	e172      	b.n	800e3cc <_dtoa_r+0x78c>
 800e0e6:	9a02      	ldr	r2, [sp, #8]
 800e0e8:	2a0e      	cmp	r2, #14
 800e0ea:	dd00      	ble.n	800e0ee <_dtoa_r+0x4ae>
 800e0ec:	e16e      	b.n	800e3cc <_dtoa_r+0x78c>
 800e0ee:	4b78      	ldr	r3, [pc, #480]	; (800e2d0 <_dtoa_r+0x690>)
 800e0f0:	00d2      	lsls	r2, r2, #3
 800e0f2:	189b      	adds	r3, r3, r2
 800e0f4:	685c      	ldr	r4, [r3, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	930a      	str	r3, [sp, #40]	; 0x28
 800e0fa:	940b      	str	r4, [sp, #44]	; 0x2c
 800e0fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	db00      	blt.n	800e104 <_dtoa_r+0x4c4>
 800e102:	e0f7      	b.n	800e2f4 <_dtoa_r+0x6b4>
 800e104:	9b07      	ldr	r3, [sp, #28]
 800e106:	2b00      	cmp	r3, #0
 800e108:	dd00      	ble.n	800e10c <_dtoa_r+0x4cc>
 800e10a:	e0f3      	b.n	800e2f4 <_dtoa_r+0x6b4>
 800e10c:	d000      	beq.n	800e110 <_dtoa_r+0x4d0>
 800e10e:	e282      	b.n	800e616 <_dtoa_r+0x9d6>
 800e110:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e114:	2200      	movs	r2, #0
 800e116:	4b74      	ldr	r3, [pc, #464]	; (800e2e8 <_dtoa_r+0x6a8>)
 800e118:	f7f4 f872 	bl	8002200 <__aeabi_dmul>
 800e11c:	9a08      	ldr	r2, [sp, #32]
 800e11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e120:	f7f2 f9b6 	bl	8000490 <__aeabi_dcmpge>
 800e124:	9e07      	ldr	r6, [sp, #28]
 800e126:	0035      	movs	r5, r6
 800e128:	2800      	cmp	r0, #0
 800e12a:	d000      	beq.n	800e12e <_dtoa_r+0x4ee>
 800e12c:	e259      	b.n	800e5e2 <_dtoa_r+0x9a2>
 800e12e:	9b06      	ldr	r3, [sp, #24]
 800e130:	9a06      	ldr	r2, [sp, #24]
 800e132:	3301      	adds	r3, #1
 800e134:	9308      	str	r3, [sp, #32]
 800e136:	2331      	movs	r3, #49	; 0x31
 800e138:	7013      	strb	r3, [r2, #0]
 800e13a:	9b02      	ldr	r3, [sp, #8]
 800e13c:	3301      	adds	r3, #1
 800e13e:	9302      	str	r3, [sp, #8]
 800e140:	e254      	b.n	800e5ec <_dtoa_r+0x9ac>
 800e142:	4234      	tst	r4, r6
 800e144:	d007      	beq.n	800e156 <_dtoa_r+0x516>
 800e146:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e148:	3301      	adds	r3, #1
 800e14a:	9310      	str	r3, [sp, #64]	; 0x40
 800e14c:	682a      	ldr	r2, [r5, #0]
 800e14e:	686b      	ldr	r3, [r5, #4]
 800e150:	f7f4 f856 	bl	8002200 <__aeabi_dmul>
 800e154:	0033      	movs	r3, r6
 800e156:	1064      	asrs	r4, r4, #1
 800e158:	3508      	adds	r5, #8
 800e15a:	e75a      	b.n	800e012 <_dtoa_r+0x3d2>
 800e15c:	9e02      	ldr	r6, [sp, #8]
 800e15e:	9b07      	ldr	r3, [sp, #28]
 800e160:	e780      	b.n	800e064 <_dtoa_r+0x424>
 800e162:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e164:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e166:	1e5a      	subs	r2, r3, #1
 800e168:	4b59      	ldr	r3, [pc, #356]	; (800e2d0 <_dtoa_r+0x690>)
 800e16a:	00d2      	lsls	r2, r2, #3
 800e16c:	189b      	adds	r3, r3, r2
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	2900      	cmp	r1, #0
 800e174:	d051      	beq.n	800e21a <_dtoa_r+0x5da>
 800e176:	2000      	movs	r0, #0
 800e178:	495d      	ldr	r1, [pc, #372]	; (800e2f0 <_dtoa_r+0x6b0>)
 800e17a:	f7f3 fc3f 	bl	80019fc <__aeabi_ddiv>
 800e17e:	9a08      	ldr	r2, [sp, #32]
 800e180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e182:	f7f4 faa9 	bl	80026d8 <__aeabi_dsub>
 800e186:	9a06      	ldr	r2, [sp, #24]
 800e188:	9b06      	ldr	r3, [sp, #24]
 800e18a:	4694      	mov	ip, r2
 800e18c:	9317      	str	r3, [sp, #92]	; 0x5c
 800e18e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e190:	9010      	str	r0, [sp, #64]	; 0x40
 800e192:	9111      	str	r1, [sp, #68]	; 0x44
 800e194:	4463      	add	r3, ip
 800e196:	9319      	str	r3, [sp, #100]	; 0x64
 800e198:	0029      	movs	r1, r5
 800e19a:	0020      	movs	r0, r4
 800e19c:	f7f4 fe4c 	bl	8002e38 <__aeabi_d2iz>
 800e1a0:	9014      	str	r0, [sp, #80]	; 0x50
 800e1a2:	f7f4 fe7f 	bl	8002ea4 <__aeabi_i2d>
 800e1a6:	0002      	movs	r2, r0
 800e1a8:	000b      	movs	r3, r1
 800e1aa:	0020      	movs	r0, r4
 800e1ac:	0029      	movs	r1, r5
 800e1ae:	f7f4 fa93 	bl	80026d8 <__aeabi_dsub>
 800e1b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	9308      	str	r3, [sp, #32]
 800e1ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1bc:	0004      	movs	r4, r0
 800e1be:	3330      	adds	r3, #48	; 0x30
 800e1c0:	7013      	strb	r3, [r2, #0]
 800e1c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e1c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1c6:	000d      	movs	r5, r1
 800e1c8:	f7f2 f944 	bl	8000454 <__aeabi_dcmplt>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d175      	bne.n	800e2bc <_dtoa_r+0x67c>
 800e1d0:	0022      	movs	r2, r4
 800e1d2:	002b      	movs	r3, r5
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	4940      	ldr	r1, [pc, #256]	; (800e2d8 <_dtoa_r+0x698>)
 800e1d8:	f7f4 fa7e 	bl	80026d8 <__aeabi_dsub>
 800e1dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e1de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1e0:	f7f2 f938 	bl	8000454 <__aeabi_dcmplt>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d000      	beq.n	800e1ea <_dtoa_r+0x5aa>
 800e1e8:	e0d2      	b.n	800e390 <_dtoa_r+0x750>
 800e1ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1ec:	9a08      	ldr	r2, [sp, #32]
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d100      	bne.n	800e1f4 <_dtoa_r+0x5b4>
 800e1f2:	e770      	b.n	800e0d6 <_dtoa_r+0x496>
 800e1f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e1f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	4b38      	ldr	r3, [pc, #224]	; (800e2dc <_dtoa_r+0x69c>)
 800e1fc:	f7f4 f800 	bl	8002200 <__aeabi_dmul>
 800e200:	4b36      	ldr	r3, [pc, #216]	; (800e2dc <_dtoa_r+0x69c>)
 800e202:	9010      	str	r0, [sp, #64]	; 0x40
 800e204:	9111      	str	r1, [sp, #68]	; 0x44
 800e206:	2200      	movs	r2, #0
 800e208:	0020      	movs	r0, r4
 800e20a:	0029      	movs	r1, r5
 800e20c:	f7f3 fff8 	bl	8002200 <__aeabi_dmul>
 800e210:	9b08      	ldr	r3, [sp, #32]
 800e212:	0004      	movs	r4, r0
 800e214:	000d      	movs	r5, r1
 800e216:	9317      	str	r3, [sp, #92]	; 0x5c
 800e218:	e7be      	b.n	800e198 <_dtoa_r+0x558>
 800e21a:	9808      	ldr	r0, [sp, #32]
 800e21c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e21e:	f7f3 ffef 	bl	8002200 <__aeabi_dmul>
 800e222:	9a06      	ldr	r2, [sp, #24]
 800e224:	9b06      	ldr	r3, [sp, #24]
 800e226:	4694      	mov	ip, r2
 800e228:	9308      	str	r3, [sp, #32]
 800e22a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e22c:	9010      	str	r0, [sp, #64]	; 0x40
 800e22e:	9111      	str	r1, [sp, #68]	; 0x44
 800e230:	4463      	add	r3, ip
 800e232:	9319      	str	r3, [sp, #100]	; 0x64
 800e234:	0029      	movs	r1, r5
 800e236:	0020      	movs	r0, r4
 800e238:	f7f4 fdfe 	bl	8002e38 <__aeabi_d2iz>
 800e23c:	9017      	str	r0, [sp, #92]	; 0x5c
 800e23e:	f7f4 fe31 	bl	8002ea4 <__aeabi_i2d>
 800e242:	0002      	movs	r2, r0
 800e244:	000b      	movs	r3, r1
 800e246:	0020      	movs	r0, r4
 800e248:	0029      	movs	r1, r5
 800e24a:	f7f4 fa45 	bl	80026d8 <__aeabi_dsub>
 800e24e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e250:	9a08      	ldr	r2, [sp, #32]
 800e252:	3330      	adds	r3, #48	; 0x30
 800e254:	7013      	strb	r3, [r2, #0]
 800e256:	0013      	movs	r3, r2
 800e258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e25a:	3301      	adds	r3, #1
 800e25c:	0004      	movs	r4, r0
 800e25e:	000d      	movs	r5, r1
 800e260:	9308      	str	r3, [sp, #32]
 800e262:	4293      	cmp	r3, r2
 800e264:	d12c      	bne.n	800e2c0 <_dtoa_r+0x680>
 800e266:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e268:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e26a:	9a06      	ldr	r2, [sp, #24]
 800e26c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e26e:	4694      	mov	ip, r2
 800e270:	4463      	add	r3, ip
 800e272:	2200      	movs	r2, #0
 800e274:	9308      	str	r3, [sp, #32]
 800e276:	4b1e      	ldr	r3, [pc, #120]	; (800e2f0 <_dtoa_r+0x6b0>)
 800e278:	f7f3 f884 	bl	8001384 <__aeabi_dadd>
 800e27c:	0002      	movs	r2, r0
 800e27e:	000b      	movs	r3, r1
 800e280:	0020      	movs	r0, r4
 800e282:	0029      	movs	r1, r5
 800e284:	f7f2 f8fa 	bl	800047c <__aeabi_dcmpgt>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d000      	beq.n	800e28e <_dtoa_r+0x64e>
 800e28c:	e080      	b.n	800e390 <_dtoa_r+0x750>
 800e28e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e292:	2000      	movs	r0, #0
 800e294:	4916      	ldr	r1, [pc, #88]	; (800e2f0 <_dtoa_r+0x6b0>)
 800e296:	f7f4 fa1f 	bl	80026d8 <__aeabi_dsub>
 800e29a:	0002      	movs	r2, r0
 800e29c:	000b      	movs	r3, r1
 800e29e:	0020      	movs	r0, r4
 800e2a0:	0029      	movs	r1, r5
 800e2a2:	f7f2 f8d7 	bl	8000454 <__aeabi_dcmplt>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d100      	bne.n	800e2ac <_dtoa_r+0x66c>
 800e2aa:	e714      	b.n	800e0d6 <_dtoa_r+0x496>
 800e2ac:	9b08      	ldr	r3, [sp, #32]
 800e2ae:	001a      	movs	r2, r3
 800e2b0:	3a01      	subs	r2, #1
 800e2b2:	9208      	str	r2, [sp, #32]
 800e2b4:	7812      	ldrb	r2, [r2, #0]
 800e2b6:	2a30      	cmp	r2, #48	; 0x30
 800e2b8:	d0f8      	beq.n	800e2ac <_dtoa_r+0x66c>
 800e2ba:	9308      	str	r3, [sp, #32]
 800e2bc:	9602      	str	r6, [sp, #8]
 800e2be:	e055      	b.n	800e36c <_dtoa_r+0x72c>
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	4b06      	ldr	r3, [pc, #24]	; (800e2dc <_dtoa_r+0x69c>)
 800e2c4:	f7f3 ff9c 	bl	8002200 <__aeabi_dmul>
 800e2c8:	0004      	movs	r4, r0
 800e2ca:	000d      	movs	r5, r1
 800e2cc:	e7b2      	b.n	800e234 <_dtoa_r+0x5f4>
 800e2ce:	46c0      	nop			; (mov r8, r8)
 800e2d0:	08010448 	.word	0x08010448
 800e2d4:	08010420 	.word	0x08010420
 800e2d8:	3ff00000 	.word	0x3ff00000
 800e2dc:	40240000 	.word	0x40240000
 800e2e0:	401c0000 	.word	0x401c0000
 800e2e4:	fcc00000 	.word	0xfcc00000
 800e2e8:	40140000 	.word	0x40140000
 800e2ec:	7cc00000 	.word	0x7cc00000
 800e2f0:	3fe00000 	.word	0x3fe00000
 800e2f4:	9b07      	ldr	r3, [sp, #28]
 800e2f6:	9e06      	ldr	r6, [sp, #24]
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	199b      	adds	r3, r3, r6
 800e2fc:	930c      	str	r3, [sp, #48]	; 0x30
 800e2fe:	9c08      	ldr	r4, [sp, #32]
 800e300:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e306:	0020      	movs	r0, r4
 800e308:	0029      	movs	r1, r5
 800e30a:	f7f3 fb77 	bl	80019fc <__aeabi_ddiv>
 800e30e:	f7f4 fd93 	bl	8002e38 <__aeabi_d2iz>
 800e312:	9007      	str	r0, [sp, #28]
 800e314:	f7f4 fdc6 	bl	8002ea4 <__aeabi_i2d>
 800e318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e31c:	f7f3 ff70 	bl	8002200 <__aeabi_dmul>
 800e320:	0002      	movs	r2, r0
 800e322:	000b      	movs	r3, r1
 800e324:	0020      	movs	r0, r4
 800e326:	0029      	movs	r1, r5
 800e328:	f7f4 f9d6 	bl	80026d8 <__aeabi_dsub>
 800e32c:	0033      	movs	r3, r6
 800e32e:	9a07      	ldr	r2, [sp, #28]
 800e330:	3601      	adds	r6, #1
 800e332:	3230      	adds	r2, #48	; 0x30
 800e334:	701a      	strb	r2, [r3, #0]
 800e336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e338:	9608      	str	r6, [sp, #32]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d139      	bne.n	800e3b2 <_dtoa_r+0x772>
 800e33e:	0002      	movs	r2, r0
 800e340:	000b      	movs	r3, r1
 800e342:	f7f3 f81f 	bl	8001384 <__aeabi_dadd>
 800e346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e34a:	0004      	movs	r4, r0
 800e34c:	000d      	movs	r5, r1
 800e34e:	f7f2 f895 	bl	800047c <__aeabi_dcmpgt>
 800e352:	2800      	cmp	r0, #0
 800e354:	d11b      	bne.n	800e38e <_dtoa_r+0x74e>
 800e356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e35a:	0020      	movs	r0, r4
 800e35c:	0029      	movs	r1, r5
 800e35e:	f7f2 f873 	bl	8000448 <__aeabi_dcmpeq>
 800e362:	2800      	cmp	r0, #0
 800e364:	d002      	beq.n	800e36c <_dtoa_r+0x72c>
 800e366:	9b07      	ldr	r3, [sp, #28]
 800e368:	07db      	lsls	r3, r3, #31
 800e36a:	d410      	bmi.n	800e38e <_dtoa_r+0x74e>
 800e36c:	0038      	movs	r0, r7
 800e36e:	9905      	ldr	r1, [sp, #20]
 800e370:	f000 fae4 	bl	800e93c <_Bfree>
 800e374:	2300      	movs	r3, #0
 800e376:	9a08      	ldr	r2, [sp, #32]
 800e378:	9802      	ldr	r0, [sp, #8]
 800e37a:	7013      	strb	r3, [r2, #0]
 800e37c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e37e:	3001      	adds	r0, #1
 800e380:	6018      	str	r0, [r3, #0]
 800e382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e384:	2b00      	cmp	r3, #0
 800e386:	d100      	bne.n	800e38a <_dtoa_r+0x74a>
 800e388:	e4a6      	b.n	800dcd8 <_dtoa_r+0x98>
 800e38a:	601a      	str	r2, [r3, #0]
 800e38c:	e4a4      	b.n	800dcd8 <_dtoa_r+0x98>
 800e38e:	9e02      	ldr	r6, [sp, #8]
 800e390:	9b08      	ldr	r3, [sp, #32]
 800e392:	9308      	str	r3, [sp, #32]
 800e394:	3b01      	subs	r3, #1
 800e396:	781a      	ldrb	r2, [r3, #0]
 800e398:	2a39      	cmp	r2, #57	; 0x39
 800e39a:	d106      	bne.n	800e3aa <_dtoa_r+0x76a>
 800e39c:	9a06      	ldr	r2, [sp, #24]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d1f7      	bne.n	800e392 <_dtoa_r+0x752>
 800e3a2:	2230      	movs	r2, #48	; 0x30
 800e3a4:	9906      	ldr	r1, [sp, #24]
 800e3a6:	3601      	adds	r6, #1
 800e3a8:	700a      	strb	r2, [r1, #0]
 800e3aa:	781a      	ldrb	r2, [r3, #0]
 800e3ac:	3201      	adds	r2, #1
 800e3ae:	701a      	strb	r2, [r3, #0]
 800e3b0:	e784      	b.n	800e2bc <_dtoa_r+0x67c>
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	4baa      	ldr	r3, [pc, #680]	; (800e660 <_dtoa_r+0xa20>)
 800e3b6:	f7f3 ff23 	bl	8002200 <__aeabi_dmul>
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2300      	movs	r3, #0
 800e3be:	0004      	movs	r4, r0
 800e3c0:	000d      	movs	r5, r1
 800e3c2:	f7f2 f841 	bl	8000448 <__aeabi_dcmpeq>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d09b      	beq.n	800e302 <_dtoa_r+0x6c2>
 800e3ca:	e7cf      	b.n	800e36c <_dtoa_r+0x72c>
 800e3cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e3ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e3d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e3d2:	2d00      	cmp	r5, #0
 800e3d4:	d012      	beq.n	800e3fc <_dtoa_r+0x7bc>
 800e3d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e3d8:	2a01      	cmp	r2, #1
 800e3da:	dc66      	bgt.n	800e4aa <_dtoa_r+0x86a>
 800e3dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e3de:	2a00      	cmp	r2, #0
 800e3e0:	d05d      	beq.n	800e49e <_dtoa_r+0x85e>
 800e3e2:	4aa0      	ldr	r2, [pc, #640]	; (800e664 <_dtoa_r+0xa24>)
 800e3e4:	189b      	adds	r3, r3, r2
 800e3e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3e8:	2101      	movs	r1, #1
 800e3ea:	18d2      	adds	r2, r2, r3
 800e3ec:	920a      	str	r2, [sp, #40]	; 0x28
 800e3ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3f0:	0038      	movs	r0, r7
 800e3f2:	18d3      	adds	r3, r2, r3
 800e3f4:	930d      	str	r3, [sp, #52]	; 0x34
 800e3f6:	f000 fb51 	bl	800ea9c <__i2b>
 800e3fa:	0005      	movs	r5, r0
 800e3fc:	2c00      	cmp	r4, #0
 800e3fe:	dd0e      	ble.n	800e41e <_dtoa_r+0x7de>
 800e400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e402:	2b00      	cmp	r3, #0
 800e404:	dd0b      	ble.n	800e41e <_dtoa_r+0x7de>
 800e406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e408:	0023      	movs	r3, r4
 800e40a:	4294      	cmp	r4, r2
 800e40c:	dd00      	ble.n	800e410 <_dtoa_r+0x7d0>
 800e40e:	0013      	movs	r3, r2
 800e410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e412:	1ae4      	subs	r4, r4, r3
 800e414:	1ad2      	subs	r2, r2, r3
 800e416:	920a      	str	r2, [sp, #40]	; 0x28
 800e418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	930d      	str	r3, [sp, #52]	; 0x34
 800e41e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e420:	2b00      	cmp	r3, #0
 800e422:	d01f      	beq.n	800e464 <_dtoa_r+0x824>
 800e424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e426:	2b00      	cmp	r3, #0
 800e428:	d054      	beq.n	800e4d4 <_dtoa_r+0x894>
 800e42a:	2e00      	cmp	r6, #0
 800e42c:	dd11      	ble.n	800e452 <_dtoa_r+0x812>
 800e42e:	0029      	movs	r1, r5
 800e430:	0032      	movs	r2, r6
 800e432:	0038      	movs	r0, r7
 800e434:	f000 fbf8 	bl	800ec28 <__pow5mult>
 800e438:	9a05      	ldr	r2, [sp, #20]
 800e43a:	0001      	movs	r1, r0
 800e43c:	0005      	movs	r5, r0
 800e43e:	0038      	movs	r0, r7
 800e440:	f000 fb42 	bl	800eac8 <__multiply>
 800e444:	9905      	ldr	r1, [sp, #20]
 800e446:	9014      	str	r0, [sp, #80]	; 0x50
 800e448:	0038      	movs	r0, r7
 800e44a:	f000 fa77 	bl	800e93c <_Bfree>
 800e44e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e450:	9305      	str	r3, [sp, #20]
 800e452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e454:	1b9a      	subs	r2, r3, r6
 800e456:	42b3      	cmp	r3, r6
 800e458:	d004      	beq.n	800e464 <_dtoa_r+0x824>
 800e45a:	0038      	movs	r0, r7
 800e45c:	9905      	ldr	r1, [sp, #20]
 800e45e:	f000 fbe3 	bl	800ec28 <__pow5mult>
 800e462:	9005      	str	r0, [sp, #20]
 800e464:	2101      	movs	r1, #1
 800e466:	0038      	movs	r0, r7
 800e468:	f000 fb18 	bl	800ea9c <__i2b>
 800e46c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e46e:	0006      	movs	r6, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	dd31      	ble.n	800e4d8 <_dtoa_r+0x898>
 800e474:	001a      	movs	r2, r3
 800e476:	0001      	movs	r1, r0
 800e478:	0038      	movs	r0, r7
 800e47a:	f000 fbd5 	bl	800ec28 <__pow5mult>
 800e47e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e480:	0006      	movs	r6, r0
 800e482:	2b01      	cmp	r3, #1
 800e484:	dd2d      	ble.n	800e4e2 <_dtoa_r+0x8a2>
 800e486:	2300      	movs	r3, #0
 800e488:	930e      	str	r3, [sp, #56]	; 0x38
 800e48a:	6933      	ldr	r3, [r6, #16]
 800e48c:	3303      	adds	r3, #3
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	18f3      	adds	r3, r6, r3
 800e492:	6858      	ldr	r0, [r3, #4]
 800e494:	f000 faba 	bl	800ea0c <__hi0bits>
 800e498:	2320      	movs	r3, #32
 800e49a:	1a18      	subs	r0, r3, r0
 800e49c:	e039      	b.n	800e512 <_dtoa_r+0x8d2>
 800e49e:	2336      	movs	r3, #54	; 0x36
 800e4a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e4a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e4a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e4a6:	1a9b      	subs	r3, r3, r2
 800e4a8:	e79d      	b.n	800e3e6 <_dtoa_r+0x7a6>
 800e4aa:	9b07      	ldr	r3, [sp, #28]
 800e4ac:	1e5e      	subs	r6, r3, #1
 800e4ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4b0:	42b3      	cmp	r3, r6
 800e4b2:	db07      	blt.n	800e4c4 <_dtoa_r+0x884>
 800e4b4:	1b9e      	subs	r6, r3, r6
 800e4b6:	9b07      	ldr	r3, [sp, #28]
 800e4b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	da93      	bge.n	800e3e6 <_dtoa_r+0x7a6>
 800e4be:	1ae4      	subs	r4, r4, r3
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	e790      	b.n	800e3e6 <_dtoa_r+0x7a6>
 800e4c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e4c8:	1af3      	subs	r3, r6, r3
 800e4ca:	18d3      	adds	r3, r2, r3
 800e4cc:	960e      	str	r6, [sp, #56]	; 0x38
 800e4ce:	9315      	str	r3, [sp, #84]	; 0x54
 800e4d0:	2600      	movs	r6, #0
 800e4d2:	e7f0      	b.n	800e4b6 <_dtoa_r+0x876>
 800e4d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4d6:	e7c0      	b.n	800e45a <_dtoa_r+0x81a>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	930e      	str	r3, [sp, #56]	; 0x38
 800e4dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	dc13      	bgt.n	800e50a <_dtoa_r+0x8ca>
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	930e      	str	r3, [sp, #56]	; 0x38
 800e4e6:	9b08      	ldr	r3, [sp, #32]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10e      	bne.n	800e50a <_dtoa_r+0x8ca>
 800e4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ee:	031b      	lsls	r3, r3, #12
 800e4f0:	d10b      	bne.n	800e50a <_dtoa_r+0x8ca>
 800e4f2:	4b5d      	ldr	r3, [pc, #372]	; (800e668 <_dtoa_r+0xa28>)
 800e4f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4f6:	4213      	tst	r3, r2
 800e4f8:	d007      	beq.n	800e50a <_dtoa_r+0x8ca>
 800e4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800e500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e502:	3301      	adds	r3, #1
 800e504:	930d      	str	r3, [sp, #52]	; 0x34
 800e506:	2301      	movs	r3, #1
 800e508:	930e      	str	r3, [sp, #56]	; 0x38
 800e50a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e50c:	2001      	movs	r0, #1
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1bb      	bne.n	800e48a <_dtoa_r+0x84a>
 800e512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e514:	221f      	movs	r2, #31
 800e516:	1818      	adds	r0, r3, r0
 800e518:	0003      	movs	r3, r0
 800e51a:	4013      	ands	r3, r2
 800e51c:	4210      	tst	r0, r2
 800e51e:	d046      	beq.n	800e5ae <_dtoa_r+0x96e>
 800e520:	3201      	adds	r2, #1
 800e522:	1ad2      	subs	r2, r2, r3
 800e524:	2a04      	cmp	r2, #4
 800e526:	dd3f      	ble.n	800e5a8 <_dtoa_r+0x968>
 800e528:	221c      	movs	r2, #28
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e52e:	18e4      	adds	r4, r4, r3
 800e530:	18d2      	adds	r2, r2, r3
 800e532:	920a      	str	r2, [sp, #40]	; 0x28
 800e534:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e536:	18d3      	adds	r3, r2, r3
 800e538:	930d      	str	r3, [sp, #52]	; 0x34
 800e53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	dd05      	ble.n	800e54c <_dtoa_r+0x90c>
 800e540:	001a      	movs	r2, r3
 800e542:	0038      	movs	r0, r7
 800e544:	9905      	ldr	r1, [sp, #20]
 800e546:	f000 fbcb 	bl	800ece0 <__lshift>
 800e54a:	9005      	str	r0, [sp, #20]
 800e54c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e54e:	2b00      	cmp	r3, #0
 800e550:	dd05      	ble.n	800e55e <_dtoa_r+0x91e>
 800e552:	0031      	movs	r1, r6
 800e554:	001a      	movs	r2, r3
 800e556:	0038      	movs	r0, r7
 800e558:	f000 fbc2 	bl	800ece0 <__lshift>
 800e55c:	0006      	movs	r6, r0
 800e55e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e560:	2b00      	cmp	r3, #0
 800e562:	d026      	beq.n	800e5b2 <_dtoa_r+0x972>
 800e564:	0031      	movs	r1, r6
 800e566:	9805      	ldr	r0, [sp, #20]
 800e568:	f000 fc28 	bl	800edbc <__mcmp>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	da20      	bge.n	800e5b2 <_dtoa_r+0x972>
 800e570:	9b02      	ldr	r3, [sp, #8]
 800e572:	220a      	movs	r2, #10
 800e574:	3b01      	subs	r3, #1
 800e576:	9302      	str	r3, [sp, #8]
 800e578:	0038      	movs	r0, r7
 800e57a:	2300      	movs	r3, #0
 800e57c:	9905      	ldr	r1, [sp, #20]
 800e57e:	f000 fa01 	bl	800e984 <__multadd>
 800e582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e584:	9005      	str	r0, [sp, #20]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d100      	bne.n	800e58c <_dtoa_r+0x94c>
 800e58a:	e166      	b.n	800e85a <_dtoa_r+0xc1a>
 800e58c:	2300      	movs	r3, #0
 800e58e:	0029      	movs	r1, r5
 800e590:	220a      	movs	r2, #10
 800e592:	0038      	movs	r0, r7
 800e594:	f000 f9f6 	bl	800e984 <__multadd>
 800e598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e59a:	0005      	movs	r5, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dc47      	bgt.n	800e630 <_dtoa_r+0x9f0>
 800e5a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	dc0d      	bgt.n	800e5c2 <_dtoa_r+0x982>
 800e5a6:	e043      	b.n	800e630 <_dtoa_r+0x9f0>
 800e5a8:	2a04      	cmp	r2, #4
 800e5aa:	d0c6      	beq.n	800e53a <_dtoa_r+0x8fa>
 800e5ac:	0013      	movs	r3, r2
 800e5ae:	331c      	adds	r3, #28
 800e5b0:	e7bc      	b.n	800e52c <_dtoa_r+0x8ec>
 800e5b2:	9b07      	ldr	r3, [sp, #28]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dc35      	bgt.n	800e624 <_dtoa_r+0x9e4>
 800e5b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	dd32      	ble.n	800e624 <_dtoa_r+0x9e4>
 800e5be:	9b07      	ldr	r3, [sp, #28]
 800e5c0:	930c      	str	r3, [sp, #48]	; 0x30
 800e5c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10c      	bne.n	800e5e2 <_dtoa_r+0x9a2>
 800e5c8:	0031      	movs	r1, r6
 800e5ca:	2205      	movs	r2, #5
 800e5cc:	0038      	movs	r0, r7
 800e5ce:	f000 f9d9 	bl	800e984 <__multadd>
 800e5d2:	0006      	movs	r6, r0
 800e5d4:	0001      	movs	r1, r0
 800e5d6:	9805      	ldr	r0, [sp, #20]
 800e5d8:	f000 fbf0 	bl	800edbc <__mcmp>
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	dd00      	ble.n	800e5e2 <_dtoa_r+0x9a2>
 800e5e0:	e5a5      	b.n	800e12e <_dtoa_r+0x4ee>
 800e5e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e5e4:	43db      	mvns	r3, r3
 800e5e6:	9302      	str	r3, [sp, #8]
 800e5e8:	9b06      	ldr	r3, [sp, #24]
 800e5ea:	9308      	str	r3, [sp, #32]
 800e5ec:	2400      	movs	r4, #0
 800e5ee:	0031      	movs	r1, r6
 800e5f0:	0038      	movs	r0, r7
 800e5f2:	f000 f9a3 	bl	800e93c <_Bfree>
 800e5f6:	2d00      	cmp	r5, #0
 800e5f8:	d100      	bne.n	800e5fc <_dtoa_r+0x9bc>
 800e5fa:	e6b7      	b.n	800e36c <_dtoa_r+0x72c>
 800e5fc:	2c00      	cmp	r4, #0
 800e5fe:	d005      	beq.n	800e60c <_dtoa_r+0x9cc>
 800e600:	42ac      	cmp	r4, r5
 800e602:	d003      	beq.n	800e60c <_dtoa_r+0x9cc>
 800e604:	0021      	movs	r1, r4
 800e606:	0038      	movs	r0, r7
 800e608:	f000 f998 	bl	800e93c <_Bfree>
 800e60c:	0029      	movs	r1, r5
 800e60e:	0038      	movs	r0, r7
 800e610:	f000 f994 	bl	800e93c <_Bfree>
 800e614:	e6aa      	b.n	800e36c <_dtoa_r+0x72c>
 800e616:	2600      	movs	r6, #0
 800e618:	0035      	movs	r5, r6
 800e61a:	e7e2      	b.n	800e5e2 <_dtoa_r+0x9a2>
 800e61c:	9602      	str	r6, [sp, #8]
 800e61e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800e620:	0035      	movs	r5, r6
 800e622:	e584      	b.n	800e12e <_dtoa_r+0x4ee>
 800e624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e626:	2b00      	cmp	r3, #0
 800e628:	d100      	bne.n	800e62c <_dtoa_r+0x9ec>
 800e62a:	e0ce      	b.n	800e7ca <_dtoa_r+0xb8a>
 800e62c:	9b07      	ldr	r3, [sp, #28]
 800e62e:	930c      	str	r3, [sp, #48]	; 0x30
 800e630:	2c00      	cmp	r4, #0
 800e632:	dd05      	ble.n	800e640 <_dtoa_r+0xa00>
 800e634:	0029      	movs	r1, r5
 800e636:	0022      	movs	r2, r4
 800e638:	0038      	movs	r0, r7
 800e63a:	f000 fb51 	bl	800ece0 <__lshift>
 800e63e:	0005      	movs	r5, r0
 800e640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e642:	0028      	movs	r0, r5
 800e644:	2b00      	cmp	r3, #0
 800e646:	d022      	beq.n	800e68e <_dtoa_r+0xa4e>
 800e648:	0038      	movs	r0, r7
 800e64a:	6869      	ldr	r1, [r5, #4]
 800e64c:	f000 f932 	bl	800e8b4 <_Balloc>
 800e650:	1e04      	subs	r4, r0, #0
 800e652:	d10f      	bne.n	800e674 <_dtoa_r+0xa34>
 800e654:	0002      	movs	r2, r0
 800e656:	4b05      	ldr	r3, [pc, #20]	; (800e66c <_dtoa_r+0xa2c>)
 800e658:	4905      	ldr	r1, [pc, #20]	; (800e670 <_dtoa_r+0xa30>)
 800e65a:	f7ff fb06 	bl	800dc6a <_dtoa_r+0x2a>
 800e65e:	46c0      	nop			; (mov r8, r8)
 800e660:	40240000 	.word	0x40240000
 800e664:	00000433 	.word	0x00000433
 800e668:	7ff00000 	.word	0x7ff00000
 800e66c:	080103af 	.word	0x080103af
 800e670:	000002ea 	.word	0x000002ea
 800e674:	0029      	movs	r1, r5
 800e676:	692b      	ldr	r3, [r5, #16]
 800e678:	310c      	adds	r1, #12
 800e67a:	1c9a      	adds	r2, r3, #2
 800e67c:	0092      	lsls	r2, r2, #2
 800e67e:	300c      	adds	r0, #12
 800e680:	f7fe fcbc 	bl	800cffc <memcpy>
 800e684:	2201      	movs	r2, #1
 800e686:	0021      	movs	r1, r4
 800e688:	0038      	movs	r0, r7
 800e68a:	f000 fb29 	bl	800ece0 <__lshift>
 800e68e:	9b06      	ldr	r3, [sp, #24]
 800e690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e692:	930a      	str	r3, [sp, #40]	; 0x28
 800e694:	3b01      	subs	r3, #1
 800e696:	189b      	adds	r3, r3, r2
 800e698:	2201      	movs	r2, #1
 800e69a:	002c      	movs	r4, r5
 800e69c:	0005      	movs	r5, r0
 800e69e:	9314      	str	r3, [sp, #80]	; 0x50
 800e6a0:	9b08      	ldr	r3, [sp, #32]
 800e6a2:	4013      	ands	r3, r2
 800e6a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6a6:	0031      	movs	r1, r6
 800e6a8:	9805      	ldr	r0, [sp, #20]
 800e6aa:	f7ff fa3d 	bl	800db28 <quorem>
 800e6ae:	0003      	movs	r3, r0
 800e6b0:	0021      	movs	r1, r4
 800e6b2:	3330      	adds	r3, #48	; 0x30
 800e6b4:	900d      	str	r0, [sp, #52]	; 0x34
 800e6b6:	9805      	ldr	r0, [sp, #20]
 800e6b8:	9307      	str	r3, [sp, #28]
 800e6ba:	f000 fb7f 	bl	800edbc <__mcmp>
 800e6be:	002a      	movs	r2, r5
 800e6c0:	900e      	str	r0, [sp, #56]	; 0x38
 800e6c2:	0031      	movs	r1, r6
 800e6c4:	0038      	movs	r0, r7
 800e6c6:	f000 fb95 	bl	800edf4 <__mdiff>
 800e6ca:	68c3      	ldr	r3, [r0, #12]
 800e6cc:	9008      	str	r0, [sp, #32]
 800e6ce:	9310      	str	r3, [sp, #64]	; 0x40
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	930c      	str	r3, [sp, #48]	; 0x30
 800e6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d104      	bne.n	800e6e4 <_dtoa_r+0xaa4>
 800e6da:	0001      	movs	r1, r0
 800e6dc:	9805      	ldr	r0, [sp, #20]
 800e6de:	f000 fb6d 	bl	800edbc <__mcmp>
 800e6e2:	900c      	str	r0, [sp, #48]	; 0x30
 800e6e4:	0038      	movs	r0, r7
 800e6e6:	9908      	ldr	r1, [sp, #32]
 800e6e8:	f000 f928 	bl	800e93c <_Bfree>
 800e6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	9308      	str	r3, [sp, #32]
 800e6f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	d10c      	bne.n	800e718 <_dtoa_r+0xad8>
 800e6fe:	9b07      	ldr	r3, [sp, #28]
 800e700:	2b39      	cmp	r3, #57	; 0x39
 800e702:	d026      	beq.n	800e752 <_dtoa_r+0xb12>
 800e704:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e706:	2b00      	cmp	r3, #0
 800e708:	dd02      	ble.n	800e710 <_dtoa_r+0xad0>
 800e70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e70c:	3331      	adds	r3, #49	; 0x31
 800e70e:	9307      	str	r3, [sp, #28]
 800e710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e712:	9a07      	ldr	r2, [sp, #28]
 800e714:	701a      	strb	r2, [r3, #0]
 800e716:	e76a      	b.n	800e5ee <_dtoa_r+0x9ae>
 800e718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	db04      	blt.n	800e728 <_dtoa_r+0xae8>
 800e71e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e720:	4313      	orrs	r3, r2
 800e722:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e724:	4313      	orrs	r3, r2
 800e726:	d11f      	bne.n	800e768 <_dtoa_r+0xb28>
 800e728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	ddf0      	ble.n	800e710 <_dtoa_r+0xad0>
 800e72e:	9905      	ldr	r1, [sp, #20]
 800e730:	2201      	movs	r2, #1
 800e732:	0038      	movs	r0, r7
 800e734:	f000 fad4 	bl	800ece0 <__lshift>
 800e738:	0031      	movs	r1, r6
 800e73a:	9005      	str	r0, [sp, #20]
 800e73c:	f000 fb3e 	bl	800edbc <__mcmp>
 800e740:	2800      	cmp	r0, #0
 800e742:	dc03      	bgt.n	800e74c <_dtoa_r+0xb0c>
 800e744:	d1e4      	bne.n	800e710 <_dtoa_r+0xad0>
 800e746:	9b07      	ldr	r3, [sp, #28]
 800e748:	07db      	lsls	r3, r3, #31
 800e74a:	d5e1      	bpl.n	800e710 <_dtoa_r+0xad0>
 800e74c:	9b07      	ldr	r3, [sp, #28]
 800e74e:	2b39      	cmp	r3, #57	; 0x39
 800e750:	d1db      	bne.n	800e70a <_dtoa_r+0xaca>
 800e752:	2339      	movs	r3, #57	; 0x39
 800e754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e756:	7013      	strb	r3, [r2, #0]
 800e758:	9b08      	ldr	r3, [sp, #32]
 800e75a:	9308      	str	r3, [sp, #32]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	781a      	ldrb	r2, [r3, #0]
 800e760:	2a39      	cmp	r2, #57	; 0x39
 800e762:	d068      	beq.n	800e836 <_dtoa_r+0xbf6>
 800e764:	3201      	adds	r2, #1
 800e766:	e7d5      	b.n	800e714 <_dtoa_r+0xad4>
 800e768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	dd07      	ble.n	800e77e <_dtoa_r+0xb3e>
 800e76e:	9b07      	ldr	r3, [sp, #28]
 800e770:	2b39      	cmp	r3, #57	; 0x39
 800e772:	d0ee      	beq.n	800e752 <_dtoa_r+0xb12>
 800e774:	9b07      	ldr	r3, [sp, #28]
 800e776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e778:	3301      	adds	r3, #1
 800e77a:	7013      	strb	r3, [r2, #0]
 800e77c:	e737      	b.n	800e5ee <_dtoa_r+0x9ae>
 800e77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e780:	9a07      	ldr	r2, [sp, #28]
 800e782:	701a      	strb	r2, [r3, #0]
 800e784:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e788:	4293      	cmp	r3, r2
 800e78a:	d03e      	beq.n	800e80a <_dtoa_r+0xbca>
 800e78c:	2300      	movs	r3, #0
 800e78e:	220a      	movs	r2, #10
 800e790:	9905      	ldr	r1, [sp, #20]
 800e792:	0038      	movs	r0, r7
 800e794:	f000 f8f6 	bl	800e984 <__multadd>
 800e798:	2300      	movs	r3, #0
 800e79a:	9005      	str	r0, [sp, #20]
 800e79c:	220a      	movs	r2, #10
 800e79e:	0021      	movs	r1, r4
 800e7a0:	0038      	movs	r0, r7
 800e7a2:	42ac      	cmp	r4, r5
 800e7a4:	d106      	bne.n	800e7b4 <_dtoa_r+0xb74>
 800e7a6:	f000 f8ed 	bl	800e984 <__multadd>
 800e7aa:	0004      	movs	r4, r0
 800e7ac:	0005      	movs	r5, r0
 800e7ae:	9b08      	ldr	r3, [sp, #32]
 800e7b0:	930a      	str	r3, [sp, #40]	; 0x28
 800e7b2:	e778      	b.n	800e6a6 <_dtoa_r+0xa66>
 800e7b4:	f000 f8e6 	bl	800e984 <__multadd>
 800e7b8:	0029      	movs	r1, r5
 800e7ba:	0004      	movs	r4, r0
 800e7bc:	2300      	movs	r3, #0
 800e7be:	220a      	movs	r2, #10
 800e7c0:	0038      	movs	r0, r7
 800e7c2:	f000 f8df 	bl	800e984 <__multadd>
 800e7c6:	0005      	movs	r5, r0
 800e7c8:	e7f1      	b.n	800e7ae <_dtoa_r+0xb6e>
 800e7ca:	9b07      	ldr	r3, [sp, #28]
 800e7cc:	930c      	str	r3, [sp, #48]	; 0x30
 800e7ce:	2400      	movs	r4, #0
 800e7d0:	0031      	movs	r1, r6
 800e7d2:	9805      	ldr	r0, [sp, #20]
 800e7d4:	f7ff f9a8 	bl	800db28 <quorem>
 800e7d8:	9b06      	ldr	r3, [sp, #24]
 800e7da:	3030      	adds	r0, #48	; 0x30
 800e7dc:	5518      	strb	r0, [r3, r4]
 800e7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7e0:	3401      	adds	r4, #1
 800e7e2:	9007      	str	r0, [sp, #28]
 800e7e4:	42a3      	cmp	r3, r4
 800e7e6:	dd07      	ble.n	800e7f8 <_dtoa_r+0xbb8>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	220a      	movs	r2, #10
 800e7ec:	0038      	movs	r0, r7
 800e7ee:	9905      	ldr	r1, [sp, #20]
 800e7f0:	f000 f8c8 	bl	800e984 <__multadd>
 800e7f4:	9005      	str	r0, [sp, #20]
 800e7f6:	e7eb      	b.n	800e7d0 <_dtoa_r+0xb90>
 800e7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7fa:	2001      	movs	r0, #1
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dd00      	ble.n	800e802 <_dtoa_r+0xbc2>
 800e800:	0018      	movs	r0, r3
 800e802:	2400      	movs	r4, #0
 800e804:	9b06      	ldr	r3, [sp, #24]
 800e806:	181b      	adds	r3, r3, r0
 800e808:	9308      	str	r3, [sp, #32]
 800e80a:	9905      	ldr	r1, [sp, #20]
 800e80c:	2201      	movs	r2, #1
 800e80e:	0038      	movs	r0, r7
 800e810:	f000 fa66 	bl	800ece0 <__lshift>
 800e814:	0031      	movs	r1, r6
 800e816:	9005      	str	r0, [sp, #20]
 800e818:	f000 fad0 	bl	800edbc <__mcmp>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	dc9b      	bgt.n	800e758 <_dtoa_r+0xb18>
 800e820:	d102      	bne.n	800e828 <_dtoa_r+0xbe8>
 800e822:	9b07      	ldr	r3, [sp, #28]
 800e824:	07db      	lsls	r3, r3, #31
 800e826:	d497      	bmi.n	800e758 <_dtoa_r+0xb18>
 800e828:	9b08      	ldr	r3, [sp, #32]
 800e82a:	9308      	str	r3, [sp, #32]
 800e82c:	3b01      	subs	r3, #1
 800e82e:	781a      	ldrb	r2, [r3, #0]
 800e830:	2a30      	cmp	r2, #48	; 0x30
 800e832:	d0fa      	beq.n	800e82a <_dtoa_r+0xbea>
 800e834:	e6db      	b.n	800e5ee <_dtoa_r+0x9ae>
 800e836:	9a06      	ldr	r2, [sp, #24]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d18e      	bne.n	800e75a <_dtoa_r+0xb1a>
 800e83c:	9b02      	ldr	r3, [sp, #8]
 800e83e:	3301      	adds	r3, #1
 800e840:	9302      	str	r3, [sp, #8]
 800e842:	2331      	movs	r3, #49	; 0x31
 800e844:	e799      	b.n	800e77a <_dtoa_r+0xb3a>
 800e846:	4b09      	ldr	r3, [pc, #36]	; (800e86c <_dtoa_r+0xc2c>)
 800e848:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e84a:	9306      	str	r3, [sp, #24]
 800e84c:	4b08      	ldr	r3, [pc, #32]	; (800e870 <_dtoa_r+0xc30>)
 800e84e:	2a00      	cmp	r2, #0
 800e850:	d001      	beq.n	800e856 <_dtoa_r+0xc16>
 800e852:	f7ff fa3f 	bl	800dcd4 <_dtoa_r+0x94>
 800e856:	f7ff fa3f 	bl	800dcd8 <_dtoa_r+0x98>
 800e85a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	dcb6      	bgt.n	800e7ce <_dtoa_r+0xb8e>
 800e860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e862:	2b02      	cmp	r3, #2
 800e864:	dd00      	ble.n	800e868 <_dtoa_r+0xc28>
 800e866:	e6ac      	b.n	800e5c2 <_dtoa_r+0x982>
 800e868:	e7b1      	b.n	800e7ce <_dtoa_r+0xb8e>
 800e86a:	46c0      	nop			; (mov r8, r8)
 800e86c:	08010330 	.word	0x08010330
 800e870:	08010338 	.word	0x08010338

0800e874 <_localeconv_r>:
 800e874:	4800      	ldr	r0, [pc, #0]	; (800e878 <_localeconv_r+0x4>)
 800e876:	4770      	bx	lr
 800e878:	20000200 	.word	0x20000200

0800e87c <memchr>:
 800e87c:	b2c9      	uxtb	r1, r1
 800e87e:	1882      	adds	r2, r0, r2
 800e880:	4290      	cmp	r0, r2
 800e882:	d101      	bne.n	800e888 <memchr+0xc>
 800e884:	2000      	movs	r0, #0
 800e886:	4770      	bx	lr
 800e888:	7803      	ldrb	r3, [r0, #0]
 800e88a:	428b      	cmp	r3, r1
 800e88c:	d0fb      	beq.n	800e886 <memchr+0xa>
 800e88e:	3001      	adds	r0, #1
 800e890:	e7f6      	b.n	800e880 <memchr+0x4>
	...

0800e894 <__malloc_lock>:
 800e894:	b510      	push	{r4, lr}
 800e896:	4802      	ldr	r0, [pc, #8]	; (800e8a0 <__malloc_lock+0xc>)
 800e898:	f000 fd65 	bl	800f366 <__retarget_lock_acquire_recursive>
 800e89c:	bd10      	pop	{r4, pc}
 800e89e:	46c0      	nop			; (mov r8, r8)
 800e8a0:	20001084 	.word	0x20001084

0800e8a4 <__malloc_unlock>:
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	4802      	ldr	r0, [pc, #8]	; (800e8b0 <__malloc_unlock+0xc>)
 800e8a8:	f000 fd5e 	bl	800f368 <__retarget_lock_release_recursive>
 800e8ac:	bd10      	pop	{r4, pc}
 800e8ae:	46c0      	nop			; (mov r8, r8)
 800e8b0:	20001084 	.word	0x20001084

0800e8b4 <_Balloc>:
 800e8b4:	b570      	push	{r4, r5, r6, lr}
 800e8b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e8b8:	0006      	movs	r6, r0
 800e8ba:	000c      	movs	r4, r1
 800e8bc:	2d00      	cmp	r5, #0
 800e8be:	d10e      	bne.n	800e8de <_Balloc+0x2a>
 800e8c0:	2010      	movs	r0, #16
 800e8c2:	f7fe fb87 	bl	800cfd4 <malloc>
 800e8c6:	1e02      	subs	r2, r0, #0
 800e8c8:	6270      	str	r0, [r6, #36]	; 0x24
 800e8ca:	d104      	bne.n	800e8d6 <_Balloc+0x22>
 800e8cc:	2166      	movs	r1, #102	; 0x66
 800e8ce:	4b19      	ldr	r3, [pc, #100]	; (800e934 <_Balloc+0x80>)
 800e8d0:	4819      	ldr	r0, [pc, #100]	; (800e938 <_Balloc+0x84>)
 800e8d2:	f000 fd19 	bl	800f308 <__assert_func>
 800e8d6:	6045      	str	r5, [r0, #4]
 800e8d8:	6085      	str	r5, [r0, #8]
 800e8da:	6005      	str	r5, [r0, #0]
 800e8dc:	60c5      	str	r5, [r0, #12]
 800e8de:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800e8e0:	68eb      	ldr	r3, [r5, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d013      	beq.n	800e90e <_Balloc+0x5a>
 800e8e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e8e8:	00a2      	lsls	r2, r4, #2
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	189b      	adds	r3, r3, r2
 800e8ee:	6818      	ldr	r0, [r3, #0]
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d118      	bne.n	800e926 <_Balloc+0x72>
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	000d      	movs	r5, r1
 800e8f8:	40a5      	lsls	r5, r4
 800e8fa:	1d6a      	adds	r2, r5, #5
 800e8fc:	0030      	movs	r0, r6
 800e8fe:	0092      	lsls	r2, r2, #2
 800e900:	f000 fb74 	bl	800efec <_calloc_r>
 800e904:	2800      	cmp	r0, #0
 800e906:	d00c      	beq.n	800e922 <_Balloc+0x6e>
 800e908:	6044      	str	r4, [r0, #4]
 800e90a:	6085      	str	r5, [r0, #8]
 800e90c:	e00d      	b.n	800e92a <_Balloc+0x76>
 800e90e:	2221      	movs	r2, #33	; 0x21
 800e910:	2104      	movs	r1, #4
 800e912:	0030      	movs	r0, r6
 800e914:	f000 fb6a 	bl	800efec <_calloc_r>
 800e918:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e91a:	60e8      	str	r0, [r5, #12]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1e1      	bne.n	800e8e6 <_Balloc+0x32>
 800e922:	2000      	movs	r0, #0
 800e924:	bd70      	pop	{r4, r5, r6, pc}
 800e926:	6802      	ldr	r2, [r0, #0]
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	2300      	movs	r3, #0
 800e92c:	6103      	str	r3, [r0, #16]
 800e92e:	60c3      	str	r3, [r0, #12]
 800e930:	e7f8      	b.n	800e924 <_Balloc+0x70>
 800e932:	46c0      	nop			; (mov r8, r8)
 800e934:	0801033d 	.word	0x0801033d
 800e938:	080103c0 	.word	0x080103c0

0800e93c <_Bfree>:
 800e93c:	b570      	push	{r4, r5, r6, lr}
 800e93e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e940:	0005      	movs	r5, r0
 800e942:	000c      	movs	r4, r1
 800e944:	2e00      	cmp	r6, #0
 800e946:	d10e      	bne.n	800e966 <_Bfree+0x2a>
 800e948:	2010      	movs	r0, #16
 800e94a:	f7fe fb43 	bl	800cfd4 <malloc>
 800e94e:	1e02      	subs	r2, r0, #0
 800e950:	6268      	str	r0, [r5, #36]	; 0x24
 800e952:	d104      	bne.n	800e95e <_Bfree+0x22>
 800e954:	218a      	movs	r1, #138	; 0x8a
 800e956:	4b09      	ldr	r3, [pc, #36]	; (800e97c <_Bfree+0x40>)
 800e958:	4809      	ldr	r0, [pc, #36]	; (800e980 <_Bfree+0x44>)
 800e95a:	f000 fcd5 	bl	800f308 <__assert_func>
 800e95e:	6046      	str	r6, [r0, #4]
 800e960:	6086      	str	r6, [r0, #8]
 800e962:	6006      	str	r6, [r0, #0]
 800e964:	60c6      	str	r6, [r0, #12]
 800e966:	2c00      	cmp	r4, #0
 800e968:	d007      	beq.n	800e97a <_Bfree+0x3e>
 800e96a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e96c:	6862      	ldr	r2, [r4, #4]
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	0092      	lsls	r2, r2, #2
 800e972:	189b      	adds	r3, r3, r2
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	6022      	str	r2, [r4, #0]
 800e978:	601c      	str	r4, [r3, #0]
 800e97a:	bd70      	pop	{r4, r5, r6, pc}
 800e97c:	0801033d 	.word	0x0801033d
 800e980:	080103c0 	.word	0x080103c0

0800e984 <__multadd>:
 800e984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e986:	000e      	movs	r6, r1
 800e988:	9001      	str	r0, [sp, #4]
 800e98a:	000c      	movs	r4, r1
 800e98c:	001d      	movs	r5, r3
 800e98e:	2000      	movs	r0, #0
 800e990:	690f      	ldr	r7, [r1, #16]
 800e992:	3614      	adds	r6, #20
 800e994:	6833      	ldr	r3, [r6, #0]
 800e996:	3001      	adds	r0, #1
 800e998:	b299      	uxth	r1, r3
 800e99a:	4351      	muls	r1, r2
 800e99c:	0c1b      	lsrs	r3, r3, #16
 800e99e:	4353      	muls	r3, r2
 800e9a0:	1949      	adds	r1, r1, r5
 800e9a2:	0c0d      	lsrs	r5, r1, #16
 800e9a4:	195b      	adds	r3, r3, r5
 800e9a6:	0c1d      	lsrs	r5, r3, #16
 800e9a8:	b289      	uxth	r1, r1
 800e9aa:	041b      	lsls	r3, r3, #16
 800e9ac:	185b      	adds	r3, r3, r1
 800e9ae:	c608      	stmia	r6!, {r3}
 800e9b0:	4287      	cmp	r7, r0
 800e9b2:	dcef      	bgt.n	800e994 <__multadd+0x10>
 800e9b4:	2d00      	cmp	r5, #0
 800e9b6:	d022      	beq.n	800e9fe <__multadd+0x7a>
 800e9b8:	68a3      	ldr	r3, [r4, #8]
 800e9ba:	42bb      	cmp	r3, r7
 800e9bc:	dc19      	bgt.n	800e9f2 <__multadd+0x6e>
 800e9be:	6863      	ldr	r3, [r4, #4]
 800e9c0:	9801      	ldr	r0, [sp, #4]
 800e9c2:	1c59      	adds	r1, r3, #1
 800e9c4:	f7ff ff76 	bl	800e8b4 <_Balloc>
 800e9c8:	1e06      	subs	r6, r0, #0
 800e9ca:	d105      	bne.n	800e9d8 <__multadd+0x54>
 800e9cc:	0002      	movs	r2, r0
 800e9ce:	21b5      	movs	r1, #181	; 0xb5
 800e9d0:	4b0c      	ldr	r3, [pc, #48]	; (800ea04 <__multadd+0x80>)
 800e9d2:	480d      	ldr	r0, [pc, #52]	; (800ea08 <__multadd+0x84>)
 800e9d4:	f000 fc98 	bl	800f308 <__assert_func>
 800e9d8:	0021      	movs	r1, r4
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	310c      	adds	r1, #12
 800e9de:	1c9a      	adds	r2, r3, #2
 800e9e0:	0092      	lsls	r2, r2, #2
 800e9e2:	300c      	adds	r0, #12
 800e9e4:	f7fe fb0a 	bl	800cffc <memcpy>
 800e9e8:	0021      	movs	r1, r4
 800e9ea:	9801      	ldr	r0, [sp, #4]
 800e9ec:	f7ff ffa6 	bl	800e93c <_Bfree>
 800e9f0:	0034      	movs	r4, r6
 800e9f2:	1d3b      	adds	r3, r7, #4
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	18e3      	adds	r3, r4, r3
 800e9f8:	605d      	str	r5, [r3, #4]
 800e9fa:	1c7b      	adds	r3, r7, #1
 800e9fc:	6123      	str	r3, [r4, #16]
 800e9fe:	0020      	movs	r0, r4
 800ea00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ea02:	46c0      	nop			; (mov r8, r8)
 800ea04:	080103af 	.word	0x080103af
 800ea08:	080103c0 	.word	0x080103c0

0800ea0c <__hi0bits>:
 800ea0c:	0003      	movs	r3, r0
 800ea0e:	0c02      	lsrs	r2, r0, #16
 800ea10:	2000      	movs	r0, #0
 800ea12:	4282      	cmp	r2, r0
 800ea14:	d101      	bne.n	800ea1a <__hi0bits+0xe>
 800ea16:	041b      	lsls	r3, r3, #16
 800ea18:	3010      	adds	r0, #16
 800ea1a:	0e1a      	lsrs	r2, r3, #24
 800ea1c:	d101      	bne.n	800ea22 <__hi0bits+0x16>
 800ea1e:	3008      	adds	r0, #8
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	0f1a      	lsrs	r2, r3, #28
 800ea24:	d101      	bne.n	800ea2a <__hi0bits+0x1e>
 800ea26:	3004      	adds	r0, #4
 800ea28:	011b      	lsls	r3, r3, #4
 800ea2a:	0f9a      	lsrs	r2, r3, #30
 800ea2c:	d101      	bne.n	800ea32 <__hi0bits+0x26>
 800ea2e:	3002      	adds	r0, #2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	db03      	blt.n	800ea3e <__hi0bits+0x32>
 800ea36:	3001      	adds	r0, #1
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	d400      	bmi.n	800ea3e <__hi0bits+0x32>
 800ea3c:	2020      	movs	r0, #32
 800ea3e:	4770      	bx	lr

0800ea40 <__lo0bits>:
 800ea40:	6803      	ldr	r3, [r0, #0]
 800ea42:	0002      	movs	r2, r0
 800ea44:	2107      	movs	r1, #7
 800ea46:	0018      	movs	r0, r3
 800ea48:	4008      	ands	r0, r1
 800ea4a:	420b      	tst	r3, r1
 800ea4c:	d00d      	beq.n	800ea6a <__lo0bits+0x2a>
 800ea4e:	3906      	subs	r1, #6
 800ea50:	2000      	movs	r0, #0
 800ea52:	420b      	tst	r3, r1
 800ea54:	d105      	bne.n	800ea62 <__lo0bits+0x22>
 800ea56:	3002      	adds	r0, #2
 800ea58:	4203      	tst	r3, r0
 800ea5a:	d003      	beq.n	800ea64 <__lo0bits+0x24>
 800ea5c:	40cb      	lsrs	r3, r1
 800ea5e:	0008      	movs	r0, r1
 800ea60:	6013      	str	r3, [r2, #0]
 800ea62:	4770      	bx	lr
 800ea64:	089b      	lsrs	r3, r3, #2
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	e7fb      	b.n	800ea62 <__lo0bits+0x22>
 800ea6a:	b299      	uxth	r1, r3
 800ea6c:	2900      	cmp	r1, #0
 800ea6e:	d101      	bne.n	800ea74 <__lo0bits+0x34>
 800ea70:	2010      	movs	r0, #16
 800ea72:	0c1b      	lsrs	r3, r3, #16
 800ea74:	b2d9      	uxtb	r1, r3
 800ea76:	2900      	cmp	r1, #0
 800ea78:	d101      	bne.n	800ea7e <__lo0bits+0x3e>
 800ea7a:	3008      	adds	r0, #8
 800ea7c:	0a1b      	lsrs	r3, r3, #8
 800ea7e:	0719      	lsls	r1, r3, #28
 800ea80:	d101      	bne.n	800ea86 <__lo0bits+0x46>
 800ea82:	3004      	adds	r0, #4
 800ea84:	091b      	lsrs	r3, r3, #4
 800ea86:	0799      	lsls	r1, r3, #30
 800ea88:	d101      	bne.n	800ea8e <__lo0bits+0x4e>
 800ea8a:	3002      	adds	r0, #2
 800ea8c:	089b      	lsrs	r3, r3, #2
 800ea8e:	07d9      	lsls	r1, r3, #31
 800ea90:	d4e9      	bmi.n	800ea66 <__lo0bits+0x26>
 800ea92:	3001      	adds	r0, #1
 800ea94:	085b      	lsrs	r3, r3, #1
 800ea96:	d1e6      	bne.n	800ea66 <__lo0bits+0x26>
 800ea98:	2020      	movs	r0, #32
 800ea9a:	e7e2      	b.n	800ea62 <__lo0bits+0x22>

0800ea9c <__i2b>:
 800ea9c:	b510      	push	{r4, lr}
 800ea9e:	000c      	movs	r4, r1
 800eaa0:	2101      	movs	r1, #1
 800eaa2:	f7ff ff07 	bl	800e8b4 <_Balloc>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d106      	bne.n	800eab8 <__i2b+0x1c>
 800eaaa:	21a0      	movs	r1, #160	; 0xa0
 800eaac:	0002      	movs	r2, r0
 800eaae:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <__i2b+0x24>)
 800eab0:	4804      	ldr	r0, [pc, #16]	; (800eac4 <__i2b+0x28>)
 800eab2:	0049      	lsls	r1, r1, #1
 800eab4:	f000 fc28 	bl	800f308 <__assert_func>
 800eab8:	2301      	movs	r3, #1
 800eaba:	6144      	str	r4, [r0, #20]
 800eabc:	6103      	str	r3, [r0, #16]
 800eabe:	bd10      	pop	{r4, pc}
 800eac0:	080103af 	.word	0x080103af
 800eac4:	080103c0 	.word	0x080103c0

0800eac8 <__multiply>:
 800eac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaca:	690b      	ldr	r3, [r1, #16]
 800eacc:	0014      	movs	r4, r2
 800eace:	6912      	ldr	r2, [r2, #16]
 800ead0:	000d      	movs	r5, r1
 800ead2:	b089      	sub	sp, #36	; 0x24
 800ead4:	4293      	cmp	r3, r2
 800ead6:	da01      	bge.n	800eadc <__multiply+0x14>
 800ead8:	0025      	movs	r5, r4
 800eada:	000c      	movs	r4, r1
 800eadc:	692f      	ldr	r7, [r5, #16]
 800eade:	6926      	ldr	r6, [r4, #16]
 800eae0:	6869      	ldr	r1, [r5, #4]
 800eae2:	19bb      	adds	r3, r7, r6
 800eae4:	9302      	str	r3, [sp, #8]
 800eae6:	68ab      	ldr	r3, [r5, #8]
 800eae8:	19ba      	adds	r2, r7, r6
 800eaea:	4293      	cmp	r3, r2
 800eaec:	da00      	bge.n	800eaf0 <__multiply+0x28>
 800eaee:	3101      	adds	r1, #1
 800eaf0:	f7ff fee0 	bl	800e8b4 <_Balloc>
 800eaf4:	9001      	str	r0, [sp, #4]
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d106      	bne.n	800eb08 <__multiply+0x40>
 800eafa:	215e      	movs	r1, #94	; 0x5e
 800eafc:	0002      	movs	r2, r0
 800eafe:	4b48      	ldr	r3, [pc, #288]	; (800ec20 <__multiply+0x158>)
 800eb00:	4848      	ldr	r0, [pc, #288]	; (800ec24 <__multiply+0x15c>)
 800eb02:	31ff      	adds	r1, #255	; 0xff
 800eb04:	f000 fc00 	bl	800f308 <__assert_func>
 800eb08:	9b01      	ldr	r3, [sp, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	3314      	adds	r3, #20
 800eb0e:	469c      	mov	ip, r3
 800eb10:	19bb      	adds	r3, r7, r6
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	4463      	add	r3, ip
 800eb16:	9303      	str	r3, [sp, #12]
 800eb18:	4663      	mov	r3, ip
 800eb1a:	9903      	ldr	r1, [sp, #12]
 800eb1c:	428b      	cmp	r3, r1
 800eb1e:	d32c      	bcc.n	800eb7a <__multiply+0xb2>
 800eb20:	002b      	movs	r3, r5
 800eb22:	0022      	movs	r2, r4
 800eb24:	3314      	adds	r3, #20
 800eb26:	00bf      	lsls	r7, r7, #2
 800eb28:	3214      	adds	r2, #20
 800eb2a:	9306      	str	r3, [sp, #24]
 800eb2c:	00b6      	lsls	r6, r6, #2
 800eb2e:	19db      	adds	r3, r3, r7
 800eb30:	9304      	str	r3, [sp, #16]
 800eb32:	1993      	adds	r3, r2, r6
 800eb34:	9307      	str	r3, [sp, #28]
 800eb36:	2304      	movs	r3, #4
 800eb38:	9305      	str	r3, [sp, #20]
 800eb3a:	002b      	movs	r3, r5
 800eb3c:	9904      	ldr	r1, [sp, #16]
 800eb3e:	3315      	adds	r3, #21
 800eb40:	9200      	str	r2, [sp, #0]
 800eb42:	4299      	cmp	r1, r3
 800eb44:	d305      	bcc.n	800eb52 <__multiply+0x8a>
 800eb46:	1b4b      	subs	r3, r1, r5
 800eb48:	3b15      	subs	r3, #21
 800eb4a:	089b      	lsrs	r3, r3, #2
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	9305      	str	r3, [sp, #20]
 800eb52:	9b07      	ldr	r3, [sp, #28]
 800eb54:	9a00      	ldr	r2, [sp, #0]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d311      	bcc.n	800eb7e <__multiply+0xb6>
 800eb5a:	9b02      	ldr	r3, [sp, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	dd06      	ble.n	800eb6e <__multiply+0xa6>
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	3b04      	subs	r3, #4
 800eb64:	9303      	str	r3, [sp, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d053      	beq.n	800ec16 <__multiply+0x14e>
 800eb6e:	9b01      	ldr	r3, [sp, #4]
 800eb70:	9a02      	ldr	r2, [sp, #8]
 800eb72:	0018      	movs	r0, r3
 800eb74:	611a      	str	r2, [r3, #16]
 800eb76:	b009      	add	sp, #36	; 0x24
 800eb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb7a:	c304      	stmia	r3!, {r2}
 800eb7c:	e7cd      	b.n	800eb1a <__multiply+0x52>
 800eb7e:	9b00      	ldr	r3, [sp, #0]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	b298      	uxth	r0, r3
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d01b      	beq.n	800ebc0 <__multiply+0xf8>
 800eb88:	4667      	mov	r7, ip
 800eb8a:	2400      	movs	r4, #0
 800eb8c:	9e06      	ldr	r6, [sp, #24]
 800eb8e:	ce02      	ldmia	r6!, {r1}
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	b28b      	uxth	r3, r1
 800eb94:	4343      	muls	r3, r0
 800eb96:	b292      	uxth	r2, r2
 800eb98:	189b      	adds	r3, r3, r2
 800eb9a:	191b      	adds	r3, r3, r4
 800eb9c:	0c0c      	lsrs	r4, r1, #16
 800eb9e:	4344      	muls	r4, r0
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	0c11      	lsrs	r1, r2, #16
 800eba4:	1861      	adds	r1, r4, r1
 800eba6:	0c1c      	lsrs	r4, r3, #16
 800eba8:	1909      	adds	r1, r1, r4
 800ebaa:	0c0c      	lsrs	r4, r1, #16
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	0409      	lsls	r1, r1, #16
 800ebb0:	430b      	orrs	r3, r1
 800ebb2:	c708      	stmia	r7!, {r3}
 800ebb4:	9b04      	ldr	r3, [sp, #16]
 800ebb6:	42b3      	cmp	r3, r6
 800ebb8:	d8e9      	bhi.n	800eb8e <__multiply+0xc6>
 800ebba:	4663      	mov	r3, ip
 800ebbc:	9a05      	ldr	r2, [sp, #20]
 800ebbe:	509c      	str	r4, [r3, r2]
 800ebc0:	9b00      	ldr	r3, [sp, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	0c1e      	lsrs	r6, r3, #16
 800ebc6:	d020      	beq.n	800ec0a <__multiply+0x142>
 800ebc8:	4663      	mov	r3, ip
 800ebca:	002c      	movs	r4, r5
 800ebcc:	4660      	mov	r0, ip
 800ebce:	2700      	movs	r7, #0
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	3414      	adds	r4, #20
 800ebd4:	6822      	ldr	r2, [r4, #0]
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	b291      	uxth	r1, r2
 800ebda:	4371      	muls	r1, r6
 800ebdc:	6802      	ldr	r2, [r0, #0]
 800ebde:	0c12      	lsrs	r2, r2, #16
 800ebe0:	1889      	adds	r1, r1, r2
 800ebe2:	19cf      	adds	r7, r1, r7
 800ebe4:	0439      	lsls	r1, r7, #16
 800ebe6:	430b      	orrs	r3, r1
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	cc02      	ldmia	r4!, {r1}
 800ebec:	6843      	ldr	r3, [r0, #4]
 800ebee:	0c09      	lsrs	r1, r1, #16
 800ebf0:	4371      	muls	r1, r6
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	0c3f      	lsrs	r7, r7, #16
 800ebf6:	18cb      	adds	r3, r1, r3
 800ebf8:	9a04      	ldr	r2, [sp, #16]
 800ebfa:	19db      	adds	r3, r3, r7
 800ebfc:	0c1f      	lsrs	r7, r3, #16
 800ebfe:	3004      	adds	r0, #4
 800ec00:	42a2      	cmp	r2, r4
 800ec02:	d8e7      	bhi.n	800ebd4 <__multiply+0x10c>
 800ec04:	4662      	mov	r2, ip
 800ec06:	9905      	ldr	r1, [sp, #20]
 800ec08:	5053      	str	r3, [r2, r1]
 800ec0a:	9b00      	ldr	r3, [sp, #0]
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	2304      	movs	r3, #4
 800ec12:	449c      	add	ip, r3
 800ec14:	e79d      	b.n	800eb52 <__multiply+0x8a>
 800ec16:	9b02      	ldr	r3, [sp, #8]
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	9302      	str	r3, [sp, #8]
 800ec1c:	e79d      	b.n	800eb5a <__multiply+0x92>
 800ec1e:	46c0      	nop			; (mov r8, r8)
 800ec20:	080103af 	.word	0x080103af
 800ec24:	080103c0 	.word	0x080103c0

0800ec28 <__pow5mult>:
 800ec28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	0015      	movs	r5, r2
 800ec2e:	0007      	movs	r7, r0
 800ec30:	000e      	movs	r6, r1
 800ec32:	401a      	ands	r2, r3
 800ec34:	421d      	tst	r5, r3
 800ec36:	d008      	beq.n	800ec4a <__pow5mult+0x22>
 800ec38:	4925      	ldr	r1, [pc, #148]	; (800ecd0 <__pow5mult+0xa8>)
 800ec3a:	3a01      	subs	r2, #1
 800ec3c:	0092      	lsls	r2, r2, #2
 800ec3e:	5852      	ldr	r2, [r2, r1]
 800ec40:	2300      	movs	r3, #0
 800ec42:	0031      	movs	r1, r6
 800ec44:	f7ff fe9e 	bl	800e984 <__multadd>
 800ec48:	0006      	movs	r6, r0
 800ec4a:	10ad      	asrs	r5, r5, #2
 800ec4c:	d03d      	beq.n	800ecca <__pow5mult+0xa2>
 800ec4e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ec50:	2c00      	cmp	r4, #0
 800ec52:	d10f      	bne.n	800ec74 <__pow5mult+0x4c>
 800ec54:	2010      	movs	r0, #16
 800ec56:	f7fe f9bd 	bl	800cfd4 <malloc>
 800ec5a:	1e02      	subs	r2, r0, #0
 800ec5c:	6278      	str	r0, [r7, #36]	; 0x24
 800ec5e:	d105      	bne.n	800ec6c <__pow5mult+0x44>
 800ec60:	21d7      	movs	r1, #215	; 0xd7
 800ec62:	4b1c      	ldr	r3, [pc, #112]	; (800ecd4 <__pow5mult+0xac>)
 800ec64:	481c      	ldr	r0, [pc, #112]	; (800ecd8 <__pow5mult+0xb0>)
 800ec66:	0049      	lsls	r1, r1, #1
 800ec68:	f000 fb4e 	bl	800f308 <__assert_func>
 800ec6c:	6044      	str	r4, [r0, #4]
 800ec6e:	6084      	str	r4, [r0, #8]
 800ec70:	6004      	str	r4, [r0, #0]
 800ec72:	60c4      	str	r4, [r0, #12]
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	689c      	ldr	r4, [r3, #8]
 800ec78:	9301      	str	r3, [sp, #4]
 800ec7a:	2c00      	cmp	r4, #0
 800ec7c:	d108      	bne.n	800ec90 <__pow5mult+0x68>
 800ec7e:	0038      	movs	r0, r7
 800ec80:	4916      	ldr	r1, [pc, #88]	; (800ecdc <__pow5mult+0xb4>)
 800ec82:	f7ff ff0b 	bl	800ea9c <__i2b>
 800ec86:	9b01      	ldr	r3, [sp, #4]
 800ec88:	0004      	movs	r4, r0
 800ec8a:	6098      	str	r0, [r3, #8]
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	6003      	str	r3, [r0, #0]
 800ec90:	2301      	movs	r3, #1
 800ec92:	421d      	tst	r5, r3
 800ec94:	d00a      	beq.n	800ecac <__pow5mult+0x84>
 800ec96:	0031      	movs	r1, r6
 800ec98:	0022      	movs	r2, r4
 800ec9a:	0038      	movs	r0, r7
 800ec9c:	f7ff ff14 	bl	800eac8 <__multiply>
 800eca0:	0031      	movs	r1, r6
 800eca2:	9001      	str	r0, [sp, #4]
 800eca4:	0038      	movs	r0, r7
 800eca6:	f7ff fe49 	bl	800e93c <_Bfree>
 800ecaa:	9e01      	ldr	r6, [sp, #4]
 800ecac:	106d      	asrs	r5, r5, #1
 800ecae:	d00c      	beq.n	800ecca <__pow5mult+0xa2>
 800ecb0:	6820      	ldr	r0, [r4, #0]
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d107      	bne.n	800ecc6 <__pow5mult+0x9e>
 800ecb6:	0022      	movs	r2, r4
 800ecb8:	0021      	movs	r1, r4
 800ecba:	0038      	movs	r0, r7
 800ecbc:	f7ff ff04 	bl	800eac8 <__multiply>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	6020      	str	r0, [r4, #0]
 800ecc4:	6003      	str	r3, [r0, #0]
 800ecc6:	0004      	movs	r4, r0
 800ecc8:	e7e2      	b.n	800ec90 <__pow5mult+0x68>
 800ecca:	0030      	movs	r0, r6
 800eccc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ecce:	46c0      	nop			; (mov r8, r8)
 800ecd0:	08010510 	.word	0x08010510
 800ecd4:	0801033d 	.word	0x0801033d
 800ecd8:	080103c0 	.word	0x080103c0
 800ecdc:	00000271 	.word	0x00000271

0800ece0 <__lshift>:
 800ece0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece2:	000c      	movs	r4, r1
 800ece4:	0017      	movs	r7, r2
 800ece6:	6923      	ldr	r3, [r4, #16]
 800ece8:	1155      	asrs	r5, r2, #5
 800ecea:	b087      	sub	sp, #28
 800ecec:	18eb      	adds	r3, r5, r3
 800ecee:	9302      	str	r3, [sp, #8]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	9301      	str	r3, [sp, #4]
 800ecf4:	6849      	ldr	r1, [r1, #4]
 800ecf6:	68a3      	ldr	r3, [r4, #8]
 800ecf8:	9004      	str	r0, [sp, #16]
 800ecfa:	9a01      	ldr	r2, [sp, #4]
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	db10      	blt.n	800ed22 <__lshift+0x42>
 800ed00:	9804      	ldr	r0, [sp, #16]
 800ed02:	f7ff fdd7 	bl	800e8b4 <_Balloc>
 800ed06:	2300      	movs	r3, #0
 800ed08:	0002      	movs	r2, r0
 800ed0a:	0006      	movs	r6, r0
 800ed0c:	0019      	movs	r1, r3
 800ed0e:	3214      	adds	r2, #20
 800ed10:	4298      	cmp	r0, r3
 800ed12:	d10c      	bne.n	800ed2e <__lshift+0x4e>
 800ed14:	21da      	movs	r1, #218	; 0xda
 800ed16:	0002      	movs	r2, r0
 800ed18:	4b26      	ldr	r3, [pc, #152]	; (800edb4 <__lshift+0xd4>)
 800ed1a:	4827      	ldr	r0, [pc, #156]	; (800edb8 <__lshift+0xd8>)
 800ed1c:	31ff      	adds	r1, #255	; 0xff
 800ed1e:	f000 faf3 	bl	800f308 <__assert_func>
 800ed22:	3101      	adds	r1, #1
 800ed24:	005b      	lsls	r3, r3, #1
 800ed26:	e7e8      	b.n	800ecfa <__lshift+0x1a>
 800ed28:	0098      	lsls	r0, r3, #2
 800ed2a:	5011      	str	r1, [r2, r0]
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	42ab      	cmp	r3, r5
 800ed30:	dbfa      	blt.n	800ed28 <__lshift+0x48>
 800ed32:	43eb      	mvns	r3, r5
 800ed34:	17db      	asrs	r3, r3, #31
 800ed36:	401d      	ands	r5, r3
 800ed38:	211f      	movs	r1, #31
 800ed3a:	0023      	movs	r3, r4
 800ed3c:	0038      	movs	r0, r7
 800ed3e:	00ad      	lsls	r5, r5, #2
 800ed40:	1955      	adds	r5, r2, r5
 800ed42:	6922      	ldr	r2, [r4, #16]
 800ed44:	3314      	adds	r3, #20
 800ed46:	0092      	lsls	r2, r2, #2
 800ed48:	4008      	ands	r0, r1
 800ed4a:	4684      	mov	ip, r0
 800ed4c:	189a      	adds	r2, r3, r2
 800ed4e:	420f      	tst	r7, r1
 800ed50:	d02a      	beq.n	800eda8 <__lshift+0xc8>
 800ed52:	3101      	adds	r1, #1
 800ed54:	1a09      	subs	r1, r1, r0
 800ed56:	9105      	str	r1, [sp, #20]
 800ed58:	2100      	movs	r1, #0
 800ed5a:	9503      	str	r5, [sp, #12]
 800ed5c:	4667      	mov	r7, ip
 800ed5e:	6818      	ldr	r0, [r3, #0]
 800ed60:	40b8      	lsls	r0, r7
 800ed62:	4301      	orrs	r1, r0
 800ed64:	9803      	ldr	r0, [sp, #12]
 800ed66:	c002      	stmia	r0!, {r1}
 800ed68:	cb02      	ldmia	r3!, {r1}
 800ed6a:	9003      	str	r0, [sp, #12]
 800ed6c:	9805      	ldr	r0, [sp, #20]
 800ed6e:	40c1      	lsrs	r1, r0
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d8f3      	bhi.n	800ed5c <__lshift+0x7c>
 800ed74:	0020      	movs	r0, r4
 800ed76:	3015      	adds	r0, #21
 800ed78:	2304      	movs	r3, #4
 800ed7a:	4282      	cmp	r2, r0
 800ed7c:	d304      	bcc.n	800ed88 <__lshift+0xa8>
 800ed7e:	1b13      	subs	r3, r2, r4
 800ed80:	3b15      	subs	r3, #21
 800ed82:	089b      	lsrs	r3, r3, #2
 800ed84:	3301      	adds	r3, #1
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	50e9      	str	r1, [r5, r3]
 800ed8a:	2900      	cmp	r1, #0
 800ed8c:	d002      	beq.n	800ed94 <__lshift+0xb4>
 800ed8e:	9b02      	ldr	r3, [sp, #8]
 800ed90:	3302      	adds	r3, #2
 800ed92:	9301      	str	r3, [sp, #4]
 800ed94:	9b01      	ldr	r3, [sp, #4]
 800ed96:	9804      	ldr	r0, [sp, #16]
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	0021      	movs	r1, r4
 800ed9c:	6133      	str	r3, [r6, #16]
 800ed9e:	f7ff fdcd 	bl	800e93c <_Bfree>
 800eda2:	0030      	movs	r0, r6
 800eda4:	b007      	add	sp, #28
 800eda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eda8:	cb02      	ldmia	r3!, {r1}
 800edaa:	c502      	stmia	r5!, {r1}
 800edac:	429a      	cmp	r2, r3
 800edae:	d8fb      	bhi.n	800eda8 <__lshift+0xc8>
 800edb0:	e7f0      	b.n	800ed94 <__lshift+0xb4>
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	080103af 	.word	0x080103af
 800edb8:	080103c0 	.word	0x080103c0

0800edbc <__mcmp>:
 800edbc:	6902      	ldr	r2, [r0, #16]
 800edbe:	690b      	ldr	r3, [r1, #16]
 800edc0:	b530      	push	{r4, r5, lr}
 800edc2:	0004      	movs	r4, r0
 800edc4:	1ad0      	subs	r0, r2, r3
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d10d      	bne.n	800ede6 <__mcmp+0x2a>
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	3414      	adds	r4, #20
 800edce:	3114      	adds	r1, #20
 800edd0:	18e2      	adds	r2, r4, r3
 800edd2:	18c9      	adds	r1, r1, r3
 800edd4:	3a04      	subs	r2, #4
 800edd6:	3904      	subs	r1, #4
 800edd8:	6815      	ldr	r5, [r2, #0]
 800edda:	680b      	ldr	r3, [r1, #0]
 800eddc:	429d      	cmp	r5, r3
 800edde:	d003      	beq.n	800ede8 <__mcmp+0x2c>
 800ede0:	2001      	movs	r0, #1
 800ede2:	429d      	cmp	r5, r3
 800ede4:	d303      	bcc.n	800edee <__mcmp+0x32>
 800ede6:	bd30      	pop	{r4, r5, pc}
 800ede8:	4294      	cmp	r4, r2
 800edea:	d3f3      	bcc.n	800edd4 <__mcmp+0x18>
 800edec:	e7fb      	b.n	800ede6 <__mcmp+0x2a>
 800edee:	4240      	negs	r0, r0
 800edf0:	e7f9      	b.n	800ede6 <__mcmp+0x2a>
	...

0800edf4 <__mdiff>:
 800edf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edf6:	000e      	movs	r6, r1
 800edf8:	0007      	movs	r7, r0
 800edfa:	0011      	movs	r1, r2
 800edfc:	0030      	movs	r0, r6
 800edfe:	b087      	sub	sp, #28
 800ee00:	0014      	movs	r4, r2
 800ee02:	f7ff ffdb 	bl	800edbc <__mcmp>
 800ee06:	1e05      	subs	r5, r0, #0
 800ee08:	d110      	bne.n	800ee2c <__mdiff+0x38>
 800ee0a:	0001      	movs	r1, r0
 800ee0c:	0038      	movs	r0, r7
 800ee0e:	f7ff fd51 	bl	800e8b4 <_Balloc>
 800ee12:	1e02      	subs	r2, r0, #0
 800ee14:	d104      	bne.n	800ee20 <__mdiff+0x2c>
 800ee16:	4b40      	ldr	r3, [pc, #256]	; (800ef18 <__mdiff+0x124>)
 800ee18:	4940      	ldr	r1, [pc, #256]	; (800ef1c <__mdiff+0x128>)
 800ee1a:	4841      	ldr	r0, [pc, #260]	; (800ef20 <__mdiff+0x12c>)
 800ee1c:	f000 fa74 	bl	800f308 <__assert_func>
 800ee20:	2301      	movs	r3, #1
 800ee22:	6145      	str	r5, [r0, #20]
 800ee24:	6103      	str	r3, [r0, #16]
 800ee26:	0010      	movs	r0, r2
 800ee28:	b007      	add	sp, #28
 800ee2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	9301      	str	r3, [sp, #4]
 800ee30:	2800      	cmp	r0, #0
 800ee32:	db04      	blt.n	800ee3e <__mdiff+0x4a>
 800ee34:	0023      	movs	r3, r4
 800ee36:	0034      	movs	r4, r6
 800ee38:	001e      	movs	r6, r3
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	0038      	movs	r0, r7
 800ee40:	6861      	ldr	r1, [r4, #4]
 800ee42:	f7ff fd37 	bl	800e8b4 <_Balloc>
 800ee46:	1e02      	subs	r2, r0, #0
 800ee48:	d103      	bne.n	800ee52 <__mdiff+0x5e>
 800ee4a:	2190      	movs	r1, #144	; 0x90
 800ee4c:	4b32      	ldr	r3, [pc, #200]	; (800ef18 <__mdiff+0x124>)
 800ee4e:	0089      	lsls	r1, r1, #2
 800ee50:	e7e3      	b.n	800ee1a <__mdiff+0x26>
 800ee52:	9b01      	ldr	r3, [sp, #4]
 800ee54:	2700      	movs	r7, #0
 800ee56:	60c3      	str	r3, [r0, #12]
 800ee58:	6920      	ldr	r0, [r4, #16]
 800ee5a:	3414      	adds	r4, #20
 800ee5c:	9401      	str	r4, [sp, #4]
 800ee5e:	9b01      	ldr	r3, [sp, #4]
 800ee60:	0084      	lsls	r4, r0, #2
 800ee62:	191b      	adds	r3, r3, r4
 800ee64:	0034      	movs	r4, r6
 800ee66:	9302      	str	r3, [sp, #8]
 800ee68:	6933      	ldr	r3, [r6, #16]
 800ee6a:	3414      	adds	r4, #20
 800ee6c:	0099      	lsls	r1, r3, #2
 800ee6e:	1863      	adds	r3, r4, r1
 800ee70:	9303      	str	r3, [sp, #12]
 800ee72:	0013      	movs	r3, r2
 800ee74:	3314      	adds	r3, #20
 800ee76:	469c      	mov	ip, r3
 800ee78:	9305      	str	r3, [sp, #20]
 800ee7a:	9b01      	ldr	r3, [sp, #4]
 800ee7c:	9304      	str	r3, [sp, #16]
 800ee7e:	9b04      	ldr	r3, [sp, #16]
 800ee80:	cc02      	ldmia	r4!, {r1}
 800ee82:	cb20      	ldmia	r3!, {r5}
 800ee84:	9304      	str	r3, [sp, #16]
 800ee86:	b2ab      	uxth	r3, r5
 800ee88:	19df      	adds	r7, r3, r7
 800ee8a:	b28b      	uxth	r3, r1
 800ee8c:	1afb      	subs	r3, r7, r3
 800ee8e:	0c09      	lsrs	r1, r1, #16
 800ee90:	0c2d      	lsrs	r5, r5, #16
 800ee92:	1a6d      	subs	r5, r5, r1
 800ee94:	1419      	asrs	r1, r3, #16
 800ee96:	186d      	adds	r5, r5, r1
 800ee98:	4661      	mov	r1, ip
 800ee9a:	142f      	asrs	r7, r5, #16
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	042d      	lsls	r5, r5, #16
 800eea0:	432b      	orrs	r3, r5
 800eea2:	c108      	stmia	r1!, {r3}
 800eea4:	9b03      	ldr	r3, [sp, #12]
 800eea6:	468c      	mov	ip, r1
 800eea8:	42a3      	cmp	r3, r4
 800eeaa:	d8e8      	bhi.n	800ee7e <__mdiff+0x8a>
 800eeac:	0031      	movs	r1, r6
 800eeae:	9c03      	ldr	r4, [sp, #12]
 800eeb0:	3115      	adds	r1, #21
 800eeb2:	2304      	movs	r3, #4
 800eeb4:	428c      	cmp	r4, r1
 800eeb6:	d304      	bcc.n	800eec2 <__mdiff+0xce>
 800eeb8:	1ba3      	subs	r3, r4, r6
 800eeba:	3b15      	subs	r3, #21
 800eebc:	089b      	lsrs	r3, r3, #2
 800eebe:	3301      	adds	r3, #1
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	9901      	ldr	r1, [sp, #4]
 800eec4:	18cc      	adds	r4, r1, r3
 800eec6:	9905      	ldr	r1, [sp, #20]
 800eec8:	0026      	movs	r6, r4
 800eeca:	18cb      	adds	r3, r1, r3
 800eecc:	469c      	mov	ip, r3
 800eece:	9902      	ldr	r1, [sp, #8]
 800eed0:	428e      	cmp	r6, r1
 800eed2:	d310      	bcc.n	800eef6 <__mdiff+0x102>
 800eed4:	9e02      	ldr	r6, [sp, #8]
 800eed6:	1ee1      	subs	r1, r4, #3
 800eed8:	2500      	movs	r5, #0
 800eeda:	428e      	cmp	r6, r1
 800eedc:	d304      	bcc.n	800eee8 <__mdiff+0xf4>
 800eede:	0031      	movs	r1, r6
 800eee0:	3103      	adds	r1, #3
 800eee2:	1b0c      	subs	r4, r1, r4
 800eee4:	08a4      	lsrs	r4, r4, #2
 800eee6:	00a5      	lsls	r5, r4, #2
 800eee8:	195b      	adds	r3, r3, r5
 800eeea:	3b04      	subs	r3, #4
 800eeec:	6819      	ldr	r1, [r3, #0]
 800eeee:	2900      	cmp	r1, #0
 800eef0:	d00f      	beq.n	800ef12 <__mdiff+0x11e>
 800eef2:	6110      	str	r0, [r2, #16]
 800eef4:	e797      	b.n	800ee26 <__mdiff+0x32>
 800eef6:	ce02      	ldmia	r6!, {r1}
 800eef8:	b28d      	uxth	r5, r1
 800eefa:	19ed      	adds	r5, r5, r7
 800eefc:	0c0f      	lsrs	r7, r1, #16
 800eefe:	1429      	asrs	r1, r5, #16
 800ef00:	1879      	adds	r1, r7, r1
 800ef02:	140f      	asrs	r7, r1, #16
 800ef04:	b2ad      	uxth	r5, r5
 800ef06:	0409      	lsls	r1, r1, #16
 800ef08:	430d      	orrs	r5, r1
 800ef0a:	4661      	mov	r1, ip
 800ef0c:	c120      	stmia	r1!, {r5}
 800ef0e:	468c      	mov	ip, r1
 800ef10:	e7dd      	b.n	800eece <__mdiff+0xda>
 800ef12:	3801      	subs	r0, #1
 800ef14:	e7e9      	b.n	800eeea <__mdiff+0xf6>
 800ef16:	46c0      	nop			; (mov r8, r8)
 800ef18:	080103af 	.word	0x080103af
 800ef1c:	00000232 	.word	0x00000232
 800ef20:	080103c0 	.word	0x080103c0

0800ef24 <__d2b>:
 800ef24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef26:	2101      	movs	r1, #1
 800ef28:	0014      	movs	r4, r2
 800ef2a:	001e      	movs	r6, r3
 800ef2c:	9f08      	ldr	r7, [sp, #32]
 800ef2e:	f7ff fcc1 	bl	800e8b4 <_Balloc>
 800ef32:	1e05      	subs	r5, r0, #0
 800ef34:	d105      	bne.n	800ef42 <__d2b+0x1e>
 800ef36:	0002      	movs	r2, r0
 800ef38:	4b26      	ldr	r3, [pc, #152]	; (800efd4 <__d2b+0xb0>)
 800ef3a:	4927      	ldr	r1, [pc, #156]	; (800efd8 <__d2b+0xb4>)
 800ef3c:	4827      	ldr	r0, [pc, #156]	; (800efdc <__d2b+0xb8>)
 800ef3e:	f000 f9e3 	bl	800f308 <__assert_func>
 800ef42:	0333      	lsls	r3, r6, #12
 800ef44:	0076      	lsls	r6, r6, #1
 800ef46:	0b1b      	lsrs	r3, r3, #12
 800ef48:	0d76      	lsrs	r6, r6, #21
 800ef4a:	d124      	bne.n	800ef96 <__d2b+0x72>
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	2c00      	cmp	r4, #0
 800ef50:	d027      	beq.n	800efa2 <__d2b+0x7e>
 800ef52:	4668      	mov	r0, sp
 800ef54:	9400      	str	r4, [sp, #0]
 800ef56:	f7ff fd73 	bl	800ea40 <__lo0bits>
 800ef5a:	9c00      	ldr	r4, [sp, #0]
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d01e      	beq.n	800ef9e <__d2b+0x7a>
 800ef60:	9b01      	ldr	r3, [sp, #4]
 800ef62:	2120      	movs	r1, #32
 800ef64:	001a      	movs	r2, r3
 800ef66:	1a09      	subs	r1, r1, r0
 800ef68:	408a      	lsls	r2, r1
 800ef6a:	40c3      	lsrs	r3, r0
 800ef6c:	4322      	orrs	r2, r4
 800ef6e:	616a      	str	r2, [r5, #20]
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	9c01      	ldr	r4, [sp, #4]
 800ef74:	61ac      	str	r4, [r5, #24]
 800ef76:	1e63      	subs	r3, r4, #1
 800ef78:	419c      	sbcs	r4, r3
 800ef7a:	3401      	adds	r4, #1
 800ef7c:	612c      	str	r4, [r5, #16]
 800ef7e:	2e00      	cmp	r6, #0
 800ef80:	d018      	beq.n	800efb4 <__d2b+0x90>
 800ef82:	4b17      	ldr	r3, [pc, #92]	; (800efe0 <__d2b+0xbc>)
 800ef84:	18f6      	adds	r6, r6, r3
 800ef86:	2335      	movs	r3, #53	; 0x35
 800ef88:	1836      	adds	r6, r6, r0
 800ef8a:	1a18      	subs	r0, r3, r0
 800ef8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef8e:	603e      	str	r6, [r7, #0]
 800ef90:	6018      	str	r0, [r3, #0]
 800ef92:	0028      	movs	r0, r5
 800ef94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef96:	2280      	movs	r2, #128	; 0x80
 800ef98:	0352      	lsls	r2, r2, #13
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	e7d6      	b.n	800ef4c <__d2b+0x28>
 800ef9e:	616c      	str	r4, [r5, #20]
 800efa0:	e7e7      	b.n	800ef72 <__d2b+0x4e>
 800efa2:	a801      	add	r0, sp, #4
 800efa4:	f7ff fd4c 	bl	800ea40 <__lo0bits>
 800efa8:	2401      	movs	r4, #1
 800efaa:	9b01      	ldr	r3, [sp, #4]
 800efac:	612c      	str	r4, [r5, #16]
 800efae:	616b      	str	r3, [r5, #20]
 800efb0:	3020      	adds	r0, #32
 800efb2:	e7e4      	b.n	800ef7e <__d2b+0x5a>
 800efb4:	4b0b      	ldr	r3, [pc, #44]	; (800efe4 <__d2b+0xc0>)
 800efb6:	18c0      	adds	r0, r0, r3
 800efb8:	4b0b      	ldr	r3, [pc, #44]	; (800efe8 <__d2b+0xc4>)
 800efba:	6038      	str	r0, [r7, #0]
 800efbc:	18e3      	adds	r3, r4, r3
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	18eb      	adds	r3, r5, r3
 800efc2:	6958      	ldr	r0, [r3, #20]
 800efc4:	f7ff fd22 	bl	800ea0c <__hi0bits>
 800efc8:	0164      	lsls	r4, r4, #5
 800efca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efcc:	1a24      	subs	r4, r4, r0
 800efce:	601c      	str	r4, [r3, #0]
 800efd0:	e7df      	b.n	800ef92 <__d2b+0x6e>
 800efd2:	46c0      	nop			; (mov r8, r8)
 800efd4:	080103af 	.word	0x080103af
 800efd8:	0000030a 	.word	0x0000030a
 800efdc:	080103c0 	.word	0x080103c0
 800efe0:	fffffbcd 	.word	0xfffffbcd
 800efe4:	fffffbce 	.word	0xfffffbce
 800efe8:	3fffffff 	.word	0x3fffffff

0800efec <_calloc_r>:
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	0c13      	lsrs	r3, r2, #16
 800eff0:	0c0d      	lsrs	r5, r1, #16
 800eff2:	d11e      	bne.n	800f032 <_calloc_r+0x46>
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d10c      	bne.n	800f012 <_calloc_r+0x26>
 800eff8:	b289      	uxth	r1, r1
 800effa:	b294      	uxth	r4, r2
 800effc:	434c      	muls	r4, r1
 800effe:	0021      	movs	r1, r4
 800f000:	f7fe f87a 	bl	800d0f8 <_malloc_r>
 800f004:	1e05      	subs	r5, r0, #0
 800f006:	d01b      	beq.n	800f040 <_calloc_r+0x54>
 800f008:	0022      	movs	r2, r4
 800f00a:	2100      	movs	r1, #0
 800f00c:	f7fd ffff 	bl	800d00e <memset>
 800f010:	e016      	b.n	800f040 <_calloc_r+0x54>
 800f012:	1c1d      	adds	r5, r3, #0
 800f014:	1c0b      	adds	r3, r1, #0
 800f016:	b292      	uxth	r2, r2
 800f018:	b289      	uxth	r1, r1
 800f01a:	b29c      	uxth	r4, r3
 800f01c:	4351      	muls	r1, r2
 800f01e:	b2ab      	uxth	r3, r5
 800f020:	4363      	muls	r3, r4
 800f022:	0c0c      	lsrs	r4, r1, #16
 800f024:	191c      	adds	r4, r3, r4
 800f026:	0c22      	lsrs	r2, r4, #16
 800f028:	d107      	bne.n	800f03a <_calloc_r+0x4e>
 800f02a:	0424      	lsls	r4, r4, #16
 800f02c:	b289      	uxth	r1, r1
 800f02e:	430c      	orrs	r4, r1
 800f030:	e7e5      	b.n	800effe <_calloc_r+0x12>
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <_calloc_r+0x4e>
 800f036:	1c13      	adds	r3, r2, #0
 800f038:	e7ed      	b.n	800f016 <_calloc_r+0x2a>
 800f03a:	230c      	movs	r3, #12
 800f03c:	2500      	movs	r5, #0
 800f03e:	6003      	str	r3, [r0, #0]
 800f040:	0028      	movs	r0, r5
 800f042:	bd70      	pop	{r4, r5, r6, pc}

0800f044 <__ssputs_r>:
 800f044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f046:	688e      	ldr	r6, [r1, #8]
 800f048:	b085      	sub	sp, #20
 800f04a:	0007      	movs	r7, r0
 800f04c:	000c      	movs	r4, r1
 800f04e:	9203      	str	r2, [sp, #12]
 800f050:	9301      	str	r3, [sp, #4]
 800f052:	429e      	cmp	r6, r3
 800f054:	d83c      	bhi.n	800f0d0 <__ssputs_r+0x8c>
 800f056:	2390      	movs	r3, #144	; 0x90
 800f058:	898a      	ldrh	r2, [r1, #12]
 800f05a:	00db      	lsls	r3, r3, #3
 800f05c:	421a      	tst	r2, r3
 800f05e:	d034      	beq.n	800f0ca <__ssputs_r+0x86>
 800f060:	6909      	ldr	r1, [r1, #16]
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	6960      	ldr	r0, [r4, #20]
 800f066:	1a5b      	subs	r3, r3, r1
 800f068:	9302      	str	r3, [sp, #8]
 800f06a:	2303      	movs	r3, #3
 800f06c:	4343      	muls	r3, r0
 800f06e:	0fdd      	lsrs	r5, r3, #31
 800f070:	18ed      	adds	r5, r5, r3
 800f072:	9b01      	ldr	r3, [sp, #4]
 800f074:	9802      	ldr	r0, [sp, #8]
 800f076:	3301      	adds	r3, #1
 800f078:	181b      	adds	r3, r3, r0
 800f07a:	106d      	asrs	r5, r5, #1
 800f07c:	42ab      	cmp	r3, r5
 800f07e:	d900      	bls.n	800f082 <__ssputs_r+0x3e>
 800f080:	001d      	movs	r5, r3
 800f082:	0553      	lsls	r3, r2, #21
 800f084:	d532      	bpl.n	800f0ec <__ssputs_r+0xa8>
 800f086:	0029      	movs	r1, r5
 800f088:	0038      	movs	r0, r7
 800f08a:	f7fe f835 	bl	800d0f8 <_malloc_r>
 800f08e:	1e06      	subs	r6, r0, #0
 800f090:	d109      	bne.n	800f0a6 <__ssputs_r+0x62>
 800f092:	230c      	movs	r3, #12
 800f094:	603b      	str	r3, [r7, #0]
 800f096:	2340      	movs	r3, #64	; 0x40
 800f098:	2001      	movs	r0, #1
 800f09a:	89a2      	ldrh	r2, [r4, #12]
 800f09c:	4240      	negs	r0, r0
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	81a3      	strh	r3, [r4, #12]
 800f0a2:	b005      	add	sp, #20
 800f0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0a6:	9a02      	ldr	r2, [sp, #8]
 800f0a8:	6921      	ldr	r1, [r4, #16]
 800f0aa:	f7fd ffa7 	bl	800cffc <memcpy>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	4a14      	ldr	r2, [pc, #80]	; (800f104 <__ssputs_r+0xc0>)
 800f0b2:	401a      	ands	r2, r3
 800f0b4:	2380      	movs	r3, #128	; 0x80
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	81a3      	strh	r3, [r4, #12]
 800f0ba:	9b02      	ldr	r3, [sp, #8]
 800f0bc:	6126      	str	r6, [r4, #16]
 800f0be:	18f6      	adds	r6, r6, r3
 800f0c0:	6026      	str	r6, [r4, #0]
 800f0c2:	6165      	str	r5, [r4, #20]
 800f0c4:	9e01      	ldr	r6, [sp, #4]
 800f0c6:	1aed      	subs	r5, r5, r3
 800f0c8:	60a5      	str	r5, [r4, #8]
 800f0ca:	9b01      	ldr	r3, [sp, #4]
 800f0cc:	429e      	cmp	r6, r3
 800f0ce:	d900      	bls.n	800f0d2 <__ssputs_r+0x8e>
 800f0d0:	9e01      	ldr	r6, [sp, #4]
 800f0d2:	0032      	movs	r2, r6
 800f0d4:	9903      	ldr	r1, [sp, #12]
 800f0d6:	6820      	ldr	r0, [r4, #0]
 800f0d8:	f000 f959 	bl	800f38e <memmove>
 800f0dc:	68a3      	ldr	r3, [r4, #8]
 800f0de:	2000      	movs	r0, #0
 800f0e0:	1b9b      	subs	r3, r3, r6
 800f0e2:	60a3      	str	r3, [r4, #8]
 800f0e4:	6823      	ldr	r3, [r4, #0]
 800f0e6:	199e      	adds	r6, r3, r6
 800f0e8:	6026      	str	r6, [r4, #0]
 800f0ea:	e7da      	b.n	800f0a2 <__ssputs_r+0x5e>
 800f0ec:	002a      	movs	r2, r5
 800f0ee:	0038      	movs	r0, r7
 800f0f0:	f000 f960 	bl	800f3b4 <_realloc_r>
 800f0f4:	1e06      	subs	r6, r0, #0
 800f0f6:	d1e0      	bne.n	800f0ba <__ssputs_r+0x76>
 800f0f8:	0038      	movs	r0, r7
 800f0fa:	6921      	ldr	r1, [r4, #16]
 800f0fc:	f7fd ff90 	bl	800d020 <_free_r>
 800f100:	e7c7      	b.n	800f092 <__ssputs_r+0x4e>
 800f102:	46c0      	nop			; (mov r8, r8)
 800f104:	fffffb7f 	.word	0xfffffb7f

0800f108 <_svfiprintf_r>:
 800f108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f10a:	b0a1      	sub	sp, #132	; 0x84
 800f10c:	9003      	str	r0, [sp, #12]
 800f10e:	001d      	movs	r5, r3
 800f110:	898b      	ldrh	r3, [r1, #12]
 800f112:	000f      	movs	r7, r1
 800f114:	0016      	movs	r6, r2
 800f116:	061b      	lsls	r3, r3, #24
 800f118:	d511      	bpl.n	800f13e <_svfiprintf_r+0x36>
 800f11a:	690b      	ldr	r3, [r1, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10e      	bne.n	800f13e <_svfiprintf_r+0x36>
 800f120:	2140      	movs	r1, #64	; 0x40
 800f122:	f7fd ffe9 	bl	800d0f8 <_malloc_r>
 800f126:	6038      	str	r0, [r7, #0]
 800f128:	6138      	str	r0, [r7, #16]
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d105      	bne.n	800f13a <_svfiprintf_r+0x32>
 800f12e:	230c      	movs	r3, #12
 800f130:	9a03      	ldr	r2, [sp, #12]
 800f132:	3801      	subs	r0, #1
 800f134:	6013      	str	r3, [r2, #0]
 800f136:	b021      	add	sp, #132	; 0x84
 800f138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f13a:	2340      	movs	r3, #64	; 0x40
 800f13c:	617b      	str	r3, [r7, #20]
 800f13e:	2300      	movs	r3, #0
 800f140:	ac08      	add	r4, sp, #32
 800f142:	6163      	str	r3, [r4, #20]
 800f144:	3320      	adds	r3, #32
 800f146:	7663      	strb	r3, [r4, #25]
 800f148:	3310      	adds	r3, #16
 800f14a:	76a3      	strb	r3, [r4, #26]
 800f14c:	9507      	str	r5, [sp, #28]
 800f14e:	0035      	movs	r5, r6
 800f150:	782b      	ldrb	r3, [r5, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <_svfiprintf_r+0x52>
 800f156:	2b25      	cmp	r3, #37	; 0x25
 800f158:	d147      	bne.n	800f1ea <_svfiprintf_r+0xe2>
 800f15a:	1bab      	subs	r3, r5, r6
 800f15c:	9305      	str	r3, [sp, #20]
 800f15e:	42b5      	cmp	r5, r6
 800f160:	d00c      	beq.n	800f17c <_svfiprintf_r+0x74>
 800f162:	0032      	movs	r2, r6
 800f164:	0039      	movs	r1, r7
 800f166:	9803      	ldr	r0, [sp, #12]
 800f168:	f7ff ff6c 	bl	800f044 <__ssputs_r>
 800f16c:	1c43      	adds	r3, r0, #1
 800f16e:	d100      	bne.n	800f172 <_svfiprintf_r+0x6a>
 800f170:	e0ae      	b.n	800f2d0 <_svfiprintf_r+0x1c8>
 800f172:	6962      	ldr	r2, [r4, #20]
 800f174:	9b05      	ldr	r3, [sp, #20]
 800f176:	4694      	mov	ip, r2
 800f178:	4463      	add	r3, ip
 800f17a:	6163      	str	r3, [r4, #20]
 800f17c:	782b      	ldrb	r3, [r5, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d100      	bne.n	800f184 <_svfiprintf_r+0x7c>
 800f182:	e0a5      	b.n	800f2d0 <_svfiprintf_r+0x1c8>
 800f184:	2201      	movs	r2, #1
 800f186:	2300      	movs	r3, #0
 800f188:	4252      	negs	r2, r2
 800f18a:	6062      	str	r2, [r4, #4]
 800f18c:	a904      	add	r1, sp, #16
 800f18e:	3254      	adds	r2, #84	; 0x54
 800f190:	1852      	adds	r2, r2, r1
 800f192:	1c6e      	adds	r6, r5, #1
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	60e3      	str	r3, [r4, #12]
 800f198:	60a3      	str	r3, [r4, #8]
 800f19a:	7013      	strb	r3, [r2, #0]
 800f19c:	65a3      	str	r3, [r4, #88]	; 0x58
 800f19e:	2205      	movs	r2, #5
 800f1a0:	7831      	ldrb	r1, [r6, #0]
 800f1a2:	4854      	ldr	r0, [pc, #336]	; (800f2f4 <_svfiprintf_r+0x1ec>)
 800f1a4:	f7ff fb6a 	bl	800e87c <memchr>
 800f1a8:	1c75      	adds	r5, r6, #1
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d11f      	bne.n	800f1ee <_svfiprintf_r+0xe6>
 800f1ae:	6822      	ldr	r2, [r4, #0]
 800f1b0:	06d3      	lsls	r3, r2, #27
 800f1b2:	d504      	bpl.n	800f1be <_svfiprintf_r+0xb6>
 800f1b4:	2353      	movs	r3, #83	; 0x53
 800f1b6:	a904      	add	r1, sp, #16
 800f1b8:	185b      	adds	r3, r3, r1
 800f1ba:	2120      	movs	r1, #32
 800f1bc:	7019      	strb	r1, [r3, #0]
 800f1be:	0713      	lsls	r3, r2, #28
 800f1c0:	d504      	bpl.n	800f1cc <_svfiprintf_r+0xc4>
 800f1c2:	2353      	movs	r3, #83	; 0x53
 800f1c4:	a904      	add	r1, sp, #16
 800f1c6:	185b      	adds	r3, r3, r1
 800f1c8:	212b      	movs	r1, #43	; 0x2b
 800f1ca:	7019      	strb	r1, [r3, #0]
 800f1cc:	7833      	ldrb	r3, [r6, #0]
 800f1ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f1d0:	d016      	beq.n	800f200 <_svfiprintf_r+0xf8>
 800f1d2:	0035      	movs	r5, r6
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	200a      	movs	r0, #10
 800f1d8:	68e3      	ldr	r3, [r4, #12]
 800f1da:	782a      	ldrb	r2, [r5, #0]
 800f1dc:	1c6e      	adds	r6, r5, #1
 800f1de:	3a30      	subs	r2, #48	; 0x30
 800f1e0:	2a09      	cmp	r2, #9
 800f1e2:	d94e      	bls.n	800f282 <_svfiprintf_r+0x17a>
 800f1e4:	2900      	cmp	r1, #0
 800f1e6:	d111      	bne.n	800f20c <_svfiprintf_r+0x104>
 800f1e8:	e017      	b.n	800f21a <_svfiprintf_r+0x112>
 800f1ea:	3501      	adds	r5, #1
 800f1ec:	e7b0      	b.n	800f150 <_svfiprintf_r+0x48>
 800f1ee:	4b41      	ldr	r3, [pc, #260]	; (800f2f4 <_svfiprintf_r+0x1ec>)
 800f1f0:	6822      	ldr	r2, [r4, #0]
 800f1f2:	1ac0      	subs	r0, r0, r3
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	4083      	lsls	r3, r0
 800f1f8:	4313      	orrs	r3, r2
 800f1fa:	002e      	movs	r6, r5
 800f1fc:	6023      	str	r3, [r4, #0]
 800f1fe:	e7ce      	b.n	800f19e <_svfiprintf_r+0x96>
 800f200:	9b07      	ldr	r3, [sp, #28]
 800f202:	1d19      	adds	r1, r3, #4
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	9107      	str	r1, [sp, #28]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	db01      	blt.n	800f210 <_svfiprintf_r+0x108>
 800f20c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f20e:	e004      	b.n	800f21a <_svfiprintf_r+0x112>
 800f210:	425b      	negs	r3, r3
 800f212:	60e3      	str	r3, [r4, #12]
 800f214:	2302      	movs	r3, #2
 800f216:	4313      	orrs	r3, r2
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	782b      	ldrb	r3, [r5, #0]
 800f21c:	2b2e      	cmp	r3, #46	; 0x2e
 800f21e:	d10a      	bne.n	800f236 <_svfiprintf_r+0x12e>
 800f220:	786b      	ldrb	r3, [r5, #1]
 800f222:	2b2a      	cmp	r3, #42	; 0x2a
 800f224:	d135      	bne.n	800f292 <_svfiprintf_r+0x18a>
 800f226:	9b07      	ldr	r3, [sp, #28]
 800f228:	3502      	adds	r5, #2
 800f22a:	1d1a      	adds	r2, r3, #4
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	9207      	str	r2, [sp, #28]
 800f230:	2b00      	cmp	r3, #0
 800f232:	db2b      	blt.n	800f28c <_svfiprintf_r+0x184>
 800f234:	9309      	str	r3, [sp, #36]	; 0x24
 800f236:	4e30      	ldr	r6, [pc, #192]	; (800f2f8 <_svfiprintf_r+0x1f0>)
 800f238:	2203      	movs	r2, #3
 800f23a:	0030      	movs	r0, r6
 800f23c:	7829      	ldrb	r1, [r5, #0]
 800f23e:	f7ff fb1d 	bl	800e87c <memchr>
 800f242:	2800      	cmp	r0, #0
 800f244:	d006      	beq.n	800f254 <_svfiprintf_r+0x14c>
 800f246:	2340      	movs	r3, #64	; 0x40
 800f248:	1b80      	subs	r0, r0, r6
 800f24a:	4083      	lsls	r3, r0
 800f24c:	6822      	ldr	r2, [r4, #0]
 800f24e:	3501      	adds	r5, #1
 800f250:	4313      	orrs	r3, r2
 800f252:	6023      	str	r3, [r4, #0]
 800f254:	7829      	ldrb	r1, [r5, #0]
 800f256:	2206      	movs	r2, #6
 800f258:	4828      	ldr	r0, [pc, #160]	; (800f2fc <_svfiprintf_r+0x1f4>)
 800f25a:	1c6e      	adds	r6, r5, #1
 800f25c:	7621      	strb	r1, [r4, #24]
 800f25e:	f7ff fb0d 	bl	800e87c <memchr>
 800f262:	2800      	cmp	r0, #0
 800f264:	d03c      	beq.n	800f2e0 <_svfiprintf_r+0x1d8>
 800f266:	4b26      	ldr	r3, [pc, #152]	; (800f300 <_svfiprintf_r+0x1f8>)
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d125      	bne.n	800f2b8 <_svfiprintf_r+0x1b0>
 800f26c:	2207      	movs	r2, #7
 800f26e:	9b07      	ldr	r3, [sp, #28]
 800f270:	3307      	adds	r3, #7
 800f272:	4393      	bics	r3, r2
 800f274:	3308      	adds	r3, #8
 800f276:	9307      	str	r3, [sp, #28]
 800f278:	6963      	ldr	r3, [r4, #20]
 800f27a:	9a04      	ldr	r2, [sp, #16]
 800f27c:	189b      	adds	r3, r3, r2
 800f27e:	6163      	str	r3, [r4, #20]
 800f280:	e765      	b.n	800f14e <_svfiprintf_r+0x46>
 800f282:	4343      	muls	r3, r0
 800f284:	0035      	movs	r5, r6
 800f286:	2101      	movs	r1, #1
 800f288:	189b      	adds	r3, r3, r2
 800f28a:	e7a6      	b.n	800f1da <_svfiprintf_r+0xd2>
 800f28c:	2301      	movs	r3, #1
 800f28e:	425b      	negs	r3, r3
 800f290:	e7d0      	b.n	800f234 <_svfiprintf_r+0x12c>
 800f292:	2300      	movs	r3, #0
 800f294:	200a      	movs	r0, #10
 800f296:	001a      	movs	r2, r3
 800f298:	3501      	adds	r5, #1
 800f29a:	6063      	str	r3, [r4, #4]
 800f29c:	7829      	ldrb	r1, [r5, #0]
 800f29e:	1c6e      	adds	r6, r5, #1
 800f2a0:	3930      	subs	r1, #48	; 0x30
 800f2a2:	2909      	cmp	r1, #9
 800f2a4:	d903      	bls.n	800f2ae <_svfiprintf_r+0x1a6>
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0c5      	beq.n	800f236 <_svfiprintf_r+0x12e>
 800f2aa:	9209      	str	r2, [sp, #36]	; 0x24
 800f2ac:	e7c3      	b.n	800f236 <_svfiprintf_r+0x12e>
 800f2ae:	4342      	muls	r2, r0
 800f2b0:	0035      	movs	r5, r6
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	1852      	adds	r2, r2, r1
 800f2b6:	e7f1      	b.n	800f29c <_svfiprintf_r+0x194>
 800f2b8:	ab07      	add	r3, sp, #28
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	003a      	movs	r2, r7
 800f2be:	0021      	movs	r1, r4
 800f2c0:	4b10      	ldr	r3, [pc, #64]	; (800f304 <_svfiprintf_r+0x1fc>)
 800f2c2:	9803      	ldr	r0, [sp, #12]
 800f2c4:	f7fe f838 	bl	800d338 <_printf_float>
 800f2c8:	9004      	str	r0, [sp, #16]
 800f2ca:	9b04      	ldr	r3, [sp, #16]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	d1d3      	bne.n	800f278 <_svfiprintf_r+0x170>
 800f2d0:	89bb      	ldrh	r3, [r7, #12]
 800f2d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f2d4:	065b      	lsls	r3, r3, #25
 800f2d6:	d400      	bmi.n	800f2da <_svfiprintf_r+0x1d2>
 800f2d8:	e72d      	b.n	800f136 <_svfiprintf_r+0x2e>
 800f2da:	2001      	movs	r0, #1
 800f2dc:	4240      	negs	r0, r0
 800f2de:	e72a      	b.n	800f136 <_svfiprintf_r+0x2e>
 800f2e0:	ab07      	add	r3, sp, #28
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	003a      	movs	r2, r7
 800f2e6:	0021      	movs	r1, r4
 800f2e8:	4b06      	ldr	r3, [pc, #24]	; (800f304 <_svfiprintf_r+0x1fc>)
 800f2ea:	9803      	ldr	r0, [sp, #12]
 800f2ec:	f7fe fad6 	bl	800d89c <_printf_i>
 800f2f0:	e7ea      	b.n	800f2c8 <_svfiprintf_r+0x1c0>
 800f2f2:	46c0      	nop			; (mov r8, r8)
 800f2f4:	0801051c 	.word	0x0801051c
 800f2f8:	08010522 	.word	0x08010522
 800f2fc:	08010526 	.word	0x08010526
 800f300:	0800d339 	.word	0x0800d339
 800f304:	0800f045 	.word	0x0800f045

0800f308 <__assert_func>:
 800f308:	b530      	push	{r4, r5, lr}
 800f30a:	0014      	movs	r4, r2
 800f30c:	001a      	movs	r2, r3
 800f30e:	4b09      	ldr	r3, [pc, #36]	; (800f334 <__assert_func+0x2c>)
 800f310:	0005      	movs	r5, r0
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	b085      	sub	sp, #20
 800f316:	68d8      	ldr	r0, [r3, #12]
 800f318:	4b07      	ldr	r3, [pc, #28]	; (800f338 <__assert_func+0x30>)
 800f31a:	2c00      	cmp	r4, #0
 800f31c:	d101      	bne.n	800f322 <__assert_func+0x1a>
 800f31e:	4b07      	ldr	r3, [pc, #28]	; (800f33c <__assert_func+0x34>)
 800f320:	001c      	movs	r4, r3
 800f322:	9301      	str	r3, [sp, #4]
 800f324:	9100      	str	r1, [sp, #0]
 800f326:	002b      	movs	r3, r5
 800f328:	4905      	ldr	r1, [pc, #20]	; (800f340 <__assert_func+0x38>)
 800f32a:	9402      	str	r4, [sp, #8]
 800f32c:	f000 f80a 	bl	800f344 <fiprintf>
 800f330:	f000 faac 	bl	800f88c <abort>
 800f334:	200000ac 	.word	0x200000ac
 800f338:	0801052d 	.word	0x0801052d
 800f33c:	08010568 	.word	0x08010568
 800f340:	0801053a 	.word	0x0801053a

0800f344 <fiprintf>:
 800f344:	b40e      	push	{r1, r2, r3}
 800f346:	b503      	push	{r0, r1, lr}
 800f348:	0001      	movs	r1, r0
 800f34a:	ab03      	add	r3, sp, #12
 800f34c:	4804      	ldr	r0, [pc, #16]	; (800f360 <fiprintf+0x1c>)
 800f34e:	cb04      	ldmia	r3!, {r2}
 800f350:	6800      	ldr	r0, [r0, #0]
 800f352:	9301      	str	r3, [sp, #4]
 800f354:	f000 f884 	bl	800f460 <_vfiprintf_r>
 800f358:	b002      	add	sp, #8
 800f35a:	bc08      	pop	{r3}
 800f35c:	b003      	add	sp, #12
 800f35e:	4718      	bx	r3
 800f360:	200000ac 	.word	0x200000ac

0800f364 <__retarget_lock_init_recursive>:
 800f364:	4770      	bx	lr

0800f366 <__retarget_lock_acquire_recursive>:
 800f366:	4770      	bx	lr

0800f368 <__retarget_lock_release_recursive>:
 800f368:	4770      	bx	lr

0800f36a <__ascii_mbtowc>:
 800f36a:	b082      	sub	sp, #8
 800f36c:	2900      	cmp	r1, #0
 800f36e:	d100      	bne.n	800f372 <__ascii_mbtowc+0x8>
 800f370:	a901      	add	r1, sp, #4
 800f372:	1e10      	subs	r0, r2, #0
 800f374:	d006      	beq.n	800f384 <__ascii_mbtowc+0x1a>
 800f376:	2b00      	cmp	r3, #0
 800f378:	d006      	beq.n	800f388 <__ascii_mbtowc+0x1e>
 800f37a:	7813      	ldrb	r3, [r2, #0]
 800f37c:	600b      	str	r3, [r1, #0]
 800f37e:	7810      	ldrb	r0, [r2, #0]
 800f380:	1e43      	subs	r3, r0, #1
 800f382:	4198      	sbcs	r0, r3
 800f384:	b002      	add	sp, #8
 800f386:	4770      	bx	lr
 800f388:	2002      	movs	r0, #2
 800f38a:	4240      	negs	r0, r0
 800f38c:	e7fa      	b.n	800f384 <__ascii_mbtowc+0x1a>

0800f38e <memmove>:
 800f38e:	b510      	push	{r4, lr}
 800f390:	4288      	cmp	r0, r1
 800f392:	d902      	bls.n	800f39a <memmove+0xc>
 800f394:	188b      	adds	r3, r1, r2
 800f396:	4298      	cmp	r0, r3
 800f398:	d303      	bcc.n	800f3a2 <memmove+0x14>
 800f39a:	2300      	movs	r3, #0
 800f39c:	e007      	b.n	800f3ae <memmove+0x20>
 800f39e:	5c8b      	ldrb	r3, [r1, r2]
 800f3a0:	5483      	strb	r3, [r0, r2]
 800f3a2:	3a01      	subs	r2, #1
 800f3a4:	d2fb      	bcs.n	800f39e <memmove+0x10>
 800f3a6:	bd10      	pop	{r4, pc}
 800f3a8:	5ccc      	ldrb	r4, [r1, r3]
 800f3aa:	54c4      	strb	r4, [r0, r3]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d1fa      	bne.n	800f3a8 <memmove+0x1a>
 800f3b2:	e7f8      	b.n	800f3a6 <memmove+0x18>

0800f3b4 <_realloc_r>:
 800f3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3b6:	0007      	movs	r7, r0
 800f3b8:	000e      	movs	r6, r1
 800f3ba:	0014      	movs	r4, r2
 800f3bc:	2900      	cmp	r1, #0
 800f3be:	d105      	bne.n	800f3cc <_realloc_r+0x18>
 800f3c0:	0011      	movs	r1, r2
 800f3c2:	f7fd fe99 	bl	800d0f8 <_malloc_r>
 800f3c6:	0005      	movs	r5, r0
 800f3c8:	0028      	movs	r0, r5
 800f3ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f3cc:	2a00      	cmp	r2, #0
 800f3ce:	d103      	bne.n	800f3d8 <_realloc_r+0x24>
 800f3d0:	f7fd fe26 	bl	800d020 <_free_r>
 800f3d4:	0025      	movs	r5, r4
 800f3d6:	e7f7      	b.n	800f3c8 <_realloc_r+0x14>
 800f3d8:	f000 fc9a 	bl	800fd10 <_malloc_usable_size_r>
 800f3dc:	9001      	str	r0, [sp, #4]
 800f3de:	4284      	cmp	r4, r0
 800f3e0:	d803      	bhi.n	800f3ea <_realloc_r+0x36>
 800f3e2:	0035      	movs	r5, r6
 800f3e4:	0843      	lsrs	r3, r0, #1
 800f3e6:	42a3      	cmp	r3, r4
 800f3e8:	d3ee      	bcc.n	800f3c8 <_realloc_r+0x14>
 800f3ea:	0021      	movs	r1, r4
 800f3ec:	0038      	movs	r0, r7
 800f3ee:	f7fd fe83 	bl	800d0f8 <_malloc_r>
 800f3f2:	1e05      	subs	r5, r0, #0
 800f3f4:	d0e8      	beq.n	800f3c8 <_realloc_r+0x14>
 800f3f6:	9b01      	ldr	r3, [sp, #4]
 800f3f8:	0022      	movs	r2, r4
 800f3fa:	429c      	cmp	r4, r3
 800f3fc:	d900      	bls.n	800f400 <_realloc_r+0x4c>
 800f3fe:	001a      	movs	r2, r3
 800f400:	0031      	movs	r1, r6
 800f402:	0028      	movs	r0, r5
 800f404:	f7fd fdfa 	bl	800cffc <memcpy>
 800f408:	0031      	movs	r1, r6
 800f40a:	0038      	movs	r0, r7
 800f40c:	f7fd fe08 	bl	800d020 <_free_r>
 800f410:	e7da      	b.n	800f3c8 <_realloc_r+0x14>

0800f412 <__sfputc_r>:
 800f412:	6893      	ldr	r3, [r2, #8]
 800f414:	b510      	push	{r4, lr}
 800f416:	3b01      	subs	r3, #1
 800f418:	6093      	str	r3, [r2, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	da04      	bge.n	800f428 <__sfputc_r+0x16>
 800f41e:	6994      	ldr	r4, [r2, #24]
 800f420:	42a3      	cmp	r3, r4
 800f422:	db07      	blt.n	800f434 <__sfputc_r+0x22>
 800f424:	290a      	cmp	r1, #10
 800f426:	d005      	beq.n	800f434 <__sfputc_r+0x22>
 800f428:	6813      	ldr	r3, [r2, #0]
 800f42a:	1c58      	adds	r0, r3, #1
 800f42c:	6010      	str	r0, [r2, #0]
 800f42e:	7019      	strb	r1, [r3, #0]
 800f430:	0008      	movs	r0, r1
 800f432:	bd10      	pop	{r4, pc}
 800f434:	f000 f94e 	bl	800f6d4 <__swbuf_r>
 800f438:	0001      	movs	r1, r0
 800f43a:	e7f9      	b.n	800f430 <__sfputc_r+0x1e>

0800f43c <__sfputs_r>:
 800f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43e:	0006      	movs	r6, r0
 800f440:	000f      	movs	r7, r1
 800f442:	0014      	movs	r4, r2
 800f444:	18d5      	adds	r5, r2, r3
 800f446:	42ac      	cmp	r4, r5
 800f448:	d101      	bne.n	800f44e <__sfputs_r+0x12>
 800f44a:	2000      	movs	r0, #0
 800f44c:	e007      	b.n	800f45e <__sfputs_r+0x22>
 800f44e:	7821      	ldrb	r1, [r4, #0]
 800f450:	003a      	movs	r2, r7
 800f452:	0030      	movs	r0, r6
 800f454:	f7ff ffdd 	bl	800f412 <__sfputc_r>
 800f458:	3401      	adds	r4, #1
 800f45a:	1c43      	adds	r3, r0, #1
 800f45c:	d1f3      	bne.n	800f446 <__sfputs_r+0xa>
 800f45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f460 <_vfiprintf_r>:
 800f460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f462:	b0a1      	sub	sp, #132	; 0x84
 800f464:	0006      	movs	r6, r0
 800f466:	000c      	movs	r4, r1
 800f468:	001f      	movs	r7, r3
 800f46a:	9203      	str	r2, [sp, #12]
 800f46c:	2800      	cmp	r0, #0
 800f46e:	d004      	beq.n	800f47a <_vfiprintf_r+0x1a>
 800f470:	6983      	ldr	r3, [r0, #24]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d101      	bne.n	800f47a <_vfiprintf_r+0x1a>
 800f476:	f000 fb3f 	bl	800faf8 <__sinit>
 800f47a:	4b8e      	ldr	r3, [pc, #568]	; (800f6b4 <_vfiprintf_r+0x254>)
 800f47c:	429c      	cmp	r4, r3
 800f47e:	d11c      	bne.n	800f4ba <_vfiprintf_r+0x5a>
 800f480:	6874      	ldr	r4, [r6, #4]
 800f482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f484:	07db      	lsls	r3, r3, #31
 800f486:	d405      	bmi.n	800f494 <_vfiprintf_r+0x34>
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	059b      	lsls	r3, r3, #22
 800f48c:	d402      	bmi.n	800f494 <_vfiprintf_r+0x34>
 800f48e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f490:	f7ff ff69 	bl	800f366 <__retarget_lock_acquire_recursive>
 800f494:	89a3      	ldrh	r3, [r4, #12]
 800f496:	071b      	lsls	r3, r3, #28
 800f498:	d502      	bpl.n	800f4a0 <_vfiprintf_r+0x40>
 800f49a:	6923      	ldr	r3, [r4, #16]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d11d      	bne.n	800f4dc <_vfiprintf_r+0x7c>
 800f4a0:	0021      	movs	r1, r4
 800f4a2:	0030      	movs	r0, r6
 800f4a4:	f000 f97a 	bl	800f79c <__swsetup_r>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d017      	beq.n	800f4dc <_vfiprintf_r+0x7c>
 800f4ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4ae:	07db      	lsls	r3, r3, #31
 800f4b0:	d50d      	bpl.n	800f4ce <_vfiprintf_r+0x6e>
 800f4b2:	2001      	movs	r0, #1
 800f4b4:	4240      	negs	r0, r0
 800f4b6:	b021      	add	sp, #132	; 0x84
 800f4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ba:	4b7f      	ldr	r3, [pc, #508]	; (800f6b8 <_vfiprintf_r+0x258>)
 800f4bc:	429c      	cmp	r4, r3
 800f4be:	d101      	bne.n	800f4c4 <_vfiprintf_r+0x64>
 800f4c0:	68b4      	ldr	r4, [r6, #8]
 800f4c2:	e7de      	b.n	800f482 <_vfiprintf_r+0x22>
 800f4c4:	4b7d      	ldr	r3, [pc, #500]	; (800f6bc <_vfiprintf_r+0x25c>)
 800f4c6:	429c      	cmp	r4, r3
 800f4c8:	d1db      	bne.n	800f482 <_vfiprintf_r+0x22>
 800f4ca:	68f4      	ldr	r4, [r6, #12]
 800f4cc:	e7d9      	b.n	800f482 <_vfiprintf_r+0x22>
 800f4ce:	89a3      	ldrh	r3, [r4, #12]
 800f4d0:	059b      	lsls	r3, r3, #22
 800f4d2:	d4ee      	bmi.n	800f4b2 <_vfiprintf_r+0x52>
 800f4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4d6:	f7ff ff47 	bl	800f368 <__retarget_lock_release_recursive>
 800f4da:	e7ea      	b.n	800f4b2 <_vfiprintf_r+0x52>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	ad08      	add	r5, sp, #32
 800f4e0:	616b      	str	r3, [r5, #20]
 800f4e2:	3320      	adds	r3, #32
 800f4e4:	766b      	strb	r3, [r5, #25]
 800f4e6:	3310      	adds	r3, #16
 800f4e8:	76ab      	strb	r3, [r5, #26]
 800f4ea:	9707      	str	r7, [sp, #28]
 800f4ec:	9f03      	ldr	r7, [sp, #12]
 800f4ee:	783b      	ldrb	r3, [r7, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d001      	beq.n	800f4f8 <_vfiprintf_r+0x98>
 800f4f4:	2b25      	cmp	r3, #37	; 0x25
 800f4f6:	d14e      	bne.n	800f596 <_vfiprintf_r+0x136>
 800f4f8:	9b03      	ldr	r3, [sp, #12]
 800f4fa:	1afb      	subs	r3, r7, r3
 800f4fc:	9305      	str	r3, [sp, #20]
 800f4fe:	9b03      	ldr	r3, [sp, #12]
 800f500:	429f      	cmp	r7, r3
 800f502:	d00d      	beq.n	800f520 <_vfiprintf_r+0xc0>
 800f504:	9b05      	ldr	r3, [sp, #20]
 800f506:	0021      	movs	r1, r4
 800f508:	0030      	movs	r0, r6
 800f50a:	9a03      	ldr	r2, [sp, #12]
 800f50c:	f7ff ff96 	bl	800f43c <__sfputs_r>
 800f510:	1c43      	adds	r3, r0, #1
 800f512:	d100      	bne.n	800f516 <_vfiprintf_r+0xb6>
 800f514:	e0b5      	b.n	800f682 <_vfiprintf_r+0x222>
 800f516:	696a      	ldr	r2, [r5, #20]
 800f518:	9b05      	ldr	r3, [sp, #20]
 800f51a:	4694      	mov	ip, r2
 800f51c:	4463      	add	r3, ip
 800f51e:	616b      	str	r3, [r5, #20]
 800f520:	783b      	ldrb	r3, [r7, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d100      	bne.n	800f528 <_vfiprintf_r+0xc8>
 800f526:	e0ac      	b.n	800f682 <_vfiprintf_r+0x222>
 800f528:	2201      	movs	r2, #1
 800f52a:	1c7b      	adds	r3, r7, #1
 800f52c:	9303      	str	r3, [sp, #12]
 800f52e:	2300      	movs	r3, #0
 800f530:	4252      	negs	r2, r2
 800f532:	606a      	str	r2, [r5, #4]
 800f534:	a904      	add	r1, sp, #16
 800f536:	3254      	adds	r2, #84	; 0x54
 800f538:	1852      	adds	r2, r2, r1
 800f53a:	602b      	str	r3, [r5, #0]
 800f53c:	60eb      	str	r3, [r5, #12]
 800f53e:	60ab      	str	r3, [r5, #8]
 800f540:	7013      	strb	r3, [r2, #0]
 800f542:	65ab      	str	r3, [r5, #88]	; 0x58
 800f544:	9b03      	ldr	r3, [sp, #12]
 800f546:	2205      	movs	r2, #5
 800f548:	7819      	ldrb	r1, [r3, #0]
 800f54a:	485d      	ldr	r0, [pc, #372]	; (800f6c0 <_vfiprintf_r+0x260>)
 800f54c:	f7ff f996 	bl	800e87c <memchr>
 800f550:	9b03      	ldr	r3, [sp, #12]
 800f552:	1c5f      	adds	r7, r3, #1
 800f554:	2800      	cmp	r0, #0
 800f556:	d120      	bne.n	800f59a <_vfiprintf_r+0x13a>
 800f558:	682a      	ldr	r2, [r5, #0]
 800f55a:	06d3      	lsls	r3, r2, #27
 800f55c:	d504      	bpl.n	800f568 <_vfiprintf_r+0x108>
 800f55e:	2353      	movs	r3, #83	; 0x53
 800f560:	a904      	add	r1, sp, #16
 800f562:	185b      	adds	r3, r3, r1
 800f564:	2120      	movs	r1, #32
 800f566:	7019      	strb	r1, [r3, #0]
 800f568:	0713      	lsls	r3, r2, #28
 800f56a:	d504      	bpl.n	800f576 <_vfiprintf_r+0x116>
 800f56c:	2353      	movs	r3, #83	; 0x53
 800f56e:	a904      	add	r1, sp, #16
 800f570:	185b      	adds	r3, r3, r1
 800f572:	212b      	movs	r1, #43	; 0x2b
 800f574:	7019      	strb	r1, [r3, #0]
 800f576:	9b03      	ldr	r3, [sp, #12]
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	2b2a      	cmp	r3, #42	; 0x2a
 800f57c:	d016      	beq.n	800f5ac <_vfiprintf_r+0x14c>
 800f57e:	2100      	movs	r1, #0
 800f580:	68eb      	ldr	r3, [r5, #12]
 800f582:	9f03      	ldr	r7, [sp, #12]
 800f584:	783a      	ldrb	r2, [r7, #0]
 800f586:	1c78      	adds	r0, r7, #1
 800f588:	3a30      	subs	r2, #48	; 0x30
 800f58a:	4684      	mov	ip, r0
 800f58c:	2a09      	cmp	r2, #9
 800f58e:	d94f      	bls.n	800f630 <_vfiprintf_r+0x1d0>
 800f590:	2900      	cmp	r1, #0
 800f592:	d111      	bne.n	800f5b8 <_vfiprintf_r+0x158>
 800f594:	e017      	b.n	800f5c6 <_vfiprintf_r+0x166>
 800f596:	3701      	adds	r7, #1
 800f598:	e7a9      	b.n	800f4ee <_vfiprintf_r+0x8e>
 800f59a:	4b49      	ldr	r3, [pc, #292]	; (800f6c0 <_vfiprintf_r+0x260>)
 800f59c:	682a      	ldr	r2, [r5, #0]
 800f59e:	1ac0      	subs	r0, r0, r3
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	4083      	lsls	r3, r0
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	602b      	str	r3, [r5, #0]
 800f5a8:	9703      	str	r7, [sp, #12]
 800f5aa:	e7cb      	b.n	800f544 <_vfiprintf_r+0xe4>
 800f5ac:	9b07      	ldr	r3, [sp, #28]
 800f5ae:	1d19      	adds	r1, r3, #4
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	9107      	str	r1, [sp, #28]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	db01      	blt.n	800f5bc <_vfiprintf_r+0x15c>
 800f5b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5ba:	e004      	b.n	800f5c6 <_vfiprintf_r+0x166>
 800f5bc:	425b      	negs	r3, r3
 800f5be:	60eb      	str	r3, [r5, #12]
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	602b      	str	r3, [r5, #0]
 800f5c6:	783b      	ldrb	r3, [r7, #0]
 800f5c8:	2b2e      	cmp	r3, #46	; 0x2e
 800f5ca:	d10a      	bne.n	800f5e2 <_vfiprintf_r+0x182>
 800f5cc:	787b      	ldrb	r3, [r7, #1]
 800f5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f5d0:	d137      	bne.n	800f642 <_vfiprintf_r+0x1e2>
 800f5d2:	9b07      	ldr	r3, [sp, #28]
 800f5d4:	3702      	adds	r7, #2
 800f5d6:	1d1a      	adds	r2, r3, #4
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	9207      	str	r2, [sp, #28]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	db2d      	blt.n	800f63c <_vfiprintf_r+0x1dc>
 800f5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e2:	2203      	movs	r2, #3
 800f5e4:	7839      	ldrb	r1, [r7, #0]
 800f5e6:	4837      	ldr	r0, [pc, #220]	; (800f6c4 <_vfiprintf_r+0x264>)
 800f5e8:	f7ff f948 	bl	800e87c <memchr>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	d007      	beq.n	800f600 <_vfiprintf_r+0x1a0>
 800f5f0:	4b34      	ldr	r3, [pc, #208]	; (800f6c4 <_vfiprintf_r+0x264>)
 800f5f2:	682a      	ldr	r2, [r5, #0]
 800f5f4:	1ac0      	subs	r0, r0, r3
 800f5f6:	2340      	movs	r3, #64	; 0x40
 800f5f8:	4083      	lsls	r3, r0
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	3701      	adds	r7, #1
 800f5fe:	602b      	str	r3, [r5, #0]
 800f600:	7839      	ldrb	r1, [r7, #0]
 800f602:	1c7b      	adds	r3, r7, #1
 800f604:	2206      	movs	r2, #6
 800f606:	4830      	ldr	r0, [pc, #192]	; (800f6c8 <_vfiprintf_r+0x268>)
 800f608:	9303      	str	r3, [sp, #12]
 800f60a:	7629      	strb	r1, [r5, #24]
 800f60c:	f7ff f936 	bl	800e87c <memchr>
 800f610:	2800      	cmp	r0, #0
 800f612:	d045      	beq.n	800f6a0 <_vfiprintf_r+0x240>
 800f614:	4b2d      	ldr	r3, [pc, #180]	; (800f6cc <_vfiprintf_r+0x26c>)
 800f616:	2b00      	cmp	r3, #0
 800f618:	d127      	bne.n	800f66a <_vfiprintf_r+0x20a>
 800f61a:	2207      	movs	r2, #7
 800f61c:	9b07      	ldr	r3, [sp, #28]
 800f61e:	3307      	adds	r3, #7
 800f620:	4393      	bics	r3, r2
 800f622:	3308      	adds	r3, #8
 800f624:	9307      	str	r3, [sp, #28]
 800f626:	696b      	ldr	r3, [r5, #20]
 800f628:	9a04      	ldr	r2, [sp, #16]
 800f62a:	189b      	adds	r3, r3, r2
 800f62c:	616b      	str	r3, [r5, #20]
 800f62e:	e75d      	b.n	800f4ec <_vfiprintf_r+0x8c>
 800f630:	210a      	movs	r1, #10
 800f632:	434b      	muls	r3, r1
 800f634:	4667      	mov	r7, ip
 800f636:	189b      	adds	r3, r3, r2
 800f638:	3909      	subs	r1, #9
 800f63a:	e7a3      	b.n	800f584 <_vfiprintf_r+0x124>
 800f63c:	2301      	movs	r3, #1
 800f63e:	425b      	negs	r3, r3
 800f640:	e7ce      	b.n	800f5e0 <_vfiprintf_r+0x180>
 800f642:	2300      	movs	r3, #0
 800f644:	001a      	movs	r2, r3
 800f646:	3701      	adds	r7, #1
 800f648:	606b      	str	r3, [r5, #4]
 800f64a:	7839      	ldrb	r1, [r7, #0]
 800f64c:	1c78      	adds	r0, r7, #1
 800f64e:	3930      	subs	r1, #48	; 0x30
 800f650:	4684      	mov	ip, r0
 800f652:	2909      	cmp	r1, #9
 800f654:	d903      	bls.n	800f65e <_vfiprintf_r+0x1fe>
 800f656:	2b00      	cmp	r3, #0
 800f658:	d0c3      	beq.n	800f5e2 <_vfiprintf_r+0x182>
 800f65a:	9209      	str	r2, [sp, #36]	; 0x24
 800f65c:	e7c1      	b.n	800f5e2 <_vfiprintf_r+0x182>
 800f65e:	230a      	movs	r3, #10
 800f660:	435a      	muls	r2, r3
 800f662:	4667      	mov	r7, ip
 800f664:	1852      	adds	r2, r2, r1
 800f666:	3b09      	subs	r3, #9
 800f668:	e7ef      	b.n	800f64a <_vfiprintf_r+0x1ea>
 800f66a:	ab07      	add	r3, sp, #28
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	0022      	movs	r2, r4
 800f670:	0029      	movs	r1, r5
 800f672:	0030      	movs	r0, r6
 800f674:	4b16      	ldr	r3, [pc, #88]	; (800f6d0 <_vfiprintf_r+0x270>)
 800f676:	f7fd fe5f 	bl	800d338 <_printf_float>
 800f67a:	9004      	str	r0, [sp, #16]
 800f67c:	9b04      	ldr	r3, [sp, #16]
 800f67e:	3301      	adds	r3, #1
 800f680:	d1d1      	bne.n	800f626 <_vfiprintf_r+0x1c6>
 800f682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f684:	07db      	lsls	r3, r3, #31
 800f686:	d405      	bmi.n	800f694 <_vfiprintf_r+0x234>
 800f688:	89a3      	ldrh	r3, [r4, #12]
 800f68a:	059b      	lsls	r3, r3, #22
 800f68c:	d402      	bmi.n	800f694 <_vfiprintf_r+0x234>
 800f68e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f690:	f7ff fe6a 	bl	800f368 <__retarget_lock_release_recursive>
 800f694:	89a3      	ldrh	r3, [r4, #12]
 800f696:	065b      	lsls	r3, r3, #25
 800f698:	d500      	bpl.n	800f69c <_vfiprintf_r+0x23c>
 800f69a:	e70a      	b.n	800f4b2 <_vfiprintf_r+0x52>
 800f69c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f69e:	e70a      	b.n	800f4b6 <_vfiprintf_r+0x56>
 800f6a0:	ab07      	add	r3, sp, #28
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	0022      	movs	r2, r4
 800f6a6:	0029      	movs	r1, r5
 800f6a8:	0030      	movs	r0, r6
 800f6aa:	4b09      	ldr	r3, [pc, #36]	; (800f6d0 <_vfiprintf_r+0x270>)
 800f6ac:	f7fe f8f6 	bl	800d89c <_printf_i>
 800f6b0:	e7e3      	b.n	800f67a <_vfiprintf_r+0x21a>
 800f6b2:	46c0      	nop			; (mov r8, r8)
 800f6b4:	08010694 	.word	0x08010694
 800f6b8:	080106b4 	.word	0x080106b4
 800f6bc:	08010674 	.word	0x08010674
 800f6c0:	0801051c 	.word	0x0801051c
 800f6c4:	08010522 	.word	0x08010522
 800f6c8:	08010526 	.word	0x08010526
 800f6cc:	0800d339 	.word	0x0800d339
 800f6d0:	0800f43d 	.word	0x0800f43d

0800f6d4 <__swbuf_r>:
 800f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d6:	0005      	movs	r5, r0
 800f6d8:	000e      	movs	r6, r1
 800f6da:	0014      	movs	r4, r2
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d004      	beq.n	800f6ea <__swbuf_r+0x16>
 800f6e0:	6983      	ldr	r3, [r0, #24]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d101      	bne.n	800f6ea <__swbuf_r+0x16>
 800f6e6:	f000 fa07 	bl	800faf8 <__sinit>
 800f6ea:	4b22      	ldr	r3, [pc, #136]	; (800f774 <__swbuf_r+0xa0>)
 800f6ec:	429c      	cmp	r4, r3
 800f6ee:	d12e      	bne.n	800f74e <__swbuf_r+0x7a>
 800f6f0:	686c      	ldr	r4, [r5, #4]
 800f6f2:	69a3      	ldr	r3, [r4, #24]
 800f6f4:	60a3      	str	r3, [r4, #8]
 800f6f6:	89a3      	ldrh	r3, [r4, #12]
 800f6f8:	071b      	lsls	r3, r3, #28
 800f6fa:	d532      	bpl.n	800f762 <__swbuf_r+0x8e>
 800f6fc:	6923      	ldr	r3, [r4, #16]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d02f      	beq.n	800f762 <__swbuf_r+0x8e>
 800f702:	6823      	ldr	r3, [r4, #0]
 800f704:	6922      	ldr	r2, [r4, #16]
 800f706:	b2f7      	uxtb	r7, r6
 800f708:	1a98      	subs	r0, r3, r2
 800f70a:	6963      	ldr	r3, [r4, #20]
 800f70c:	b2f6      	uxtb	r6, r6
 800f70e:	4283      	cmp	r3, r0
 800f710:	dc05      	bgt.n	800f71e <__swbuf_r+0x4a>
 800f712:	0021      	movs	r1, r4
 800f714:	0028      	movs	r0, r5
 800f716:	f000 f94d 	bl	800f9b4 <_fflush_r>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d127      	bne.n	800f76e <__swbuf_r+0x9a>
 800f71e:	68a3      	ldr	r3, [r4, #8]
 800f720:	3001      	adds	r0, #1
 800f722:	3b01      	subs	r3, #1
 800f724:	60a3      	str	r3, [r4, #8]
 800f726:	6823      	ldr	r3, [r4, #0]
 800f728:	1c5a      	adds	r2, r3, #1
 800f72a:	6022      	str	r2, [r4, #0]
 800f72c:	701f      	strb	r7, [r3, #0]
 800f72e:	6963      	ldr	r3, [r4, #20]
 800f730:	4283      	cmp	r3, r0
 800f732:	d004      	beq.n	800f73e <__swbuf_r+0x6a>
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	07db      	lsls	r3, r3, #31
 800f738:	d507      	bpl.n	800f74a <__swbuf_r+0x76>
 800f73a:	2e0a      	cmp	r6, #10
 800f73c:	d105      	bne.n	800f74a <__swbuf_r+0x76>
 800f73e:	0021      	movs	r1, r4
 800f740:	0028      	movs	r0, r5
 800f742:	f000 f937 	bl	800f9b4 <_fflush_r>
 800f746:	2800      	cmp	r0, #0
 800f748:	d111      	bne.n	800f76e <__swbuf_r+0x9a>
 800f74a:	0030      	movs	r0, r6
 800f74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f74e:	4b0a      	ldr	r3, [pc, #40]	; (800f778 <__swbuf_r+0xa4>)
 800f750:	429c      	cmp	r4, r3
 800f752:	d101      	bne.n	800f758 <__swbuf_r+0x84>
 800f754:	68ac      	ldr	r4, [r5, #8]
 800f756:	e7cc      	b.n	800f6f2 <__swbuf_r+0x1e>
 800f758:	4b08      	ldr	r3, [pc, #32]	; (800f77c <__swbuf_r+0xa8>)
 800f75a:	429c      	cmp	r4, r3
 800f75c:	d1c9      	bne.n	800f6f2 <__swbuf_r+0x1e>
 800f75e:	68ec      	ldr	r4, [r5, #12]
 800f760:	e7c7      	b.n	800f6f2 <__swbuf_r+0x1e>
 800f762:	0021      	movs	r1, r4
 800f764:	0028      	movs	r0, r5
 800f766:	f000 f819 	bl	800f79c <__swsetup_r>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d0c9      	beq.n	800f702 <__swbuf_r+0x2e>
 800f76e:	2601      	movs	r6, #1
 800f770:	4276      	negs	r6, r6
 800f772:	e7ea      	b.n	800f74a <__swbuf_r+0x76>
 800f774:	08010694 	.word	0x08010694
 800f778:	080106b4 	.word	0x080106b4
 800f77c:	08010674 	.word	0x08010674

0800f780 <__ascii_wctomb>:
 800f780:	0003      	movs	r3, r0
 800f782:	1e08      	subs	r0, r1, #0
 800f784:	d005      	beq.n	800f792 <__ascii_wctomb+0x12>
 800f786:	2aff      	cmp	r2, #255	; 0xff
 800f788:	d904      	bls.n	800f794 <__ascii_wctomb+0x14>
 800f78a:	228a      	movs	r2, #138	; 0x8a
 800f78c:	2001      	movs	r0, #1
 800f78e:	601a      	str	r2, [r3, #0]
 800f790:	4240      	negs	r0, r0
 800f792:	4770      	bx	lr
 800f794:	2001      	movs	r0, #1
 800f796:	700a      	strb	r2, [r1, #0]
 800f798:	e7fb      	b.n	800f792 <__ascii_wctomb+0x12>
	...

0800f79c <__swsetup_r>:
 800f79c:	4b37      	ldr	r3, [pc, #220]	; (800f87c <__swsetup_r+0xe0>)
 800f79e:	b570      	push	{r4, r5, r6, lr}
 800f7a0:	681d      	ldr	r5, [r3, #0]
 800f7a2:	0006      	movs	r6, r0
 800f7a4:	000c      	movs	r4, r1
 800f7a6:	2d00      	cmp	r5, #0
 800f7a8:	d005      	beq.n	800f7b6 <__swsetup_r+0x1a>
 800f7aa:	69ab      	ldr	r3, [r5, #24]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d102      	bne.n	800f7b6 <__swsetup_r+0x1a>
 800f7b0:	0028      	movs	r0, r5
 800f7b2:	f000 f9a1 	bl	800faf8 <__sinit>
 800f7b6:	4b32      	ldr	r3, [pc, #200]	; (800f880 <__swsetup_r+0xe4>)
 800f7b8:	429c      	cmp	r4, r3
 800f7ba:	d10f      	bne.n	800f7dc <__swsetup_r+0x40>
 800f7bc:	686c      	ldr	r4, [r5, #4]
 800f7be:	230c      	movs	r3, #12
 800f7c0:	5ee2      	ldrsh	r2, [r4, r3]
 800f7c2:	b293      	uxth	r3, r2
 800f7c4:	0711      	lsls	r1, r2, #28
 800f7c6:	d42d      	bmi.n	800f824 <__swsetup_r+0x88>
 800f7c8:	06d9      	lsls	r1, r3, #27
 800f7ca:	d411      	bmi.n	800f7f0 <__swsetup_r+0x54>
 800f7cc:	2309      	movs	r3, #9
 800f7ce:	2001      	movs	r0, #1
 800f7d0:	6033      	str	r3, [r6, #0]
 800f7d2:	3337      	adds	r3, #55	; 0x37
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	81a3      	strh	r3, [r4, #12]
 800f7d8:	4240      	negs	r0, r0
 800f7da:	bd70      	pop	{r4, r5, r6, pc}
 800f7dc:	4b29      	ldr	r3, [pc, #164]	; (800f884 <__swsetup_r+0xe8>)
 800f7de:	429c      	cmp	r4, r3
 800f7e0:	d101      	bne.n	800f7e6 <__swsetup_r+0x4a>
 800f7e2:	68ac      	ldr	r4, [r5, #8]
 800f7e4:	e7eb      	b.n	800f7be <__swsetup_r+0x22>
 800f7e6:	4b28      	ldr	r3, [pc, #160]	; (800f888 <__swsetup_r+0xec>)
 800f7e8:	429c      	cmp	r4, r3
 800f7ea:	d1e8      	bne.n	800f7be <__swsetup_r+0x22>
 800f7ec:	68ec      	ldr	r4, [r5, #12]
 800f7ee:	e7e6      	b.n	800f7be <__swsetup_r+0x22>
 800f7f0:	075b      	lsls	r3, r3, #29
 800f7f2:	d513      	bpl.n	800f81c <__swsetup_r+0x80>
 800f7f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7f6:	2900      	cmp	r1, #0
 800f7f8:	d008      	beq.n	800f80c <__swsetup_r+0x70>
 800f7fa:	0023      	movs	r3, r4
 800f7fc:	3344      	adds	r3, #68	; 0x44
 800f7fe:	4299      	cmp	r1, r3
 800f800:	d002      	beq.n	800f808 <__swsetup_r+0x6c>
 800f802:	0030      	movs	r0, r6
 800f804:	f7fd fc0c 	bl	800d020 <_free_r>
 800f808:	2300      	movs	r3, #0
 800f80a:	6363      	str	r3, [r4, #52]	; 0x34
 800f80c:	2224      	movs	r2, #36	; 0x24
 800f80e:	89a3      	ldrh	r3, [r4, #12]
 800f810:	4393      	bics	r3, r2
 800f812:	81a3      	strh	r3, [r4, #12]
 800f814:	2300      	movs	r3, #0
 800f816:	6063      	str	r3, [r4, #4]
 800f818:	6923      	ldr	r3, [r4, #16]
 800f81a:	6023      	str	r3, [r4, #0]
 800f81c:	2308      	movs	r3, #8
 800f81e:	89a2      	ldrh	r2, [r4, #12]
 800f820:	4313      	orrs	r3, r2
 800f822:	81a3      	strh	r3, [r4, #12]
 800f824:	6923      	ldr	r3, [r4, #16]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d10b      	bne.n	800f842 <__swsetup_r+0xa6>
 800f82a:	21a0      	movs	r1, #160	; 0xa0
 800f82c:	2280      	movs	r2, #128	; 0x80
 800f82e:	89a3      	ldrh	r3, [r4, #12]
 800f830:	0089      	lsls	r1, r1, #2
 800f832:	0092      	lsls	r2, r2, #2
 800f834:	400b      	ands	r3, r1
 800f836:	4293      	cmp	r3, r2
 800f838:	d003      	beq.n	800f842 <__swsetup_r+0xa6>
 800f83a:	0021      	movs	r1, r4
 800f83c:	0030      	movs	r0, r6
 800f83e:	f000 fa23 	bl	800fc88 <__smakebuf_r>
 800f842:	220c      	movs	r2, #12
 800f844:	5ea3      	ldrsh	r3, [r4, r2]
 800f846:	2001      	movs	r0, #1
 800f848:	001a      	movs	r2, r3
 800f84a:	b299      	uxth	r1, r3
 800f84c:	4002      	ands	r2, r0
 800f84e:	4203      	tst	r3, r0
 800f850:	d00f      	beq.n	800f872 <__swsetup_r+0xd6>
 800f852:	2200      	movs	r2, #0
 800f854:	60a2      	str	r2, [r4, #8]
 800f856:	6962      	ldr	r2, [r4, #20]
 800f858:	4252      	negs	r2, r2
 800f85a:	61a2      	str	r2, [r4, #24]
 800f85c:	2000      	movs	r0, #0
 800f85e:	6922      	ldr	r2, [r4, #16]
 800f860:	4282      	cmp	r2, r0
 800f862:	d1ba      	bne.n	800f7da <__swsetup_r+0x3e>
 800f864:	060a      	lsls	r2, r1, #24
 800f866:	d5b8      	bpl.n	800f7da <__swsetup_r+0x3e>
 800f868:	2240      	movs	r2, #64	; 0x40
 800f86a:	4313      	orrs	r3, r2
 800f86c:	81a3      	strh	r3, [r4, #12]
 800f86e:	3801      	subs	r0, #1
 800f870:	e7b3      	b.n	800f7da <__swsetup_r+0x3e>
 800f872:	0788      	lsls	r0, r1, #30
 800f874:	d400      	bmi.n	800f878 <__swsetup_r+0xdc>
 800f876:	6962      	ldr	r2, [r4, #20]
 800f878:	60a2      	str	r2, [r4, #8]
 800f87a:	e7ef      	b.n	800f85c <__swsetup_r+0xc0>
 800f87c:	200000ac 	.word	0x200000ac
 800f880:	08010694 	.word	0x08010694
 800f884:	080106b4 	.word	0x080106b4
 800f888:	08010674 	.word	0x08010674

0800f88c <abort>:
 800f88c:	2006      	movs	r0, #6
 800f88e:	b510      	push	{r4, lr}
 800f890:	f000 fa70 	bl	800fd74 <raise>
 800f894:	2001      	movs	r0, #1
 800f896:	f7f3 fec9 	bl	800362c <_exit>
	...

0800f89c <__sflush_r>:
 800f89c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f89e:	898b      	ldrh	r3, [r1, #12]
 800f8a0:	0005      	movs	r5, r0
 800f8a2:	000c      	movs	r4, r1
 800f8a4:	071a      	lsls	r2, r3, #28
 800f8a6:	d45f      	bmi.n	800f968 <__sflush_r+0xcc>
 800f8a8:	684a      	ldr	r2, [r1, #4]
 800f8aa:	2a00      	cmp	r2, #0
 800f8ac:	dc04      	bgt.n	800f8b8 <__sflush_r+0x1c>
 800f8ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f8b0:	2a00      	cmp	r2, #0
 800f8b2:	dc01      	bgt.n	800f8b8 <__sflush_r+0x1c>
 800f8b4:	2000      	movs	r0, #0
 800f8b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f8b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f8ba:	2f00      	cmp	r7, #0
 800f8bc:	d0fa      	beq.n	800f8b4 <__sflush_r+0x18>
 800f8be:	2200      	movs	r2, #0
 800f8c0:	2180      	movs	r1, #128	; 0x80
 800f8c2:	682e      	ldr	r6, [r5, #0]
 800f8c4:	602a      	str	r2, [r5, #0]
 800f8c6:	001a      	movs	r2, r3
 800f8c8:	0149      	lsls	r1, r1, #5
 800f8ca:	400a      	ands	r2, r1
 800f8cc:	420b      	tst	r3, r1
 800f8ce:	d034      	beq.n	800f93a <__sflush_r+0x9e>
 800f8d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8d2:	89a3      	ldrh	r3, [r4, #12]
 800f8d4:	075b      	lsls	r3, r3, #29
 800f8d6:	d506      	bpl.n	800f8e6 <__sflush_r+0x4a>
 800f8d8:	6863      	ldr	r3, [r4, #4]
 800f8da:	1ac0      	subs	r0, r0, r3
 800f8dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d001      	beq.n	800f8e6 <__sflush_r+0x4a>
 800f8e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8e4:	1ac0      	subs	r0, r0, r3
 800f8e6:	0002      	movs	r2, r0
 800f8e8:	6a21      	ldr	r1, [r4, #32]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	0028      	movs	r0, r5
 800f8ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f8f0:	47b8      	blx	r7
 800f8f2:	89a1      	ldrh	r1, [r4, #12]
 800f8f4:	1c43      	adds	r3, r0, #1
 800f8f6:	d106      	bne.n	800f906 <__sflush_r+0x6a>
 800f8f8:	682b      	ldr	r3, [r5, #0]
 800f8fa:	2b1d      	cmp	r3, #29
 800f8fc:	d831      	bhi.n	800f962 <__sflush_r+0xc6>
 800f8fe:	4a2c      	ldr	r2, [pc, #176]	; (800f9b0 <__sflush_r+0x114>)
 800f900:	40da      	lsrs	r2, r3
 800f902:	07d3      	lsls	r3, r2, #31
 800f904:	d52d      	bpl.n	800f962 <__sflush_r+0xc6>
 800f906:	2300      	movs	r3, #0
 800f908:	6063      	str	r3, [r4, #4]
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	6023      	str	r3, [r4, #0]
 800f90e:	04cb      	lsls	r3, r1, #19
 800f910:	d505      	bpl.n	800f91e <__sflush_r+0x82>
 800f912:	1c43      	adds	r3, r0, #1
 800f914:	d102      	bne.n	800f91c <__sflush_r+0x80>
 800f916:	682b      	ldr	r3, [r5, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d100      	bne.n	800f91e <__sflush_r+0x82>
 800f91c:	6560      	str	r0, [r4, #84]	; 0x54
 800f91e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f920:	602e      	str	r6, [r5, #0]
 800f922:	2900      	cmp	r1, #0
 800f924:	d0c6      	beq.n	800f8b4 <__sflush_r+0x18>
 800f926:	0023      	movs	r3, r4
 800f928:	3344      	adds	r3, #68	; 0x44
 800f92a:	4299      	cmp	r1, r3
 800f92c:	d002      	beq.n	800f934 <__sflush_r+0x98>
 800f92e:	0028      	movs	r0, r5
 800f930:	f7fd fb76 	bl	800d020 <_free_r>
 800f934:	2000      	movs	r0, #0
 800f936:	6360      	str	r0, [r4, #52]	; 0x34
 800f938:	e7bd      	b.n	800f8b6 <__sflush_r+0x1a>
 800f93a:	2301      	movs	r3, #1
 800f93c:	0028      	movs	r0, r5
 800f93e:	6a21      	ldr	r1, [r4, #32]
 800f940:	47b8      	blx	r7
 800f942:	1c43      	adds	r3, r0, #1
 800f944:	d1c5      	bne.n	800f8d2 <__sflush_r+0x36>
 800f946:	682b      	ldr	r3, [r5, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d0c2      	beq.n	800f8d2 <__sflush_r+0x36>
 800f94c:	2b1d      	cmp	r3, #29
 800f94e:	d001      	beq.n	800f954 <__sflush_r+0xb8>
 800f950:	2b16      	cmp	r3, #22
 800f952:	d101      	bne.n	800f958 <__sflush_r+0xbc>
 800f954:	602e      	str	r6, [r5, #0]
 800f956:	e7ad      	b.n	800f8b4 <__sflush_r+0x18>
 800f958:	2340      	movs	r3, #64	; 0x40
 800f95a:	89a2      	ldrh	r2, [r4, #12]
 800f95c:	4313      	orrs	r3, r2
 800f95e:	81a3      	strh	r3, [r4, #12]
 800f960:	e7a9      	b.n	800f8b6 <__sflush_r+0x1a>
 800f962:	2340      	movs	r3, #64	; 0x40
 800f964:	430b      	orrs	r3, r1
 800f966:	e7fa      	b.n	800f95e <__sflush_r+0xc2>
 800f968:	690f      	ldr	r7, [r1, #16]
 800f96a:	2f00      	cmp	r7, #0
 800f96c:	d0a2      	beq.n	800f8b4 <__sflush_r+0x18>
 800f96e:	680a      	ldr	r2, [r1, #0]
 800f970:	600f      	str	r7, [r1, #0]
 800f972:	1bd2      	subs	r2, r2, r7
 800f974:	9201      	str	r2, [sp, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	079b      	lsls	r3, r3, #30
 800f97a:	d100      	bne.n	800f97e <__sflush_r+0xe2>
 800f97c:	694a      	ldr	r2, [r1, #20]
 800f97e:	60a2      	str	r2, [r4, #8]
 800f980:	9b01      	ldr	r3, [sp, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	dc00      	bgt.n	800f988 <__sflush_r+0xec>
 800f986:	e795      	b.n	800f8b4 <__sflush_r+0x18>
 800f988:	003a      	movs	r2, r7
 800f98a:	0028      	movs	r0, r5
 800f98c:	9b01      	ldr	r3, [sp, #4]
 800f98e:	6a21      	ldr	r1, [r4, #32]
 800f990:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f992:	47b0      	blx	r6
 800f994:	2800      	cmp	r0, #0
 800f996:	dc06      	bgt.n	800f9a6 <__sflush_r+0x10a>
 800f998:	2340      	movs	r3, #64	; 0x40
 800f99a:	2001      	movs	r0, #1
 800f99c:	89a2      	ldrh	r2, [r4, #12]
 800f99e:	4240      	negs	r0, r0
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	e787      	b.n	800f8b6 <__sflush_r+0x1a>
 800f9a6:	9b01      	ldr	r3, [sp, #4]
 800f9a8:	183f      	adds	r7, r7, r0
 800f9aa:	1a1b      	subs	r3, r3, r0
 800f9ac:	9301      	str	r3, [sp, #4]
 800f9ae:	e7e7      	b.n	800f980 <__sflush_r+0xe4>
 800f9b0:	20400001 	.word	0x20400001

0800f9b4 <_fflush_r>:
 800f9b4:	690b      	ldr	r3, [r1, #16]
 800f9b6:	b570      	push	{r4, r5, r6, lr}
 800f9b8:	0005      	movs	r5, r0
 800f9ba:	000c      	movs	r4, r1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d102      	bne.n	800f9c6 <_fflush_r+0x12>
 800f9c0:	2500      	movs	r5, #0
 800f9c2:	0028      	movs	r0, r5
 800f9c4:	bd70      	pop	{r4, r5, r6, pc}
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d004      	beq.n	800f9d4 <_fflush_r+0x20>
 800f9ca:	6983      	ldr	r3, [r0, #24]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d101      	bne.n	800f9d4 <_fflush_r+0x20>
 800f9d0:	f000 f892 	bl	800faf8 <__sinit>
 800f9d4:	4b14      	ldr	r3, [pc, #80]	; (800fa28 <_fflush_r+0x74>)
 800f9d6:	429c      	cmp	r4, r3
 800f9d8:	d11b      	bne.n	800fa12 <_fflush_r+0x5e>
 800f9da:	686c      	ldr	r4, [r5, #4]
 800f9dc:	220c      	movs	r2, #12
 800f9de:	5ea3      	ldrsh	r3, [r4, r2]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d0ed      	beq.n	800f9c0 <_fflush_r+0xc>
 800f9e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9e6:	07d2      	lsls	r2, r2, #31
 800f9e8:	d404      	bmi.n	800f9f4 <_fflush_r+0x40>
 800f9ea:	059b      	lsls	r3, r3, #22
 800f9ec:	d402      	bmi.n	800f9f4 <_fflush_r+0x40>
 800f9ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9f0:	f7ff fcb9 	bl	800f366 <__retarget_lock_acquire_recursive>
 800f9f4:	0028      	movs	r0, r5
 800f9f6:	0021      	movs	r1, r4
 800f9f8:	f7ff ff50 	bl	800f89c <__sflush_r>
 800f9fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9fe:	0005      	movs	r5, r0
 800fa00:	07db      	lsls	r3, r3, #31
 800fa02:	d4de      	bmi.n	800f9c2 <_fflush_r+0xe>
 800fa04:	89a3      	ldrh	r3, [r4, #12]
 800fa06:	059b      	lsls	r3, r3, #22
 800fa08:	d4db      	bmi.n	800f9c2 <_fflush_r+0xe>
 800fa0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa0c:	f7ff fcac 	bl	800f368 <__retarget_lock_release_recursive>
 800fa10:	e7d7      	b.n	800f9c2 <_fflush_r+0xe>
 800fa12:	4b06      	ldr	r3, [pc, #24]	; (800fa2c <_fflush_r+0x78>)
 800fa14:	429c      	cmp	r4, r3
 800fa16:	d101      	bne.n	800fa1c <_fflush_r+0x68>
 800fa18:	68ac      	ldr	r4, [r5, #8]
 800fa1a:	e7df      	b.n	800f9dc <_fflush_r+0x28>
 800fa1c:	4b04      	ldr	r3, [pc, #16]	; (800fa30 <_fflush_r+0x7c>)
 800fa1e:	429c      	cmp	r4, r3
 800fa20:	d1dc      	bne.n	800f9dc <_fflush_r+0x28>
 800fa22:	68ec      	ldr	r4, [r5, #12]
 800fa24:	e7da      	b.n	800f9dc <_fflush_r+0x28>
 800fa26:	46c0      	nop			; (mov r8, r8)
 800fa28:	08010694 	.word	0x08010694
 800fa2c:	080106b4 	.word	0x080106b4
 800fa30:	08010674 	.word	0x08010674

0800fa34 <std>:
 800fa34:	2300      	movs	r3, #0
 800fa36:	b510      	push	{r4, lr}
 800fa38:	0004      	movs	r4, r0
 800fa3a:	6003      	str	r3, [r0, #0]
 800fa3c:	6043      	str	r3, [r0, #4]
 800fa3e:	6083      	str	r3, [r0, #8]
 800fa40:	8181      	strh	r1, [r0, #12]
 800fa42:	6643      	str	r3, [r0, #100]	; 0x64
 800fa44:	0019      	movs	r1, r3
 800fa46:	81c2      	strh	r2, [r0, #14]
 800fa48:	6103      	str	r3, [r0, #16]
 800fa4a:	6143      	str	r3, [r0, #20]
 800fa4c:	6183      	str	r3, [r0, #24]
 800fa4e:	2208      	movs	r2, #8
 800fa50:	305c      	adds	r0, #92	; 0x5c
 800fa52:	f7fd fadc 	bl	800d00e <memset>
 800fa56:	4b05      	ldr	r3, [pc, #20]	; (800fa6c <std+0x38>)
 800fa58:	6224      	str	r4, [r4, #32]
 800fa5a:	6263      	str	r3, [r4, #36]	; 0x24
 800fa5c:	4b04      	ldr	r3, [pc, #16]	; (800fa70 <std+0x3c>)
 800fa5e:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa60:	4b04      	ldr	r3, [pc, #16]	; (800fa74 <std+0x40>)
 800fa62:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa64:	4b04      	ldr	r3, [pc, #16]	; (800fa78 <std+0x44>)
 800fa66:	6323      	str	r3, [r4, #48]	; 0x30
 800fa68:	bd10      	pop	{r4, pc}
 800fa6a:	46c0      	nop			; (mov r8, r8)
 800fa6c:	0800fdb5 	.word	0x0800fdb5
 800fa70:	0800fddd 	.word	0x0800fddd
 800fa74:	0800fe15 	.word	0x0800fe15
 800fa78:	0800fe41 	.word	0x0800fe41

0800fa7c <_cleanup_r>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	4902      	ldr	r1, [pc, #8]	; (800fa88 <_cleanup_r+0xc>)
 800fa80:	f000 f8ba 	bl	800fbf8 <_fwalk_reent>
 800fa84:	bd10      	pop	{r4, pc}
 800fa86:	46c0      	nop			; (mov r8, r8)
 800fa88:	0800f9b5 	.word	0x0800f9b5

0800fa8c <__sfmoreglue>:
 800fa8c:	b570      	push	{r4, r5, r6, lr}
 800fa8e:	2568      	movs	r5, #104	; 0x68
 800fa90:	1e4a      	subs	r2, r1, #1
 800fa92:	4355      	muls	r5, r2
 800fa94:	000e      	movs	r6, r1
 800fa96:	0029      	movs	r1, r5
 800fa98:	3174      	adds	r1, #116	; 0x74
 800fa9a:	f7fd fb2d 	bl	800d0f8 <_malloc_r>
 800fa9e:	1e04      	subs	r4, r0, #0
 800faa0:	d008      	beq.n	800fab4 <__sfmoreglue+0x28>
 800faa2:	2100      	movs	r1, #0
 800faa4:	002a      	movs	r2, r5
 800faa6:	6001      	str	r1, [r0, #0]
 800faa8:	6046      	str	r6, [r0, #4]
 800faaa:	300c      	adds	r0, #12
 800faac:	60a0      	str	r0, [r4, #8]
 800faae:	3268      	adds	r2, #104	; 0x68
 800fab0:	f7fd faad 	bl	800d00e <memset>
 800fab4:	0020      	movs	r0, r4
 800fab6:	bd70      	pop	{r4, r5, r6, pc}

0800fab8 <__sfp_lock_acquire>:
 800fab8:	b510      	push	{r4, lr}
 800faba:	4802      	ldr	r0, [pc, #8]	; (800fac4 <__sfp_lock_acquire+0xc>)
 800fabc:	f7ff fc53 	bl	800f366 <__retarget_lock_acquire_recursive>
 800fac0:	bd10      	pop	{r4, pc}
 800fac2:	46c0      	nop			; (mov r8, r8)
 800fac4:	20001085 	.word	0x20001085

0800fac8 <__sfp_lock_release>:
 800fac8:	b510      	push	{r4, lr}
 800faca:	4802      	ldr	r0, [pc, #8]	; (800fad4 <__sfp_lock_release+0xc>)
 800facc:	f7ff fc4c 	bl	800f368 <__retarget_lock_release_recursive>
 800fad0:	bd10      	pop	{r4, pc}
 800fad2:	46c0      	nop			; (mov r8, r8)
 800fad4:	20001085 	.word	0x20001085

0800fad8 <__sinit_lock_acquire>:
 800fad8:	b510      	push	{r4, lr}
 800fada:	4802      	ldr	r0, [pc, #8]	; (800fae4 <__sinit_lock_acquire+0xc>)
 800fadc:	f7ff fc43 	bl	800f366 <__retarget_lock_acquire_recursive>
 800fae0:	bd10      	pop	{r4, pc}
 800fae2:	46c0      	nop			; (mov r8, r8)
 800fae4:	20001086 	.word	0x20001086

0800fae8 <__sinit_lock_release>:
 800fae8:	b510      	push	{r4, lr}
 800faea:	4802      	ldr	r0, [pc, #8]	; (800faf4 <__sinit_lock_release+0xc>)
 800faec:	f7ff fc3c 	bl	800f368 <__retarget_lock_release_recursive>
 800faf0:	bd10      	pop	{r4, pc}
 800faf2:	46c0      	nop			; (mov r8, r8)
 800faf4:	20001086 	.word	0x20001086

0800faf8 <__sinit>:
 800faf8:	b513      	push	{r0, r1, r4, lr}
 800fafa:	0004      	movs	r4, r0
 800fafc:	f7ff ffec 	bl	800fad8 <__sinit_lock_acquire>
 800fb00:	69a3      	ldr	r3, [r4, #24]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d002      	beq.n	800fb0c <__sinit+0x14>
 800fb06:	f7ff ffef 	bl	800fae8 <__sinit_lock_release>
 800fb0a:	bd13      	pop	{r0, r1, r4, pc}
 800fb0c:	64a3      	str	r3, [r4, #72]	; 0x48
 800fb0e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800fb10:	6523      	str	r3, [r4, #80]	; 0x50
 800fb12:	4b13      	ldr	r3, [pc, #76]	; (800fb60 <__sinit+0x68>)
 800fb14:	4a13      	ldr	r2, [pc, #76]	; (800fb64 <__sinit+0x6c>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	62a2      	str	r2, [r4, #40]	; 0x28
 800fb1a:	9301      	str	r3, [sp, #4]
 800fb1c:	42a3      	cmp	r3, r4
 800fb1e:	d101      	bne.n	800fb24 <__sinit+0x2c>
 800fb20:	2301      	movs	r3, #1
 800fb22:	61a3      	str	r3, [r4, #24]
 800fb24:	0020      	movs	r0, r4
 800fb26:	f000 f81f 	bl	800fb68 <__sfp>
 800fb2a:	6060      	str	r0, [r4, #4]
 800fb2c:	0020      	movs	r0, r4
 800fb2e:	f000 f81b 	bl	800fb68 <__sfp>
 800fb32:	60a0      	str	r0, [r4, #8]
 800fb34:	0020      	movs	r0, r4
 800fb36:	f000 f817 	bl	800fb68 <__sfp>
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	2104      	movs	r1, #4
 800fb3e:	60e0      	str	r0, [r4, #12]
 800fb40:	6860      	ldr	r0, [r4, #4]
 800fb42:	f7ff ff77 	bl	800fa34 <std>
 800fb46:	2201      	movs	r2, #1
 800fb48:	2109      	movs	r1, #9
 800fb4a:	68a0      	ldr	r0, [r4, #8]
 800fb4c:	f7ff ff72 	bl	800fa34 <std>
 800fb50:	2202      	movs	r2, #2
 800fb52:	2112      	movs	r1, #18
 800fb54:	68e0      	ldr	r0, [r4, #12]
 800fb56:	f7ff ff6d 	bl	800fa34 <std>
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	61a3      	str	r3, [r4, #24]
 800fb5e:	e7d2      	b.n	800fb06 <__sinit+0xe>
 800fb60:	080102f8 	.word	0x080102f8
 800fb64:	0800fa7d 	.word	0x0800fa7d

0800fb68 <__sfp>:
 800fb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb6a:	0007      	movs	r7, r0
 800fb6c:	f7ff ffa4 	bl	800fab8 <__sfp_lock_acquire>
 800fb70:	4b1f      	ldr	r3, [pc, #124]	; (800fbf0 <__sfp+0x88>)
 800fb72:	681e      	ldr	r6, [r3, #0]
 800fb74:	69b3      	ldr	r3, [r6, #24]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d102      	bne.n	800fb80 <__sfp+0x18>
 800fb7a:	0030      	movs	r0, r6
 800fb7c:	f7ff ffbc 	bl	800faf8 <__sinit>
 800fb80:	3648      	adds	r6, #72	; 0x48
 800fb82:	68b4      	ldr	r4, [r6, #8]
 800fb84:	6873      	ldr	r3, [r6, #4]
 800fb86:	3b01      	subs	r3, #1
 800fb88:	d504      	bpl.n	800fb94 <__sfp+0x2c>
 800fb8a:	6833      	ldr	r3, [r6, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d022      	beq.n	800fbd6 <__sfp+0x6e>
 800fb90:	6836      	ldr	r6, [r6, #0]
 800fb92:	e7f6      	b.n	800fb82 <__sfp+0x1a>
 800fb94:	220c      	movs	r2, #12
 800fb96:	5ea5      	ldrsh	r5, [r4, r2]
 800fb98:	2d00      	cmp	r5, #0
 800fb9a:	d11a      	bne.n	800fbd2 <__sfp+0x6a>
 800fb9c:	0020      	movs	r0, r4
 800fb9e:	4b15      	ldr	r3, [pc, #84]	; (800fbf4 <__sfp+0x8c>)
 800fba0:	3058      	adds	r0, #88	; 0x58
 800fba2:	60e3      	str	r3, [r4, #12]
 800fba4:	6665      	str	r5, [r4, #100]	; 0x64
 800fba6:	f7ff fbdd 	bl	800f364 <__retarget_lock_init_recursive>
 800fbaa:	f7ff ff8d 	bl	800fac8 <__sfp_lock_release>
 800fbae:	0020      	movs	r0, r4
 800fbb0:	2208      	movs	r2, #8
 800fbb2:	0029      	movs	r1, r5
 800fbb4:	6025      	str	r5, [r4, #0]
 800fbb6:	60a5      	str	r5, [r4, #8]
 800fbb8:	6065      	str	r5, [r4, #4]
 800fbba:	6125      	str	r5, [r4, #16]
 800fbbc:	6165      	str	r5, [r4, #20]
 800fbbe:	61a5      	str	r5, [r4, #24]
 800fbc0:	305c      	adds	r0, #92	; 0x5c
 800fbc2:	f7fd fa24 	bl	800d00e <memset>
 800fbc6:	6365      	str	r5, [r4, #52]	; 0x34
 800fbc8:	63a5      	str	r5, [r4, #56]	; 0x38
 800fbca:	64a5      	str	r5, [r4, #72]	; 0x48
 800fbcc:	64e5      	str	r5, [r4, #76]	; 0x4c
 800fbce:	0020      	movs	r0, r4
 800fbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd2:	3468      	adds	r4, #104	; 0x68
 800fbd4:	e7d7      	b.n	800fb86 <__sfp+0x1e>
 800fbd6:	2104      	movs	r1, #4
 800fbd8:	0038      	movs	r0, r7
 800fbda:	f7ff ff57 	bl	800fa8c <__sfmoreglue>
 800fbde:	1e04      	subs	r4, r0, #0
 800fbe0:	6030      	str	r0, [r6, #0]
 800fbe2:	d1d5      	bne.n	800fb90 <__sfp+0x28>
 800fbe4:	f7ff ff70 	bl	800fac8 <__sfp_lock_release>
 800fbe8:	230c      	movs	r3, #12
 800fbea:	603b      	str	r3, [r7, #0]
 800fbec:	e7ef      	b.n	800fbce <__sfp+0x66>
 800fbee:	46c0      	nop			; (mov r8, r8)
 800fbf0:	080102f8 	.word	0x080102f8
 800fbf4:	ffff0001 	.word	0xffff0001

0800fbf8 <_fwalk_reent>:
 800fbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbfa:	0004      	movs	r4, r0
 800fbfc:	0006      	movs	r6, r0
 800fbfe:	2700      	movs	r7, #0
 800fc00:	9101      	str	r1, [sp, #4]
 800fc02:	3448      	adds	r4, #72	; 0x48
 800fc04:	6863      	ldr	r3, [r4, #4]
 800fc06:	68a5      	ldr	r5, [r4, #8]
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	9b00      	ldr	r3, [sp, #0]
 800fc0c:	3b01      	subs	r3, #1
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	d504      	bpl.n	800fc1c <_fwalk_reent+0x24>
 800fc12:	6824      	ldr	r4, [r4, #0]
 800fc14:	2c00      	cmp	r4, #0
 800fc16:	d1f5      	bne.n	800fc04 <_fwalk_reent+0xc>
 800fc18:	0038      	movs	r0, r7
 800fc1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fc1c:	89ab      	ldrh	r3, [r5, #12]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d908      	bls.n	800fc34 <_fwalk_reent+0x3c>
 800fc22:	220e      	movs	r2, #14
 800fc24:	5eab      	ldrsh	r3, [r5, r2]
 800fc26:	3301      	adds	r3, #1
 800fc28:	d004      	beq.n	800fc34 <_fwalk_reent+0x3c>
 800fc2a:	0029      	movs	r1, r5
 800fc2c:	0030      	movs	r0, r6
 800fc2e:	9b01      	ldr	r3, [sp, #4]
 800fc30:	4798      	blx	r3
 800fc32:	4307      	orrs	r7, r0
 800fc34:	3568      	adds	r5, #104	; 0x68
 800fc36:	e7e8      	b.n	800fc0a <_fwalk_reent+0x12>

0800fc38 <__swhatbuf_r>:
 800fc38:	b570      	push	{r4, r5, r6, lr}
 800fc3a:	000e      	movs	r6, r1
 800fc3c:	001d      	movs	r5, r3
 800fc3e:	230e      	movs	r3, #14
 800fc40:	5ec9      	ldrsh	r1, [r1, r3]
 800fc42:	0014      	movs	r4, r2
 800fc44:	b096      	sub	sp, #88	; 0x58
 800fc46:	2900      	cmp	r1, #0
 800fc48:	da08      	bge.n	800fc5c <__swhatbuf_r+0x24>
 800fc4a:	220c      	movs	r2, #12
 800fc4c:	5eb3      	ldrsh	r3, [r6, r2]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	602a      	str	r2, [r5, #0]
 800fc52:	061b      	lsls	r3, r3, #24
 800fc54:	d411      	bmi.n	800fc7a <__swhatbuf_r+0x42>
 800fc56:	2380      	movs	r3, #128	; 0x80
 800fc58:	00db      	lsls	r3, r3, #3
 800fc5a:	e00f      	b.n	800fc7c <__swhatbuf_r+0x44>
 800fc5c:	466a      	mov	r2, sp
 800fc5e:	f000 f91b 	bl	800fe98 <_fstat_r>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	dbf1      	blt.n	800fc4a <__swhatbuf_r+0x12>
 800fc66:	23f0      	movs	r3, #240	; 0xf0
 800fc68:	9901      	ldr	r1, [sp, #4]
 800fc6a:	021b      	lsls	r3, r3, #8
 800fc6c:	4019      	ands	r1, r3
 800fc6e:	4b05      	ldr	r3, [pc, #20]	; (800fc84 <__swhatbuf_r+0x4c>)
 800fc70:	18c9      	adds	r1, r1, r3
 800fc72:	424b      	negs	r3, r1
 800fc74:	4159      	adcs	r1, r3
 800fc76:	6029      	str	r1, [r5, #0]
 800fc78:	e7ed      	b.n	800fc56 <__swhatbuf_r+0x1e>
 800fc7a:	2340      	movs	r3, #64	; 0x40
 800fc7c:	2000      	movs	r0, #0
 800fc7e:	6023      	str	r3, [r4, #0]
 800fc80:	b016      	add	sp, #88	; 0x58
 800fc82:	bd70      	pop	{r4, r5, r6, pc}
 800fc84:	ffffe000 	.word	0xffffe000

0800fc88 <__smakebuf_r>:
 800fc88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc8a:	2602      	movs	r6, #2
 800fc8c:	898b      	ldrh	r3, [r1, #12]
 800fc8e:	0005      	movs	r5, r0
 800fc90:	000c      	movs	r4, r1
 800fc92:	4233      	tst	r3, r6
 800fc94:	d006      	beq.n	800fca4 <__smakebuf_r+0x1c>
 800fc96:	0023      	movs	r3, r4
 800fc98:	3347      	adds	r3, #71	; 0x47
 800fc9a:	6023      	str	r3, [r4, #0]
 800fc9c:	6123      	str	r3, [r4, #16]
 800fc9e:	2301      	movs	r3, #1
 800fca0:	6163      	str	r3, [r4, #20]
 800fca2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800fca4:	466a      	mov	r2, sp
 800fca6:	ab01      	add	r3, sp, #4
 800fca8:	f7ff ffc6 	bl	800fc38 <__swhatbuf_r>
 800fcac:	9900      	ldr	r1, [sp, #0]
 800fcae:	0007      	movs	r7, r0
 800fcb0:	0028      	movs	r0, r5
 800fcb2:	f7fd fa21 	bl	800d0f8 <_malloc_r>
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d108      	bne.n	800fccc <__smakebuf_r+0x44>
 800fcba:	220c      	movs	r2, #12
 800fcbc:	5ea3      	ldrsh	r3, [r4, r2]
 800fcbe:	059a      	lsls	r2, r3, #22
 800fcc0:	d4ef      	bmi.n	800fca2 <__smakebuf_r+0x1a>
 800fcc2:	2203      	movs	r2, #3
 800fcc4:	4393      	bics	r3, r2
 800fcc6:	431e      	orrs	r6, r3
 800fcc8:	81a6      	strh	r6, [r4, #12]
 800fcca:	e7e4      	b.n	800fc96 <__smakebuf_r+0xe>
 800fccc:	4b0f      	ldr	r3, [pc, #60]	; (800fd0c <__smakebuf_r+0x84>)
 800fcce:	62ab      	str	r3, [r5, #40]	; 0x28
 800fcd0:	2380      	movs	r3, #128	; 0x80
 800fcd2:	89a2      	ldrh	r2, [r4, #12]
 800fcd4:	6020      	str	r0, [r4, #0]
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	81a3      	strh	r3, [r4, #12]
 800fcda:	9b00      	ldr	r3, [sp, #0]
 800fcdc:	6120      	str	r0, [r4, #16]
 800fcde:	6163      	str	r3, [r4, #20]
 800fce0:	9b01      	ldr	r3, [sp, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00d      	beq.n	800fd02 <__smakebuf_r+0x7a>
 800fce6:	0028      	movs	r0, r5
 800fce8:	230e      	movs	r3, #14
 800fcea:	5ee1      	ldrsh	r1, [r4, r3]
 800fcec:	f000 f8e6 	bl	800febc <_isatty_r>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	d006      	beq.n	800fd02 <__smakebuf_r+0x7a>
 800fcf4:	2203      	movs	r2, #3
 800fcf6:	89a3      	ldrh	r3, [r4, #12]
 800fcf8:	4393      	bics	r3, r2
 800fcfa:	001a      	movs	r2, r3
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	81a3      	strh	r3, [r4, #12]
 800fd02:	89a0      	ldrh	r0, [r4, #12]
 800fd04:	4307      	orrs	r7, r0
 800fd06:	81a7      	strh	r7, [r4, #12]
 800fd08:	e7cb      	b.n	800fca2 <__smakebuf_r+0x1a>
 800fd0a:	46c0      	nop			; (mov r8, r8)
 800fd0c:	0800fa7d 	.word	0x0800fa7d

0800fd10 <_malloc_usable_size_r>:
 800fd10:	1f0b      	subs	r3, r1, #4
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	1f18      	subs	r0, r3, #4
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	da01      	bge.n	800fd1e <_malloc_usable_size_r+0xe>
 800fd1a:	580b      	ldr	r3, [r1, r0]
 800fd1c:	18c0      	adds	r0, r0, r3
 800fd1e:	4770      	bx	lr

0800fd20 <_raise_r>:
 800fd20:	b570      	push	{r4, r5, r6, lr}
 800fd22:	0004      	movs	r4, r0
 800fd24:	000d      	movs	r5, r1
 800fd26:	291f      	cmp	r1, #31
 800fd28:	d904      	bls.n	800fd34 <_raise_r+0x14>
 800fd2a:	2316      	movs	r3, #22
 800fd2c:	6003      	str	r3, [r0, #0]
 800fd2e:	2001      	movs	r0, #1
 800fd30:	4240      	negs	r0, r0
 800fd32:	bd70      	pop	{r4, r5, r6, pc}
 800fd34:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d004      	beq.n	800fd44 <_raise_r+0x24>
 800fd3a:	008a      	lsls	r2, r1, #2
 800fd3c:	189b      	adds	r3, r3, r2
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	2a00      	cmp	r2, #0
 800fd42:	d108      	bne.n	800fd56 <_raise_r+0x36>
 800fd44:	0020      	movs	r0, r4
 800fd46:	f000 f831 	bl	800fdac <_getpid_r>
 800fd4a:	002a      	movs	r2, r5
 800fd4c:	0001      	movs	r1, r0
 800fd4e:	0020      	movs	r0, r4
 800fd50:	f000 f81a 	bl	800fd88 <_kill_r>
 800fd54:	e7ed      	b.n	800fd32 <_raise_r+0x12>
 800fd56:	2000      	movs	r0, #0
 800fd58:	2a01      	cmp	r2, #1
 800fd5a:	d0ea      	beq.n	800fd32 <_raise_r+0x12>
 800fd5c:	1c51      	adds	r1, r2, #1
 800fd5e:	d103      	bne.n	800fd68 <_raise_r+0x48>
 800fd60:	2316      	movs	r3, #22
 800fd62:	3001      	adds	r0, #1
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	e7e4      	b.n	800fd32 <_raise_r+0x12>
 800fd68:	2400      	movs	r4, #0
 800fd6a:	0028      	movs	r0, r5
 800fd6c:	601c      	str	r4, [r3, #0]
 800fd6e:	4790      	blx	r2
 800fd70:	0020      	movs	r0, r4
 800fd72:	e7de      	b.n	800fd32 <_raise_r+0x12>

0800fd74 <raise>:
 800fd74:	b510      	push	{r4, lr}
 800fd76:	4b03      	ldr	r3, [pc, #12]	; (800fd84 <raise+0x10>)
 800fd78:	0001      	movs	r1, r0
 800fd7a:	6818      	ldr	r0, [r3, #0]
 800fd7c:	f7ff ffd0 	bl	800fd20 <_raise_r>
 800fd80:	bd10      	pop	{r4, pc}
 800fd82:	46c0      	nop			; (mov r8, r8)
 800fd84:	200000ac 	.word	0x200000ac

0800fd88 <_kill_r>:
 800fd88:	2300      	movs	r3, #0
 800fd8a:	b570      	push	{r4, r5, r6, lr}
 800fd8c:	4d06      	ldr	r5, [pc, #24]	; (800fda8 <_kill_r+0x20>)
 800fd8e:	0004      	movs	r4, r0
 800fd90:	0008      	movs	r0, r1
 800fd92:	0011      	movs	r1, r2
 800fd94:	602b      	str	r3, [r5, #0]
 800fd96:	f7f3 fc39 	bl	800360c <_kill>
 800fd9a:	1c43      	adds	r3, r0, #1
 800fd9c:	d103      	bne.n	800fda6 <_kill_r+0x1e>
 800fd9e:	682b      	ldr	r3, [r5, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d000      	beq.n	800fda6 <_kill_r+0x1e>
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	bd70      	pop	{r4, r5, r6, pc}
 800fda8:	20001080 	.word	0x20001080

0800fdac <_getpid_r>:
 800fdac:	b510      	push	{r4, lr}
 800fdae:	f7f3 fc27 	bl	8003600 <_getpid>
 800fdb2:	bd10      	pop	{r4, pc}

0800fdb4 <__sread>:
 800fdb4:	b570      	push	{r4, r5, r6, lr}
 800fdb6:	000c      	movs	r4, r1
 800fdb8:	250e      	movs	r5, #14
 800fdba:	5f49      	ldrsh	r1, [r1, r5]
 800fdbc:	f000 f8a4 	bl	800ff08 <_read_r>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	db03      	blt.n	800fdcc <__sread+0x18>
 800fdc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fdc6:	181b      	adds	r3, r3, r0
 800fdc8:	6563      	str	r3, [r4, #84]	; 0x54
 800fdca:	bd70      	pop	{r4, r5, r6, pc}
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	4a02      	ldr	r2, [pc, #8]	; (800fdd8 <__sread+0x24>)
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	81a3      	strh	r3, [r4, #12]
 800fdd4:	e7f9      	b.n	800fdca <__sread+0x16>
 800fdd6:	46c0      	nop			; (mov r8, r8)
 800fdd8:	ffffefff 	.word	0xffffefff

0800fddc <__swrite>:
 800fddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdde:	001f      	movs	r7, r3
 800fde0:	898b      	ldrh	r3, [r1, #12]
 800fde2:	0005      	movs	r5, r0
 800fde4:	000c      	movs	r4, r1
 800fde6:	0016      	movs	r6, r2
 800fde8:	05db      	lsls	r3, r3, #23
 800fdea:	d505      	bpl.n	800fdf8 <__swrite+0x1c>
 800fdec:	230e      	movs	r3, #14
 800fdee:	5ec9      	ldrsh	r1, [r1, r3]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	f000 f874 	bl	800fee0 <_lseek_r>
 800fdf8:	89a3      	ldrh	r3, [r4, #12]
 800fdfa:	4a05      	ldr	r2, [pc, #20]	; (800fe10 <__swrite+0x34>)
 800fdfc:	0028      	movs	r0, r5
 800fdfe:	4013      	ands	r3, r2
 800fe00:	81a3      	strh	r3, [r4, #12]
 800fe02:	0032      	movs	r2, r6
 800fe04:	230e      	movs	r3, #14
 800fe06:	5ee1      	ldrsh	r1, [r4, r3]
 800fe08:	003b      	movs	r3, r7
 800fe0a:	f000 f81f 	bl	800fe4c <_write_r>
 800fe0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe10:	ffffefff 	.word	0xffffefff

0800fe14 <__sseek>:
 800fe14:	b570      	push	{r4, r5, r6, lr}
 800fe16:	000c      	movs	r4, r1
 800fe18:	250e      	movs	r5, #14
 800fe1a:	5f49      	ldrsh	r1, [r1, r5]
 800fe1c:	f000 f860 	bl	800fee0 <_lseek_r>
 800fe20:	89a3      	ldrh	r3, [r4, #12]
 800fe22:	1c42      	adds	r2, r0, #1
 800fe24:	d103      	bne.n	800fe2e <__sseek+0x1a>
 800fe26:	4a05      	ldr	r2, [pc, #20]	; (800fe3c <__sseek+0x28>)
 800fe28:	4013      	ands	r3, r2
 800fe2a:	81a3      	strh	r3, [r4, #12]
 800fe2c:	bd70      	pop	{r4, r5, r6, pc}
 800fe2e:	2280      	movs	r2, #128	; 0x80
 800fe30:	0152      	lsls	r2, r2, #5
 800fe32:	4313      	orrs	r3, r2
 800fe34:	81a3      	strh	r3, [r4, #12]
 800fe36:	6560      	str	r0, [r4, #84]	; 0x54
 800fe38:	e7f8      	b.n	800fe2c <__sseek+0x18>
 800fe3a:	46c0      	nop			; (mov r8, r8)
 800fe3c:	ffffefff 	.word	0xffffefff

0800fe40 <__sclose>:
 800fe40:	b510      	push	{r4, lr}
 800fe42:	230e      	movs	r3, #14
 800fe44:	5ec9      	ldrsh	r1, [r1, r3]
 800fe46:	f000 f815 	bl	800fe74 <_close_r>
 800fe4a:	bd10      	pop	{r4, pc}

0800fe4c <_write_r>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	0004      	movs	r4, r0
 800fe50:	0008      	movs	r0, r1
 800fe52:	0011      	movs	r1, r2
 800fe54:	001a      	movs	r2, r3
 800fe56:	2300      	movs	r3, #0
 800fe58:	4d05      	ldr	r5, [pc, #20]	; (800fe70 <_write_r+0x24>)
 800fe5a:	602b      	str	r3, [r5, #0]
 800fe5c:	f7f3 fc0f 	bl	800367e <_write>
 800fe60:	1c43      	adds	r3, r0, #1
 800fe62:	d103      	bne.n	800fe6c <_write_r+0x20>
 800fe64:	682b      	ldr	r3, [r5, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d000      	beq.n	800fe6c <_write_r+0x20>
 800fe6a:	6023      	str	r3, [r4, #0]
 800fe6c:	bd70      	pop	{r4, r5, r6, pc}
 800fe6e:	46c0      	nop			; (mov r8, r8)
 800fe70:	20001080 	.word	0x20001080

0800fe74 <_close_r>:
 800fe74:	2300      	movs	r3, #0
 800fe76:	b570      	push	{r4, r5, r6, lr}
 800fe78:	4d06      	ldr	r5, [pc, #24]	; (800fe94 <_close_r+0x20>)
 800fe7a:	0004      	movs	r4, r0
 800fe7c:	0008      	movs	r0, r1
 800fe7e:	602b      	str	r3, [r5, #0]
 800fe80:	f7f3 fc19 	bl	80036b6 <_close>
 800fe84:	1c43      	adds	r3, r0, #1
 800fe86:	d103      	bne.n	800fe90 <_close_r+0x1c>
 800fe88:	682b      	ldr	r3, [r5, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d000      	beq.n	800fe90 <_close_r+0x1c>
 800fe8e:	6023      	str	r3, [r4, #0]
 800fe90:	bd70      	pop	{r4, r5, r6, pc}
 800fe92:	46c0      	nop			; (mov r8, r8)
 800fe94:	20001080 	.word	0x20001080

0800fe98 <_fstat_r>:
 800fe98:	2300      	movs	r3, #0
 800fe9a:	b570      	push	{r4, r5, r6, lr}
 800fe9c:	4d06      	ldr	r5, [pc, #24]	; (800feb8 <_fstat_r+0x20>)
 800fe9e:	0004      	movs	r4, r0
 800fea0:	0008      	movs	r0, r1
 800fea2:	0011      	movs	r1, r2
 800fea4:	602b      	str	r3, [r5, #0]
 800fea6:	f7f3 fc10 	bl	80036ca <_fstat>
 800feaa:	1c43      	adds	r3, r0, #1
 800feac:	d103      	bne.n	800feb6 <_fstat_r+0x1e>
 800feae:	682b      	ldr	r3, [r5, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d000      	beq.n	800feb6 <_fstat_r+0x1e>
 800feb4:	6023      	str	r3, [r4, #0]
 800feb6:	bd70      	pop	{r4, r5, r6, pc}
 800feb8:	20001080 	.word	0x20001080

0800febc <_isatty_r>:
 800febc:	2300      	movs	r3, #0
 800febe:	b570      	push	{r4, r5, r6, lr}
 800fec0:	4d06      	ldr	r5, [pc, #24]	; (800fedc <_isatty_r+0x20>)
 800fec2:	0004      	movs	r4, r0
 800fec4:	0008      	movs	r0, r1
 800fec6:	602b      	str	r3, [r5, #0]
 800fec8:	f7f3 fc0d 	bl	80036e6 <_isatty>
 800fecc:	1c43      	adds	r3, r0, #1
 800fece:	d103      	bne.n	800fed8 <_isatty_r+0x1c>
 800fed0:	682b      	ldr	r3, [r5, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d000      	beq.n	800fed8 <_isatty_r+0x1c>
 800fed6:	6023      	str	r3, [r4, #0]
 800fed8:	bd70      	pop	{r4, r5, r6, pc}
 800feda:	46c0      	nop			; (mov r8, r8)
 800fedc:	20001080 	.word	0x20001080

0800fee0 <_lseek_r>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	0004      	movs	r4, r0
 800fee4:	0008      	movs	r0, r1
 800fee6:	0011      	movs	r1, r2
 800fee8:	001a      	movs	r2, r3
 800feea:	2300      	movs	r3, #0
 800feec:	4d05      	ldr	r5, [pc, #20]	; (800ff04 <_lseek_r+0x24>)
 800feee:	602b      	str	r3, [r5, #0]
 800fef0:	f7f3 fc02 	bl	80036f8 <_lseek>
 800fef4:	1c43      	adds	r3, r0, #1
 800fef6:	d103      	bne.n	800ff00 <_lseek_r+0x20>
 800fef8:	682b      	ldr	r3, [r5, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d000      	beq.n	800ff00 <_lseek_r+0x20>
 800fefe:	6023      	str	r3, [r4, #0]
 800ff00:	bd70      	pop	{r4, r5, r6, pc}
 800ff02:	46c0      	nop			; (mov r8, r8)
 800ff04:	20001080 	.word	0x20001080

0800ff08 <_read_r>:
 800ff08:	b570      	push	{r4, r5, r6, lr}
 800ff0a:	0004      	movs	r4, r0
 800ff0c:	0008      	movs	r0, r1
 800ff0e:	0011      	movs	r1, r2
 800ff10:	001a      	movs	r2, r3
 800ff12:	2300      	movs	r3, #0
 800ff14:	4d05      	ldr	r5, [pc, #20]	; (800ff2c <_read_r+0x24>)
 800ff16:	602b      	str	r3, [r5, #0]
 800ff18:	f7f3 fb94 	bl	8003644 <_read>
 800ff1c:	1c43      	adds	r3, r0, #1
 800ff1e:	d103      	bne.n	800ff28 <_read_r+0x20>
 800ff20:	682b      	ldr	r3, [r5, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d000      	beq.n	800ff28 <_read_r+0x20>
 800ff26:	6023      	str	r3, [r4, #0]
 800ff28:	bd70      	pop	{r4, r5, r6, pc}
 800ff2a:	46c0      	nop			; (mov r8, r8)
 800ff2c:	20001080 	.word	0x20001080

0800ff30 <_init>:
 800ff30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff32:	46c0      	nop			; (mov r8, r8)
 800ff34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff36:	bc08      	pop	{r3}
 800ff38:	469e      	mov	lr, r3
 800ff3a:	4770      	bx	lr

0800ff3c <_fini>:
 800ff3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3e:	46c0      	nop			; (mov r8, r8)
 800ff40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff42:	bc08      	pop	{r3}
 800ff44:	469e      	mov	lr, r3
 800ff46:	4770      	bx	lr
